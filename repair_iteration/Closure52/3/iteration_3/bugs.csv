bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Character.isWhitespace(d))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Character.isWhitespace(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Character.isWhitespace(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Character.isDigit(d))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
2	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Character.isJavaIdentifierPart(d))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Character.isJavaIdentifierPart(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Character.isJavaIdentifierPart(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Character.isDigit(d))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
3	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Character.isDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Character.isDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Character.isDigit(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Character.isDigit(d))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
4	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Character.isISOControl(d))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Character.isISOControl(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Character.isISOControl(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Character.isDigit(d))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
5	[BUG]  [BUGGY]  if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isNaN(d))  {	  if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
6	[BUG]  [BUGGY]  if(!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {	  if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
7	[BUG]  [BUGGY]  if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isLong(d)||!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isLong(d)||!Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isLong(d)||!Double.isInfinite(d))  {	  if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
8	[BUG]  [BUGGY]  if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isLong(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isLong(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isLong(d))  {	  if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
9	[BUG]  [BUGGY]  if(Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {	  if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
10	[BUG]  [BUGGY]  if(Double.isInfinite(d)||  Double.isNaN(d)||!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isInfinite(d)||  Double.isNaN(d)||!Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isInfinite(d)||  Double.isNaN(d)||!Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
11	[BUG]  [BUGGY]  if(Double.isNaN(d)&&  Double.isInfinite(d)||  Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)&&  Double.isInfinite(d)||  Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&  Double.isInfinite(d)||  Double.isNaN(d))  {	  if(Double.isNaN(d)&&    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
12	[BUG]  [BUGGY]  if(Double.isInfinite(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isInfinite(d)||  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isInfinite(d)||  Double.isInfinite(d))  {	  if(Double.isNaN(d)&&    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
13	[BUG]  [BUGGY]  if(Double.isNaN(d)&&  Double.isNaN(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)&&  Double.isNaN(d)||  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&  Double.isNaN(d)||  Double.isInfinite(d))  {	  if(Double.isNaN(d)&&    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
14	[BUG]  [BUGGY]  if(Double.isNaN(d)&&  Double.isInfinite(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)&&  Double.isInfinite(d)||  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&  Double.isInfinite(d)||  Double.isInfinite(d))  {	  if(Double.isNaN(d)&&    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
15	[BUG]  [BUGGY]  if(Double.isNaN(d)&&  Double.isInfinite(d)||  Double.isLongBits(d))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)&&  Double.isInfinite(d)||  Double.isLongBits(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&  Double.isInfinite(d)||  Double.isLongBits(d))  {	  if(Double.isNaN(d)&&    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
16	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d)||  Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d)||  Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d)||  Double.isNaN(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isInfinite(d)||    Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
17	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d)||  Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d)||  Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d)||  Double.isNaN(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isInfinite(d)||    Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
18	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(d)||  Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(d)||  Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(d)||  Double.isNaN(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isInfinite(d)||    Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
19	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(key)||  Double.isInfinite(d)||  Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(key)||  Double.isInfinite(d)||  Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(key)||  Double.isInfinite(d)||  Double.isNaN(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isInfinite(d)||    Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
20	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d)||  Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d)||  Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d)||  Double.isNaN(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isInfinite(d)||    Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
21	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(d)||  Character.isLetterOrDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(d)||  Character.isLetterOrDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isInfinite(d)||  Character.isLetterOrDigit(d))  {	  if(!Double.isNaN(d)||    Double.isInfinite(d)||    Character.isLetter(d))    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
22	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Character.isLetterOrDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Character.isLetterOrDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Character.isLetterOrDigit(d))  {	  if(!Double.isNaN(d)||    Double.isInfinite(d)||    Character.isLetter(d))    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
23	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&  Double.isInfinite(d)&&  Character.isLetter(d))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)&&  Double.isInfinite(d)&&  Character.isLetter(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&  Double.isInfinite(d)&&  Character.isLetter(d))  {	  if(!Double.isNaN(d)||    Double.isInfinite(d)||    Character.isLetter(d))    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
24	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Character.isLetterOrDigit(d)||  Character.isLetterOrDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Character.isLetterOrDigit(d)||  Character.isLetterOrDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Character.isLetterOrDigit(d)||  Character.isLetterOrDigit(d))  {	  if(!Double.isNaN(d)||    Double.isInfinite(d)||    Character.isLetter(d))    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
25	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)||  Character.isLetterOrDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)||  Character.isLetterOrDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isNaN(d)||  Character.isLetterOrDigit(d))  {	  if(!Double.isNaN(d)||    Double.isInfinite(d)||    Character.isLetter(d))    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
26	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Character.isDigit(d)||  Character.isLetter(d))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Character.isDigit(d)||  Character.isLetter(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Character.isDigit(d)||  Character.isLetter(d))  {	  if(!Double.isNaN(d)||    Double.isInfinite(d)||    Character.isLetter(d))    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
27	[BUG]  [BUGGY]  if(Double.isInfinite(d)&&  Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isInfinite(d)&&  Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isInfinite(d)&&  Double.isNaN(d))  {	  if(Double.isNaN(d)&&    Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
28	[BUG]  [BUGGY]  if(Double.isInfinite(d)||  Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isInfinite(d)||  Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isInfinite(d)||  Double.isNaN(d))  {	  if(Double.isNaN(d)&&    Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
29	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  isSimpleNumber(d))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  isSimpleNumber(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  isSimpleNumber(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    isSimpleNumber(d))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
30	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isLowerCase(d)||  isSimpleNumber(d))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isLowerCase(d)||  isSimpleNumber(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isLowerCase(d)||  isSimpleNumber(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    isSimpleNumber(d))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
31	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  isSimpleNumber(c))  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  isSimpleNumber(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  isSimpleNumber(c))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    isSimpleNumber(d))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
32	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  isLocalToken(d))  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  isLocalToken(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  isLocalToken(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    isSimpleNumber(d))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
33	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  isVowel(d))  {  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  isVowel(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  isVowel(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    isSimpleNumber(d))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
34	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  isFunctionDeclaration(d))  {  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  isFunctionDeclaration(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  isFunctionDeclaration(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    isSimpleNumber(d))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
35	[BUG]  [BUGGY]  double  d  =  getSimpleNode(n);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  double  d  =  getSimpleNode(n);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	double  d  =  getSimpleNode(n);	  double    d    =    getSimpleNumber(key);    	non-compiled	[CE]  	19	None	replace
36	[BUG]  [BUGGY]  double  d  =  getSimpleDecimal(key);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  double  d  =  getSimpleDecimal(key);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	double  d  =  getSimpleDecimal(key);	  double    d    =    getSimpleNumber(key);    	non-compiled	[CE]  	19	None	replace
37	[BUG]  [BUGGY]  double  d  =  getSimpleDouble(c);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  double  d  =  getSimpleDouble(c);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	double  d  =  getSimpleDouble(c);	  double    d    =    getSimpleNumber(key);    	non-compiled	[CE]  	19	None	replace
38	[BUG]  [BUGGY]  double  d  =  getSimpleNumber(context);  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  double  d  =  getSimpleNumber(context);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	double  d  =  getSimpleNumber(context);	  double    d    =    getSimpleNumber(key);    	non-compiled	[CE]  	19	None	replace
39	[BUG]  [BUGGY]  double  d  =  getSimpleDouble(n);  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  double  d  =  getSimpleDouble(n);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	double  d  =  getSimpleDouble(n);	  double    d    =    getSimpleNumber(key);    	non-compiled	[CE]  	19	None	replace
40	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d)||  Character.isDigit(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d)||  Character.isDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d)||  Character.isDigit(d))  {	  if(Double.isNaN(d)||    Double.isLetterOrDigit(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
41	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d)||  getSimpleNumber(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d)||  getSimpleNumber(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d)||  getSimpleNumber(d))  {	  if(Double.isNaN(d)||    Double.isLetterOrDigit(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
42	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d)||  isSimpleNumber(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d)||  isSimpleNumber(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d)||  isSimpleNumber(d))  {	  if(Double.isNaN(d)||    Double.isLetterOrDigit(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
43	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d)||  Context.isFunctionDeclaration(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d)||  Context.isFunctionDeclaration(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d)||  Context.isFunctionDeclaration(d))  {	  if(Double.isNaN(d)||    Double.isLetterOrDigit(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
44	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isDigit(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isDigit(d)||  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isDigit(d)||  Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isLetterOrDigit(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
45	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isLetterOrDigit(c)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isLetterOrDigit(c)||!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isLetterOrDigit(c)||!Double.isNaN(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(c)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
46	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(c)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(c)||!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(c)||!Double.isNaN(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(c)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
47	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isLowerCase(c)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isLowerCase(c)||!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isLowerCase(c)||!Double.isNaN(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(c)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
48	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext(context);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  cc  =  getCurrentContext(context);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  cc  =  getCurrentContext(context);	  Context    cc    =    getCurrentContext();    	non-compiled	[CE]  	98	None	replace
49	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().getCurrentContext();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  cc  =  getCurrentContext().getCurrentContext();  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  cc  =  getCurrentContext().getCurrentContext();	  Context    cc    =    getCurrentContext();    	non-compiled	[CE]  	98	None	replace
50	[BUG]  [BUGGY]  Context  cc  =  createCurrentContext();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  cc  =  createCurrentContext();  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  cc  =  createCurrentContext();	  Context    cc    =    getCurrentContext();    	non-compiled	[CE]  	98	None	replace
51	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextInNode();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  cc  =  getCurrentContextInNode();  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  cc  =  getCurrentContextInNode();	  Context    cc    =    getCurrentContext();    	non-compiled	[CE]  	98	None	replace
52	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().getCurrentStructure();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  cc  =  getCurrentContext().getCurrentStructure();  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  cc  =  getCurrentContext().getCurrentStructure();	  Context    cc    =    getCurrentContext();    	non-compiled	[CE]  	98	None	replace
53	[BUG]  [BUGGY]  Context  cc  =  context.getContext();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  cc  =  context.getContext();  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  cc  =  context.getContext();	  Context    cc    =    getContext();    	non-compiled	[CE]  	101	None	replace
54	[BUG]  [BUGGY]  Context  cc  =  getContext(context);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  cc  =  getContext(context);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  cc  =  getContext(context);	  Context    cc    =    getContext();    	non-compiled	[CE]  	101	None	replace
55	[BUG]  [BUGGY]  Context  cc  =  createContext();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  cc  =  createContext();  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  cc  =  createContext();	  Context    cc    =    getContext();    	non-compiled	[CE]  	101	None	replace
56	[BUG]  [BUGGY]  Context  cc  =  getCallbackContext();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  cc  =  getCallbackContext();  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  cc  =  getCallbackContext();	  Context    cc    =    getContext();    	non-compiled	[CE]  	101	None	replace
57	[BUG]  [BUGGY]  Context  cc  =  getContextForNode(n);  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  cc  =  getContextForNode(n);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  cc  =  getContextForNode(n);	  Context    cc    =    getContext();    	non-compiled	[CE]  	101	None	replace
58	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    Double.isLetter(d))    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
59	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    Double.isLetter(d))    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
60	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(d)||  Double.isLetterOrDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(d)||  Double.isLetterOrDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(d)||  Double.isLetterOrDigit(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    Double.isLetter(d))    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
61	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(d)  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(d)  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(d)	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    Double.isLetter(d))    {    	non-compiled	[CE]  	97	None	replace
62	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    Double.isLetter(d))    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
63	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isLetterOrDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isLetterOrDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isLetterOrDigit(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    Double.isLetter(d))    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
64	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    Double.isLetter(d))    {    	non-compiled	[CE]  	97	None	replace
65	[BUG]  [BUGGY]  Context  c  =  context.getCurrentContext(n);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  c  =  context.getCurrentContext(n);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  c  =  context.getCurrentContext(n);	  Context    c    =    context.getCurrentContext();    	non-compiled	[CE]  	15	None	replace
66	[BUG]  [BUGGY]  Context  c  =  this.context.getCurrentContext();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  c  =  this.context.getCurrentContext();  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  c  =  this.context.getCurrentContext();	  Context    c    =    context.getCurrentContext();    	non-compiled	[CE]  	15	None	replace
67	[BUG]  [BUGGY]  Context  c  =  context.createContext(n);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  c  =  context.createContext(n);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  c  =  context.createContext(n);	  Context    c    =    context.getCurrentContext();    	non-compiled	[CE]  	15	None	replace
68	[BUG]  [BUGGY]  Context  c  =  context.getCurrentContextForNode(n);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  c  =  context.getCurrentContextForNode(n);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  c  =  context.getCurrentContextForNode(n);	  Context    c    =    context.getCurrentContext();    	non-compiled	[CE]  	15	None	replace
69	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&!Double.isInfinite(d)&&!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)&&!Double.isInfinite(d)&&!Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&!Double.isInfinite(d)&&!Double.isInfinite(d))  {	  if(!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
70	[BUG]  [BUGGY]  if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isInfinite(d))  {	  if(!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
71	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&  Double.isInfinite(d)&&  Character.isDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)&&  Double.isInfinite(d)&&  Character.isDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&  Double.isInfinite(d)&&  Character.isDigit(d))  {	  if(!Double.isNaN(d)||    Double.isInfinite(d)||    Character.isDigit(d))    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
72	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&  Double.isInfinite(d)||  Character.isDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)&&  Double.isInfinite(d)||  Character.isDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&  Double.isInfinite(d)||  Character.isDigit(d))  {	  if(!Double.isNaN(d)||    Double.isInfinite(d)||    Character.isDigit(d))    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
73	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(d)||  Character.isWhitespace(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(d)||  Character.isWhitespace(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isInfinite(d)||  Character.isWhitespace(d))  {	  if(!Double.isNaN(d)||    Double.isInfinite(d)||    Character.isDigit(d))    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
74	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d))  {	  if(!Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
75	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&  Double.isNaN(d)&&  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)&&  Double.isNaN(d)&&  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&  Double.isNaN(d)&&  Double.isInfinite(d))  {	  if(!Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
76	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)||  Double.isLongBoolean(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)||  Double.isLongBoolean(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isNaN(d)||  Double.isLongBoolean(d))  {	  if(!Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
77	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(d))  {	  if(!Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
78	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||!Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||!Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
79	[BUG]  [BUGGY]  if(!c.isQuotedString()  ||!Double.isNaN(d)&&  NodeUtil.isLatin(n))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!c.isQuotedString()  ||!Double.isNaN(d)&&  NodeUtil.isLatin(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!c.isQuotedString()  ||!Double.isNaN(d)&&  NodeUtil.isLatin(n))  {	  if(!c.isQuotedString()    &&!Double.isNaN(d)&&    NodeUtil.isLatin(n))    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
80	[BUG]  [BUGGY]  if(!c.isQuotedString()  &&!Double.isNaN(d)||  NodeUtil.isLatin(n))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!c.isQuotedString()  &&!Double.isNaN(d)||  NodeUtil.isLatin(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!c.isQuotedString()  &&!Double.isNaN(d)||  NodeUtil.isLatin(n))  {	  if(!c.isQuotedString()    &&!Double.isNaN(d)&&    NodeUtil.isLatin(n))    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
81	[BUG]  [BUGGY]  if(!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLong(n))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLong(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLong(n))  {	  if(!c.isQuotedString()    &&!Double.isNaN(d)&&    NodeUtil.isLatin(n))    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
82	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(key)||  Double.isLongBoolean(d))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(key)||  Double.isLongBoolean(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(key)||  Double.isLongBoolean(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isLongBoolean(d))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
83	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isLongBoolean(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isLongBoolean(d)||  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isLongBoolean(d)||  Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isLongBoolean(d))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
84	[BUG]  [BUGGY]  if(Double.isNaN(d)&&  Double.isInfinite(d)&&  Double.isLongBoolean(d))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)&&  Double.isInfinite(d)&&  Double.isLongBoolean(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&  Double.isInfinite(d)&&  Double.isLongBoolean(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isLongBoolean(d))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
85	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Long.isLongBoolean(d))  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Long.isLongBoolean(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Long.isLongBoolean(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isLongBoolean(d))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
86	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isDecimal(d)||  Double.isLongBoolean(d))  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isDecimal(d)||  Double.isLongBoolean(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isDecimal(d)||  Double.isLongBoolean(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isLongBoolean(d))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
87	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Character.isLetterOrDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Character.isLetterOrDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Character.isLetterOrDigit(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Character.isLetterOrDigit(d))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
88	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Character.isUpperCase(d))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Character.isUpperCase(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Character.isUpperCase(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Character.isLetterOrDigit(d))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
89	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Character.isLetterOrDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Character.isLetterOrDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Character.isLetterOrDigit(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Character.isLetterOrDigit(d))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
90	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Character.isLetterOrDigit(d)||  Character.isLetterOrDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Character.isLetterOrDigit(d)||  Character.isLetterOrDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Character.isLetterOrDigit(d)||  Character.isLetterOrDigit(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Character.isLetterOrDigit(d))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
91	[BUG]  [BUGGY]  if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isLong(d))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isLong(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isLong(d))  {	  if(!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isLong(d))    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
92	[BUG]  [BUGGY]  if(!Double.isNaN(d)||!Double.isNaN(d)&&!Double.isLong(d))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||!Double.isNaN(d)&&!Double.isLong(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||!Double.isNaN(d)&&!Double.isLong(d))  {	  if(!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isLong(d))    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
93	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&!Double.isInfinite(d)&&!Double.isLong(d))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)&&!Double.isInfinite(d)&&!Double.isLong(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&!Double.isInfinite(d)&&!Double.isLong(d))  {	  if(!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isLong(d))    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
94	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&!Double.isNaN(d)||!Double.isLong(d))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)&&!Double.isNaN(d)||!Double.isLong(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&!Double.isNaN(d)||!Double.isLong(d))  {	  if(!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isLong(d))    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
95	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||!Double.isNaN(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
96	[BUG]  [BUGGY]  Context  c  =  getCurrentContext(context);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  c  =  getCurrentContext(context);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  c  =  getCurrentContext(context);	  Context    c    =    getCurrentContext();    	non-compiled	[CE]  	21	None	replace
97	[BUG]  [BUGGY]  Context  c  =  getCurrentContext().getCurrentContext();  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  c  =  getCurrentContext().getCurrentContext();  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  c  =  getCurrentContext().getCurrentContext();	  Context    c    =    getCurrentContext();    	non-compiled	[CE]  	21	None	replace
98	[BUG]  [BUGGY]  Context  c  =  getCurrentContextInNode();  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  c  =  getCurrentContextInNode();  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  c  =  getCurrentContextInNode();	  Context    c    =    getCurrentContext();    	non-compiled	[CE]  	21	None	replace
99	[BUG]  [BUGGY]  Context  c  =  getCurrentContext().getCurrentStructure();  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  c  =  getCurrentContext().getCurrentStructure();  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  c  =  getCurrentContext().getCurrentStructure();	  Context    c    =    getCurrentContext();    	non-compiled	[CE]  	21	None	replace
100	[BUG]  [BUGGY]  Context  c  =  createCurrentContext();  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  c  =  createCurrentContext();  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  c  =  createCurrentContext();	  Context    c    =    getCurrentContext();    	non-compiled	[CE]  	21	None	replace
101	[BUG]  [BUGGY]  if(Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {	  if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
102	[BUG]  [BUGGY]  if(!Double.isNaN(d)||!Double.isNaN(d)&&!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||!Double.isNaN(d)&&!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||!Double.isNaN(d)&&!Double.isNaN(d))  {	  if(!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
103	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&!Double.isNaN(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)&&!Double.isNaN(d)||!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&!Double.isNaN(d)||!Double.isNaN(d))  {	  if(!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
104	[BUG]  [BUGGY]  Context  c  =  getContext(context);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  c  =  getContext(context);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  c  =  getContext(context);	  Context    c    =    getContext();    	non-compiled	[CE]  	20	None	replace
105	[BUG]  [BUGGY]  Context  c  =  getCallbackContext();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  c  =  getCallbackContext();  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  c  =  getCallbackContext();	  Context    c    =    getContext();    	non-compiled	[CE]  	20	None	replace
106	[BUG]  [BUGGY]  Context  c  =  createContext();  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  c  =  createContext();  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  c  =  createContext();	  Context    c    =    getContext();    	non-compiled	[CE]  	20	None	replace
107	[BUG]  [BUGGY]  Context  c  =  getContextIn();  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  c  =  getContextIn();  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  c  =  getContextIn();	  Context    c    =    getContext();    	non-compiled	[CE]  	20	None	replace
108	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d)||  Character.isLetterOrDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d)||  Character.isLetterOrDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d)||  Character.isLetterOrDigit(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
109	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isNaN(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
110	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d)||  Character.isDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d)||  Character.isDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d)||  Character.isDigit(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
111	[BUG]  [BUGGY]  if(Double.isNaN(d)&&  Double.isInfinite(d)&&  Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)&&  Double.isInfinite(d)&&  Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&  Double.isInfinite(d)&&  Double.isNaN(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
112	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)&&!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isNaN(d))  {	  if(!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isInfinite(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
113	[BUG]  [BUGGY]  if(!Double.isNaN(d)||!Double.isNaN(d)&&!Double.isInfinite(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||!Double.isNaN(d)&&!Double.isInfinite(d)||!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||!Double.isNaN(d)&&!Double.isInfinite(d)||!Double.isNaN(d))  {	  if(!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isInfinite(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
114	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isNaN(d)||!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isNaN(d)||!Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isNaN(d)||!Double.isInfinite(d))  {	  if(!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isInfinite(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
115	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&!Double.isInfinite(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)&&!Double.isInfinite(d)||!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&!Double.isInfinite(d)||!Double.isNaN(d))  {	  if(!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isInfinite(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
116	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  Double.isNaN(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isInfinite(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
117	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isInfinite(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
118	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isInfinite(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
119	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isInfinite(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
120	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isInfinite(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
121	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d)||  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d)||  Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isInfinite(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
122	[BUG]  [BUGGY]  if(Double.isInfinite(d)||  Double.isInfinite(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isInfinite(d)||  Double.isInfinite(d)||  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isInfinite(d)||  Double.isInfinite(d)||  Double.isInfinite(d))  {	  if(Double.isNaN(d)&&    Double.isInfinite(d)&&    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
123	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)&&  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)&&  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)&&  Double.isInfinite(d))  {	  if(Double.isNaN(d)&&    Double.isInfinite(d)&&    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
124	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&  Double.isInfinite(d)&&  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)&&  Double.isInfinite(d)&&  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&  Double.isInfinite(d)&&  Double.isInfinite(d))  {	  if(Double.isNaN(d)&&    Double.isInfinite(d)&&    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
125	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)&&  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)&&  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)&&  Double.isInfinite(d))  {	  if(Double.isNaN(d)&&    Double.isNaN(d)&&    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
126	[BUG]  [BUGGY]  if(Double.isInfinite(d)&&  Double.isNaN(d)&&  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isInfinite(d)&&  Double.isNaN(d)&&  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isInfinite(d)&&  Double.isNaN(d)&&  Double.isInfinite(d))  {	  if(Double.isNaN(d)&&    Double.isNaN(d)&&    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
127	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isNaN(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isNaN(d)||  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isNaN(d)||  Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
128	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
129	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d)||  Double.isLong(d))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d)||  Double.isLong(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d)||  Double.isLong(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
130	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d)||  Double.isLetterOrDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d)||  Double.isLetterOrDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d)||  Double.isLetterOrDigit(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
131	[BUG]  [BUGGY]  cc.addChildToFront(d);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  cc.addChildToFront(d);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	cc.addChildToFront(d);	  cc.addNumber(d);    	non-compiled	[CE]  	17	None	replace
132	[BUG]  [BUGGY]  cc.addExpr(d);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  cc.addExpr(d);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	cc.addExpr(d);	  cc.addNumber(d);    	non-compiled	[CE]  	17	None	replace
133	[BUG]  [BUGGY]  cc.addDecimal(d);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  cc.addDecimal(d);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	cc.addDecimal(d);	  cc.addNumber(d);    	non-compiled	[CE]  	17	None	replace
134	[BUG]  [BUGGY]  cc.addDecimal(d,  Double.POSITIVE_INFINITY);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  cc.addDecimal(d,  Double.POSITIVE_INFINITY);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	cc.addDecimal(d,  Double.POSITIVE_INFINITY);	  cc.addNumber(d);    	non-compiled	[CE]  	17	None	replace
135	[BUG]  [BUGGY]  cc.addValue(d);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  cc.addValue(d);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	cc.addValue(d);	  cc.addNumber(d);    	non-compiled	[CE]  	17	None	replace
136	[BUG]  [BUGGY]  cc.add(d);  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  cc.add(d);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	cc.add(d);	  cc.addNumber(d);    	non-compiled	[CE]  	17	None	replace
137	[BUG]  [BUGGY]  cc.addChildToFront(Double.toString(d));  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  cc.addChildToFront(Double.toString(d));  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	cc.addChildToFront(Double.toString(d));	  cc.addNumber(d);    	non-compiled	[CE]  	17	None	replace
138	[BUG]  [BUGGY]  if(c.isQuotedString()  ||!Double.isNaN(d)&&  NodeUtil.isLetterOrDigit(n))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(c.isQuotedString()  ||!Double.isNaN(d)&&  NodeUtil.isLetterOrDigit(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c.isQuotedString()  ||!Double.isNaN(d)&&  NodeUtil.isLetterOrDigit(n))  {	  if(c.isQuotedString()    &&!Double.isNaN(d)&&    NodeUtil.isLetterOrDigit(n))    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
139	[BUG]  [BUGGY]  if(d!=  null  ||!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetterOrDigit(n))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d!=  null  ||!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetterOrDigit(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d!=  null  ||!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetterOrDigit(n))  {	  if(c.isQuotedString()    &&!Double.isNaN(d)&&    NodeUtil.isLetterOrDigit(n))    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
140	[BUG]  [BUGGY]  if(c.isQuotedString()  &&!Double.isNaN(d)||  NodeUtil.isLetterOrDigit(n))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(c.isQuotedString()  &&!Double.isNaN(d)||  NodeUtil.isLetterOrDigit(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c.isQuotedString()  &&!Double.isNaN(d)||  NodeUtil.isLetterOrDigit(n))  {	  if(c.isQuotedString()    &&!Double.isNaN(d)&&    NodeUtil.isLetterOrDigit(n))    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
141	[BUG]  [BUGGY]  if(n.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetterOrDigit(c))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(n.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetterOrDigit(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(n.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetterOrDigit(c))  {	  if(c.isQuotedString()    &&!Double.isNaN(d)&&    NodeUtil.isLetterOrDigit(n))    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
142	[BUG]  [BUGGY]  if(Double.isNaN(d)&&  NodeUtil.isLetterOrDigit(n))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)&&  NodeUtil.isLetterOrDigit(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&  NodeUtil.isLetterOrDigit(n))  {	  if(c.isQuotedString()    &&!Double.isNaN(d)&&    NodeUtil.isLetterOrDigit(n))    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
143	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Long.isLongBoolean(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Long.isLongBoolean(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Long.isLongBoolean(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isLongBoolean(d))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
144	[BUG]  [BUGGY]  if(Double.isInfinite(d)||  Double.isNaN(d)||  Double.isLongBoolean(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isInfinite(d)||  Double.isNaN(d)||  Double.isLongBoolean(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isInfinite(d)||  Double.isNaN(d)||  Double.isLongBoolean(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isLongBoolean(d))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
145	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isLongBoolean(d)||  Double.isLongBoolean(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isLongBoolean(d)||  Double.isLongBoolean(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isLongBoolean(d)||  Double.isLongBoolean(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isLongBoolean(d))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
146	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isBoolean(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isBoolean(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isBoolean(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isLongBoolean(d))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
147	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&  Double.isInfinite(d)&&  isSimpleNumber(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)&&  Double.isInfinite(d)&&  isSimpleNumber(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&  Double.isInfinite(d)&&  isSimpleNumber(d))  {	  if(!Double.isNaN(d)||    Double.isInfinite(d)&&    isSimpleNumber(d))    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
148	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)&&  isSimpleNumber(d))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)&&  isSimpleNumber(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isNaN(d)&&  isSimpleNumber(d))  {	  if(!Double.isNaN(d)||    Double.isInfinite(d)&&    isSimpleNumber(d))    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
149	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)&&  isSimpleNumber(d))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)&&  isSimpleNumber(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)&&  isSimpleNumber(d))  {	  if(!Double.isNaN(d)||    Double.isInfinite(d)&&    isSimpleNumber(d))    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
150	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isLetterOrDigit(d)&&  isSimpleNumber(d))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isLetterOrDigit(d)&&  isSimpleNumber(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isLetterOrDigit(d)&&  isSimpleNumber(d))  {	  if(!Double.isNaN(d)||    Double.isInfinite(d)&&    isSimpleNumber(d))    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
151	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isLowerCase(d)&&  isSimpleNumber(d))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isLowerCase(d)&&  isSimpleNumber(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isLowerCase(d)&&  isSimpleNumber(d))  {	  if(!Double.isNaN(d)||    Double.isInfinite(d)&&    isSimpleNumber(d))    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
152	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(d)&&  isSimpleNumber(c))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(d)&&  isSimpleNumber(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isInfinite(d)&&  isSimpleNumber(c))  {	  if(!Double.isNaN(d)||    Double.isInfinite(d)&&    isSimpleNumber(d))    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
153	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isLetterOrDigit(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isLetterOrDigit(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isLetterOrDigit(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isLetterOrDigit(d)||!Double.isNaN(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
154	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||!Double.isInfinite(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||!Double.isInfinite(d)||!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||!Double.isInfinite(d)||!Double.isNaN(d))  {	  if(Double.isNaN(d)||    Double.isLetterOrDigit(d)||!Double.isNaN(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
155	[BUG]  [BUGGY]  if(Double.isInfinite(d)||  Double.isLetterOrDigit(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isInfinite(d)||  Double.isLetterOrDigit(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isInfinite(d)||  Double.isLetterOrDigit(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isLetterOrDigit(d)||!Double.isNaN(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
156	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||!Double.isInfinite(d)||!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||!Double.isInfinite(d)||!Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||!Double.isInfinite(d)||!Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isLetterOrDigit(d)||!Double.isNaN(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
157	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d)  [CE]  [FE]            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d)  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d)	  if(Double.isNaN(d)||    Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  	59	None	replace
158	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isLong(d)||!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isLong(d)||!Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isLong(d)||!Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
159	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isLong(d)||!Double.isInfinite(d)  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isLong(d)||!Double.isInfinite(d)  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isLong(d)||!Double.isInfinite(d)	  if(Double.isNaN(d)||    Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  	59	None	replace
160	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isInfinite(d)||!Double.isNaN(d)||!Double.isInfinite  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isInfinite(d)||!Double.isNaN(d)||!Double.isInfinite  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isInfinite(d)||!Double.isNaN(d)||!Double.isInfinite	  if(Double.isNaN(d)||    Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  	59	None	replace
161	[BUG]  [BUGGY]  if(Double.isNaN(d)||!Double.isInfinite(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||!Double.isInfinite(d)||!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||!Double.isInfinite(d)||!Double.isNaN(d))  {	  if(Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
162	[BUG]  [BUGGY]  if(Double.isNaN(d)||  NodeUtil.isLetterOrDigit(n))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  NodeUtil.isLetterOrDigit(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  NodeUtil.isLetterOrDigit(n))  {	  if(Double.isNaN(d)||    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
163	[BUG]  [BUGGY]  if(Double.isNaN(d)||  NodeUtil.isLetterOp(n))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  NodeUtil.isLetterOp(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  NodeUtil.isLetterOp(n))  {	  if(Double.isNaN(d)||    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
164	[BUG]  [BUGGY]  if(Double.isNaN(d)||  NodeUtil.isAssignmentOp(n))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  NodeUtil.isAssignmentOp(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  NodeUtil.isAssignmentOp(n))  {	  if(Double.isNaN(d)||    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
165	[BUG]  [BUGGY]  if(NodeUtil.isNaN(d)||  NodeUtil.isLetter(n))  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(NodeUtil.isNaN(d)||  NodeUtil.isLetter(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(NodeUtil.isNaN(d)||  NodeUtil.isLetter(n))  {	  if(Double.isNaN(d)||    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
166	[BUG]  [BUGGY]  if(Double.isNaN(d)||  NodeUtil.isLetter(n)||  Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  NodeUtil.isLetter(n)||  Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  NodeUtil.isLetter(n)||  Double.isNaN(d))  {	  if(Double.isNaN(d)||    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
167	[BUG]  [BUGGY]  if(Double.isNaN(d)||  NodeUtil.isFunction(n))  {  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  NodeUtil.isFunction(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  NodeUtil.isFunction(n))  {	  if(Double.isNaN(d)||    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
168	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Float.isNaN(d)||  Float.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Float.isNaN(d)||  Float.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Float.isNaN(d)||  Float.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Float.isNaN(d)||    Float.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
169	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Float.isInfinite(d)||  Float.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Float.isInfinite(d)||  Float.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Float.isInfinite(d)||  Float.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Float.isNaN(d)||    Float.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
170	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Float.isNaN(d)||  Float.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Float.isNaN(d)||  Float.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Float.isNaN(d)||  Float.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Float.isNaN(d)||    Float.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
171	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Float.isNaN(d)||  Float.isLong(d))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Float.isNaN(d)||  Float.isLong(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Float.isNaN(d)||  Float.isLong(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Float.isNaN(d)||    Float.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
172	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Float.isInfinite(d)||  Float.isLong(d))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Float.isInfinite(d)||  Float.isLong(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Float.isInfinite(d)||  Float.isLong(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Float.isNaN(d)||    Float.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
173	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Float.isInfinite(d)||  Float.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Float.isInfinite(d)||  Float.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Float.isInfinite(d)||  Float.isNaN(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Float.isNaN(d)||    Float.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
174	[BUG]  [BUGGY]  if(c.isQuotedString()  ||!Double.isNaN(d)||  Double.isInfinite(c))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(c.isQuotedString()  ||!Double.isNaN(d)||  Double.isInfinite(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c.isQuotedString()  ||!Double.isNaN(d)||  Double.isInfinite(c))  {	  if(c.isQuotedString()    &&!Double.isNaN(d)||    Double.isInfinite(c))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
175	[BUG]  [BUGGY]  if(c.isQuotedString()  &&!Double.isNaN(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(c.isQuotedString()  &&!Double.isNaN(d)||  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c.isQuotedString()  &&!Double.isNaN(d)||  Double.isInfinite(d))  {	  if(c.isQuotedString()    &&!Double.isNaN(d)||    Double.isInfinite(c))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
176	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(c))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(c))  {	  if(c.isQuotedString()    &&!Double.isNaN(d)||    Double.isInfinite(c))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
177	[BUG]  [BUGGY]  if(!c.isQuotedString()  &&!Double.isNaN(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!c.isQuotedString()  &&!Double.isNaN(d)||  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!c.isQuotedString()  &&!Double.isNaN(d)||  Double.isInfinite(d))  {	  if(c.isQuotedString()    &&!Double.isNaN(d)||    Double.isInfinite(c))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
178	[BUG]  [BUGGY]  if(!c.isQuotedString()  &&!Double.isNaN(d)||  Double.isInfinite(c))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!c.isQuotedString()  &&!Double.isNaN(d)||  Double.isInfinite(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!c.isQuotedString()  &&!Double.isNaN(d)||  Double.isInfinite(c))  {	  if(c.isQuotedString()    &&!Double.isNaN(d)||    Double.isInfinite(c))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
179	[BUG]  [BUGGY]  if(!c.isQuotedString()  ||!Double.isNaN(d)||  Double.isInfinite(c))  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!c.isQuotedString()  ||!Double.isNaN(d)||  Double.isInfinite(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!c.isQuotedString()  ||!Double.isNaN(d)||  Double.isInfinite(c))  {	  if(c.isQuotedString()    &&!Double.isNaN(d)||    Double.isInfinite(c))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
180	[BUG]  [BUGGY]  if(c.isQuotedString()  ||  Double.isNaN(d)||  Double.isInfinite(c))  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(c.isQuotedString()  ||  Double.isNaN(d)||  Double.isInfinite(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c.isQuotedString()  ||  Double.isNaN(d)||  Double.isInfinite(c))  {	  if(c.isQuotedString()    &&!Double.isNaN(d)||    Double.isInfinite(c))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
181	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isLong(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isLong(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isLong(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    NodeUtil.isFunction(d))    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
182	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isExpressionNode(d))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isExpressionNode(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isExpressionNode(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    NodeUtil.isFunction(d))    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
183	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isAssignmentOp(d))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isAssignmentOp(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isAssignmentOp(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    NodeUtil.isFunction(d))    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
184	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isEmpty(d))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isEmpty(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isEmpty(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    NodeUtil.isFunction(d))    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
185	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isLocal(d))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isLocal(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isLocal(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    NodeUtil.isFunction(d))    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
186	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isLetterOrDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isLetterOrDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isLetterOrDigit(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    NodeUtil.isFunction(d))    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
187	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Character.isDigit(d)||  Character.isLetterOrDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Character.isDigit(d)||  Character.isLetterOrDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Character.isDigit(d)||  Character.isLetterOrDigit(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    Character.isLetterOrDigit(d))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
188	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Character.isLetterOrDigit(d)||  Character.isLetterOrDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Character.isLetterOrDigit(d)||  Character.isLetterOrDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Character.isLetterOrDigit(d)||  Character.isLetterOrDigit(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    Character.isLetterOrDigit(d))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
189	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Character.isDigit(d)||  Character.isLetterOrDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Character.isDigit(d)||  Character.isLetterOrDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Character.isDigit(d)||  Character.isLetterOrDigit(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    Character.isLetterOrDigit(d))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
190	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Character.isJavaIdentifierPart(d)||  Character.isLetterOrDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Character.isJavaIdentifierPart(d)||  Character.isLetterOrDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Character.isJavaIdentifierPart(d)||  Character.isLetterOrDigit(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    Character.isLetterOrDigit(d))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
191	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Character.isLetterOrDigit(d)||  Character.isUpperCase(d))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Character.isLetterOrDigit(d)||  Character.isUpperCase(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Character.isLetterOrDigit(d)||  Character.isUpperCase(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    Character.isLetterOrDigit(d))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
192	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Character.isISOControl(d)||  Character.isLetterOrDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Character.isISOControl(d)||  Character.isLetterOrDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Character.isISOControl(d)||  Character.isLetterOrDigit(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    Character.isLetterOrDigit(d))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
193	[BUG]  [BUGGY]  if(c.isQuotedString()  ||!Double.isNaN(d)&&  NodeUtil.isLetterOp(n))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(c.isQuotedString()  ||!Double.isNaN(d)&&  NodeUtil.isLetterOp(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c.isQuotedString()  ||!Double.isNaN(d)&&  NodeUtil.isLetterOp(n))  {	  if(c.isQuotedString()    ||!Double.isNaN(d)&&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
194	[BUG]  [BUGGY]  if(d.isQuotedString()  ||!Double.isNaN(d)&&  NodeUtil.isLetter(n))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d.isQuotedString()  ||!Double.isNaN(d)&&  NodeUtil.isLetter(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d.isQuotedString()  ||!Double.isNaN(d)&&  NodeUtil.isLetter(n))  {	  if(c.isQuotedString()    ||!Double.isNaN(d)&&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
195	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||!Double.isNaN(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||!Double.isNaN(d)||!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||!Double.isNaN(d)||!Double.isNaN(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||!Double.isNaN(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
196	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isInfinite(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||!Double.isNaN(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
197	[BUG]  [BUGGY]  if(d!=  null  &&!Double.isNaN(d)||  Double.isInfinite(c))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d!=  null  &&!Double.isNaN(d)||  Double.isInfinite(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d!=  null  &&!Double.isNaN(d)||  Double.isInfinite(c))  {	  if(c!=    null    &&!Double.isNaN(d)||    Double.isInfinite(c))    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
198	[BUG]  [BUGGY]  if(d!=  null  ||!Double.isNaN(d)||  Double.isInfinite(c))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d!=  null  ||!Double.isNaN(d)||  Double.isInfinite(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d!=  null  ||!Double.isNaN(d)||  Double.isInfinite(c))  {	  if(c!=    null    &&!Double.isNaN(d)||    Double.isInfinite(c))    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
199	[BUG]  [BUGGY]  if(c!=  null  ||!Double.isNaN(d)||  Double.isInfinite(c))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(c!=  null  ||!Double.isNaN(d)||  Double.isInfinite(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c!=  null  ||!Double.isNaN(d)||  Double.isInfinite(c))  {	  if(c!=    null    &&!Double.isNaN(d)||    Double.isInfinite(c))    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
200	[BUG]  [BUGGY]  if(d  ==  null  &&!Double.isNaN(d)||  Double.isInfinite(c))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d  ==  null  &&!Double.isNaN(d)||  Double.isInfinite(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d  ==  null  &&!Double.isNaN(d)||  Double.isInfinite(c))  {	  if(c!=    null    &&!Double.isNaN(d)||    Double.isInfinite(c))    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
201	[BUG]  [BUGGY]  if(d  ==  null  ||!Double.isNaN(d)||  Double.isInfinite(c))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d  ==  null  ||!Double.isNaN(d)||  Double.isInfinite(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d  ==  null  ||!Double.isNaN(d)||  Double.isInfinite(c))  {	  if(c!=    null    &&!Double.isNaN(d)||    Double.isInfinite(c))    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
202	[BUG]  [BUGGY]  if(c  ==  null  &&!Double.isNaN(d)||  Double.isInfinite(c))  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(c  ==  null  &&!Double.isNaN(d)||  Double.isInfinite(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c  ==  null  &&!Double.isNaN(d)||  Double.isInfinite(c))  {	  if(c!=    null    &&!Double.isNaN(d)||    Double.isInfinite(c))    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
203	[BUG]  [BUGGY]  if(d  ==  null  ||!Double.isNaN(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d  ==  null  ||!Double.isNaN(d)||  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d  ==  null  ||!Double.isNaN(d)||  Double.isInfinite(d))  {	  if(d!=    null    ||!Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
204	[BUG]  [BUGGY]  if(d!=  null  ||!Double.isNaN(d)&&  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d!=  null  ||!Double.isNaN(d)&&  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d!=  null  ||!Double.isNaN(d)&&  Double.isInfinite(d))  {	  if(d!=    null    ||!Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
205	[BUG]  [BUGGY]  if(d!=  null  &&!Double.isNaN(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d!=  null  &&!Double.isNaN(d)||  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d!=  null  &&!Double.isNaN(d)||  Double.isInfinite(d))  {	  if(d!=    null    ||!Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
206	[BUG]  [BUGGY]  if(d  ==  null  ||!Double.isNaN(d)&&  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d  ==  null  ||!Double.isNaN(d)&&  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d  ==  null  ||!Double.isNaN(d)&&  Double.isInfinite(d))  {	  if(d!=    null    ||!Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
207	[BUG]  [BUGGY]  if(d  >=  null  ||!Double.isNaN(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d  >=  null  ||!Double.isNaN(d)||  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d  >=  null  ||!Double.isNaN(d)||  Double.isInfinite(d))  {	  if(d!=    null    ||!Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
208	[BUG]  [BUGGY]  if(d!=  null  ||!Double.isNaN(d)||  Double.isLong(d))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d!=  null  ||!Double.isNaN(d)||  Double.isLong(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d!=  null  ||!Double.isNaN(d)||  Double.isLong(d))  {	  if(d!=    null    ||!Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
209	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(c)||!Double.isNaN(d)||!Double.isNaN(c))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(c)||!Double.isNaN(d)||!Double.isNaN(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isNaN(c)||!Double.isNaN(d)||!Double.isNaN(c))  {	  if(!Double.isNaN(d)||    Double.isInfinite(c)||!Double.isNaN(d)||!Double.isNaN(c))    {    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
210	[BUG]  [BUGGY]  if(c  ==  null  ||!Double.isNaN(d)||  Double.isInfinite(c)||!Double.isNaN(d)||!Double.isNaN(c))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(c  ==  null  ||!Double.isNaN(d)||  Double.isInfinite(c)||!Double.isNaN(d)||!Double.isNaN(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c  ==  null  ||!Double.isNaN(d)||  Double.isInfinite(c)||!Double.isNaN(d)||!Double.isNaN(c))  {	  if(!Double.isNaN(d)||    Double.isInfinite(c)||!Double.isNaN(d)||!Double.isNaN(c))    {    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
211	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(c)|||!Double.isNaN(d)||!Double.isNaN(c))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(c)|||!Double.isNaN(d)||!Double.isNaN(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isInfinite(c)|||!Double.isNaN(d)||!Double.isNaN(c))  {	  if(!Double.isNaN(d)||    Double.isInfinite(c)||!Double.isNaN(d)||!Double.isNaN(c))    {    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
212	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(c)||!Double.isNaN(d)||!Double.isNaN(c))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(c)||!Double.isNaN(d)||!Double.isNaN(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(c)||!Double.isNaN(d)||!Double.isNaN(c))  {	  if(!Double.isNaN(d)||    Double.isInfinite(c)||!Double.isNaN(d)||!Double.isNaN(c))    {    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
213	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(c)||!Double.isNaN(d)||!Double.isInfinite(c))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(c)||!Double.isNaN(d)||!Double.isInfinite(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isInfinite(c)||!Double.isNaN(d)||!Double.isInfinite(c))  {	  if(!Double.isNaN(d)||    Double.isInfinite(c)||!Double.isNaN(d)||!Double.isNaN(c))    {    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
214	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(c)||!Double.isInfinite(d)||!Double.isNaN(c))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(c)||!Double.isInfinite(d)||!Double.isNaN(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isNaN(c)||!Double.isInfinite(d)||!Double.isNaN(c))  {	  if(!Double.isNaN(d)||    Double.isInfinite(c)||!Double.isNaN(d)||!Double.isNaN(c))    {    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
215	[BUG]  [BUGGY]  if(c.isQuotedString()  ||!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  NodeUtil.isLetter(n))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(c.isQuotedString()  ||!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  NodeUtil.isLetter(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c.isQuotedString()  ||!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  NodeUtil.isLetter(n))  {	  if(c.isQuotedString()    &&!TokenStream.isKeyword(key)    &&    TokenStream.isJSIdentifier(key)    &&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
216	[BUG]  [BUGGY]  if(c.isQuotedString()  &&!TokenStream.isKeyword(d)&&  TokenStream.isJSIdentifier(key)&&  NodeUtil.isLetter(n))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(c.isQuotedString()  &&!TokenStream.isKeyword(d)&&  TokenStream.isJSIdentifier(key)&&  NodeUtil.isLetter(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c.isQuotedString()  &&!TokenStream.isKeyword(d)&&  TokenStream.isJSIdentifier(key)&&  NodeUtil.isLetter(n))  {	  if(c.isQuotedString()    &&!TokenStream.isKeyword(key)    &&    TokenStream.isJSIdentifier(key)    &&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
217	[BUG]  [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isKeyword(d)&&  TokenStream.isJSIdentifier(key)&&  NodeUtil.isLetter(n))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isKeyword(d)&&  TokenStream.isJSIdentifier(key)&&  NodeUtil.isLetter(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!c.isQuotedString()  &&!TokenStream.isKeyword(d)&&  TokenStream.isJSIdentifier(key)&&  NodeUtil.isLetter(n))  {	  if(c.isQuotedString()    &&!TokenStream.isKeyword(key)    &&    TokenStream.isJSIdentifier(key)    &&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
218	[BUG]  [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isKeyword(d)&&  TokenStream.isJSIdentifier(d)&&  NodeUtil.isLetter(n))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isKeyword(d)&&  TokenStream.isJSIdentifier(d)&&  NodeUtil.isLetter(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!c.isQuotedString()  &&!TokenStream.isKeyword(d)&&  TokenStream.isJSIdentifier(d)&&  NodeUtil.isLetter(n))  {	  if(c.isQuotedString()    &&!TokenStream.isKeyword(key)    &&    TokenStream.isJSIdentifier(key)    &&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
219	[BUG]  [BUGGY]  if(c.isQuotedString()  &&!TokenStream.isKeyword(d)&&  TokenStream.isJSIdentifier(d)&&  NodeUtil.isLetter(n))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(c.isQuotedString()  &&!TokenStream.isKeyword(d)&&  TokenStream.isJSIdentifier(d)&&  NodeUtil.isLetter(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c.isQuotedString()  &&!TokenStream.isKeyword(d)&&  TokenStream.isJSIdentifier(d)&&  NodeUtil.isLetter(n))  {	  if(c.isQuotedString()    &&!TokenStream.isKeyword(key)    &&    TokenStream.isJSIdentifier(key)    &&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
220	[BUG]  [BUGGY]  if(c.isQuotedString()  &&!TokenStream.isLetter(d)&&  TokenStream.isJSIdentifier(key)&&  NodeUtil.isLetter(n))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(c.isQuotedString()  &&!TokenStream.isLetter(d)&&  TokenStream.isJSIdentifier(key)&&  NodeUtil.isLetter(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c.isQuotedString()  &&!TokenStream.isLetter(d)&&  TokenStream.isJSIdentifier(key)&&  NodeUtil.isLetter(n))  {	  if(c.isQuotedString()    &&!TokenStream.isKeyword(key)    &&    TokenStream.isJSIdentifier(key)    &&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
221	[BUG]  [BUGGY]  if(c.isQuotedString()  &&!TokenStream.isKeyword(d)&&  TokenStream.isJSIdentifier(key)&&  NodeUtil.isLatin(n))  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(c.isQuotedString()  &&!TokenStream.isKeyword(d)&&  TokenStream.isJSIdentifier(key)&&  NodeUtil.isLatin(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c.isQuotedString()  &&!TokenStream.isKeyword(d)&&  TokenStream.isJSIdentifier(key)&&  NodeUtil.isLatin(n))  {	  if(c.isQuotedString()    &&!TokenStream.isKeyword(key)    &&    TokenStream.isJSIdentifier(key)    &&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
222	[BUG]  [BUGGY]  if(Double.isInfinite(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Character.isDigit(d))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isInfinite(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Character.isDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isInfinite(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Character.isDigit(d))  {	  if(Double.isInfinite(d)||    Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
223	[BUG]  [BUGGY]  if(Double.isInfinite(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Character.isLetterOrDigit(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isInfinite(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Character.isLetterOrDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isInfinite(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Character.isLetterOrDigit(d))  {	  if(Double.isInfinite(d)||    Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
224	[BUG]  [BUGGY]  if(!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isNaN(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isNaN(d)||!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isNaN(d)||!Double.isNaN(d))  {	  if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
225	[BUG]  [BUGGY]  if(Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))  {	  if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
226	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isNaN(d))  {	  if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
227	[BUG]  [BUGGY]  double  d  =  getSimpleNumber(c,  1);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  double  d  =  getSimpleNumber(c,  1);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	double  d  =  getSimpleNumber(c,  1);	  double    d    =    getSimpleNumber(c);    	non-compiled	[CE]  	18	None	replace
228	[BUG]  [BUGGY]  double  d  =  getSimpleNode(c);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  double  d  =  getSimpleNode(c);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	double  d  =  getSimpleNode(c);	  double    d    =    getSimpleNumber(c);    	non-compiled	[CE]  	18	None	replace
229	[BUG]  [BUGGY]  double  d  =  getSimpleNumber(c  +  1);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  double  d  =  getSimpleNumber(c  +  1);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	double  d  =  getSimpleNumber(c  +  1);	  double    d    =    getSimpleNumber(c);    	non-compiled	[CE]  	18	None	replace
230	[BUG]  [BUGGY]  double  d  =  getSimpleNumber(c)+  1;  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  double  d  =  getSimpleNumber(c)+  1;  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	double  d  =  getSimpleNumber(c)+  1;	  double    d    =    getSimpleNumber(c);    	non-compiled	[CE]  	18	None	replace
231	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&  Double.isInfinite(c)&&!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)&&  Double.isInfinite(c)&&!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&  Double.isInfinite(c)&&!Double.isNaN(d))  {	  if(!Double.isNaN(d)||    Double.isInfinite(c)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
232	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(c)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(c)||!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isNaN(c)||!Double.isNaN(d))  {	  if(!Double.isNaN(d)||    Double.isInfinite(c)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
233	[BUG]  [BUGGY]  if(c.isQuotedString()  &&!Double.isNaN(d)||  Double.isInfinite(c)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(c.isQuotedString()  &&!Double.isNaN(d)||  Double.isInfinite(c)||!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c.isQuotedString()  &&!Double.isNaN(d)||  Double.isInfinite(c)||!Double.isNaN(d))  {	  if(!Double.isNaN(d)||    Double.isInfinite(c)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
234	[BUG]  [BUGGY]  if(c  ==  null  ||!Double.isNaN(d)||  Double.isInfinite(c)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(c  ==  null  ||!Double.isNaN(d)||  Double.isInfinite(c)||!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c  ==  null  ||!Double.isNaN(d)||  Double.isInfinite(c)||!Double.isNaN(d))  {	  if(!Double.isNaN(d)||    Double.isInfinite(c)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
235	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(c)||!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(c)||!Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isNaN(c)||!Double.isInfinite(d))  {	  if(!Double.isNaN(d)||    Double.isInfinite(c)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
236	[BUG]  [BUGGY]  if(d  <  0  ||!Double.isNaN(d)&&  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d  <  0  ||!Double.isNaN(d)&&  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d  <  0  ||!Double.isNaN(d)&&  Double.isInfinite(d))  {	  if(d    <    0    ||!Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
237	[BUG]  [BUGGY]  if(d  <=  0  ||!Double.isNaN(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d  <=  0  ||!Double.isNaN(d)||  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d  <=  0  ||!Double.isNaN(d)||  Double.isInfinite(d))  {	  if(d    <    0    ||!Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
238	[BUG]  [BUGGY]  if(d  <  0  ||!Double.isNaN(d)&&!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d  <  0  ||!Double.isNaN(d)&&!Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d  <  0  ||!Double.isNaN(d)&&!Double.isInfinite(d))  {	  if(d    <    0    ||!Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
239	[BUG]  [BUGGY]  if(d  >=  0  ||!Double.isNaN(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d  >=  0  ||!Double.isNaN(d)||  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d  >=  0  ||!Double.isNaN(d)||  Double.isInfinite(d))  {	  if(d    <    0    ||!Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
240	[BUG]  [BUGGY]  if(d  <  0  ||  Double.isNaN(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d  <  0  ||  Double.isNaN(d)||  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d  <  0  ||  Double.isNaN(d)||  Double.isInfinite(d))  {	  if(d    <    0    ||!Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
241	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&  Double.isNaN(d)&&!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)&&  Double.isNaN(d)&&!Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&  Double.isNaN(d)&&!Double.isInfinite(d))  {	  if(!Double.isNaN(d)||    Double.isNaN(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
242	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)||!Double.isLong(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)||!Double.isLong(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isNaN(d)||!Double.isLong(d))  {	  if(!Double.isNaN(d)||    Double.isNaN(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
243	[BUG]  [BUGGY]  double  c  =  getSimpleNumber(d);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  double  c  =  getSimpleNumber(d);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	double  c  =  getSimpleNumber(d);	  double    c    =    getSimpleNumber(key);    	non-compiled	[CE]  	68	None	replace
244	[BUG]  [BUGGY]  double  c  =  getSimpleNumber(n);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  double  c  =  getSimpleNumber(n);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	double  c  =  getSimpleNumber(n);	  double    c    =    getSimpleNumber(key);    	non-compiled	[CE]  	68	None	replace
245	[BUG]  [BUGGY]  double  c  =  getSimpleNumber(body);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  double  c  =  getSimpleNumber(body);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	double  c  =  getSimpleNumber(body);	  double    c    =    getSimpleNumber(key);    	non-compiled	[CE]  	68	None	replace
246	[BUG]  [BUGGY]  double  c  =  getSimpleDouble(d);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  double  c  =  getSimpleDouble(d);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	double  c  =  getSimpleDouble(d);	  double    c    =    getSimpleNumber(key);    	non-compiled	[CE]  	68	None	replace
247	[BUG]  [BUGGY]  double  c  =  getSimpleDecimal(key);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  double  c  =  getSimpleDecimal(key);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	double  c  =  getSimpleDecimal(key);	  double    c    =    getSimpleNumber(key);    	non-compiled	[CE]  	68	None	replace
248	[BUG]  [BUGGY]  double  c  =  getSimpleNode(n);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  double  c  =  getSimpleNode(n);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	double  c  =  getSimpleNode(n);	  double    c    =    getSimpleNumber(key);    	non-compiled	[CE]  	68	None	replace
249	[BUG]  [BUGGY]  c  =  getSimpleNumber(d);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  c  =  getSimpleNumber(d);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	c  =  getSimpleNumber(d);	  double    c    =    getSimpleNumber(key);    	non-compiled	[CE]  	68	None	replace
250	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)&&!Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&!Double.isInfinite(d))  {	  if(!Double.isNaN(d)&&!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
251	[BUG]  [BUGGY]  if(c.isQuotedString()  &&!Double.isNaN(d)&&!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(c.isQuotedString()  &&!Double.isNaN(d)&&!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c.isQuotedString()  &&!Double.isNaN(d)&&!Double.isNaN(d))  {	  if(!Double.isNaN(d)&&!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
252	[BUG]  [BUGGY]  if(d!=  null  ||!Double.isNaN(d)&&!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d!=  null  ||!Double.isNaN(d)&&!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d!=  null  ||!Double.isNaN(d)&&!Double.isNaN(d))  {	  if(!Double.isNaN(d)&&!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
253	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&!Double.isNaN(d)||!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)&&!Double.isNaN(d)||!Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&!Double.isNaN(d)||!Double.isInfinite(d))  {	  if(!Double.isNaN(d)&&!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
254	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)||!Double.isInfinite(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)||!Double.isInfinite(d)||!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isNaN(d)||!Double.isInfinite(d)||!Double.isNaN(d))  {	  if(!Double.isNaN(d)||    Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
255	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(d)||!Double.isNaN(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(d)||!Double.isNaN(d)||!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isInfinite(d)||!Double.isNaN(d)||!Double.isNaN(d))  {	  if(!Double.isNaN(d)||    Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
256	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Character.isDigit(d)||  Character.isLetter(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Character.isDigit(d)||  Character.isLetter(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Character.isDigit(d)||  Character.isLetter(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Character.isLetter(d))    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
257	[BUG]  [BUGGY]  if(d  ==  null  ||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d  ==  null  ||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d  ==  null  ||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))  {	  if(d!=    null    ||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
258	[BUG]  [BUGGY]  if(d!=  null  ||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d!=  null  ||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d!=  null  ||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {	  if(d!=    null    ||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
259	[BUG]  [BUGGY]  if(d!=  null  &&!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d!=  null  &&!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d!=  null  &&!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))  {	  if(d!=    null    ||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
260	[BUG]  [BUGGY]  if(d  ==  null  ||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d  ==  null  ||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d  ==  null  ||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {	  if(d!=    null    ||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
261	[BUG]  [BUGGY]  if(d!=  null  ||!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d!=  null  ||!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d!=  null  ||!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isNaN(d))  {	  if(d!=    null    ||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
262	[BUG]  [BUGGY]  if(d  >=  null  ||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d  >=  null  ||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d  >=  null  ||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))  {	  if(d!=    null    ||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
263	[BUG]  [BUGGY]  if(!Double.isNaN(c)&&  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(c)&&  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(c)&&  Double.isInfinite(d))  {	  if(!Double.isNaN(c)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
264	[BUG]  [BUGGY]  if(c  ==  null  ||!Double.isNaN(c)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(c  ==  null  ||!Double.isNaN(c)||  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c  ==  null  ||!Double.isNaN(c)||  Double.isInfinite(d))  {	  if(!Double.isNaN(c)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
265	[BUG]  [BUGGY]  if(c!=  null  ||!Double.isNaN(c)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(c!=  null  ||!Double.isNaN(c)||  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c!=  null  ||!Double.isNaN(c)||  Double.isInfinite(d))  {	  if(!Double.isNaN(c)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
266	[BUG]  [BUGGY]  if(!Double.isNaN(c)||  Double.isInfinite(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(c)||  Double.isInfinite(d)||!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(c)||  Double.isInfinite(d)||!Double.isNaN(d))  {	  if(!Double.isNaN(c)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
267	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isNaN(d)  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isNaN(d)  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isNaN(d)	  if(Double.isNaN(d)||    Double.isNaN(d)||!Double.isInfinite(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  	65	None	replace
268	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isLong(d)||!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isLong(d)||!Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isLong(d)||!Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||!Double.isInfinite(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
269	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isNaN(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||!Double.isInfinite(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
270	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&  Double.isNaN(d)&&!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)&&  Double.isNaN(d)&&!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&  Double.isNaN(d)&&!Double.isNaN(d))  {	  if(!Double.isNaN(d)||    Double.isNaN(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
271	[BUG]  [BUGGY]  if(d!=  null  ||!Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d!=  null  ||!Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d!=  null  ||!Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d))  {	  if(!Double.isNaN(d)||    Double.isNaN(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
272	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isInfinite(d)||!Double.isLongBoolean(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isInfinite(d)||!Double.isLongBoolean(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isInfinite(d)||!Double.isLongBoolean(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||!Double.isNaN(d)||!Double.isLongBoolean(d))    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
273	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||!Double.isNaN(d)||!Double.isLongBoolean(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||!Double.isNaN(d)||!Double.isLongBoolean(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||!Double.isNaN(d)||!Double.isLongBoolean(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||!Double.isNaN(d)||!Double.isLongBoolean(d))    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
274	[BUG]  [BUGGY]  if(d  <  0  ||!Double.isNaN(d)&&  Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d  <  0  ||!Double.isNaN(d)&&  Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d  <  0  ||!Double.isNaN(d)&&  Double.isNaN(d))  {	  if(d    <    0    ||!Double.isNaN(d)||    Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
275	[BUG]  [BUGGY]  if(d  <  0  ||!Double.isNaN(d)&&!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d  <  0  ||!Double.isNaN(d)&&!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d  <  0  ||!Double.isNaN(d)&&!Double.isNaN(d))  {	  if(d    <    0    ||!Double.isNaN(d)||    Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
276	[BUG]  [BUGGY]  if(d  <=  0  ||!Double.isNaN(d)||  Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d  <=  0  ||!Double.isNaN(d)||  Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d  <=  0  ||!Double.isNaN(d)||  Double.isNaN(d))  {	  if(d    <    0    ||!Double.isNaN(d)||    Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
277	[BUG]  [BUGGY]  if(d  <  0  ||!Double.isNaN(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d  <  0  ||!Double.isNaN(d)||!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d  <  0  ||!Double.isNaN(d)||!Double.isNaN(d))  {	  if(d    <    0    ||!Double.isNaN(d)||    Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
278	[BUG]  [BUGGY]  if(!Double.isNaN(d)||!Double.isInfinite(d)&&!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||!Double.isInfinite(d)&&!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||!Double.isInfinite(d)&&!Double.isNaN(d))  {	  if(!Double.isNaN(d)&&!Double.isInfinite(d)&&!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
279	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&!Double.isNaN(d)||!Double.isInfinite(d)&&!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)&&!Double.isNaN(d)||!Double.isInfinite(d)&&!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&!Double.isNaN(d)||!Double.isInfinite(d)&&!Double.isNaN(d))  {	  if(!Double.isNaN(d)&&!Double.isInfinite(d)&&!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
280	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isExpressionNode(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isExpressionNode(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isExpressionNode(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    NodeUtil.isFunction(d))    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
281	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isAssignmentOp(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isAssignmentOp(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isAssignmentOp(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    NodeUtil.isFunction(d))    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
282	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isLong(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isLong(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isLong(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    NodeUtil.isFunction(d))    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
283	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isLetterOrDigit(d)||!Double.isNaN(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isLetterOrDigit(d)||!Double.isNaN(d)||!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isLetterOrDigit(d)||!Double.isNaN(d)||!Double.isNaN(d))  {	  if(Double.isNaN(d)||    Double.isLetterOrDigit(d)||!Double.isNaN(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
284	[BUG]  [BUGGY]  if(!c.isQuotedString()  ||!Double.isNaN(d)&&  NodeUtil.isLetter(n))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!c.isQuotedString()  ||!Double.isNaN(d)&&  NodeUtil.isLetter(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!c.isQuotedString()  ||!Double.isNaN(d)&&  NodeUtil.isLetter(n))  {	  if(!c.isQuotedString()    &&!Double.isNaN(d)&&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
285	[BUG]  [BUGGY]  if(!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetterOp(n))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetterOp(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetterOp(n))  {	  if(!c.isQuotedString()    &&!Double.isNaN(d)&&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
286	[BUG]  [BUGGY]  if(!c.isQuotedString()  &&!Double.isNaN(d)||  NodeUtil.isLetter(n))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!c.isQuotedString()  &&!Double.isNaN(d)||  NodeUtil.isLetter(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!c.isQuotedString()  &&!Double.isNaN(d)||  NodeUtil.isLetter(n))  {	  if(!c.isQuotedString()    &&!Double.isNaN(d)&&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
287	[BUG]  [BUGGY]  if(!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetterStorage(n))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetterStorage(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetterStorage(n))  {	  if(!c.isQuotedString()    &&!Double.isNaN(d)&&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
288	[BUG]  [BUGGY]  if(!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetterBoolean(n))  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetterBoolean(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetterBoolean(n))  {	  if(!c.isQuotedString()    &&!Double.isNaN(d)&&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
289	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&  Double.isInfinite(d)||  Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)&&  Double.isInfinite(d)||  Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&  Double.isInfinite(d)||  Double.isNaN(d))  {	  if(!Double.isNaN(d)&&    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
290	[BUG]  [BUGGY]  double  d  =  getSimpleNumber(n  +  1);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  double  d  =  getSimpleNumber(n  +  1);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	double  d  =  getSimpleNumber(n  +  1);	  double    d    =    getSimpleNumber(n);    	non-compiled	[CE]  	69	None	replace
291	[BUG]  [BUGGY]  double  d  =  getSimpleNumber(last);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  double  d  =  getSimpleNumber(last);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	double  d  =  getSimpleNumber(last);	  double    d    =    getSimpleNumber(n);    	non-compiled	[CE]  	69	None	replace
292	[BUG]  [BUGGY]  double  d  =  getSimpleNumber(n,  1);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  double  d  =  getSimpleNumber(n,  1);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	double  d  =  getSimpleNumber(n,  1);	  double    d    =    getSimpleNumber(n);    	non-compiled	[CE]  	69	None	replace
293	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&  Double.isNaN(d)&&  Character.isDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)&&  Double.isNaN(d)&&  Character.isDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&  Double.isNaN(d)&&  Character.isDigit(d))  {	  if(!Double.isNaN(d)||    Double.isNaN(d)||    Character.isDigit(d))    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
294	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)||  Character.isJavaIdentifierPart(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)||  Character.isJavaIdentifierPart(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isNaN(d)||  Character.isJavaIdentifierPart(d))  {	  if(!Double.isNaN(d)||    Double.isNaN(d)||    Character.isDigit(d))    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
295	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isLetterOrDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isLetterOrDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isLetterOrDigit(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isLetterOrDigit(d))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
296	[BUG]  [BUGGY]  if(Double.isNaN(d)&&  Double.isInfinite(d)&&  Double.isLetterOrDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)&&  Double.isInfinite(d)&&  Double.isLetterOrDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&  Double.isInfinite(d)&&  Double.isLetterOrDigit(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isLetterOrDigit(d))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
297	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLetterOrDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLetterOrDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLetterOrDigit(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isLetterOrDigit(d))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
298	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isDigit(d)||  Double.isLetterOrDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isDigit(d)||  Double.isLetterOrDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isDigit(d)||  Double.isLetterOrDigit(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isLetterOrDigit(d))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
299	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(d)||  getSimpleNumber(d))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(d)||  getSimpleNumber(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(d)||  getSimpleNumber(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isLetterOrDigit(d))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
300	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isLong(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isLong(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isLong(d))  {	  if(!Double.isNaN(d)||    Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
301	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {	  if(!Double.isNaN(d)||    Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
302	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)||!Double.isLong(d)||!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)||!Double.isLong(d)||!Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isNaN(d)||!Double.isLong(d)||!Double.isInfinite(d))  {	  if(!Double.isNaN(d)||    Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
303	[BUG]  [BUGGY]  if(!c.isQuotedString()  ||!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  NodeUtil.isLetter(n))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!c.isQuotedString()  ||!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  NodeUtil.isLetter(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!c.isQuotedString()  ||!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  NodeUtil.isLetter(n))  {	  if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)    &&    TokenStream.isJSIdentifier(key)    &&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
304	[BUG]  [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isLetter(d)&&  TokenStream.isJSIdentifier(key)&&  NodeUtil.isLetter(n))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isLetter(d)&&  TokenStream.isJSIdentifier(key)&&  NodeUtil.isLetter(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!c.isQuotedString()  &&!TokenStream.isLetter(d)&&  TokenStream.isJSIdentifier(key)&&  NodeUtil.isLetter(n))  {	  if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)    &&    TokenStream.isJSIdentifier(key)    &&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
305	[BUG]  [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isKeyword(d)&&  TokenStream.isJSIdentifier(key)&&  NodeUtil.isLatin(n))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isKeyword(d)&&  TokenStream.isJSIdentifier(key)&&  NodeUtil.isLatin(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!c.isQuotedString()  &&!TokenStream.isKeyword(d)&&  TokenStream.isJSIdentifier(key)&&  NodeUtil.isLatin(n))  {	  if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)    &&    TokenStream.isJSIdentifier(key)    &&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
306	[BUG]  [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(d)&&  NodeUtil.isLetter(n))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(d)&&  NodeUtil.isLetter(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(d)&&  NodeUtil.isLetter(n))  {	  if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)    &&    TokenStream.isJSIdentifier(key)    &&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
307	[BUG]  [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isKeyword(d)&&  TokenStream.isJSIdentifier(key)&&  NodeUtil.isLetterOrDigit(n))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isKeyword(d)&&  TokenStream.isJSIdentifier(key)&&  NodeUtil.isLetterOrDigit(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!c.isQuotedString()  &&!TokenStream.isKeyword(d)&&  TokenStream.isJSIdentifier(key)&&  NodeUtil.isLetterOrDigit(n))  {	  if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)    &&    TokenStream.isJSIdentifier(key)    &&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
308	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  getSimpleNumber(d)  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  getSimpleNumber(d)  ==  0)  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  getSimpleNumber(d)  ==  0)  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    getSimpleNumber(d)!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
309	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  getSimpleNumber(d)  >=  0)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  getSimpleNumber(d)  >=  0)  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  getSimpleNumber(d)  >=  0)  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    getSimpleNumber(d)!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
310	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  getSimpleNumber(d)!=  0)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  getSimpleNumber(d)!=  0)  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  getSimpleNumber(d)!=  0)  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    getSimpleNumber(d)!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
311	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  getSimpleNumber(d)  <=  0)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  getSimpleNumber(d)  <=  0)  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  getSimpleNumber(d)  <=  0)  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    getSimpleNumber(d)!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
312	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  getSimpleNumber(d)  >>  0)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  getSimpleNumber(d)  >>  0)  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  getSimpleNumber(d)  >>  0)  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    getSimpleNumber(d)!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
313	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  getSimpleNumber(d)  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  getSimpleNumber(d)  ==  0)  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  getSimpleNumber(d)  ==  0)  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    getSimpleNumber(d)!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
314	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Character.isLetterOrDigit(d)||  Character.isDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Character.isLetterOrDigit(d)||  Character.isDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Character.isLetterOrDigit(d)||  Character.isDigit(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    Character.isDigit(d))    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
315	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Character.isDigit(d)||  Character.isDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Character.isDigit(d)||  Character.isDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Character.isDigit(d)||  Character.isDigit(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    Character.isDigit(d))    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
316	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Character.isJavaIdentifierPart(d)||  Character.isDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Character.isJavaIdentifierPart(d)||  Character.isDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Character.isJavaIdentifierPart(d)||  Character.isDigit(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    Character.isDigit(d))    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
317	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Character.isISOControl(d)||  Character.isDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Character.isISOControl(d)||  Character.isDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Character.isISOControl(d)||  Character.isDigit(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    Character.isDigit(d))    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
318	[BUG]  [BUGGY]  if(d  <  0  ||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d  <  0  ||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d  <  0  ||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {	  if(d    <    0    ||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
319	[BUG]  [BUGGY]  if(d  <  0  ||!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d  <  0  ||!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d  <  0  ||!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isNaN(d))  {	  if(d    <    0    ||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
320	[BUG]  [BUGGY]  if(d  <  0  ||!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d  <  0  ||!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d  <  0  ||!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isNaN(d))  {	  if(d    <    0    ||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
321	[BUG]  [BUGGY]  if(d  <=  0  ||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d  <=  0  ||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d  <=  0  ||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))  {	  if(d    <    0    ||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
322	[BUG]  [BUGGY]  if(d  <  0  ||!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d  <  0  ||!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d  <  0  ||!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isInfinite(d))  {	  if(d    <    0    ||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
323	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&  Double.isInfinite(d)&&!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)&&  Double.isInfinite(d)&&!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&  Double.isInfinite(d)&&!Double.isNaN(d))  {	  if(!Double.isNaN(d)||    Double.isInfinite(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
324	[BUG]  [BUGGY]  if(d!=  null  ||!Double.isNaN(d)||  Double.isInfinite(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d!=  null  ||!Double.isNaN(d)||  Double.isInfinite(d)||!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d!=  null  ||!Double.isNaN(d)||  Double.isInfinite(d)||!Double.isNaN(d))  {	  if(!Double.isNaN(d)||    Double.isInfinite(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
325	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isLetterOrDigit(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isLetterOrDigit(d)||!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isLetterOrDigit(d)||!Double.isNaN(d))  {	  if(!Double.isNaN(d)||    Double.isInfinite(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
326	[BUG]  [BUGGY]  if(c.isQuotedString()  &&!Double.isNaN(d)||  NodeUtil.isLetterOp(n))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(c.isQuotedString()  &&!Double.isNaN(d)||  NodeUtil.isLetterOp(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c.isQuotedString()  &&!Double.isNaN(d)||  NodeUtil.isLetterOp(n))  {	  if(c.isQuotedString()    &&!Double.isNaN(d)&&    NodeUtil.isLetterOp(n))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
327	[BUG]  [BUGGY]  if(n.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetterOp(c))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(n.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetterOp(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(n.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetterOp(c))  {	  if(c.isQuotedString()    &&!Double.isNaN(d)&&    NodeUtil.isLetterOp(n))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
328	[BUG]  [BUGGY]  if(Double.isNaN(d)&&  NodeUtil.isLetterOp(n))  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)&&  NodeUtil.isLetterOp(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&  NodeUtil.isLetterOp(n))  {	  if(c.isQuotedString()    &&!Double.isNaN(d)&&    NodeUtil.isLetterOp(n))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
329	[BUG]  [BUGGY]  if(d.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetterOp(n))  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetterOp(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetterOp(n))  {	  if(c.isQuotedString()    &&!Double.isNaN(d)&&    NodeUtil.isLetterOp(n))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
330	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Character.isDigit(d)||  Character.isLetter(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Character.isDigit(d)||  Character.isLetter(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Character.isDigit(d)||  Character.isLetter(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    Character.isLetter(d))    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
331	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Character.isUpperCase(d)||  Character.isLetter(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Character.isUpperCase(d)||  Character.isLetter(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Character.isUpperCase(d)||  Character.isLetter(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    Character.isLetter(d))    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
332	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Character.isLetterOrDigit(d)||  Character.isInfinite(d)||  Character.isLetterOrDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Character.isLetterOrDigit(d)||  Character.isInfinite(d)||  Character.isLetterOrDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Character.isLetterOrDigit(d)||  Character.isInfinite(d)||  Character.isLetterOrDigit(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    Character.isLetter(d))    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
333	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Character.isInfinite(d)||  Character.isLetterOrDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Character.isInfinite(d)||  Character.isLetterOrDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Character.isInfinite(d)||  Character.isLetterOrDigit(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    Character.isLetter(d))    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
334	[BUG]  [BUGGY]  if(c.isQuotedString()  ||!Double.isNaN(d)||  NodeUtil.isLetter(n))  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(c.isQuotedString()  ||!Double.isNaN(d)||  NodeUtil.isLetter(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c.isQuotedString()  ||!Double.isNaN(d)||  NodeUtil.isLetter(n))  {	  if(c.isQuotedString()    &&!Double.isNaN(d)||    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
335	[BUG]  [BUGGY]  if(!c.isQuotedString()  &&!Double.isNaN(d)||  NodeUtil.isLetterOrDigit(n))  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!c.isQuotedString()  &&!Double.isNaN(d)||  NodeUtil.isLetterOrDigit(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!c.isQuotedString()  &&!Double.isNaN(d)||  NodeUtil.isLetterOrDigit(n))  {	  if(c.isQuotedString()    &&!Double.isNaN(d)||    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
336	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&  NodeUtil.isLetter(n))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)&&  NodeUtil.isLetter(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&  NodeUtil.isLetter(n))  {	  if(Double.isNaN(d)&&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
337	[BUG]  [BUGGY]  if(Double.isNaN(d)&&  NodeUtil.isLetterOrDigit(n)||  Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)&&  NodeUtil.isLetterOrDigit(n)||  Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&  NodeUtil.isLetterOrDigit(n)||  Double.isNaN(d))  {	  if(Double.isNaN(d)&&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
338	[BUG]  [BUGGY]  if(Double.isNaN(d)&&  NodeUtil.isLetterOrDigit(n)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)&&  NodeUtil.isLetterOrDigit(n)||  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&  NodeUtil.isLetterOrDigit(n)||  Double.isInfinite(d))  {	  if(Double.isNaN(d)&&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
339	[BUG]  [BUGGY]  if(NodeUtil.isNaN(d)&&  NodeUtil.isLetter(n))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(NodeUtil.isNaN(d)&&  NodeUtil.isLetter(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(NodeUtil.isNaN(d)&&  NodeUtil.isLetter(n))  {	  if(Double.isNaN(d)&&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
340	[BUG]  [BUGGY]  if(c.isQuotedString()  &&!Double.isNaN(d)&&  Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(c.isQuotedString()  &&!Double.isNaN(d)&&  Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c.isQuotedString()  &&!Double.isNaN(d)&&  Double.isNaN(d))  {	  if(!Double.isNaN(d)&&    Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
341	[BUG]  [BUGGY]  if(d!=  null  ||!Double.isNaN(d)&&  Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d!=  null  ||!Double.isNaN(d)&&  Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d!=  null  ||!Double.isNaN(d)&&  Double.isNaN(d))  {	  if(!Double.isNaN(d)&&    Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
342	[BUG]  [BUGGY]  if(d  ==  null  ||!Double.isNaN(d)&&  Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d  ==  null  ||!Double.isNaN(d)&&  Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d  ==  null  ||!Double.isNaN(d)&&  Double.isNaN(d))  {	  if(!Double.isNaN(d)&&    Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
343	[BUG]  [BUGGY]  if(d!=  null  ||!Double.isNaN(d)||!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d!=  null  ||!Double.isNaN(d)||!Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d!=  null  ||!Double.isNaN(d)||!Double.isInfinite(d))  {	  if(!Double.isNaN(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
344	[BUG]  [BUGGY]  if(d  ==  null  ||!Double.isNaN(d)||!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d  ==  null  ||!Double.isNaN(d)||!Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d  ==  null  ||!Double.isNaN(d)||!Double.isInfinite(d))  {	  if(!Double.isNaN(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
345	[BUG]  [BUGGY]  cc.addNumber(new  Double(d));  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  cc.addNumber(new  Double(d));  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	cc.addNumber(new  Double(d));	  cc.add(new    Double(d));    	non-compiled	[CE]  	100	None	replace
346	[BUG]  [BUGGY]  cc.add(new  Double(d),  getSimpleNumber(d));  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  cc.add(new  Double(d),  getSimpleNumber(d));  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	cc.add(new  Double(d),  getSimpleNumber(d));	  cc.add(new    Double(d));    	non-compiled	[CE]  	100	None	replace
347	[BUG]  [BUGGY]  cc.add(new  Double(d).doubleValue());  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  cc.add(new  Double(d).doubleValue());  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	cc.add(new  Double(d).doubleValue());	  cc.add(new    Double(d));    	non-compiled	[CE]  	100	None	replace
348	[BUG]  [BUGGY]  cc.add(new  Double(d),  1);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  cc.add(new  Double(d),  1);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	cc.add(new  Double(d),  1);	  cc.add(new    Double(d));    	non-compiled	[CE]  	100	None	replace
349	[BUG]  [BUGGY]  cc.add(new  Double(d)+  1);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  cc.add(new  Double(d)+  1);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	cc.add(new  Double(d)+  1);	  cc.add(new    Double(d));    	non-compiled	[CE]  	100	None	replace
350	[BUG]  [BUGGY]  if(c.isQuotedString()  ||!Double.isNaN(d)&&  NodeUtil.isLatin(n))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(c.isQuotedString()  ||!Double.isNaN(d)&&  NodeUtil.isLatin(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c.isQuotedString()  ||!Double.isNaN(d)&&  NodeUtil.isLatin(n))  {	  if(c.isQuotedString()    &&!Double.isNaN(d)&&    NodeUtil.isLatin(n))    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
351	[BUG]  [BUGGY]  if(n.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLatin(n))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(n.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLatin(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(n.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLatin(n))  {	  if(c.isQuotedString()    &&!Double.isNaN(d)&&    NodeUtil.isLatin(n))    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
352	[BUG]  [BUGGY]  if(c.isQuotedString()  &&!Double.isNaN(d)||  NodeUtil.isLatin(n))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(c.isQuotedString()  &&!Double.isNaN(d)||  NodeUtil.isLatin(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c.isQuotedString()  &&!Double.isNaN(d)||  NodeUtil.isLatin(n))  {	  if(c.isQuotedString()    &&!Double.isNaN(d)&&    NodeUtil.isLatin(n))    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
353	[BUG]  [BUGGY]  if(!c.isQuotedString()  ||!Double.isNaN(d)&&  NodeUtil.isLetterOrDigit(n))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!c.isQuotedString()  ||!Double.isNaN(d)&&  NodeUtil.isLetterOrDigit(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!c.isQuotedString()  ||!Double.isNaN(d)&&  NodeUtil.isLetterOrDigit(n))  {	  if(!c.isQuotedString()    &&!Double.isNaN(d)&&    NodeUtil.isLetterOrDigit(n))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
354	[BUG]  [BUGGY]  if(!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetterOrDigit(body))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetterOrDigit(body))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetterOrDigit(body))  {	  if(!c.isQuotedString()    &&!Double.isNaN(d)&&    NodeUtil.isLetterOrDigit(n))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
355	[BUG]  [BUGGY]  if(!c.isQuotedString()  &&!Double.isInfinite(d)&&  NodeUtil.isLetterOrDigit(n))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!c.isQuotedString()  &&!Double.isInfinite(d)&&  NodeUtil.isLetterOrDigit(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!c.isQuotedString()  &&!Double.isInfinite(d)&&  NodeUtil.isLetterOrDigit(n))  {	  if(!c.isQuotedString()    &&!Double.isNaN(d)&&    NodeUtil.isLetterOrDigit(n))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
356	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d)||  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d)||  Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
357	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
358	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  NodeUtil.isExpressionNode(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  NodeUtil.isExpressionNode(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  NodeUtil.isExpressionNode(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isInfinite(d)||    NodeUtil.isFunction(d))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
359	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  NodeUtil.isLong(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  NodeUtil.isLong(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  NodeUtil.isLong(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isInfinite(d)||    NodeUtil.isFunction(d))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
360	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  NodeUtil.isAssignmentOp(d))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  NodeUtil.isAssignmentOp(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  NodeUtil.isAssignmentOp(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isInfinite(d)||    NodeUtil.isFunction(d))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
361	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  NodeUtil.isEmpty(d))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  NodeUtil.isEmpty(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  NodeUtil.isEmpty(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isInfinite(d)||    NodeUtil.isFunction(d))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
362	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  NodeUtil.isLocalPart(d))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  NodeUtil.isLocalPart(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  NodeUtil.isLocalPart(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isInfinite(d)||    NodeUtil.isFunction(d))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
363	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
364	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLongBoolean(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLongBoolean(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLongBoolean(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
365	[BUG]  [BUGGY]  Context  c  =  this.context.getContext();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  c  =  this.context.getContext();  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  c  =  this.context.getContext();	  Context    c    =    context.getContext();    	non-compiled	[CE]  	16	None	replace
366	[BUG]  [BUGGY]  Context  c  =  context.getContext(n);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  c  =  context.getContext(n);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  c  =  context.getContext(n);	  Context    c    =    context.getContext();    	non-compiled	[CE]  	16	None	replace
367	[BUG]  [BUGGY]  Context  c  =  context.getStatementContext();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  c  =  context.getStatementContext();  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  c  =  context.getStatementContext();	  Context    c    =    context.getContext();    	non-compiled	[CE]  	16	None	replace
368	[BUG]  [BUGGY]  if(c  ==  null  ||!Double.isNaN(d)&&  Double.isInfinite(c))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(c  ==  null  ||!Double.isNaN(d)&&  Double.isInfinite(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c  ==  null  ||!Double.isNaN(d)&&  Double.isInfinite(c))  {	  if(c    ==    null    ||!Double.isNaN(d)||    Double.isInfinite(c))    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
369	[BUG]  [BUGGY]  if(d  ==  null  ||!Double.isNaN(d)&&  Double.isInfinite(c))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d  ==  null  ||!Double.isNaN(d)&&  Double.isInfinite(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d  ==  null  ||!Double.isNaN(d)&&  Double.isInfinite(c))  {	  if(c    ==    null    ||!Double.isNaN(d)||    Double.isInfinite(c))    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
370	[BUG]  [BUGGY]  if(c  ==  null  ||!Double.isNaN(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(c  ==  null  ||!Double.isNaN(d)||  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c  ==  null  ||!Double.isNaN(d)||  Double.isInfinite(d))  {	  if(c    ==    null    ||!Double.isNaN(d)||    Double.isInfinite(c))    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
371	[BUG]  [BUGGY]  if(d  ==  null  ||!Double.isNaN(c)||  Double.isInfinite(c))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d  ==  null  ||!Double.isNaN(c)||  Double.isInfinite(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d  ==  null  ||!Double.isNaN(c)||  Double.isInfinite(c))  {	  if(c    ==    null    ||!Double.isNaN(d)||    Double.isInfinite(c))    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
372	[BUG]  [BUGGY]  if(Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isNaN(d))  {	  if(Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
373	[BUG]  [BUGGY]  if(Double.isNaN(d)&&!Double.isInfinite(d)&&!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)&&!Double.isInfinite(d)&&!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&!Double.isInfinite(d)&&!Double.isNaN(d))  {	  if(Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
374	[BUG]  [BUGGY]  Context  cc  =(context  ==  null)?  context.getCurrentContext()  :  context.getCurrentContext();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  cc  =(context  ==  null)?  context.getCurrentContext()  :  context.getCurrentContext();  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  cc  =(context  ==  null)?  context.getCurrentContext()  :  context.getCurrentContext();	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  	99	None	replace
375	[BUG]  [BUGGY]  Context  cc  =  context.getCurrentContext(n);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  cc  =  context.getCurrentContext(n);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  cc  =  context.getCurrentContext(n);	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  	99	None	replace
376	[BUG]  [BUGGY]  Context  cc  =  this.context.getCurrentContext();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  cc  =  this.context.getCurrentContext();  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  cc  =  this.context.getCurrentContext();	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  	99	None	replace
377	[BUG]  [BUGGY]  Context  cc  =(context  ==  null)?  context.getCurrentContext()  :  context;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  cc  =(context  ==  null)?  context.getCurrentContext()  :  context;  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  cc  =(context  ==  null)?  context.getCurrentContext()  :  context;	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  	99	None	replace
378	[BUG]  [BUGGY]  Context  cc  =(context  ==  null)?  context.getCurrentContext()  :  context.getRawContext();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  cc  =(context  ==  null)?  context.getCurrentContext()  :  context.getRawContext();  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  cc  =(context  ==  null)?  context.getCurrentContext()  :  context.getRawContext();	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  	99	None	replace
379	[BUG]  [BUGGY]  if(c.isQuotedString()  &&!Double.isNaN(d)&&  Double.isInfinite(c))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(c.isQuotedString()  &&!Double.isNaN(d)&&  Double.isInfinite(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c.isQuotedString()  &&!Double.isNaN(d)&&  Double.isInfinite(c))  {	  if(!Double.isNaN(d)&&    Double.isInfinite(c))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
380	[BUG]  [BUGGY]  if(c.isQuotedString()  &&!Double.isNaN(d)&&  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(c.isQuotedString()  &&!Double.isNaN(d)&&  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c.isQuotedString()  &&!Double.isNaN(d)&&  Double.isInfinite(d))  {	  if(!Double.isNaN(d)&&    Double.isInfinite(c))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
381	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&  Double.isInfinite(c)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)&&  Double.isInfinite(c)||!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&  Double.isInfinite(c)||!Double.isNaN(d))  {	  if(!Double.isNaN(d)&&    Double.isInfinite(c))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
382	[BUG]  [BUGGY]  if(!Double.isNaN(d)||!Double.isLong(d)||!Double.isInfinite(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||!Double.isLong(d)||!Double.isInfinite(d)||!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||!Double.isLong(d)||!Double.isInfinite(d)||!Double.isNaN(d))  {	  if(!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
383	[BUG]  [BUGGY]  if(Double.isNaN(c)&&  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(c)&&  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(c)&&  Double.isInfinite(d))  {	  if(Double.isNaN(d)&&    Double.isInfinite(c))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
384	[BUG]  [BUGGY]  if(Double.isInfinite(d)||  Double.isInfinite(c))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isInfinite(d)||  Double.isInfinite(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isInfinite(d)||  Double.isInfinite(c))  {	  if(Double.isNaN(d)&&    Double.isInfinite(c))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
385	[BUG]  [BUGGY]  if(Double.isNaN(d)&&  Double.isInfinite(c)||  Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)&&  Double.isInfinite(c)||  Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&  Double.isInfinite(c)||  Double.isNaN(d))  {	  if(Double.isNaN(d)&&    Double.isInfinite(c))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
386	[BUG]  [BUGGY]  if(Double.isNaN(d)&&  Double.isInfinite(c)||  Character.isDigit(c))  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)&&  Double.isInfinite(c)||  Character.isDigit(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&  Double.isInfinite(c)||  Character.isDigit(c))  {	  if(Double.isNaN(d)&&    Double.isInfinite(c))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
387	[BUG]  [BUGGY]  if(Double.isNaN(d)&&  Double.isInfinite(c)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)&&  Double.isInfinite(c)||!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&  Double.isInfinite(c)||!Double.isNaN(d))  {	  if(Double.isNaN(d)&&    Double.isInfinite(c))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
388	[BUG]  [BUGGY]  if(d!=  null  &&!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetter(n))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d!=  null  &&!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetter(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d!=  null  &&!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetter(n))  {	  if(d!=    null    ||!c.isQuotedString()    &&!Double.isNaN(d)&&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
389	[BUG]  [BUGGY]  if(c!=  null  &&!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetter(n))  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(c!=  null  &&!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetter(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c!=  null  &&!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetter(n))  {	  if(d!=    null    ||!c.isQuotedString()    &&!Double.isNaN(d)&&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
390	[BUG]  [BUGGY]  if(d  ==  null  &&!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetter(n))  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d  ==  null  &&!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetter(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d  ==  null  &&!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetter(n))  {	  if(d!=    null    ||!c.isQuotedString()    &&!Double.isNaN(d)&&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
391	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d)||  Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d)||  Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d)||  Double.isNaN(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
392	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLowerCase(d)||  Double.isInfinite(d)||  Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLowerCase(d)||  Double.isInfinite(d)||  Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLowerCase(d)||  Double.isInfinite(d)||  Double.isNaN(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
393	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLocal(d)||  Double.isInfinite(d)||  Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLocal(d)||  Double.isInfinite(d)||  Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLocal(d)||  Double.isInfinite(d)||  Double.isNaN(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
394	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isFunction(d)||  Double.isInfinite(d)||  Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isFunction(d)||  Double.isInfinite(d)||  Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isFunction(d)||  Double.isInfinite(d)||  Double.isNaN(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
395	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(c)||  Character.isLetterOrDigit(c))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(c)||  Character.isLetterOrDigit(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isInfinite(c)||  Character.isLetterOrDigit(c))  {	  if(!Double.isNaN(d)||    Double.isInfinite(c)||    Character.isDigit(c))    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
396	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&  Double.isInfinite(c)&&  Character.isDigit(c))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)&&  Double.isInfinite(c)&&  Character.isDigit(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&  Double.isInfinite(c)&&  Character.isDigit(c))  {	  if(!Double.isNaN(d)||    Double.isInfinite(c)||    Character.isDigit(c))    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
397	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&  Double.isInfinite(c)||  Character.isDigit(c))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)&&  Double.isInfinite(c)||  Character.isDigit(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&  Double.isInfinite(c)||  Character.isDigit(c))  {	  if(!Double.isNaN(d)||    Double.isInfinite(c)||    Character.isDigit(c))    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
398	[BUG]  [BUGGY]  if(c.isQuotedString()  &&!Double.isNaN(d)||  Double.isInfinite(c)||  Character.isDigit(c))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(c.isQuotedString()  &&!Double.isNaN(d)||  Double.isInfinite(c)||  Character.isDigit(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c.isQuotedString()  &&!Double.isNaN(d)||  Double.isInfinite(c)||  Character.isDigit(c))  {	  if(!Double.isNaN(d)||    Double.isInfinite(c)||    Character.isDigit(c))    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
399	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(c)||  Character.isDigit(p))  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(c)||  Character.isDigit(p))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isInfinite(c)||  Character.isDigit(p))  {	  if(!Double.isNaN(d)||    Double.isInfinite(c)||    Character.isDigit(c))    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
400	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(c)||  Character.isDigit(c))  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(c)||  Character.isDigit(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isNaN(c)||  Character.isDigit(c))  {	  if(!Double.isNaN(d)||    Double.isInfinite(c)||    Character.isDigit(c))    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
401	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  double.isInfinite(d))  {  [CE]  class  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d))    {    	non-compiled	[CE]  class  expected	9	None	replace
402	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)&&!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)&&!Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)&&!Double.isInfinite(d))  {	  if(!Double.isNaN(d)||!Double.isNaN(d)&&!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
403	[BUG]  [BUGGY]  if(d  >=  null  ||!Double.isNaN(d)&&  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d  >=  null  ||!Double.isNaN(d)&&  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d  >=  null  ||!Double.isNaN(d)&&  Double.isInfinite(d))  {	  if(d!=    null    ||!Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
404	[BUG]  [BUGGY]  if(Double.isNaN(d)&&  Double.isInfinite(d)&&  Double.isInfinite(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)&&  Double.isInfinite(d)&&  Double.isInfinite(d)||  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&  Double.isInfinite(d)&&  Double.isInfinite(d)||  Double.isInfinite(d))  {	  if(Double.isNaN(d)&&    Double.isInfinite(d)&&    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
405	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(c))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(c))  {	  if(Double.isNaN(d)||    Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
406	[BUG]  [BUGGY]  if(Double.isNaN(d)&&  Double.isInfinite(d)&&  getSimpleNumber(d)!=  0)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)&&  Double.isInfinite(d)&&  getSimpleNumber(d)!=  0)  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&  Double.isInfinite(d)&&  getSimpleNumber(d)!=  0)  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    getSimpleNumber(d)!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
407	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)&&  getSimpleNumber(d)!=  0)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)&&  getSimpleNumber(d)!=  0)  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)&&  getSimpleNumber(d)!=  0)  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    getSimpleNumber(d)!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
408	[BUG]  [BUGGY]  double  d  =  getSimpleNumber(body);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  double  d  =  getSimpleNumber(body);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	double  d  =  getSimpleNumber(body);	  double    d    =    getSimpleNumber(key);    	non-compiled	[CE]  	19	None	replace
409	[BUG]  [BUGGY]  double  d  =  getSimpleNumber(fn);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  double  d  =  getSimpleNumber(fn);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	double  d  =  getSimpleNumber(fn);	  double    d    =    getSimpleNumber(key);    	non-compiled	[CE]  	19	None	replace
410	[BUG]  [BUGGY]  Context  cc  =  getContextForNoInOperator(context);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  cc  =  getContextForNoInOperator(context);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  cc  =  getContextForNoInOperator(context);	  Context    cc    =    getContext();    	non-compiled	[CE]  	101	None	replace
411	[BUG]  [BUGGY]  Context  cc  =  getContextForNoChild(n);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  cc  =  getContextForNoChild(n);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  cc  =  getContextForNoChild(n);	  Context    cc    =    getContext();    	non-compiled	[CE]  	101	None	replace
412	[BUG]  [BUGGY]  Context  cc  =  getContextIn();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  cc  =  getContextIn();  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  cc  =  getContextIn();	  Context    cc    =    getContext();    	non-compiled	[CE]  	101	None	replace
413	[BUG]  [BUGGY]  if(Double.isNaN(d)&&  Double.isNaN(d)&&  Double.isInfinite(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)&&  Double.isNaN(d)&&  Double.isInfinite(d)||  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&  Double.isNaN(d)&&  Double.isInfinite(d)||  Double.isInfinite(d))  {	  if(Double.isNaN(d)&&    Double.isNaN(d)&&    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
414	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLetter(d)||  Double.isInfinite(d)||  Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLetter(d)||  Double.isInfinite(d)||  Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLetter(d)||  Double.isInfinite(d)||  Double.isNaN(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
415	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
416	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&  Double.isNaN(d)&&  Double.isInfinite(d)&&  Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)&&  Double.isNaN(d)&&  Double.isInfinite(d)&&  Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&  Double.isNaN(d)&&  Double.isInfinite(d)&&  Double.isNaN(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
417	[BUG]  [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isKeyword(d)&&  TokenStream.isJSIdentifier(d)&&  NodeUtil.isLatin(n))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isKeyword(d)&&  TokenStream.isJSIdentifier(d)&&  NodeUtil.isLatin(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!c.isQuotedString()  &&!TokenStream.isKeyword(d)&&  TokenStream.isJSIdentifier(d)&&  NodeUtil.isLatin(n))  {	  if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)    &&    TokenStream.isJSIdentifier(key)    &&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
418	[BUG]  [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(d)&&  NodeUtil.isLatin(n))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(d)&&  NodeUtil.isLatin(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(d)&&  NodeUtil.isLatin(n))  {	  if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)    &&    TokenStream.isJSIdentifier(key)    &&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
419	[BUG]  [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isName(key)&&  TokenStream.isJSIdentifier(key)&&  NodeUtil.isLetter(n))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isName(key)&&  TokenStream.isJSIdentifier(key)&&  NodeUtil.isLetter(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!c.isQuotedString()  &&!TokenStream.isName(key)&&  TokenStream.isJSIdentifier(key)&&  NodeUtil.isLetter(n))  {	  if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)    &&    TokenStream.isJSIdentifier(key)    &&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
420	[BUG]  [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isKeyword(d)&&  NodeUtil.isLetter(n))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isKeyword(d)&&  NodeUtil.isLetter(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!c.isQuotedString()  &&!TokenStream.isKeyword(d)&&  NodeUtil.isLetter(n))  {	  if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)    &&    TokenStream.isJSIdentifier(key)    &&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
421	[BUG]  [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isLetter(d)&&  TokenStream.isJSIdentifier(d)&&  NodeUtil.isLetter(n))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isLetter(d)&&  TokenStream.isJSIdentifier(d)&&  NodeUtil.isLetter(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!c.isQuotedString()  &&!TokenStream.isLetter(d)&&  TokenStream.isJSIdentifier(d)&&  NodeUtil.isLetter(n))  {	  if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)    &&    TokenStream.isJSIdentifier(key)    &&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
422	[BUG]  [BUGGY]  if(Double.isNaN(d)&&  Double.isInfinite(d)&&!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)&&  Double.isInfinite(d)&&!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&  Double.isInfinite(d)&&!Double.isNaN(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
423	[BUG]  [BUGGY]  if(d!=  null  ||!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d!=  null  ||!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d!=  null  ||!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isNaN(d))  {	  if(d!=    null    ||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
424	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isInfinite(d)&&!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isInfinite(d)&&!Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isInfinite(d)&&!Double.isInfinite(d))  {	  if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
425	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)||!Double.isInfinite(d)||!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)||!Double.isInfinite(d)||!Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isNaN(d)||!Double.isInfinite(d)||!Double.isInfinite(d))  {	  if(!Double.isNaN(d)||    Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
426	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&  Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)&&  Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&  Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isInfinite(d))  {	  if(!Double.isNaN(d)||    Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
427	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&  Double.isNaN(d)&&!Double.isInfinite(d)&&!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)&&  Double.isNaN(d)&&!Double.isInfinite(d)&&!Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&  Double.isNaN(d)&&!Double.isInfinite(d)&&!Double.isInfinite(d))  {	  if(!Double.isNaN(d)||    Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
428	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isInfinite(d)&&!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isInfinite(d)&&!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isInfinite(d)&&!Double.isNaN(d))  {	  if(!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isInfinite(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
429	[BUG]  [BUGGY]  if(Double.isNaN(d)&&  Double.isInfinite(d)||  Character.isDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)&&  Double.isInfinite(d)||  Character.isDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&  Double.isInfinite(d)||  Character.isDigit(d))  {	  if(Double.isNaN(d)&&    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
430	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d)||  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d)||  Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isLetterOrDigit(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
431	[BUG]  [BUGGY]  if(Double.isNaN(d)&&  Double.isLetterOrDigit(d)&&  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)&&  Double.isLetterOrDigit(d)&&  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&  Double.isLetterOrDigit(d)&&  Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isLetterOrDigit(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
432	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d)||  NodeUtil.isFunction(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d)||  NodeUtil.isFunction(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d)||  NodeUtil.isFunction(d))  {	  if(Double.isNaN(d)||    Double.isLetterOrDigit(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
433	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Character.isDigit(d)||  Character.isLetter(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Character.isDigit(d)||  Character.isLetter(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Character.isDigit(d)||  Character.isLetter(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    Character.isLetter(d))    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
434	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Character.isWhitespace(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Character.isWhitespace(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Character.isWhitespace(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    Character.isLetter(d))    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
435	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLetter(d)||  Character.isLetter(d))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLetter(d)||  Character.isLetter(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLetter(d)||  Character.isLetter(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    Character.isLetter(d))    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
436	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Character.isLetterOrDigit(d)||  Character.isLetterOrDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Character.isLetterOrDigit(d)||  Character.isLetterOrDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Character.isLetterOrDigit(d)||  Character.isLetterOrDigit(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    Character.isLetter(d))    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
437	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&  Double.isInfinite(c)||!Double.isNaN(d)&&!Double.isNaN(c))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)&&  Double.isInfinite(c)||!Double.isNaN(d)&&!Double.isNaN(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&  Double.isInfinite(c)||!Double.isNaN(d)&&!Double.isNaN(c))  {	  if(!Double.isNaN(d)||    Double.isInfinite(c)||!Double.isNaN(d)||!Double.isNaN(c))    {    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
438	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(c)||!Double.isNaN(d)||!Double.isInfinite(c))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(c)||!Double.isNaN(d)||!Double.isInfinite(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(c)||!Double.isNaN(d)||!Double.isInfinite(c))  {	  if(!Double.isNaN(d)||    Double.isInfinite(c)||!Double.isNaN(d)||!Double.isNaN(c))    {    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
439	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&  Double.isInfinite(c)&&!Double.isNaN(d)&&!Double.isNaN(c))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)&&  Double.isInfinite(c)&&!Double.isNaN(d)&&!Double.isNaN(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&  Double.isInfinite(c)&&!Double.isNaN(d)&&!Double.isNaN(c))  {	  if(!Double.isNaN(d)||    Double.isInfinite(c)||!Double.isNaN(d)||!Double.isNaN(c))    {    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
440	[BUG]  [BUGGY]  cc.add(new  Double(d  +  1));  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  cc.add(new  Double(d  +  1));  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	cc.add(new  Double(d  +  1));	  cc.add(new    Double(d));    	non-compiled	[CE]  	100	None	replace
441	[BUG]  [BUGGY]  cc.add(new  Double(d),  c);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  cc.add(new  Double(d),  c);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	cc.add(new  Double(d),  c);	  cc.add(new    Double(d));    	non-compiled	[CE]  	100	None	replace
442	[BUG]  [BUGGY]  if(!c.isQuotedString()  &&!Double.isNaN(d)&&  Double.isInfinite(c))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!c.isQuotedString()  &&!Double.isNaN(d)&&  Double.isInfinite(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!c.isQuotedString()  &&!Double.isNaN(d)&&  Double.isInfinite(c))  {	  if(c.isQuotedString()    &&!Double.isNaN(d)||    Double.isInfinite(c))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
443	[BUG]  [BUGGY]  if(Double.isNaN(c)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(c)||  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(c)||  Double.isInfinite(d))  {	  if(c.isQuotedString()    &&!Double.isNaN(d)||    Double.isInfinite(c))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
444	[BUG]  [BUGGY]  Context  c  =  context.getCurrentStatementContext();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  c  =  context.getCurrentStatementContext();  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  c  =  context.getCurrentStatementContext();	  Context    c    =    context.getCurrentContext();    	non-compiled	[CE]  	15	None	replace
445	[BUG]  [BUGGY]  if(!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.mayHaveSideEffects(n))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.mayHaveSideEffects(n))  {	  if(!c.isQuotedString()    &&!Double.isNaN(d)&&    NodeUtil.isLatin(n))    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
446	[BUG]  [BUGGY]  if(!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isFunction(n))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isFunction(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isFunction(n))  {	  if(!c.isQuotedString()    &&!Double.isNaN(d)&&    NodeUtil.isLatin(n))    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
447	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&  Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)&&  Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&  Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isNaN(d))  {	  if(!Double.isNaN(d)||    Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
448	[BUG]  [BUGGY]  if(c!=  null  ||!Double.isNaN(d)||  Double.isInfinite(c)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(c!=  null  ||!Double.isNaN(d)||  Double.isInfinite(c)||!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c!=  null  ||!Double.isNaN(d)||  Double.isInfinite(c)||!Double.isNaN(d))  {	  if(!Double.isNaN(d)||    Double.isInfinite(c)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
449	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d)||  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d)||  Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
450	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  NodeUtil.mayHaveSideEffects(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  NodeUtil.mayHaveSideEffects(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  NodeUtil.mayHaveSideEffects(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isInfinite(d)||    NodeUtil.isFunction(d))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
451	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  NodeUtil.isLatin(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  NodeUtil.isLatin(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  NodeUtil.isLatin(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isInfinite(d)||    NodeUtil.isFunction(d))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
452	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  NodeUtil.isLetter(d))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  NodeUtil.isLetter(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  NodeUtil.isLetter(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isInfinite(d)||    NodeUtil.isFunction(d))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
453	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  NodeUtil.isLocal(d))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  NodeUtil.isLocal(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  NodeUtil.isLocal(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isInfinite(d)||    NodeUtil.isFunction(d))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
454	[BUG]  [BUGGY]  if(Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isInfinite(d))  {	  if(!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
455	[BUG]  [BUGGY]  if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isLetter(d))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isLetter(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isLetter(d))  {	  if(!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
456	[BUG]  [BUGGY]  if(Double.isInfinite(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isInfinite(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isInfinite(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d))  {	  if(Double.isInfinite(d)||    Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
457	[BUG]  [BUGGY]  if(Double.isInfinite(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isFunction(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isInfinite(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isFunction(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isInfinite(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isFunction(d))  {	  if(Double.isInfinite(d)||    Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
458	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isLetter(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isLetter(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isLetter(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    NodeUtil.isFunction(d))    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
459	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isLatin(d))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isLatin(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isLatin(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    NodeUtil.isFunction(d))    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
460	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.mayHaveSideEffects(d))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.mayHaveSideEffects(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.mayHaveSideEffects(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    NodeUtil.isFunction(d))    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
461	[BUG]  [BUGGY]  Context  c  =  getCurrentContext().getCurrentStatement();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  c  =  getCurrentContext().getCurrentStatement();  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  c  =  getCurrentContext().getCurrentStatement();	  Context    c    =    getCurrentContext();    	non-compiled	[CE]  	21	None	replace
462	[BUG]  [BUGGY]  Context  c  =  getCurrentContext().getCurrentNode();  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  c  =  getCurrentContext().getCurrentNode();  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  c  =  getCurrentContext().getCurrentNode();	  Context    c    =    getCurrentContext();    	non-compiled	[CE]  	21	None	replace
463	[BUG]  [BUGGY]  Context  c  =  getCurrentStatementContext();  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  c  =  getCurrentStatementContext();  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  c  =  getCurrentStatementContext();	  Context    c    =    getCurrentContext();    	non-compiled	[CE]  	21	None	replace
464	[BUG]  [BUGGY]  if(Double.isNaN(d)&&  Double.isNaN(d)&&!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)&&  Double.isNaN(d)&&!Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&  Double.isNaN(d)&&!Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
465	[BUG]  [BUGGY]  if(Double.isNaN(d)&&  Double.isInfinite(d)&&  isSimpleNumber(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)&&  Double.isInfinite(d)&&  isSimpleNumber(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&  Double.isInfinite(d)&&  isSimpleNumber(d))  {	  if(!Double.isNaN(d)||    Double.isInfinite(d)&&    isSimpleNumber(d))    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
466	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isLetter(d)&&  isSimpleNumber(d))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isLetter(d)&&  isSimpleNumber(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isLetter(d)&&  isSimpleNumber(d))  {	  if(!Double.isNaN(d)||    Double.isInfinite(d)&&    isSimpleNumber(d))    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
467	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(d)||  Character.isDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(d)||  Character.isDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(d)||  Character.isDigit(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isLetterOrDigit(d))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
468	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&  Double.isInfinite(d)&&  Double.isLetterOrDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)&&  Double.isInfinite(d)&&  Double.isLetterOrDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&  Double.isInfinite(d)&&  Double.isLetterOrDigit(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isLetterOrDigit(d))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
469	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(d)||  NodeUtil.isLatin(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(d)||  NodeUtil.isLatin(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(d)||  NodeUtil.isLatin(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isLetterOrDigit(d))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
470	[BUG]  [BUGGY]  if(Double.isNaN(d)||!Double.isNaN(d)&&!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||!Double.isNaN(d)&&!Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||!Double.isNaN(d)&&!Double.isInfinite(d))  {	  if(Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
471	[BUG]  [BUGGY]  Context  cc  =  context.createContext(n);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  cc  =  context.createContext(n);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  cc  =  context.createContext(n);	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  	99	None	replace
472	[BUG]  [BUGGY]  if(Double.isNaN(d)&&  NodeUtil.isLatin(n))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)&&  NodeUtil.isLatin(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&  NodeUtil.isLatin(n))  {	  if(Double.isNaN(d)&&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
473	[BUG]  [BUGGY]  if(Double.isNaN(d)&&  NodeUtil.isImmutableValue(n))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)&&  NodeUtil.isImmutableValue(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&  NodeUtil.isImmutableValue(n))  {	  if(Double.isNaN(d)&&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
474	[BUG]  [BUGGY]  if(Double.isNaN(d)&&  NodeUtil.isLetter(n)&&  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)&&  NodeUtil.isLetter(n)&&  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&  NodeUtil.isLetter(n)&&  Double.isInfinite(d))  {	  if(Double.isNaN(d)&&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
475	[BUG]  [BUGGY]  if(Double.isNaN(d)&&  NodeUtil.isLetter(n)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)&&  NodeUtil.isLetter(n)||  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&  NodeUtil.isLetter(n)||  Double.isInfinite(d))  {	  if(Double.isNaN(d)&&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
476	[BUG]  [BUGGY]  if(Double.isNaN(d)&&  NodeUtil.isFunction(n))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)&&  NodeUtil.isFunction(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&  NodeUtil.isFunction(n))  {	  if(Double.isNaN(d)&&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
477	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Character.isLetter(d)||  Character.isDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Character.isLetter(d)||  Character.isDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Character.isLetter(d)||  Character.isDigit(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    Character.isDigit(d))    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
478	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&  Double.isInfinite(d)&&  Double.isInfinite(d)&&  Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)&&  Double.isInfinite(d)&&  Double.isInfinite(d)&&  Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&  Double.isInfinite(d)&&  Double.isInfinite(d)&&  Double.isNaN(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isInfinite(d)||    Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
479	[BUG]  [BUGGY]  if(Double.isNaN(d)&&  Double.isInfinite(d)&&  Double.isInfinite(d)&&  Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)&&  Double.isInfinite(d)&&  Double.isInfinite(d)&&  Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&  Double.isInfinite(d)&&  Double.isInfinite(d)&&  Double.isNaN(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isInfinite(d)||    Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
480	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isInfinite(d)||    Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
481	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  Double.isNaN(d)||  Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  Double.isNaN(d)||  Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  Double.isNaN(d)||  Double.isNaN(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isInfinite(d)||    Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
482	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLetter(d)||  Double.isInfinite(d)||  Double.isLetter(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLetter(d)||  Double.isInfinite(d)||  Double.isLetter(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLetter(d)||  Double.isInfinite(d)||  Double.isLetter(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    Double.isLetter(d))    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
483	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(d)||  Double.isLetterOrDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(d)||  Double.isLetterOrDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(d)||  Double.isLetterOrDigit(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    Double.isLetter(d))    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
484	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLetter(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLetter(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLetter(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    Double.isLetter(d))    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
485	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLetter(d))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLetter(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLetter(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    Double.isLetter(d))    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
486	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().getCurrentStatement();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  cc  =  getCurrentContext().getCurrentStatement();  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  cc  =  getCurrentContext().getCurrentStatement();	  Context    cc    =    getCurrentContext();    	non-compiled	[CE]  	98	None	replace
487	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().getCurrentNode();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  cc  =  getCurrentContext().getCurrentNode();  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  cc  =  getCurrentContext().getCurrentNode();	  Context    cc    =    getCurrentContext();    	non-compiled	[CE]  	98	None	replace
488	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextIn();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  cc  =  getCurrentContextIn();  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  cc  =  getCurrentContextIn();	  Context    cc    =    getCurrentContext();    	non-compiled	[CE]  	98	None	replace
489	[BUG]  [BUGGY]  if(Double.isInfinite(d)&&  Double.isNaN(d)&&!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isInfinite(d)&&  Double.isNaN(d)&&!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isInfinite(d)&&  Double.isNaN(d)&&!Double.isNaN(d))  {	  if(Double.isInfinite(d)||    Double.isNaN(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
490	[BUG]  [BUGGY]  if(Double.isInfinite(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isInfinite(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isInfinite(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {	  if(Double.isInfinite(d)||    Double.isNaN(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
491	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.mayHaveSideEffects(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.mayHaveSideEffects(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.mayHaveSideEffects(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    NodeUtil.isFunction(d))    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
492	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isLatin(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isLatin(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isLatin(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    NodeUtil.isFunction(d))    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
493	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isLetter(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isLetter(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isLetter(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    NodeUtil.isFunction(d))    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
494	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Character.isDigit(d)||  Character.isLetterOrDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Character.isDigit(d)||  Character.isLetterOrDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Character.isDigit(d)||  Character.isLetterOrDigit(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    Character.isLetterOrDigit(d))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
495	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Character.isLetterOrDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Character.isLetterOrDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Character.isLetterOrDigit(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    Character.isLetterOrDigit(d))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
496	[BUG]  [BUGGY]  if(c.isQuotedString()  &&!TokenStream.isKeyword(d)&&  TokenStream.isJSIdentifier(d)&&  NodeUtil.isLatin(n))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(c.isQuotedString()  &&!TokenStream.isKeyword(d)&&  TokenStream.isJSIdentifier(d)&&  NodeUtil.isLatin(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c.isQuotedString()  &&!TokenStream.isKeyword(d)&&  TokenStream.isJSIdentifier(d)&&  NodeUtil.isLatin(n))  {	  if(c.isQuotedString()    &&!TokenStream.isKeyword(key)    &&    TokenStream.isJSIdentifier(key)    &&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
497	[BUG]  [BUGGY]  if(c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(d)&&  NodeUtil.isLatin(n))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(d)&&  NodeUtil.isLatin(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(d)&&  NodeUtil.isLatin(n))  {	  if(c.isQuotedString()    &&!TokenStream.isKeyword(key)    &&    TokenStream.isJSIdentifier(key)    &&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
498	[BUG]  [BUGGY]  if(c!=  null  &&!Double.isNaN(d)&&  Double.isInfinite(c))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(c!=  null  &&!Double.isNaN(d)&&  Double.isInfinite(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c!=  null  &&!Double.isNaN(d)&&  Double.isInfinite(c))  {	  if(c!=    null    &&!Double.isNaN(d)||    Double.isInfinite(c))    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
499	[BUG]  [BUGGY]  if(d!=  null  &&!Double.isNaN(d)&&  Double.isInfinite(c))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d!=  null  &&!Double.isNaN(d)&&  Double.isInfinite(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d!=  null  &&!Double.isNaN(d)&&  Double.isInfinite(c))  {	  if(c!=    null    &&!Double.isNaN(d)||    Double.isInfinite(c))    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
500	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(d)||!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(d)||!Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isInfinite(d)||!Double.isInfinite(d))  {	  if(!Double.isNaN(d)||    Double.isNaN(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
501	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)||  double.isInfinite(d))  {  [CE]  class  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)||  double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isNaN(d)||  double.isInfinite(d))  {	  if(!Double.isNaN(d)||    Double.isNaN(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  class  expected	107	None	replace
502	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isUpperCase(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isUpperCase(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isUpperCase(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isLetterOrDigit(d)||!Double.isNaN(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
503	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isInfinite  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isInfinite  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isInfinite	  if(Double.isNaN(d)||    Double.isInfinite(d)||!Double.isNaN(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  	57	None	replace
504	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(d)||  Character.isDigit(d)||  Character.isLetter(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(d)||  Character.isDigit(d)||  Character.isLetter(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isInfinite(d)||  Character.isDigit(d)||  Character.isLetter(d))  {	  if(!Double.isNaN(d)||    Double.isInfinite(d)||    Character.isLetter(d))    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
505	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isInfinite  [CE]  [FE]            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isInfinite  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isInfinite	  if(Double.isNaN(d)||    Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  	59	None	replace
506	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isInfinite(d)  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isInfinite(d)  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isInfinite(d)	  if(Double.isNaN(d)||    Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  	59	None	replace
507	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isInfinite(  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isInfinite(  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isInfinite(	  if(Double.isNaN(d)||    Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  	59	None	replace
508	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
509	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d))  {	  if(!Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
510	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Character.isDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Character.isDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Character.isDigit(d))  {	  if(!Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
511	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d))  {	  if(!Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
512	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&  Double.isNaN(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)&&  Double.isNaN(d)||  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&  Double.isNaN(d)||  Double.isInfinite(d))  {	  if(!Double.isNaN(d)&&    Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
513	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&  Double.isNaN(d)||  double.isInfinite(d))  {  [CE]  class  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)&&  Double.isNaN(d)||  double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&  Double.isNaN(d)||  double.isInfinite(d))  {	  if(!Double.isNaN(d)&&    Double.isNaN(d))    {    	non-compiled	[CE]  class  expected	7	None	replace
514	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isLongBoolean  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isLongBoolean  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isLongBoolean	  if(Double.isNaN(d)||    Double.isNaN(d)||!Double.isNaN(d)||!Double.isLongBoolean(d))    {    	non-compiled	[CE]  	95	None	replace
515	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&  Double.isInfinite(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)&&  Double.isInfinite(d)||  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&  Double.isInfinite(d)||  Double.isInfinite(d))  {	  if(!Double.isNaN(d)&&    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
516	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
517	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&  Double.isInfinite(d)&&  Double.isNaN(d)&&  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)&&  Double.isInfinite(d)&&  Double.isNaN(d)&&  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&  Double.isInfinite(d)&&  Double.isNaN(d)&&  Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
518	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d)||  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d)||  Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
519	[BUG]  [BUGGY]  if(Double.isNaN(d)&&  Double.isInfinite(d)&&  Character.isDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)&&  Double.isInfinite(d)&&  Character.isDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&  Double.isInfinite(d)&&  Character.isDigit(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Character.isDigit(d))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
520	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Character.isJavaIdentifier(d))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Character.isJavaIdentifier(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Character.isJavaIdentifier(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Character.isDigit(d))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
521	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLongBoolean(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLongBoolean(d)||  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLongBoolean(d)||  Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isLongBoolean(d))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
522	[BUG]  [BUGGY]  if(Double.isNaN(d)&&  Double.isNaN(d)&&  Double.isLongBoolean(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)&&  Double.isNaN(d)&&  Double.isLongBoolean(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&  Double.isNaN(d)&&  Double.isLongBoolean(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isLongBoolean(d))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
523	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLongBoolean(d)||  Long.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLongBoolean(d)||  Long.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLongBoolean(d)||  Long.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isLongBoolean(d))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
524	[BUG]  [BUGGY]  double  c  =  getSimpleNumber(last);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  double  c  =  getSimpleNumber(last);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	double  c  =  getSimpleNumber(last);	  double    c    =    getSimpleNumber(key);    	non-compiled	[CE]  	68	None	replace
525	[BUG]  [BUGGY]  double  c  =  getSimpleNumber(fn);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  double  c  =  getSimpleNumber(fn);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	double  c  =  getSimpleNumber(fn);	  double    c    =    getSimpleNumber(key);    	non-compiled	[CE]  	68	None	replace
526	[BUG]  [BUGGY]  double  c  =  getSimplePosition(n);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  double  c  =  getSimplePosition(n);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	double  c  =  getSimplePosition(n);	  double    c    =    getSimpleNumber(key);    	non-compiled	[CE]  	68	None	replace
527	[BUG]  [BUGGY]  if(c  ==  null  &&!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetter(n))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(c  ==  null  &&!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetter(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c  ==  null  &&!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetter(n))  {	  if(d!=    null    ||!c.isQuotedString()    &&!Double.isNaN(d)&&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
528	[BUG]  [BUGGY]  if(d  >=  0  ||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d  >=  0  ||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d  >=  0  ||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))  {	  if(d    <    0    ||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
529	[BUG]  [BUGGY]  if(Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isNaN(d))  {	  if(!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
530	[BUG]  [BUGGY]  double  d  =  getSimplePosition(c);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  double  d  =  getSimplePosition(c);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	double  d  =  getSimplePosition(c);	  double    d    =    getSimpleNumber(c);    	non-compiled	[CE]  	18	None	replace
531	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  Double.isLongBoolean(d))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  Double.isLongBoolean(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  Double.isLongBoolean(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isLongBoolean(d))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
532	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isLongBoolean(d)||  Double.isInfinite(d)||  Double.isLongBoolean(d))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isLongBoolean(d)||  Double.isInfinite(d)||  Double.isLongBoolean(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isLongBoolean(d)||  Double.isInfinite(d)||  Double.isLongBoolean(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isLongBoolean(d))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
533	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&  Double.isInfinite(d)&&  Double.isLongBoolean(d))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)&&  Double.isInfinite(d)&&  Double.isLongBoolean(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&  Double.isInfinite(d)&&  Double.isLongBoolean(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isLongBoolean(d))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
534	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isBoolean(d))  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isBoolean(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isBoolean(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isLongBoolean(d))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
535	[BUG]  [BUGGY]  if(Double.isNaN(d)&&  Double.isInfinite(c)&&!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)&&  Double.isInfinite(c)&&!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&  Double.isInfinite(c)&&!Double.isNaN(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(c)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
536	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isLetter(c)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isLetter(c)||!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isLetter(c)||!Double.isNaN(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(c)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
537	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(c)||!Double.isNaN(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(c)||!Double.isNaN(d)||!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(c)||!Double.isNaN(d)||!Double.isNaN(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(c)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
538	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(c)||!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(c)||!Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(c)||!Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(c)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
539	[BUG]  [BUGGY]  double  d  =  getSimpleNumber(first);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  double  d  =  getSimpleNumber(first);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	double  d  =  getSimpleNumber(first);	  double    d    =    getSimpleNumber(n);    	non-compiled	[CE]  	69	None	replace
540	[BUG]  [BUGGY]  double  d  =  getSimplePosition(n);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  double  d  =  getSimplePosition(n);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	double  d  =  getSimplePosition(n);	  double    d    =    getSimpleNumber(n);    	non-compiled	[CE]  	69	None	replace
541	[BUG]  [BUGGY]  double  d  =  getSimpleNumber(childCount);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  double  d  =  getSimpleNumber(childCount);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	double  d  =  getSimpleNumber(childCount);	  double    d    =    getSimpleNumber(n);    	non-compiled	[CE]  	69	None	replace
542	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLetter(d)||  Double.isInfinite(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLetter(d)||  Double.isInfinite(d)||  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLetter(d)||  Double.isInfinite(d)||  Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
543	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
544	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)||  Character.isLetter(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)||  Character.isLetter(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isNaN(d)||  Character.isLetter(d))  {	  if(!Double.isNaN(d)||    Double.isNaN(d)||    Character.isDigit(d))    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
545	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)||  Character.isWhitespace(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)||  Character.isWhitespace(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isNaN(d)||  Character.isWhitespace(d))  {	  if(!Double.isNaN(d)||    Double.isNaN(d)||    Character.isDigit(d))    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
546	[BUG]  [BUGGY]  if(Double.isNaN(d)||  NodeUtil.isLetter(n)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  NodeUtil.isLetter(n)||  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  NodeUtil.isLetter(n)||  Double.isInfinite(d))  {	  if(Double.isNaN(d)||    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
547	[BUG]  [BUGGY]  if(Double.isNaN(d)||  NodeUtil.isLatin(n))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  NodeUtil.isLatin(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  NodeUtil.isLatin(n))  {	  if(Double.isNaN(d)||    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
548	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(n))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(n))  {	  if(Double.isNaN(d)||    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
549	[BUG]  [BUGGY]  if(!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetterOrDigit(n,  c))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetterOrDigit(n,  c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetterOrDigit(n,  c))  {	  if(!c.isQuotedString()    &&!Double.isNaN(d)&&    NodeUtil.isLetterOrDigit(n))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
550	[BUG]  [BUGGY]  if(d!=  null  ||!Double.isNaN(d)&&  Double.isInfinite(c))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d!=  null  ||!Double.isNaN(d)&&  Double.isInfinite(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d!=  null  ||!Double.isNaN(d)&&  Double.isInfinite(c))  {	  if(c    ==    null    ||!Double.isNaN(d)||    Double.isInfinite(c))    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
551	[BUG]  [BUGGY]  if(d  >=  0  ||!Double.isNaN(d)||  Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d  >=  0  ||!Double.isNaN(d)||  Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d  >=  0  ||!Double.isNaN(d)||  Double.isNaN(d))  {	  if(d    <    0    ||!Double.isNaN(d)||    Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
552	[BUG]  [BUGGY]  Context  c  =  getContextForNode(context);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  c  =  getContextForNode(context);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  c  =  getContextForNode(context);	  Context    c    =    context.getContext();    	non-compiled	[CE]  	16	None	replace
553	[BUG]  [BUGGY]  if(Double.isNaN(d)&&  Double.isInfinite(d)&&!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)&&  Double.isInfinite(d)&&!Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&  Double.isInfinite(d)&&!Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
554	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||!Double.isInfinite(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||!Double.isInfinite(d)||!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||!Double.isInfinite(d)||!Double.isNaN(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
555	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&!Double.isNaN(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)&&!Double.isNaN(d)||  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&!Double.isNaN(d)||  Double.isInfinite(d))  {	  if(!Double.isNaN(d)&&!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
556	[BUG]  [BUGGY]  if(Double.isNaN(d)&&  Double.isInfinite(c)||  Character.isLetter(c))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)&&  Double.isInfinite(c)||  Character.isLetter(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&  Double.isInfinite(c)||  Character.isLetter(c))  {	  if(Double.isNaN(d)&&    Double.isInfinite(c))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
557	[BUG]  [BUGGY]  if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfini  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfini  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfini	  if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  	88	None	replace
558	[BUG]  [BUGGY]  if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite	  if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  	88	None	replace
559	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isInfini  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isInfini  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isInfini	  if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  	88	None	replace
560	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Float.isNaN(d)||  Float.isInfinite(d)||  Float.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Float.isNaN(d)||  Float.isInfinite(d)||  Float.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Float.isNaN(d)||  Float.isInfinite(d)||  Float.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Float.isNaN(d)||    Float.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
561	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Float.isInfinite(d)||  Float.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Float.isInfinite(d)||  Float.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Float.isInfinite(d)||  Float.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Float.isNaN(d)||    Float.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
562	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&  Double.isInfinite(d)&&  Float.isNaN(d)&&  Float.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)&&  Double.isInfinite(d)&&  Float.isNaN(d)&&  Float.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&  Double.isInfinite(d)&&  Float.isNaN(d)&&  Float.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Float.isNaN(d)||    Float.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
563	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Character.isDigit(d)||  Float.isInfinite(d)||  Float.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Character.isDigit(d)||  Float.isInfinite(d)||  Float.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Character.isDigit(d)||  Float.isInfinite(d)||  Float.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Float.isNaN(d)||    Float.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
564	[BUG]  [BUGGY]  cc.addPosition(d);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  cc.addPosition(d);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	cc.addPosition(d);	  cc.addNumber(d);    	non-compiled	[CE]  	17	None	replace
565	[BUG]  [BUGGY]  c.add(d);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  c.add(d);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	c.add(d);	  cc.addNumber(d);    	non-compiled	[CE]  	17	None	replace
566	[BUG]  [BUGGY]  if(c!=  null  &&!Double.isNaN(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(c!=  null  &&!Double.isNaN(d)||  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c!=  null  &&!Double.isNaN(d)||  Double.isInfinite(d))  {	  if(!Double.isNaN(c)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
567	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d)||  NodeUtil.isFunction(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d)||  NodeUtil.isFunction(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d)||  NodeUtil.isFunction(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
568	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d)||  NodeUtil.isLong(d))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d)||  NodeUtil.isLong(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d)||  NodeUtil.isLong(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
569	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&  Double.isInfinite(d)&&  Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)&&  Double.isInfinite(d)&&  Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&  Double.isInfinite(d)&&  Double.isNaN(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
570	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  isBoolean(d))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  isBoolean(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  isBoolean(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    isSimpleNumber(d))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
571	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  isJSIdentifier(d))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  isJSIdentifier(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  isJSIdentifier(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    isSimpleNumber(d))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
572	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  isLocal(d))  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  isLocal(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  isLocal(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    isSimpleNumber(d))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
573	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  isUnknownNumber(d))  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  isUnknownNumber(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  isUnknownNumber(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    isSimpleNumber(d))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
574	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  isLong(d))  {  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  isLong(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  isLong(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    isSimpleNumber(d))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
575	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  isLocalToJavaIdentifier(d))  {  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  isLocalToJavaIdentifier(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  isLocalToJavaIdentifier(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    isSimpleNumber(d))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
576	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(c)||  Character.isLetter(c))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(c)||  Character.isLetter(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isInfinite(c)||  Character.isLetter(c))  {	  if(!Double.isNaN(d)||    Double.isInfinite(c)||    Character.isDigit(c))    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
577	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(c)||  Character.isWhitespace(c))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(c)||  Character.isWhitespace(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isInfinite(c)||  Character.isWhitespace(c))  {	  if(!Double.isNaN(d)||    Double.isInfinite(c)||    Character.isDigit(c))    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
578	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(c)||  Character.isDigit(c))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(c)||  Character.isDigit(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(c)||  Character.isDigit(c))  {	  if(!Double.isNaN(d)||    Double.isInfinite(c)||    Character.isDigit(c))    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
579	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(c)||  Character.isDigit(n))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(c)||  Character.isDigit(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isInfinite(c)||  Character.isDigit(n))  {	  if(!Double.isNaN(d)||    Double.isInfinite(c)||    Character.isDigit(c))    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
580	[BUG]  [BUGGY]  Context  c  =  getContextForNoChild(n);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  c  =  getContextForNoChild(n);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  c  =  getContextForNoChild(n);	  Context    c    =    getContext();    	non-compiled	[CE]  	20	None	replace
581	[BUG]  [BUGGY]  Context  c  =  getContextForNoInOperator(context);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  c  =  getContextForNoInOperator(context);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  c  =  getContextForNoInOperator(context);	  Context    c    =    getContext();    	non-compiled	[CE]  	20	None	replace
582	[BUG]  [BUGGY]  if(Double.isNaN(d)&&!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)&&!Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&!Double.isInfinite(d))  {	  if(!Double.isNaN(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
583	[BUG]  [BUGGY]  if(d  <  0  ||!Double.isNaN(d)||!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d  <  0  ||!Double.isNaN(d)||!Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d  <  0  ||!Double.isNaN(d)||!Double.isInfinite(d))  {	  if(!Double.isNaN(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
584	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&  Double.isInfinite(d)&&  Double.isInfinite(d)&&  Double.isInfinite(d)&&  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)&&  Double.isInfinite(d)&&  Double.isInfinite(d)&&  Double.isInfinite(d)&&  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&  Double.isInfinite(d)&&  Double.isInfinite(d)&&  Double.isInfinite(d)&&  Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isInfinite(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
585	[BUG]  [BUGGY]  if(d!=  null  ||!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLatin(n))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d!=  null  ||!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLatin(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d!=  null  ||!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLatin(n))  {	  if(c.isQuotedString()    &&!Double.isNaN(d)&&    NodeUtil.isLatin(n))    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
586	[BUG]  [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  NodeUtil.isLatin(n))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  NodeUtil.isLatin(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  NodeUtil.isLatin(n))  {	  if(!c.isQuotedString()    &&!Double.isNaN(d)&&    NodeUtil.isLatin(n))    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
587	[BUG]  [BUGGY]  if(!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLeftOrRight(n))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLeftOrRight(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLeftOrRight(n))  {	  if(!c.isQuotedString()    &&!Double.isNaN(d)&&    NodeUtil.isLatin(n))    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
588	[BUG]  [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)  &&  NodeUtil.isLatin(n))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)  &&  NodeUtil.isLatin(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)  &&  NodeUtil.isLatin(n))  {	  if(!c.isQuotedString()    &&!Double.isNaN(d)&&    NodeUtil.isLatin(n))    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
589	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isEmpty(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isEmpty(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isEmpty(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    NodeUtil.isFunction(d))    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
590	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isSameAssignmentOp(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isSameAssignmentOp(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isSameAssignmentOp(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    NodeUtil.isFunction(d))    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
591	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isVar(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isVar(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isVar(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    NodeUtil.isFunction(d))    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
592	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  getSimpleNumber(d)!=  1)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  getSimpleNumber(d)!=  1)  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  getSimpleNumber(d)!=  1)  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    getSimpleNumber(d)!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
593	[BUG]  [BUGGY]  if(Double.isNaN(d)&&  Double.isNaN(d)||  Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)&&  Double.isNaN(d)||  Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&  Double.isNaN(d)||  Double.isNaN(d))  {	  if(Double.isNaN(d)&&    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
594	[BUG]  [BUGGY]  if(!Character.isDigit(d)&&  Double.isNaN(d)&&  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Character.isDigit(d)&&  Double.isNaN(d)&&  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Character.isDigit(d)&&  Double.isNaN(d)&&  Double.isInfinite(d))  {	  if(Double.isNaN(d)&&    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
595	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)&&  isSimpleNumber(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)&&  isSimpleNumber(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)&&  isSimpleNumber(d))  {	  if(!Double.isNaN(d)||    Double.isInfinite(d)&&    isSimpleNumber(d))    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
596	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
597	[BUG]  [BUGGY]  if(c!=  null  &&!Double.isNaN(d)||  Double.isInfinite(c)||  Character.isDigit(c))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(c!=  null  &&!Double.isNaN(d)||  Double.isInfinite(c)||  Character.isDigit(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c!=  null  &&!Double.isNaN(d)||  Double.isInfinite(c)||  Character.isDigit(c))  {	  if(!Double.isNaN(d)||    Double.isInfinite(c)||    Character.isDigit(c))    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
598	[BUG]  [BUGGY]  Context  c  =  getCurrentContextForNoInOperator(context);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  c  =  getCurrentContextForNoInOperator(context);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  c  =  getCurrentContextForNoInOperator(context);	  Context    c    =    getCurrentContext();    	non-compiled	[CE]  	21	None	replace
599	[BUG]  [BUGGY]  Context  c  =  getCurrentContextInstance();  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  c  =  getCurrentContextInstance();  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  c  =  getCurrentContextInstance();	  Context    c    =    getCurrentContext();    	non-compiled	[CE]  	21	None	replace
600	[BUG]  [BUGGY]  if(Double.isNaN(d)&&  NodeUtil.isLetter(n)&&  Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)&&  NodeUtil.isLetter(n)&&  Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&  NodeUtil.isLetter(n)&&  Double.isNaN(d))  {	  if(Double.isNaN(d)&&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
601	[BUG]  [BUGGY]  if(Double.isNaN(d)&&  NodeUtil.isLetter(n)&&  Double.isNaN(c))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)&&  NodeUtil.isLetter(n)&&  Double.isNaN(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&  NodeUtil.isLetter(n)&&  Double.isNaN(c))  {	  if(Double.isNaN(d)&&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
602	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isSingleNode(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isSingleNode(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isSingleNode(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    NodeUtil.isFunction(d))    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
603	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isSameAssignmentOp(d))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isSameAssignmentOp(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isSameAssignmentOp(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    NodeUtil.isFunction(d))    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
604	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isSameAssign(d))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isSameAssign(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isSameAssign(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    NodeUtil.isFunction(d))    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
605	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&  Double.isNaN(c))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)&&  Double.isNaN(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&  Double.isNaN(c))  {	  if(!Double.isNaN(d)&&    Double.isInfinite(c))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
606	[BUG]  [BUGGY]  if(d!=  0  ||!Double.isNaN(d)||  Double.isInfinite(c))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d!=  0  ||!Double.isNaN(d)||  Double.isInfinite(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d!=  0  ||!Double.isNaN(d)||  Double.isInfinite(c))  {	  if(c    ==    null    ||!Double.isNaN(d)||    Double.isInfinite(c))    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
607	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isLetter(c)||!Double.isNaN(d)||!Double.isNaN(c))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isLetter(c)||!Double.isNaN(d)||!Double.isNaN(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isLetter(c)||!Double.isNaN(d)||!Double.isNaN(c))  {	  if(!Double.isNaN(d)||    Double.isInfinite(c)||!Double.isNaN(d)||!Double.isNaN(c))    {    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
608	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(c)||!Double.isNaN(d)||!Double.isInfinite(c))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(c)||!Double.isNaN(d)||!Double.isInfinite(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isNaN(c)||!Double.isNaN(d)||!Double.isInfinite(c))  {	  if(!Double.isNaN(d)||    Double.isInfinite(c)||!Double.isNaN(d)||!Double.isNaN(c))    {    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
609	[BUG]  [BUGGY]  if(c!=  null  &&!Double.isNaN(d)||  Double.isInfinite(c)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(c!=  null  &&!Double.isNaN(d)||  Double.isInfinite(c)||!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c!=  null  &&!Double.isNaN(d)||  Double.isInfinite(c)||!Double.isNaN(d))  {	  if(!Double.isNaN(d)||    Double.isInfinite(c)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
610	[BUG]  [BUGGY]  Context  c  =(context  ==  null)?  context.getCurrentContext()  :  context.getCurrentContext();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  c  =(context  ==  null)?  context.getCurrentContext()  :  context.getCurrentContext();  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  c  =(context  ==  null)?  context.getCurrentContext()  :  context.getCurrentContext();	  Context    c    =    context.getCurrentContext();    	non-compiled	[CE]  	15	None	replace
611	[BUG]  [BUGGY]  Context  c  =(context  ==  null)?  context.getCurrentContext()  :  context;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  c  =(context  ==  null)?  context.getCurrentContext()  :  context;  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  c  =(context  ==  null)?  context.getCurrentContext()  :  context;	  Context    c    =    context.getCurrentContext();    	non-compiled	[CE]  	15	None	replace
612	[BUG]  [BUGGY]  Context  c  =(context  ==  null)?  context.getCurrentContext()  :  context.getRootContext();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  c  =(context  ==  null)?  context.getCurrentContext()  :  context.getRootContext();  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  c  =(context  ==  null)?  context.getCurrentContext()  :  context.getRootContext();	  Context    c    =    context.getCurrentContext();    	non-compiled	[CE]  	15	None	replace
613	[BUG]  [BUGGY]  Context  c  =(context  ==  null)?  context.getCurrentContext()  :  context.getRawContext();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  c  =(context  ==  null)?  context.getCurrentContext()  :  context.getRawContext();  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  c  =(context  ==  null)?  context.getCurrentContext()  :  context.getRawContext();	  Context    c    =    context.getCurrentContext();    	non-compiled	[CE]  	15	None	replace
614	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||!Double.isNaN(d))  {	  if(!Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
615	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)||  Double.isLong(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)||  Double.isLong(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isNaN(d)||  Double.isLong(d))  {	  if(!Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
616	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))  {	  if(!Double.isNaN(d)||    Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
617	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d)||!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d)||!Double.isNaN(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
618	[BUG]  [BUGGY]  if(n.isQuotedString()  &&!Double.isNaN(d)||  NodeUtil.isLetter(n))  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(n.isQuotedString()  &&!Double.isNaN(d)||  NodeUtil.isLetter(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(n.isQuotedString()  &&!Double.isNaN(d)||  NodeUtil.isLetter(n))  {	  if(c.isQuotedString()    &&!Double.isNaN(d)||    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
619	[BUG]  [BUGGY]  if(Double.isNaN(d)&&  Double.isNaN(d)||!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)&&  Double.isNaN(d)||!Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&  Double.isNaN(d)||!Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
620	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLetter(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLetter(d)||  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLetter(d)||  Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
621	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isFunction(d)||  Context.isFunction(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isFunction(d)||  Context.isFunction(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isFunction(d)||  Context.isFunction(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isInfinite(d)||    NodeUtil.isFunction(d))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
622	[BUG]  [BUGGY]  if(d  <  0  ||!Double.isNaN(d)||  Double.isInfinite(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d  <  0  ||!Double.isNaN(d)||  Double.isInfinite(d)||!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d  <  0  ||!Double.isNaN(d)||  Double.isInfinite(d)||!Double.isNaN(d))  {	  if(!Double.isNaN(d)||    Double.isInfinite(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
623	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isLetter(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isLetter(d)||!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isLetter(d)||!Double.isNaN(d))  {	  if(!Double.isNaN(d)||    Double.isInfinite(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
624	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isLongBoolean(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isLongBoolean(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isLongBoolean(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||!Double.isNaN(d)||!Double.isLongBoolean(d))    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
625	[BUG]  [BUGGY]  if(c.isQuotedString()  &&!TokenStream.isKeyword(key)  &&  NodeUtil.isLetterOp(n))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(c.isQuotedString()  &&!TokenStream.isKeyword(key)  &&  NodeUtil.isLetterOp(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c.isQuotedString()  &&!TokenStream.isKeyword(key)  &&  NodeUtil.isLetterOp(n))  {	  if(c.isQuotedString()    &&!Double.isNaN(d)&&    NodeUtil.isLetterOp(n))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
626	[BUG]  [BUGGY]  if(c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetterOp(n,  c))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetterOp(n,  c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetterOp(n,  c))  {	  if(c.isQuotedString()    &&!Double.isNaN(d)&&    NodeUtil.isLetterOp(n))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
627	[BUG]  [BUGGY]  if(c.isQuotedString()  &&!TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  NodeUtil.isLatin(n))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(c.isQuotedString()  &&!TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  NodeUtil.isLatin(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c.isQuotedString()  &&!TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  NodeUtil.isLatin(n))  {	  if(c.isQuotedString()    &&!Double.isNaN(d)&&    NodeUtil.isLatin(n))    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
628	[BUG]  [BUGGY]  if(c.isQuotedString()  &&!TokenStream.isKeyword(key)  &&  NodeUtil.isLatin(n))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(c.isQuotedString()  &&!TokenStream.isKeyword(key)  &&  NodeUtil.isLatin(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c.isQuotedString()  &&!TokenStream.isKeyword(key)  &&  NodeUtil.isLatin(n))  {	  if(c.isQuotedString()    &&!Double.isNaN(d)&&    NodeUtil.isLatin(n))    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
629	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Character.isLetterOrDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Character.isLetterOrDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Character.isLetterOrDigit(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    Character.isLetterOrDigit(d))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
630	[BUG]  [BUGGY]  Context  c  =  context.createChildContext(n);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  c  =  context.createChildContext(n);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  c  =  context.createChildContext(n);	  Context    c    =    context.getContext();    	non-compiled	[CE]  	16	None	replace
631	[BUG]  [BUGGY]  if(Double.isNaN(d)&&  Double.isInfinite(d)||!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)&&  Double.isInfinite(d)||!Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&  Double.isInfinite(d)||!Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
632	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isLetter(d)||  Double.isLetterOrDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isLetter(d)||  Double.isLetterOrDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isLetter(d)||  Double.isLetterOrDigit(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isLetterOrDigit(d))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
633	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(c)||  Double.isLetterOrDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(c)||  Double.isLetterOrDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(c)||  Double.isLetterOrDigit(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isLetterOrDigit(d))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
634	[BUG]  [BUGGY]  if(Double.isNaN(d)&&  Double.isNaN(d)||  Double.isNaN(c))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)&&  Double.isNaN(d)||  Double.isNaN(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&  Double.isNaN(d)||  Double.isNaN(c))  {	  if(Double.isNaN(d)&&    Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
635	[BUG]  [BUGGY]  if(d  <  0  ||!Double.isNaN(d)||  Double.isInfinite(d)||  Character.isDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d  <  0  ||!Double.isNaN(d)||  Double.isInfinite(d)||  Character.isDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d  <  0  ||!Double.isNaN(d)||  Double.isInfinite(d)||  Character.isDigit(d))  {	  if(!Double.isNaN(d)||    Double.isInfinite(d)||    Character.isDigit(d))    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
636	[BUG]  [BUGGY]  if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isLetter(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isLetter(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isLetter(d))  {	  if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
637	[BUG]  [BUGGY]  if(Double.isNaN(d)&&  Double.isLetterOrDigit(d)||!Double.isNaN(d)&&!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)&&  Double.isLetterOrDigit(d)||!Double.isNaN(d)&&!Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&  Double.isLetterOrDigit(d)||!Double.isNaN(d)&&!Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isLetterOrDigit(d)||!Double.isNaN(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
638	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||  ||!Double.isNaN(d)||!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||  ||!Double.isNaN(d)||!Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||  ||!Double.isNaN(d)||!Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isLetterOrDigit(d)||!Double.isNaN(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
639	[BUG]  [BUGGY]  cc.addToString(d);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  cc.addToString(d);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	cc.addToString(d);	  cc.addNumber(d);    	non-compiled	[CE]  	17	None	replace
640	[BUG]  [BUGGY]  if(d!=  null  &&!Double.isNaN(d)&&  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d!=  null  &&!Double.isNaN(d)&&  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d!=  null  &&!Double.isNaN(d)&&  Double.isInfinite(d))  {	  if(!Double.isNaN(d)&&    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
641	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&  Double.isInfinite(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)&&  Double.isInfinite(d)||!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&  Double.isInfinite(d)||!Double.isNaN(d))  {	  if(!Double.isNaN(d)&&    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
642	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isBoolean(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isBoolean(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isBoolean(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isInfinite(d)||    Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
643	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(d)||  Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(d)||  Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(d)||  Double.isNaN(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isInfinite(d)||    Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
644	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Character.isDigit(d)||!Character.isLetter(d))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Character.isDigit(d)||!Character.isLetter(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Character.isDigit(d)||!Character.isLetter(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Character.isDigit(d))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
645	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Character.isDigit(d)||!Character.isDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Character.isDigit(d)||!Character.isDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Character.isDigit(d)||!Character.isDigit(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Character.isDigit(d))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
646	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Float.isNaN(d)||  Float.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Float.isNaN(d)||  Float.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Float.isNaN(d)||  Float.isNaN(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Float.isNaN(d)||    Float.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
647	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Float.isNaN(d)||  Float.isNaN(d)||  Float.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Float.isNaN(d)||  Float.isNaN(d)||  Float.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Float.isNaN(d)||  Float.isNaN(d)||  Float.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Float.isNaN(d)||    Float.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
648	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Float.isNaN(d)||  Float.isLong(d))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Float.isNaN(d)||  Float.isLong(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Float.isNaN(d)||  Float.isLong(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Float.isNaN(d)||    Float.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
649	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Float.isNaN(d)||  Float.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Float.isNaN(d)||  Float.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Float.isNaN(d)||  Float.isNaN(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Float.isNaN(d)||    Float.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
650	[BUG]  [BUGGY]  if(c.isQuotedString()  &&!Double.isNaN(d)&&!Double.isInfinite(d)&&!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(c.isQuotedString()  &&!Double.isNaN(d)&&!Double.isInfinite(d)&&!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c.isQuotedString()  &&!Double.isNaN(d)&&!Double.isInfinite(d)&&!Double.isNaN(d))  {	  if(!Double.isNaN(d)&&!Double.isInfinite(d)&&!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
651	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Character.isLetter(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Character.isLetter(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Character.isLetter(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Character.isLetter(d))    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
652	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextInstance();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  cc  =  getCurrentContextInstance();  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  cc  =  getCurrentContextInstance();	  Context    cc    =    getCurrentContext();    	non-compiled	[CE]  	98	None	replace
653	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextForNoInOperator(context);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  cc  =  getCurrentContextForNoInOperator(context);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  cc  =  getCurrentContextForNoInOperator(context);	  Context    cc    =    getCurrentContext();    	non-compiled	[CE]  	98	None	replace
654	[BUG]  [BUGGY]  if(c.isQuotedString()  &&  Double.isNaN(d)&&  Double.isInfinite(c))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(c.isQuotedString()  &&  Double.isNaN(d)&&  Double.isInfinite(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c.isQuotedString()  &&  Double.isNaN(d)&&  Double.isInfinite(c))  {	  if(Double.isNaN(d)&&    Double.isInfinite(c))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
655	[BUG]  [BUGGY]  if(Double.isNaN(d)&&  Double.isInfinite(c)||!Double.isNaN(d)&&!Double.isNaN(c))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)&&  Double.isInfinite(c)||!Double.isNaN(d)&&!Double.isNaN(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&  Double.isInfinite(c)||!Double.isNaN(d)&&!Double.isNaN(c))  {	  if(Double.isNaN(d)&&    Double.isInfinite(c))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
656	[BUG]  [BUGGY]  if(Double.isNaN(d)&&  Double.isInfinite(c)||!Double.isNaN(d)&&  NodeUtil.isFunction(c))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)&&  Double.isInfinite(c)||!Double.isNaN(d)&&  NodeUtil.isFunction(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&  Double.isInfinite(c)||!Double.isNaN(d)&&  NodeUtil.isFunction(c))  {	  if(Double.isNaN(d)&&    Double.isInfinite(c))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
657	[BUG]  [BUGGY]  if(Double.isNaN(d)&&  Double.isInfinite(c)||!Double.isNaN(d)&&  NodeUtil.isLetter(c))  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)&&  Double.isInfinite(c)||!Double.isNaN(d)&&  NodeUtil.isLetter(c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&  Double.isInfinite(c)||!Double.isNaN(d)&&  NodeUtil.isLetter(c))  {	  if(Double.isNaN(d)&&    Double.isInfinite(c))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
658	[BUG]  [BUGGY]  if(Double.isNaN(d)&&  Double.isLetterOrDigit(d)||!Double.isNaN(d)&&!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)&&  Double.isLetterOrDigit(d)||!Double.isNaN(d)&&!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&  Double.isLetterOrDigit(d)||!Double.isNaN(d)&&!Double.isNaN(d))  {	  if(Double.isNaN(d)||    Double.isLetterOrDigit(d)||!Double.isNaN(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
659	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isLetterOrDigit(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
660	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&  Double.isLetterOrDigit(d)&&  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)&&  Double.isLetterOrDigit(d)&&  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&  Double.isLetterOrDigit(d)&&  Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isLetterOrDigit(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
661	[BUG]  [BUGGY]  if(Double.isNaN(d)&&  Double.isNaN(d)&&  Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)&&  Double.isNaN(d)&&  Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&  Double.isNaN(d)&&  Double.isNaN(d))  {	  if(Double.isNaN(d)&&    Double.isInfinite(d)&&    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
662	[BUG]  [BUGGY]  if(d  >=  null  &&!Double.isNaN(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(d  >=  null  &&!Double.isNaN(d)||  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d  >=  null  &&!Double.isNaN(d)||  Double.isInfinite(d))  {	  if(d!=    null    ||!Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
663	[BUG]  [BUGGY]  if(Double.isNaN(d)&&  Double.isNaN(d)&&  Double.isNaN(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)&&  Double.isNaN(d)&&  Double.isNaN(d)||  Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&  Double.isNaN(d)&&  Double.isNaN(d)||  Double.isInfinite(d))  {	  if(Double.isNaN(d)&&    Double.isNaN(d)&&    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
664	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isNaN(d)||  Double.isLongBoolean(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isNaN(d)||  Double.isLongBoolean(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isNaN(d)||  Double.isLongBoolean(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isLongBoolean(d))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
665	[BUG]  [BUGGY]  cc.addValue(new  Double(d));  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  cc.addValue(new  Double(d));  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	cc.addValue(new  Double(d));	  cc.add(new    Double(d));    	non-compiled	[CE]  	100	None	replace
666	[BUG]  [BUGGY]  Context  cc  =  getContextForNoInOperator();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  cc  =  getContextForNoInOperator();  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  cc  =  getContextForNoInOperator();	  Context    cc    =    getContext();    	non-compiled	[CE]  	101	None	replace
667	[BUG]  [BUGGY]  Context  c  =  getContextForNoInOperator();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  c  =  getContextForNoInOperator();  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  c  =  getContextForNoInOperator();	  Context    c    =    getContext();    	non-compiled	[CE]  	20	None	replace
668	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isLong(d))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isLong(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isLong(d))  {	  if(!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isLong(d))    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
669	[BUG]  [BUGGY]  if(Double.isNaN(d)||  NodeUtil.isSameAssign(n))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  NodeUtil.isSameAssign(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  NodeUtil.isSameAssign(n))  {	  if(Double.isNaN(d)||    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
670	[BUG]  [BUGGY]  if(Double.isNaN(d)&&  Double.isInfinite(d)||  isSimpleNumber(d))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)&&  Double.isInfinite(d)||  isSimpleNumber(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&  Double.isInfinite(d)||  isSimpleNumber(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    isSimpleNumber(d))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
671	[BUG]  [BUGGY]  if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isLetter(d)||!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isLetter(d)||!Double.isInfinite(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isLetter(d)||!Double.isInfinite(d))  {	  if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
672	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isNaN(d))  {	  if(Double.isInfinite(d)||    Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
673	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLetter(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLetter(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLetter(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isInfinite(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
674	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&  Double.isInfinite(d)||  Character.isLetter(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)&&  Double.isInfinite(d)||  Character.isLetter(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&  Double.isInfinite(d)||  Character.isLetter(d))  {	  if(!Double.isNaN(d)||    Double.isInfinite(d)||    Character.isLetter(d))    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
675	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&  Double.isNaN(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)&&  Double.isNaN(d)||!Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&  Double.isNaN(d)||!Double.isNaN(d))  {	  if(!Double.isNaN(d)&&    Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
676	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&  Double.isNaN(d)||  Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)&&  Double.isNaN(d)||  Double.isNaN(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&  Double.isNaN(d)||  Double.isNaN(d))  {	  if(!Double.isNaN(d)&&    Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
677	[BUG]  [BUGGY]  if(c  ==  null  ||!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetter(n))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(c  ==  null  ||!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetter(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c  ==  null  ||!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetter(n))  {	  if(d!=    null    ||!c.isQuotedString()    &&!Double.isNaN(d)&&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
678	[BUG]  [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)  &&  NodeUtil.isLetterOrDigit(n))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)  &&  NodeUtil.isLetterOrDigit(n))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)  &&  NodeUtil.isLetterOrDigit(n))  {	  if(!c.isQuotedString()    &&!Double.isNaN(d)&&    NodeUtil.isLetterOrDigit(n))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
679	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLongBoolean(d))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLongBoolean(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLongBoolean(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isLongBoolean(d))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
680	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(c)||  Double.isLongBoolean(d))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(c)||  Double.isLongBoolean(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(c)||  Double.isLongBoolean(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isLongBoolean(d))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
681	[BUG]  [BUGGY]  Context  cc  =(context  ==  null)?  context.getCurrentContext()  :  context.getRootContext();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  Context  cc  =(context  ==  null)?  context.getCurrentContext()  :  context.getRootContext();  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  cc  =(context  ==  null)?  context.getCurrentContext()  :  context.getRootContext();	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  	99	None	replace
682	[BUG]  [BUGGY]  double  c  =  getSimpleName(key);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  double  c  =  getSimpleName(key);  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	double  c  =  getSimpleName(key);	  double    c    =    getSimpleNumber(key);    	non-compiled	[CE]  	68	None	replace
683	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(c)||  Character.isLetterOrDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(c)||  Character.isLetterOrDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(c)||  Character.isLetterOrDigit(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Character.isLetterOrDigit(d))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
684	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Character.isVowel(d))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Character.isVowel(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Character.isVowel(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Character.isLetterOrDigit(d))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
685	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&  Double.isNaN(d)||  Character.isDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)&&  Double.isNaN(d)||  Character.isDigit(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&  Double.isNaN(d)||  Character.isDigit(d))  {	  if(!Double.isNaN(d)||    Double.isNaN(d)||    Character.isDigit(d))    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
686	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLetter(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLetter(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLetter(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d)||    Double.isLetter(d))    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
687	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  NodeUtil.isFunction(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  NodeUtil.isFunction(d))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  NodeUtil.isFunction(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
688	[BUG]  [BUGGY]  if(c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetterOrDigit(n,  c))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);      [BUGGY]  if(c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetterOrDigit(n,  c))  {  [BUGGY]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetterOrDigit(n,  c))  {	  if(c.isQuotedString()    &&!Double.isNaN(d)&&    NodeUtil.isLetterOrDigit(n))    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
