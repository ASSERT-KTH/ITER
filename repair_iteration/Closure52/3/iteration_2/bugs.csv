bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(Double.isNaN(d)&&  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(Double.isNaN(d)&&  Double.isInfinite(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&  Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
2	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
3	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Character.isLetterOrDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Character.isLetterOrDigit(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Character.isLetterOrDigit(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
4	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Character.isDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Character.isDigit(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Character.isDigit(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
5	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLongBoolean(d))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLongBoolean(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLongBoolean(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
6	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  isSimpleNumber(d))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  isSimpleNumber(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  isSimpleNumber(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
7	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&  Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(!Double.isNaN(d)&&  Double.isNaN(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&  Double.isNaN(d))  {	  if(!Double.isNaN(d)||    Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
8	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(!Double.isNaN(d)&&!Double.isNaN(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&!Double.isNaN(d))  {	  if(!Double.isNaN(d)||    Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
9	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d))  {	  if(!Double.isNaN(d)||    Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
10	[BUG]  [BUGGY]  if(Double.isInfinite(d)||  Double.isNaN(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(Double.isInfinite(d)||  Double.isNaN(d)||  Double.isInfinite(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isInfinite(d)||  Double.isNaN(d)||  Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
11	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLongBoolean(d))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLongBoolean(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isLongBoolean(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
12	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(d))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLetterOrDigit(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
13	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Character.isLetterOrDigit(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Character.isLetterOrDigit(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Character.isLetterOrDigit(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
14	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Character.isDigit(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Character.isDigit(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Character.isDigit(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
15	[BUG]  [BUGGY]  Context  c  =  context.getCurrentContext();  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  Context  c  =  context.getCurrentContext();  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  c  =  context.getCurrentContext();	      	non-compiled	[CE]  	6	None	replace
16	[BUG]  [BUGGY]  Context  c  =  context.getContext();  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  Context  c  =  context.getContext();  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  c  =  context.getContext();	      	non-compiled	[CE]  	6	None	replace
17	[BUG]  [BUGGY]  cc.addNumber(d);  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  cc.addNumber(d);  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	cc.addNumber(d);	      	non-compiled	[CE]  	6	None	replace
18	[BUG]  [BUGGY]  double  d  =  getSimpleNumber(c);  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  double  d  =  getSimpleNumber(c);  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	double  d  =  getSimpleNumber(c);	      	non-compiled	[CE]  	6	None	replace
19	[BUG]  [BUGGY]  double  d  =  getSimpleNumber(key);  [CE]  [FE]                          ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  double  d  =  getSimpleNumber(key);  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	double  d  =  getSimpleNumber(key);	      	non-compiled	[CE]  	6	None	replace
20	[BUG]  [BUGGY]  Context  c  =  getContext();  [CE]  [FE]                            ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  Context  c  =  getContext();  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  c  =  getContext();	      	non-compiled	[CE]  	6	None	replace
21	[BUG]  [BUGGY]  Context  c  =  getCurrentContext();  [CE]  [FE]                              ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  Context  c  =  getCurrentContext();  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  c  =  getCurrentContext();	      	non-compiled	[CE]  	6	None	replace
22	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isInfinite(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
23	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||!Double.isNaN(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||!Double.isNaN(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
24	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||!Double.isInfinite(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||!Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
25	[BUG]  [BUGGY]  if(Double.isInfinite(d)||  Double.isNaN(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(Double.isInfinite(d)||  Double.isNaN(d)||!Double.isNaN(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isInfinite(d)||  Double.isNaN(d)||!Double.isNaN(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
26	[BUG]  [BUGGY]  if(c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetterOrDigit(n))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetterOrDigit(n))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetterOrDigit(n))  {	  if(c.isQuotedString()    &&!Double.isNaN(d)&&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
27	[BUG]  [BUGGY]  if(c.isQuotedString()  ||!Double.isNaN(d)&&  NodeUtil.isLetter(n))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(c.isQuotedString()  ||!Double.isNaN(d)&&  NodeUtil.isLetter(n))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c.isQuotedString()  ||!Double.isNaN(d)&&  NodeUtil.isLetter(n))  {	  if(c.isQuotedString()    &&!Double.isNaN(d)&&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
28	[BUG]  [BUGGY]  if(!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetter(n))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetter(n))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetter(n))  {	  if(c.isQuotedString()    &&!Double.isNaN(d)&&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
29	[BUG]  [BUGGY]  if(!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetterOrDigit(n))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetterOrDigit(n))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetterOrDigit(n))  {	  if(c.isQuotedString()    &&!Double.isNaN(d)&&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
30	[BUG]  [BUGGY]  if(c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetterOp(n))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetterOp(n))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetterOp(n))  {	  if(c.isQuotedString()    &&!Double.isNaN(d)&&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
31	[BUG]  [BUGGY]  if(d!=  null  ||!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetter(n))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(d!=  null  ||!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetter(n))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d!=  null  ||!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetter(n))  {	  if(c.isQuotedString()    &&!Double.isNaN(d)&&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
32	[BUG]  [BUGGY]  if(c.isQuotedString()  &&!Double.isNaN(d)||  NodeUtil.isLetter(n))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(c.isQuotedString()  &&!Double.isNaN(d)||  NodeUtil.isLetter(n))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c.isQuotedString()  &&!Double.isNaN(d)||  NodeUtil.isLetter(n))  {	  if(c.isQuotedString()    &&!Double.isNaN(d)&&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
33	[BUG]  [BUGGY]  if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {	  if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
34	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isNaN(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isNaN(d))  {	  if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
35	[BUG]  [BUGGY]  if(!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isNaN(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isNaN(d))  {	  if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
36	[BUG]  [BUGGY]  if(d!=  null  ||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(d!=  null  ||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d!=  null  ||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))  {	  if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
37	[BUG]  [BUGGY]  if(Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))  {	  if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
38	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||  Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
39	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
40	[BUG]  [BUGGY]  if(Double.isNaN(d)&&  Double.isInfinite(d)&&  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(Double.isNaN(d)&&  Double.isInfinite(d)&&  Double.isInfinite(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&  Double.isInfinite(d)&&  Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
41	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isInfinite(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isInfinite(d)||!Double.isNaN(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isInfinite(d)||!Double.isNaN(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
42	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||!Double.isNaN(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||!Double.isNaN(d)||!Double.isNaN(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||!Double.isNaN(d)||!Double.isNaN(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
43	[BUG]  [BUGGY]  if(!Double.isNaN(d)||!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(!Double.isNaN(d)||!Double.isInfinite(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||!Double.isInfinite(d))  {	  if    (!Double.isNaN(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
44	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&  Double.isInfinite(c))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(!Double.isNaN(d)&&  Double.isInfinite(c))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&  Double.isInfinite(c))  {	  if(!Double.isNaN(d)||    Double.isInfinite(c))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
45	[BUG]  [BUGGY]  if(c.isQuotedString()  &&!Double.isNaN(d)||  Double.isInfinite(c))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(c.isQuotedString()  &&!Double.isNaN(d)||  Double.isInfinite(c))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c.isQuotedString()  &&!Double.isNaN(d)||  Double.isInfinite(c))  {	  if(!Double.isNaN(d)||    Double.isInfinite(c))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
46	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(c)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(c)||!Double.isNaN(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isInfinite(c)||!Double.isNaN(d))  {	  if(!Double.isNaN(d)||    Double.isInfinite(c))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
47	[BUG]  [BUGGY]  if(Double.isNaN(d)&&  Double.isInfinite(c))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(Double.isNaN(d)&&  Double.isInfinite(c))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&  Double.isInfinite(c))  {	  if(!Double.isNaN(d)||    Double.isInfinite(c))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
48	[BUG]  [BUGGY]  if(!Double.isNaN(c)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(!Double.isNaN(c)||  Double.isInfinite(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(c)||  Double.isInfinite(d))  {	  if(!Double.isNaN(d)||    Double.isInfinite(c))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
49	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(c)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(c)||!Double.isNaN(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(c)||!Double.isNaN(d))  {	  if(!Double.isNaN(d)||    Double.isInfinite(c))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
50	[BUG]  [BUGGY]  if(!Double.isNaN(d)||!Double.isNaN(d)&&!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(!Double.isNaN(d)||!Double.isNaN(d)&&!Double.isInfinite(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||!Double.isNaN(d)&&!Double.isInfinite(d))  {	  if(!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
51	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&!Double.isInfinite(d)&&!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(!Double.isNaN(d)&&!Double.isInfinite(d)&&!Double.isNaN(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&!Double.isInfinite(d)&&!Double.isNaN(d))  {	  if(!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
52	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isLong(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isLong(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isLong(d))  {	  if(!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
53	[BUG]  [BUGGY]  if(!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isInfinite(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||!Double.isInfinite(d)||!Double.isInfinite(d))  {	  if(!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
54	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(!Double.isNaN(d)&&  Double.isInfinite(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&  Double.isInfinite(d))  {	  if(!Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
55	[BUG]  [BUGGY]  if(d!=  null  ||!Double.isNaN(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(d!=  null  ||!Double.isNaN(d)||  Double.isInfinite(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d!=  null  ||!Double.isNaN(d)||  Double.isInfinite(d))  {	  if(!Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
56	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(d)&&  isSimpleNumber(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(d)&&  isSimpleNumber(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isInfinite(d)&&  isSimpleNumber(d))  {	  if(!Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
57	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
58	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isLetterOrDigit(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
59	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
60	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
61	[BUG]  [BUGGY]  if(Double.isNaN(d)&&  NodeUtil.isLetter(n))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(Double.isNaN(d)&&  NodeUtil.isLetter(n))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&  NodeUtil.isLetter(n))  {	  if(c.isQuotedString()    &&!Double.isNaN(d)&&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
62	[BUG]  [BUGGY]  if(c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLatin(n))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLatin(n))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLatin(n))  {	  if(c.isQuotedString()    &&!Double.isNaN(d)&&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
63	[BUG]  [BUGGY]  if(!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLatin(n))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLatin(n))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLatin(n))  {	  if(c.isQuotedString()    &&!Double.isNaN(d)&&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
64	[BUG]  [BUGGY]  if(Double.isNaN(d)||  NodeUtil.isLetter(n))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(Double.isNaN(d)||  NodeUtil.isLetter(n))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  NodeUtil.isLetter(n))  {	  if(c.isQuotedString()    &&!Double.isNaN(d)&&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
65	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isInfinite(d)||!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isInfinite(d)||!Double.isInfinite(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isInfinite(d)||!Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
66	[BUG]  [BUGGY]  if(Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isInfinite(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isInfinite(d))  {	  if(!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
67	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isInfinite(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isInfinite(d)||!Double.isNaN(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isInfinite(d)||!Double.isNaN(d))  {	  if(!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
68	[BUG]  [BUGGY]  double  c  =  getSimpleNumber(key);  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  double  c  =  getSimpleNumber(key);  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	double  c  =  getSimpleNumber(key);	      	non-compiled	[CE]  	6	None	replace
69	[BUG]  [BUGGY]  double  d  =  getSimpleNumber(n);  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  double  d  =  getSimpleNumber(n);  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	double  d  =  getSimpleNumber(n);	      	non-compiled	[CE]  	6	None	replace
70	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
71	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isFunction(d))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isFunction(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isFunction(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
72	[BUG]  [BUGGY]  if(Double.isNaN(d)&&  Double.isNaN(d)&&  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(Double.isNaN(d)&&  Double.isNaN(d)&&  Double.isInfinite(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&  Double.isNaN(d)&&  Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
73	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Character.isLetter(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Character.isLetter(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Character.isLetter(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
74	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  Double.isInfinite(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
75	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  Double.isNaN(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  Double.isNaN(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
76	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  NodeUtil.isFunction(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  NodeUtil.isFunction(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d)||  NodeUtil.isFunction(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
77	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(d)||  Character.isDigit(d))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(d)||  Character.isDigit(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isInfinite(d)||  Character.isDigit(d))  {	  if(!Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
78	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(d)||  Character.isLetter(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(d)||  Character.isLetter(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isInfinite(d)||  Character.isLetter(d))  {	  if(!Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
79	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
80	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Character.isLetter(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Character.isLetter(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Character.isLetter(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
81	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isFunction(d))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isFunction(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  NodeUtil.isFunction(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
82	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  getSimpleNumber(d)!=  0)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  getSimpleNumber(d)!=  0)  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  getSimpleNumber(d)!=  0)  {	  if(Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
83	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d)||  Double.isInfinite(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isNaN(d)||  Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
84	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d))  {	  if(!Double.isNaN(d)||    Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
85	[BUG]  [BUGGY]  if(Double.isNaN(d)&&  Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(Double.isNaN(d)&&  Double.isNaN(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)&&  Double.isNaN(d))  {	  if(!Double.isNaN(d)||    Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
86	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)||  Character.isDigit(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)||  Character.isDigit(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isNaN(d)||  Character.isDigit(d))  {	  if(!Double.isNaN(d)||    Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
87	[BUG]  [BUGGY]  if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {	  if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
88	[BUG]  [BUGGY]  if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))  {	  if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
89	[BUG]  [BUGGY]  if(c  ==  null  ||!Double.isNaN(d)||  Double.isInfinite(c))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(c  ==  null  ||!Double.isNaN(d)||  Double.isInfinite(c))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c  ==  null  ||!Double.isNaN(d)||  Double.isInfinite(c))  {	  if(!Double.isNaN(d)||    Double.isInfinite(c))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
90	[BUG]  [BUGGY]  if(c!=  null  &&!Double.isNaN(d)||  Double.isInfinite(c))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(c!=  null  &&!Double.isNaN(d)||  Double.isInfinite(c))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c!=  null  &&!Double.isNaN(d)||  Double.isInfinite(c))  {	  if(!Double.isNaN(d)||    Double.isInfinite(c))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
91	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(c)||  Character.isDigit(c))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(c)||  Character.isDigit(c))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isInfinite(c)||  Character.isDigit(c))  {	  if(!Double.isNaN(d)||    Double.isInfinite(c))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
92	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(d)||!Double.isNaN(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isInfinite(d)||!Double.isNaN(d))  {	  if(!Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
93	[BUG]  [BUGGY]  if(d  <  0  ||!Double.isNaN(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(d  <  0  ||!Double.isNaN(d)||  Double.isInfinite(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d  <  0  ||!Double.isNaN(d)||  Double.isInfinite(d))  {	  if(!Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
94	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
95	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isLongBoolean(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isLongBoolean(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isLongBoolean(d))  {	  if(Double.isNaN(d)||    Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
96	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
97	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLetter(d))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLetter(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d)||  Double.isLetter(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
98	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext();  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  Context  cc  =  getCurrentContext();  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  cc  =  getCurrentContext();	      	non-compiled	[CE]  	6	None	replace
99	[BUG]  [BUGGY]  Context  cc  =  context.getCurrentContext();  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  Context  cc  =  context.getCurrentContext();  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  cc  =  context.getCurrentContext();	      	non-compiled	[CE]  	6	None	replace
100	[BUG]  [BUGGY]  cc.add(new  Double(d));  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  cc.add(new  Double(d));  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	cc.add(new  Double(d));	      	non-compiled	[CE]  	6	None	replace
101	[BUG]  [BUGGY]  Context  cc  =  getContext();  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  Context  cc  =  getContext();  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	Context  cc  =  getContext();	      	non-compiled	[CE]  	6	None	replace
102	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Float.isNaN(d)||  Float.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Float.isNaN(d)||  Float.isInfinite(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Float.isNaN(d)||  Float.isInfinite(d))  {	  if(Double.isNaN(d)||    Double.isInfinite(d))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
103	[BUG]  [BUGGY]  if(c.isQuotedString()  &&!TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  NodeUtil.isLetter(n))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(c.isQuotedString()  &&!TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  NodeUtil.isLetter(n))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c.isQuotedString()  &&!TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  NodeUtil.isLetter(n))  {	  if(c.isQuotedString()    &&!Double.isNaN(d)&&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
104	[BUG]  [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  NodeUtil.isLetter(n))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  NodeUtil.isLetter(n))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  NodeUtil.isLetter(n))  {	  if(c.isQuotedString()    &&!Double.isNaN(d)&&    NodeUtil.isLetter(n))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
105	[BUG]  [BUGGY]  if(d  <  0  ||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(d  <  0  ||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d  <  0  ||!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))  {	  if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
106	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(c)||!Double.isNaN(d)||!Double.isNaN(c))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(c)||!Double.isNaN(d)||!Double.isNaN(c))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isInfinite(c)||!Double.isNaN(d)||!Double.isNaN(c))  {	  if(!Double.isNaN(d)||    Double.isInfinite(c))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
107	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)||!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d)||!Double.isInfinite(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isNaN(d)||!Double.isInfinite(d))  {	  if(!Double.isNaN(d)||    Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
108	[BUG]  [BUGGY]  if(d  <  0  ||!Double.isNaN(d)||  Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);    [BUGGY]  if(d  <  0  ||!Double.isNaN(d)||  Double.isNaN(d))  {  [BUGGY]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(d  <  0  ||!Double.isNaN(d)||  Double.isNaN(d))  {	  if(!Double.isNaN(d)||    Double.isNaN(d))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
