bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (!Double.isNaN(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure  [CONTEXT]  if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  [BUGGY]  if  (!Double.isNaN(d)||!Double.isNaN(d))  {  [BUGGY]  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add( ": ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if  (!Double.isNaN(d)||!Double.isNaN(d))  {	if  (!Double.isNaN(d))  {  	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
2	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure  [CONTEXT]  if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  [BUGGY]  if(!Double.isNaN(d)||  Double.isNaN(d))  {  [BUGGY]  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add( ": ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isNaN(d))  {	if  (!Double.isNaN(d))  {  	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
3	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure  [CONTEXT]  if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(d))  {  [BUGGY]  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add( ": ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isInfinite(d))  {	if  (!Double.isNaN(d))  {  	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
4	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure  [CONTEXT]  if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d))  {  [BUGGY]  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add( ": ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d))  {	if  (!Double.isNaN(d))  {  	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
5	[BUG]  [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(c))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure  [CONTEXT]  if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  [BUGGY]  if(!Double.isNaN(d)||  Double.isInfinite(c))  {  [BUGGY]  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add( ": ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||  Double.isInfinite(c))  {	if  (!Double.isNaN(d))  {  	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
6	[BUG]  [BUGGY]    [CE]  [FE]              ComparisonFailure  [CONTEXT]  if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  [BUGGY]    [BUGGY]  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add( ": ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	  	if  (!Double.isNaN(d))  {  	non-compiled	[CE]  	5	None	replace
7	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure  [CONTEXT]  if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d))  {  [BUGGY]  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add( ": ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||  Double.isInfinite(d))  {	if  (!Double.isNaN(d))  {  	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
8	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure  [CONTEXT]  if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d))  {  [BUGGY]  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add( ": ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d)||  Double.isInfinite(d))  {	if  (!Double.isNaN(d))  {  	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
9	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure  [CONTEXT]  if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))  {  [BUGGY]  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add( ": ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))  {	if  (!Double.isNaN(d))  {  	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
10	[BUG]  [BUGGY]  if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure  [CONTEXT]  if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  [BUGGY]  if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))  {  [BUGGY]  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add( ": ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)||!Double.isNaN(d)||!Double.isNaN(d))  {	if  (!Double.isNaN(d))  {  	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
11	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure  [CONTEXT]  if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {  [BUGGY]  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add( ": ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d)||!Double.isInfinite(d))  {	if  (!Double.isNaN(d))  {  	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
12	[BUG]  [BUGGY]  if(!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isInfinite(d))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure  [CONTEXT]  if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  [BUGGY]  if(!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isInfinite(d))  {  [BUGGY]  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add( ": ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(!Double.isNaN(d)&&!Double.isNaN(d)&&!Double.isInfinite(d))  {	if  (!Double.isNaN(d))  {  	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
13	[BUG]  [BUGGY]  if(c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetter(n))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure  [CONTEXT]  if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  [BUGGY]  if(c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetter(n))  {  [BUGGY]  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add( ": ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(c.isQuotedString()  &&!Double.isNaN(d)&&  NodeUtil.isLetter(n))  {	if  (!Double.isNaN(d))  {  	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
14	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure  [CONTEXT]  if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d))  {  [BUGGY]  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add( ": ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	if(Double.isNaN(d)||  Double.isNaN(d)||!Double.isNaN(d))  {	if  (!Double.isNaN(d))  {  	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
