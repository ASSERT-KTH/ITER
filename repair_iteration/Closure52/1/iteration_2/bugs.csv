bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addNumber(d  *  1);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	add	cc.addNumber(d  *  1);	  cc.addNumber(d    +    1);    	compilable	  [FE]  ComparisonFailure  	7	1	replace
2	[BUG]  [BUGGY]  cc.addNumber(d  *  1);  [FE]  ComparisonFailure  [FE]    junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addNumber(d  *  1);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d  *  1);	  cc.addNumber(d    +    1);    	compilable	  [FE]  ComparisonFailure  	7	1	replace
3	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x={ "a ": "paul "  [FE]      junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addNumber(d  +  2);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	add	cc.addNumber(d  +  2);	  cc.addNumber(d    +    1);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x={ "a ": "paul "  	7	5	replace
4	[BUG]  [BUGGY]  cc.addNumber(d  +  2);  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x={ "a ": "paul "  [FE]      junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addNumber(d  +  2);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d  +  2);	  cc.addNumber(d    +    1);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x={ "a ": "paul "  	7	5	replace
5	[BUG]  [BUGGY]  cc.addNumber(d  +  1,  c);  [CE]  method  addNumber  in  class  CodeConsumer  cannot  be  applied  to  given  types;  [FE]        junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addNumber(d  +  1,  c);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d  +  1,  c);	  cc.addNumber(d    +    1);    	non-compiled	[CE]  method  addNumber  in  class  CodeConsumer  cannot  be  applied  to  given  types;	7	None	replace
6	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addNumber(d  /  1);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	add	cc.addNumber(d  /  1);	  cc.addNumber(d    +    1);    	compilable	  [FE]  ComparisonFailure  	7	1	replace
7	[BUG]  [BUGGY]  cc.addNumber(d  /  1);  [FE]  ComparisonFailure  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addNumber(d  /  1);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d  /  1);	  cc.addNumber(d    +    1);    	compilable	  [FE]  ComparisonFailure  	7	1	replace
8	[BUG]  [BUGGY]  cc.add(d  -  1);  [CE]  method  add  in  class  CodeConsumer  cannot  be  applied  to  given  types;  [FE]    junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.add(d  -  1);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d  -  1);	  cc.addNumber(d    -    1);    	non-compiled	[CE]  method  add  in  class  CodeConsumer  cannot  be  applied  to  given  types;	11	None	replace
9	[BUG]  [BUGGY]  cc.addNumber(d  -  1,  c);  [CE]  method  addNumber  in  class  CodeConsumer  cannot  be  applied  to  given  types;  [FE]      junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addNumber(d  -  1,  c);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d  -  1,  c);	  cc.addNumber(d    -    1);    	non-compiled	[CE]  method  addNumber  in  class  CodeConsumer  cannot  be  applied  to  given  types;	11	None	replace
10	[BUG]  [BUGGY]  cc.addChildToBack(d);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addChildToBack(d);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToBack(d);	  cc.addChildToFront(d);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
11	[BUG]  [BUGGY]  cc.addChildToFront(Double.valueOf(d));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addChildToFront(Double.valueOf(d));  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToFront(Double.valueOf(d));	  cc.addChildToFront(d);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
12	[BUG]  [BUGGY]  cc.addChildToFront(double  d);  [CE]  '.class'  expected  [FE]                ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addChildToFront(double  d);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToFront(double  d);	  cc.addChildToFront(d);    	non-compiled	[CE]  '.class'  expected	3	None	replace
13	[BUG]  [BUGGY]  cc.addChildToFront(d,  Double.POSITIVE_INFINITY);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addChildToFront(d,  Double.POSITIVE_INFINITY);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToFront(d,  Double.POSITIVE_INFINITY);	  cc.addChildToFront(d);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
14	[BUG]  [BUGGY]  cc.addChildToFront(d,  c);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addChildToFront(d,  c);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToFront(d,  c);	  cc.addChildToFront(d);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
15	[BUG]  [BUGGY]  cc.addChildToFront(Double.toString(d));  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addChildToFront(Double.toString(d));  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToFront(Double.toString(d));	  cc.addChildToFront(d);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
16	[BUG]  [BUGGY]  c.addPosition(d);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  c.addPosition(d);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addPosition(d);	  cc.addPosition(d);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
17	[BUG]  [BUGGY]  Context.addPosition(d);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  Context.addPosition(d);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context.addPosition(d);	  cc.addPosition(d);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
18	[BUG]  [BUGGY]  d.addPosition(c);  [CE]  double  cannot  be  dereferenced  [FE]              ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  d.addPosition(c);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	d.addPosition(c);	  cc.addPosition(d);    	non-compiled	[CE]  double  cannot  be  dereferenced	14	None	replace
19	[BUG]  [BUGGY]  cc.addPosition(d,  n);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addPosition(d,  n);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addPosition(d,  n);	  cc.addPosition(d);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
20	[BUG]  [BUGGY]  cc.addPosition(d,  c);  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addPosition(d,  c);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addPosition(d,  c);	  cc.addPosition(d);    	non-compiled	[CE]  'else'  without  'if'	14	None	replace
21	[BUG]  [BUGGY]  c.addPosition(d,  n);  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  c.addPosition(d,  n);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addPosition(d,  n);	  cc.addPosition(d);    	non-compiled	[CE]  'else'  without  'if'	14	None	replace
22	[BUG]  [BUGGY]      Context  c  =  context.getCurrentContext();  [CE]  'else'  without  'if'  [FE]    AssertionFailedError    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]      Context  c  =  context.getCurrentContext();  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	        Context  c  =  context.getCurrentContext();	  	non-compiled	[CE]  'else'  without  'if'	8	None	add
23	[BUG]  [BUGGY]      Context  c  =  context.getContext();  [CE]  'else'  without  'if'  [FE]      AssertionFailedError    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]      Context  c  =  context.getContext();  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	        Context  c  =  context.getContext();	  	non-compiled	[CE]  'else'  without  'if'	8	None	add
24	[BUG]  [BUGGY]      c  =  getSimpleNumber(key);  [CE]  'else'  without  'if'  [FE]        AssertionFailedError    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]      c  =  getSimpleNumber(key);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	        c  =  getSimpleNumber(key);	  	non-compiled	[CE]  'else'  without  'if'	8	None	add
25	[BUG]  [BUGGY]      Context  c  =  context.getCurrentContext();  add(c);  [CE]  'else'  without  'if'  [FE]          AssertionFailedError    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]      Context  c  =  context.getCurrentContext();  add(c);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	        Context  c  =  context.getCurrentContext();  add(c);	  	non-compiled	[CE]  'else'  without  'if'	8	None	add
26	[BUG]  [BUGGY]      Context  c  =  getCurrentContext();  [CE]  'else'  without  'if'  [FE]            AssertionFailedError    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]      Context  c  =  getCurrentContext();  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	        Context  c  =  getCurrentContext();	  	non-compiled	[CE]  'else'  without  'if'	8	None	add
27	[BUG]  [BUGGY]      Context  c  =  getContext();  [CE]  'else'  without  'if'  [FE]              AssertionFailedError    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]      Context  c  =  getContext();  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	        Context  c  =  getContext();	  	non-compiled	[CE]  'else'  without  'if'	8	None	add
28	[BUG]  [BUGGY]      c  =  context.getCurrentStructure();  [CE]  'else'  without  'if'  [FE]                AssertionFailedError    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]      c  =  context.getCurrentStructure();  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	        c  =  context.getCurrentStructure();	  	non-compiled	[CE]  'else'  without  'if'	8	None	add
29	[BUG]  [BUGGY]      add( ": ");  [CE]  'else'  without  'if'  [FE]                  AssertionFailedError    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]      add( ": ");  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	        add( ": ");	  	non-compiled	[CE]  'else'  without  'if'	8	None	add
30	[BUG]  [BUGGY]  cc.addNumber(d,  1,  c);  [CE]  'else'  without  'if'  [FE]                ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addNumber(d,  1,  c);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  1,  c);	  cc.addNumber(d,    1);    	non-compiled	[CE]  'else'  without  'if'	5	None	replace
31	[BUG]  [BUGGY]  cc.addNumber(d,  2);  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addNumber(d,  2);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  2);	  cc.addNumber(d,    1);    	non-compiled	[CE]  'else'  without  'if'	5	None	replace
32	[BUG]  [BUGGY]  cc.addNumber(d,  2,  1);  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addNumber(d,  2,  1);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  2,  1);	  cc.addNumber(d,    1);    	non-compiled	[CE]  'else'  without  'if'	5	None	replace
33	[BUG]  [BUGGY]  cc.addNumber(d,  1  -  d);  [CE]  'else'  without  'if'  [FE]                      ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addNumber(d,  1  -  d);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  1  -  d);	  cc.addNumber(d,    1);    	non-compiled	[CE]  'else'  without  'if'	5	None	replace
34	[BUG]  [BUGGY]  cc.addNumber(d,  3);  [CE]  'else'  without  'if'  [FE]                        ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addNumber(d,  3);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  3);	  cc.addNumber(d,    1);    	non-compiled	[CE]  'else'  without  'if'	5	None	replace
35	[BUG]  [BUGGY]  cc.addNumber(d,  1  +  1,  c);  [CE]  'else'  without  'if'  [FE]                          ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addNumber(d,  1  +  1,  c);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  1  +  1,  c);	  cc.addNumber(d,    1);    	non-compiled	[CE]  'else'  without  'if'	5	None	replace
36	[BUG]  [BUGGY]  cc.addNumber(d  +  1);  cc.addNumber(d  +  1);  [CE]  'else'  without  'if'  [FE]    junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addNumber(d  +  1);  cc.addNumber(d  +  1);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    +    1);    cc.addNumber(d  +  1);	  	non-compiled	[CE]  'else'  without  'if'	6	None	add
37	[BUG]  [BUGGY]  cc.addNumber(d  +  1);  Context  cc  =  getContext().addNumber(d  +  1);  [CE]  'else'  without  'if'  [FE]      junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addNumber(d  +  1);  Context  cc  =  getContext().addNumber(d  +  1);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    +    1);    Context  cc  =  getContext().addNumber(d  +  1);	  	non-compiled	[CE]  'else'  without  'if'	6	None	add
38	[BUG]  [BUGGY]  cc.addNumber(d  +  1);  Cc  cc.addNumber(d  +  1);  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addNumber(d  +  1);  Cc  cc.addNumber(d  +  1);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    +    1);    Cc  cc.addNumber(d  +  1);	  	non-compiled	[CE]  ';'  expected	6	None	add
39	[BUG]  [BUGGY]  cc.addNumber(d  +  1);  int  cc  =  getSimpleNumber(key);  [CE]  'else'  without  'if'  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addNumber(d  +  1);  int  cc  =  getSimpleNumber(key);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    +    1);    int  cc  =  getSimpleNumber(key);	  	non-compiled	[CE]  'else'  without  'if'	6	None	add
40	[BUG]  [BUGGY]  cc.addNumber(d  +  1);  cc.addNumber(d  +  1);  }  else  {  addExpr(c,  1);  [CE]  'else'  without  'if'  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addNumber(d  +  1);  cc.addNumber(d  +  1);  }  else  {  addExpr(c,  1);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    +    1);    cc.addNumber(d  +  1);  }  else  {  addExpr(c,  1);	  	non-compiled	[CE]  'else'  without  'if'	6	None	add
41	[BUG]  [BUGGY]  cc.addNumber(d  +  1);  Context  cc  =  getContext().add(context,  d  +  1);  [CE]  'else'  without  'if'  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addNumber(d  +  1);  Context  cc  =  getContext().add(context,  d  +  1);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    +    1);    Context  cc  =  getContext().add(context,  d  +  1);	  	non-compiled	[CE]  'else'  without  'if'	6	None	add
42	[BUG]  [BUGGY]  cc.addNumber(d  +  1);  int  cc  =  getSimpleNumber(key).intValue();  [CE]  'else'  without  'if'  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addNumber(d  +  1);  int  cc  =  getSimpleNumber(key).intValue();  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    +    1);    int  cc  =  getSimpleNumber(key).intValue();	  	non-compiled	[CE]  'else'  without  'if'	6	None	add
43	[BUG]  [BUGGY]  c.addExpr(d);  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  c.addExpr(d);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addExpr(d);	  cc.addExpr(d);    	non-compiled	[CE]  'else'  without  'if'	1	None	replace
44	[BUG]  [BUGGY]  cc.addExpr(d,  c);  [CE]  'else'  without  'if'  [FE]          ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addExpr(d,  c);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addExpr(d,  c);	  cc.addExpr(d);    	non-compiled	[CE]  'else'  without  'if'	1	None	replace
45	[BUG]  [BUGGY]  Context.addExpr(d);  [CE]  orphaned  case  [FE]            ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  Context.addExpr(d);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context.addExpr(d);	  cc.addExpr(d);    	non-compiled	[CE]  orphaned  case	1	None	replace
46	[BUG]  [BUGGY]  cc.addExpr(d,  1);  [CE]  'else'  without  'if'  [FE]              ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addExpr(d,  1);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addExpr(d,  1);	  cc.addExpr(d);    	non-compiled	[CE]  'else'  without  'if'	1	None	replace
47	[BUG]  [BUGGY]  d.addExpr(c);  [CE]  'else'  without  'if'  [FE]                ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  d.addExpr(c);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	d.addExpr(c);	  cc.addExpr(d);    	non-compiled	[CE]  'else'  without  'if'	1	None	replace
48	[BUG]  [BUGGY]  conn.addExpr(d);  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  conn.addExpr(d);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	conn.addExpr(d);	  cc.addExpr(d);    	non-compiled	[CE]  'else'  without  'if'	1	None	replace
49	[BUG]  [BUGGY]  c.addValue(d);  [CE]  'else'  without  'if'  [FE]              ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  c.addValue(d);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addValue(d);	  cc.addValue(d);    	non-compiled	[CE]  'else'  without  'if'	4	None	replace
50	[BUG]  [BUGGY]  d.addValue(c);  [CE]  'else'  without  'if'  [FE]                ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  d.addValue(c);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	d.addValue(c);	  cc.addValue(d);    	non-compiled	[CE]  'else'  without  'if'	4	None	replace
51	[BUG]  [BUGGY]  Context  cc  =  context.addValue(d);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  Context  cc  =  context.addValue(d);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  context.addValue(d);	  cc.addValue(d);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
52	[BUG]  [BUGGY]  Context.addValue(d);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  Context.addValue(d);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context.addValue(d);	  cc.addValue(d);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
53	[BUG]  [BUGGY]  cc.addValue(d,  n);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addValue(d,  n);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addValue(d,  n);	  cc.addValue(d);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
54	[BUG]  [BUGGY]  cc.addValue(d,  d);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addValue(d,  d);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addValue(d,  d);	  cc.addValue(d);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
55	[BUG]  [BUGGY]  cc.addNumber(d  -  1);  cc.addNumber(d  -  1);  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addNumber(d  -  1);  cc.addNumber(d  -  1);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    -    1);    cc.addNumber(d  -  1);	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
56	[BUG]  [BUGGY]  cc.addNumber(d  -  1);  int  d  =  getSimpleNumber(key);  cc.addNumber(d  -  1);  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addNumber(d  -  1);  int  d  =  getSimpleNumber(key);  cc.addNumber(d  -  1);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    -    1);    int  d  =  getSimpleNumber(key);  cc.addNumber(d  -  1);	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
57	[BUG]  [BUGGY]  cc.addNumber(d  -  1);  int  d  =  getSimpleNumber(key).intValue();  cc.addNumber(d  -  1);  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addNumber(d  -  1);  int  d  =  getSimpleNumber(key).intValue();  cc.addNumber(d  -  1);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    -    1);    int  d  =  getSimpleNumber(key).intValue();  cc.addNumber(d  -  1);	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
58	[BUG]  [BUGGY]  cc.addNumber(d  -  1);  Context  cc  =  getContext().addNumber(d  -  1);  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addNumber(d  -  1);  Context  cc  =  getContext().addNumber(d  -  1);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    -    1);    Context  cc  =  getContext().addNumber(d  -  1);	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
59	[BUG]  [BUGGY]  cc.addNumber(d  -  1);  int  d  =  getSimpleNumber(key).intValue();  cc.addNumber(d  -  1,  d);  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addNumber(d  -  1);  int  d  =  getSimpleNumber(key).intValue();  cc.addNumber(d  -  1,  d);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    -    1);    int  d  =  getSimpleNumber(key).intValue();  cc.addNumber(d  -  1,  d);	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
60	[BUG]  [BUGGY]  cc.addNumber(d  -  1);  cc.addNumber(d  -  1);  }  else  {  addExpr(c,  1);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addNumber(d  -  1);  cc.addNumber(d  -  1);  }  else  {  addExpr(c,  1);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    -    1);    cc.addNumber(d  -  1);  }  else  {  addExpr(c,  1);	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
61	[BUG]  [BUGGY]  cc.addNumber(d  -  1);  Context  cc.addNumber(d  -  1);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addNumber(d  -  1);  Context  cc.addNumber(d  -  1);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    -    1);    Context  cc.addNumber(d  -  1);	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
62	[BUG]  [BUGGY]  cc.add(d,  c);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.add(d,  c);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d,  c);	  cc.add(d);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
63	[BUG]  [BUGGY]  cc.add(d,  n);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.add(d,  n);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d,  n);	  cc.add(d);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
64	[BUG]  [BUGGY]  cc.add(d,  1);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.add(d,  1);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d,  1);	  cc.add(d);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
65	[BUG]  [BUGGY]  cc.add(context,  d);  [CE]  orphaned  case  [FE]                ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.add(context,  d);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(context,  d);	  cc.add(d);    	non-compiled	[CE]  orphaned  case	2	None	replace
66	[BUG]  [BUGGY]  cc.add(d,  2);  [CE]  orphaned  case  [FE]                  ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.add(d,  2);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d,  2);	  cc.add(d);    	non-compiled	[CE]  orphaned  case	2	None	replace
67	[BUG]  [BUGGY]  cc.add(n,  d);  [CE]  orphaned  case  [FE]                    ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.add(n,  d);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(n,  d);	  cc.add(d);    	non-compiled	[CE]  orphaned  case	2	None	replace
68	[BUG]  [BUGGY]  cc.add(d,  double  d);  [CE]  orphaned  case  [FE]                      ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.add(d,  double  d);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d,  double  d);	  cc.add(d);    	non-compiled	[CE]  orphaned  case	2	None	replace
69	[BUG]  [BUGGY]  cc.add(Double.toString(d));  cc.add(Double.toString(d));  [CE]  orphaned  case  [FE]    ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.add(Double.toString(d));  cc.add(Double.toString(d));  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d));    cc.add(Double.toString(d));	  	non-compiled	[CE]  orphaned  case	12	None	add
70	[BUG]  [BUGGY]  cc.add(Double.toString(d));  cc.add(Double.toString(d));  this.context.putBooleanProp(NodeUtil.isJSIdentifier(d));  [CE]  orphaned  case  [FE]      ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.add(Double.toString(d));  cc.add(Double.toString(d));  this.context.putBooleanProp(NodeUtil.isJSIdentifier(d));  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d));    cc.add(Double.toString(d));  this.context.putBooleanProp(NodeUtil.isJSIdentifier(d));	  	non-compiled	[CE]  orphaned  case	12	None	add
71	[BUG]  [BUGGY]  cc.add(Double.toString(d));  cc.add(Double.toString(d));  this.context.putBooleanProp(NodeUtil.isJavaIdentifier(d));  [CE]  orphaned  case  [FE]        ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.add(Double.toString(d));  cc.add(Double.toString(d));  this.context.putBooleanProp(NodeUtil.isJavaIdentifier(d));  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d));    cc.add(Double.toString(d));  this.context.putBooleanProp(NodeUtil.isJavaIdentifier(d));	  	non-compiled	[CE]  orphaned  case	12	None	add
72	[BUG]  [BUGGY]  cc.add(Double.toString(d));  Cc  cc.add(Double.toString(d));  [CE]  orphaned  case  [FE]          ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.add(Double.toString(d));  Cc  cc.add(Double.toString(d));  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d));    Cc  cc.add(Double.toString(d));	  	non-compiled	[CE]  orphaned  case	12	None	add
73	[BUG]  [BUGGY]  cc.add(Double.toString(d));  cc.add(Double.toString(d));  this.context.putBooleanProp(NodeUtil.isJSIdentifier(key));  [CE]  orphaned  case  [FE]            ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.add(Double.toString(d));  cc.add(Double.toString(d));  this.context.putBooleanProp(NodeUtil.isJSIdentifier(key));  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d));    cc.add(Double.toString(d));  this.context.putBooleanProp(NodeUtil.isJSIdentifier(key));	  	non-compiled	[CE]  orphaned  case	12	None	add
74	[BUG]  [BUGGY]  cc.add(Double.toString(d));  cc.add(Double.toString(d));  this.context.putBooleanProp(NodeUtil.isSimpleNumber(d));  [CE]  orphaned  case  [FE]              ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.add(Double.toString(d));  cc.add(Double.toString(d));  this.context.putBooleanProp(NodeUtil.isSimpleNumber(d));  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d));    cc.add(Double.toString(d));  this.context.putBooleanProp(NodeUtil.isSimpleNumber(d));	  	non-compiled	[CE]  orphaned  case	12	None	add
75	[BUG]  [BUGGY]  cc.add(Double.toString(d));  cc.add(Double.toString(d));  this.context.putBooleanProp(NodeUtil.isJavaIdentifier(key));  [CE]  orphaned  case  [FE]                ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.add(Double.toString(d));  cc.add(Double.toString(d));  this.context.putBooleanProp(NodeUtil.isJavaIdentifier(key));  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d));    cc.add(Double.toString(d));  this.context.putBooleanProp(NodeUtil.isJavaIdentifier(key));	  	non-compiled	[CE]  orphaned  case	12	None	add
76	[BUG]  [BUGGY]  cc.add(Double.toString(d));  cc.add(Double.toString(d));  context.put( ": "  +  c.getLastChild());  [CE]  orphaned  case  [FE]                  ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.add(Double.toString(d));  cc.add(Double.toString(d));  context.put( ": "  +  c.getLastChild());  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d));    cc.add(Double.toString(d));  context.put( ": "  +  c.getLastChild());	  	non-compiled	[CE]  orphaned  case	12	None	add
77	[BUG]  [BUGGY]  cc.add(Double.toString(d)+  1);  [CE]  orphaned  case  [FE]    ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.add(Double.toString(d)+  1);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d)+  1);	  cc.add(Double.toString(d));    	non-compiled	[CE]  orphaned  case	13	None	replace
78	[BUG]  [BUGGY]  c.add(Double.toString(d));  [CE]  orphaned  case  [FE]      ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  c.add(Double.toString(d));  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.add(Double.toString(d));	  cc.add(Double.toString(d));    	non-compiled	[CE]  orphaned  case	13	None	replace
79	[BUG]  [BUGGY]  cc.add(Double.toString(d),  1);  [CE]  orphaned  case  [FE]        ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.add(Double.toString(d),  1);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d),  1);	  cc.add(Double.toString(d));    	non-compiled	[CE]  orphaned  case	13	None	replace
80	[BUG]  [BUGGY]  cc.add(Double.toString(d  +  1));  [CE]  orphaned  case  [FE]          ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.add(Double.toString(d  +  1));  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d  +  1));	  cc.add(Double.toString(d));    	non-compiled	[CE]  orphaned  case	13	None	replace
81	[BUG]  [BUGGY]  cc.add(Double.valueOf(d));  [CE]  orphaned  case  [FE]            ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.add(Double.valueOf(d));  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.valueOf(d));	  cc.add(Double.toString(d));    	non-compiled	[CE]  orphaned  case	13	None	replace
82	[BUG]  [BUGGY]  cc.addChildToFront(new  Double(d));  [CE]  orphaned  case  [FE]            ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addChildToFront(new  Double(d));  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToFront(new  Double(d));	  cc.addChildToFront(d);    	non-compiled	[CE]  orphaned  case	3	None	replace
83	[BUG]  [BUGGY]  cc.addNumber(d  -  1);  cc.addNumber(d  -  1));  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addNumber(d  -  1);  cc.addNumber(d  -  1));  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    -    1);    cc.addNumber(d  -  1));	  	non-compiled	[CE]  ';'  expected	10	None	add
84	[BUG]  [BUGGY]  cc.addNumber(d  -  1);  Context  cc  =  getContext().addNumber(Double.valueOf(d));  [CE]  orphaned  case  [FE]      junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addNumber(d  -  1);  Context  cc  =  getContext().addNumber(Double.valueOf(d));  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    -    1);    Context  cc  =  getContext().addNumber(Double.valueOf(d));	  	non-compiled	[CE]  orphaned  case	10	None	add
85	[BUG]  [BUGGY]  cc.addNumber(d  -  1);  Context  cc  =  getContext().addNumber(Double.valueOf(d  -  1));  [CE]  'else'  without  'if'  [FE]        junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addNumber(d  -  1);  Context  cc  =  getContext().addNumber(Double.valueOf(d  -  1));  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    -    1);    Context  cc  =  getContext().addNumber(Double.valueOf(d  -  1));	  	non-compiled	[CE]  'else'  without  'if'	10	None	add
86	[BUG]  [BUGGY]  cc.addNumber(d  -  1);  cc.addNumber(d  -  1);  }  else  {  addExpr(c,  2);  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addNumber(d  -  1);  cc.addNumber(d  -  1);  }  else  {  addExpr(c,  2);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    -    1);    cc.addNumber(d  -  1);  }  else  {  addExpr(c,  2);	  	non-compiled	[CE]  	10	None	add
87	[BUG]  [BUGGY]  cc.addPosition(d  +  1);  [CE]  orphaned  case  [FE]          ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addPosition(d  +  1);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addPosition(d  +  1);	  cc.addPosition(d);    	non-compiled	[CE]  orphaned  case	14	None	replace
88	[BUG]  [BUGGY]  cc.addNumber(d  +  1,  n);  [CE]  orphaned  case  [FE]    junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addNumber(d  +  1,  n);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d  +  1,  n);	  cc.addNumber(d    +    1);    	non-compiled	[CE]  orphaned  case	7	None	replace
89	[BUG]  [BUGGY]      c  =  getSimpleNumber(d);  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]      c  =  getSimpleNumber(d);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	        c  =  getSimpleNumber(d);	  	non-compiled	[CE]  orphaned  case	8	None	add
90	[BUG]  [BUGGY]      Node  c  =  getCurrentNode();  add( ": ");  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]      Node  c  =  getCurrentNode();  add( ": ");  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	        Node  c  =  getCurrentNode();  add( ": ");	  	non-compiled	[CE]  orphaned  case	8	None	add
91	[BUG]  [BUGGY]      c  =  getSimpleNumber(d);  add( ": ");  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]      c  =  getSimpleNumber(d);  add( ": ");  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	        c  =  getSimpleNumber(d);  add( ": ");	  	non-compiled	[CE]  orphaned  case	8	None	add
92	[BUG]  [BUGGY]      Context  c  =  getCurrentContext();  add(c);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]      Context  c  =  getCurrentContext();  add(c);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	        Context  c  =  getCurrentContext();  add(c);	  	non-compiled	[CE]  orphaned  case	8	None	add
93	[BUG]  [BUGGY]  cc.add(d,  0);  [CE]  orphaned  case  [FE]          ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.add(d,  0);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d,  0);	  cc.add(d);    	non-compiled	[CE]  orphaned  case	2	None	replace
94	[BUG]  [BUGGY]  cc.add(d,  fn);  [CE]  orphaned  case  [FE]            ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.add(d,  fn);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d,  fn);	  cc.add(d);    	non-compiled	[CE]  orphaned  case	2	None	replace
95	[BUG]  [BUGGY]  cc.addExpr(d,  0);  [CE]  orphaned  case  [FE]        ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addExpr(d,  0);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addExpr(d,  0);	  cc.addExpr(d);    	non-compiled	[CE]  orphaned  case	1	None	replace
96	[BUG]  [BUGGY]  cc.addExpr(d,  2);  [CE]  orphaned  case  [FE]          ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addExpr(d,  2);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addExpr(d,  2);	  cc.addExpr(d);    	non-compiled	[CE]  orphaned  case	1	None	replace
97	[BUG]  [BUGGY]  cc.addNumber(d  +  1);  Context  cc  =  getCurrentContext().addNumber(d  +  1);  [CE]  orphaned  case  [FE]    junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addNumber(d  +  1);  Context  cc  =  getCurrentContext().addNumber(d  +  1);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    +    1);    Context  cc  =  getCurrentContext().addNumber(d  +  1);	  	non-compiled	[CE]  orphaned  case	6	None	add
98	[BUG]  [BUGGY]  cc.addNumber(d  +  1);  Context  cc  =  getContext().addNumber(Double.parseDouble(d));  [CE]  orphaned  case  [FE]      junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addNumber(d  +  1);  Context  cc  =  getContext().addNumber(Double.parseDouble(d));  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    +    1);    Context  cc  =  getContext().addNumber(Double.parseDouble(d));	  	non-compiled	[CE]  orphaned  case	6	None	add
99	[BUG]  [BUGGY]  cc.addNumber(d  +  1);  Context  cc  =  getContext().addNumber(Double.valueOf(d));  [CE]  orphaned  case  [FE]        junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addNumber(d  +  1);  Context  cc  =  getContext().addNumber(Double.valueOf(d));  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    +    1);    Context  cc  =  getContext().addNumber(Double.valueOf(d));	  	non-compiled	[CE]  orphaned  case	6	None	add
100	[BUG]  [BUGGY]  cc.addNumber(d  +  1);  Context  cc  =  getContext().addNumber(Double.toString(d));  [CE]  orphaned  case  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addNumber(d  +  1);  Context  cc  =  getContext().addNumber(Double.toString(d));  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    +    1);    Context  cc  =  getContext().addNumber(Double.toString(d));	  	non-compiled	[CE]  orphaned  case	6	None	add
101	[BUG]  [BUGGY]  cc.addNumber(d  +  1);  Context  cc  =  getContext().addNumber(Double.valueOf(d  +  1));  [CE]  orphaned  case  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addNumber(d  +  1);  Context  cc  =  getContext().addNumber(Double.valueOf(d  +  1));  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    +    1);    Context  cc  =  getContext().addNumber(Double.valueOf(d  +  1));	  	non-compiled	[CE]  orphaned  case	6	None	add
102	[BUG]  [BUGGY]  cc.add(Double.toString(d));  Context  cc  =  Context.getCurrentContext();  [CE]  orphaned  case  [FE]    ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.add(Double.toString(d));  Context  cc  =  Context.getCurrentContext();  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d));    Context  cc  =  Context.getCurrentContext();	  	non-compiled	[CE]  orphaned  case	12	None	add
103	[BUG]  [BUGGY]  cc.add(Double.toString(d));  Cc.add(Double.toString(d));  [CE]  orphaned  case  [FE]      ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.add(Double.toString(d));  Cc.add(Double.toString(d));  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d));    Cc.add(Double.toString(d));	  	non-compiled	[CE]  orphaned  case	12	None	add
104	[BUG]  [BUGGY]  cc.add(Double.toString(d));  Context  cc  =  Context.createContext(context);  [CE]  orphaned  case  [FE]        ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.add(Double.toString(d));  Context  cc  =  Context.createContext(context);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d));    Context  cc  =  Context.createContext(context);	  	non-compiled	[CE]  orphaned  case	12	None	add
105	[BUG]  [BUGGY]  cc.add(Double.toString(d));  Node  cc  =  getCurrentNode();  [CE]  orphaned  case  [FE]          ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.add(Double.toString(d));  Node  cc  =  getCurrentNode();  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d));    Node  cc  =  getCurrentNode();	  	non-compiled	[CE]  orphaned  case	12	None	add
106	[BUG]  [BUGGY]  cc.add(Double.toString(d));  Context  cc  =  Context.createContext(context,  n);  [CE]  orphaned  case  [FE]            ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.add(Double.toString(d));  Context  cc  =  Context.createContext(context,  n);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d));    Context  cc  =  Context.createContext(context,  n);	  	non-compiled	[CE]  orphaned  case	12	None	add
107	[BUG]  [BUGGY]  cc.add(Double.toNaN(d));  [CE]  orphaned  case  [FE]    ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.add(Double.toNaN(d));  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toNaN(d));	  cc.add(Double.toString(d));    	non-compiled	[CE]  orphaned  case	13	None	replace
108	[BUG]  [BUGGY]  cc.addNumber(d,  0);  [CE]  orphaned  case  [FE]                ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addNumber(d,  0);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  0);	  cc.addNumber(d,    1);    	non-compiled	[CE]  orphaned  case	5	None	replace
109	[BUG]  [BUGGY]  cc.addNumber(d,  1L);  [CE]  orphaned  case  [FE]                  ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addNumber(d,  1L);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  1L);	  cc.addNumber(d,    1);    	non-compiled	[CE]  orphaned  case	5	None	replace
110	[BUG]  [BUGGY]  cc.addNumber(d,  59);  [CE]  orphaned  case  [FE]                ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addNumber(d,  59);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  59);	  cc.addNumber(d,    1);    	non-compiled	[CE]  orphaned  case	5	None	replace
111	[BUG]  [BUGGY]  d  =  cc.addValue(d);  [CE]  'else'  without  'if'  [FE]              ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  d  =  cc.addValue(d);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	d  =  cc.addValue(d);	  cc.addValue(d);    	non-compiled	[CE]  'else'  without  'if'	4	None	replace
112	[BUG]  [BUGGY]  d,  cc.addValue(d);  [CE]  not  a  statement  [FE]                ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  d,  cc.addValue(d);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	d,  cc.addValue(d);	  cc.addValue(d);    	non-compiled	[CE]  not  a  statement	4	None	replace
113	[BUG]  [BUGGY]  cc.addNumber(d  -  1);  Context  cc  =  getCurrentContext().addNumber(d  -  1);  [CE]  'else'  without  'if'  [FE]    junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addNumber(d  -  1);  Context  cc  =  getCurrentContext().addNumber(d  -  1);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    -    1);    Context  cc  =  getCurrentContext().addNumber(d  -  1);	  	non-compiled	[CE]  'else'  without  'if'	10	None	add
114	[BUG]  [BUGGY]  cc.addNumber(d  -  1);  Context  cc  =  getCurrentContext().getContextForNoInOperator(context);  [CE]  'else'  without  'if'  [FE]      junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addNumber(d  -  1);  Context  cc  =  getCurrentContext().getContextForNoInOperator(context);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    -    1);    Context  cc  =  getCurrentContext().getContextForNoInOperator(context);	  	non-compiled	[CE]  'else'  without  'if'	10	None	add
115	[BUG]  [BUGGY]  cc.addNumber(d  -  1);  Context  cc  =  getCurrentContext().getContextForNoInOperator(d);  [CE]  'else'  without  'if'  [FE]        junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addNumber(d  -  1);  Context  cc  =  getCurrentContext().getContextForNoInOperator(d);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    -    1);    Context  cc  =  getCurrentContext().getContextForNoInOperator(d);	  	non-compiled	[CE]  'else'  without  'if'	10	None	add
116	[BUG]  [BUGGY]  cc.addNumber(d  -  1);  Context  cc  =  getCurrentContext().getContextForNumber(d);  [CE]  'else'  without  'if'  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addNumber(d  -  1);  Context  cc  =  getCurrentContext().getContextForNumber(d);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    -    1);    Context  cc  =  getCurrentContext().getContextForNumber(d);	  	non-compiled	[CE]  'else'  without  'if'	10	None	add
117	[BUG]  [BUGGY]  cc.addNumber(d  -  1);  Context  cc  =  getCurrentContext().getContextForNoDeclaration(d);  [CE]  'else'  without  'if'  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addNumber(d  -  1);  Context  cc  =  getCurrentContext().getContextForNoDeclaration(d);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    -    1);    Context  cc  =  getCurrentContext().getContextForNoDeclaration(d);	  	non-compiled	[CE]  'else'  without  'if'	10	None	add
118	[BUG]  [BUGGY]  cc.addNumber(d  -  1);  Context  cc  =  getCurrentContext();  [CE]  'else'  without  'if'  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addNumber(d  -  1);  Context  cc  =  getCurrentContext();  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    -    1);    Context  cc  =  getCurrentContext();	  	non-compiled	[CE]  'else'  without  'if'	10	None	add
119	[BUG]  [BUGGY]  cc.addPosition(d,  d);  [CE]  'else'  without  'if'  [FE]          ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addPosition(d,  d);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addPosition(d,  d);	  cc.addPosition(d);    	non-compiled	[CE]  'else'  without  'if'	14	None	replace
120	[BUG]  [BUGGY]      Context  c  =  getCurrentContext();  add(c,  d);  [CE]  invalid  method  declaration;  return  type  required  [FE]    AssertionFailedError    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]      Context  c  =  getCurrentContext();  add(c,  d);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	        Context  c  =  getCurrentContext();  add(c,  d);	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	add
121	[BUG]  [BUGGY]      Context  c  =  context.getCurrentContext();  add(c,  d);  [CE]  invalid  method  declaration;  return  type  required  [FE]      AssertionFailedError    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]      Context  c  =  context.getCurrentContext();  add(c,  d);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	        Context  c  =  context.getCurrentContext();  add(c,  d);	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	add
122	[BUG]  [BUGGY]      double  c  =  getSimpleNumber(key);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]      double  c  =  getSimpleNumber(key);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	        double  c  =  getSimpleNumber(key);	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	add
123	[BUG]  [BUGGY]  cc.addChildToFront(d  -  1);  [CE]  'else'  without  'if'  [FE]    junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addChildToFront(d  -  1);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToFront(d  -  1);	  cc.addNumber(d    -    1);    	non-compiled	[CE]  'else'  without  'if'	11	None	replace
124	[BUG]  [BUGGY]  cc.addValue(d  -  1);  [CE]  'else'  without  'if'  [FE]      junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addValue(d  -  1);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addValue(d  -  1);	  cc.addNumber(d    -    1);    	non-compiled	[CE]  'else'  without  'if'	11	None	replace
125	[BUG]  [BUGGY]  cc.addExpr(d  -  1);  [CE]  'else'  without  'if'  [FE]        junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addExpr(d  -  1);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addExpr(d  -  1);	  cc.addNumber(d    -    1);    	non-compiled	[CE]  'else'  without  'if'	11	None	replace
126	[BUG]  [BUGGY]  cc.addExpr(d,  d);  [CE]  [FE]        ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addExpr(d,  d);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addExpr(d,  d);	  cc.addExpr(d);    	non-compiled	[CE]  	1	None	replace
127	[BUG]  [BUGGY]  cc.add(Double.toString(d));  Context  cc  =  getCurrentContext();  [CE]  [FE]    ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.add(Double.toString(d));  Context  cc  =  getCurrentContext();  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d));    Context  cc  =  getCurrentContext();	  	non-compiled	[CE]  	12	None	add
128	[BUG]  [BUGGY]  cc.add(Double.toString(d));  Context  cc  =  context.getCurrentContext();  [CE]  [FE]      ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.add(Double.toString(d));  Context  cc  =  context.getCurrentContext();  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d));    Context  cc  =  context.getCurrentContext();	  	non-compiled	[CE]  	12	None	add
129	[BUG]  [BUGGY]  cc.add(Double.toString(d));  cc.add(Double.toString(d);  [CE]  [FE]        ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.add(Double.toString(d));  cc.add(Double.toString(d);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d));    cc.add(Double.toString(d);	  	non-compiled	[CE]  	12	None	add
130	[BUG]  [BUGGY]  cc.addChildToFront(double);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addChildToFront(double);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToFront(double);	  cc.addChildToFront(d);    	non-compiled	[CE]  	3	None	replace
131	[BUG]  [BUGGY]  cc.addLastChild(d);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addLastChild(d);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addLastChild(d);	  cc.addChildToFront(d);    	non-compiled	[CE]  	3	None	replace
132	[BUG]  [BUGGY]  cc.removeChild(d);  [CE]  orphaned  case  [FE]                ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.removeChild(d);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.removeChild(d);	  cc.addChildToFront(d);    	non-compiled	[CE]  orphaned  case	3	None	replace
133	[BUG]  [BUGGY]  cc.add(Double.toString(d),  Context.START_OF_EXPR);  [CE]  orphaned  case  [FE]    ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.add(Double.toString(d),  Context.START_OF_EXPR);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d),  Context.START_OF_EXPR);	  cc.add(Double.toString(d));    	non-compiled	[CE]  orphaned  case	13	None	replace
134	[BUG]  [BUGGY]  cc.add(Double.toString(d).doubleValue());  [CE]  orphaned  case  [FE]      ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.add(Double.toString(d).doubleValue());  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d).doubleValue());	  cc.add(Double.toString(d));    	non-compiled	[CE]  orphaned  case	13	None	replace
135	[BUG]  [BUGGY]  cc.addValue(Double.toString(d));  [CE]  orphaned  case  [FE]        ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addValue(Double.toString(d));  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addValue(Double.toString(d));	  cc.add(Double.toString(d));    	non-compiled	[CE]  orphaned  case	13	None	replace
136	[BUG]  [BUGGY]  cc.addNumber(d  +  1);  Context  cc  =  getCurrentContext().getContextForNoInOperator(context);  [CE]  orphaned  case  [FE]    junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addNumber(d  +  1);  Context  cc  =  getCurrentContext().getContextForNoInOperator(context);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    +    1);    Context  cc  =  getCurrentContext().getContextForNoInOperator(context);	  	non-compiled	[CE]  orphaned  case	6	None	add
137	[BUG]  [BUGGY]  cc.addNumber(d  +  1);  Context  cc  =  getContext().getCurrentContext();  [CE]  orphaned  case  [FE]      junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addNumber(d  +  1);  Context  cc  =  getContext().getCurrentContext();  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    +    1);    Context  cc  =  getContext().getCurrentContext();	  	non-compiled	[CE]  orphaned  case	6	None	add
138	[BUG]  [BUGGY]  cc.addNumber(d  +  1);  Context  cc  =  getContext().getCurrentContext().getContextForNoInOperator(context);  [CE]  orphaned  case  [FE]        junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addNumber(d  +  1);  Context  cc  =  getContext().getCurrentContext().getContextForNoInOperator(context);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    +    1);    Context  cc  =  getContext().getCurrentContext().getContextForNoInOperator(context);	  	non-compiled	[CE]  orphaned  case	6	None	add
139	[BUG]  [BUGGY]  cc.addNumber(d  +  1);  Context  cc  =  getContext().getContextForNoInOperator(context);  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addNumber(d  +  1);  Context  cc  =  getContext().getContextForNoInOperator(context);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    +    1);    Context  cc  =  getContext().getContextForNoInOperator(context);	  	non-compiled	[CE]  not  a  statement	6	None	add
140	[BUG]  [BUGGY]  cc.addNumber(d  +  1);  Context  cc  =  getCurrentContext().getContextForNoInOperator(d);  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addNumber(d  +  1);  Context  cc  =  getCurrentContext().getContextForNoInOperator(d);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    +    1);    Context  cc  =  getCurrentContext().getContextForNoInOperator(d);	  	non-compiled	[CE]  not  a  statement	6	None	add
141	[BUG]  [BUGGY]  cc.add(d,  d);  [CE]  not  a  statement  [FE]          ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.add(d,  d);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d,  d);	  cc.add(d);    	non-compiled	[CE]  not  a  statement	2	None	replace
142	[BUG]  [BUGGY]  cc.add(d,  p);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.add(d,  p);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d,  p);	  cc.add(d);    	non-compiled	[CE]  	2	None	replace
143	[BUG]  [BUGGY]  cc.add(d  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]    junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.add(d  +  1);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d  +  1);	  cc.addNumber(d    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
144	[BUG]  [BUGGY]  cc.addNumber(d  +  1,  d);  [CE]  invalid  method  declaration;  return  type  required  [FE]      junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addNumber(d  +  1,  d);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d  +  1,  d);	  cc.addNumber(d    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
145	[BUG]  [BUGGY]  cc.addNumber(d,  d  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]        junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {    [BUGGY]  cc.addNumber(d,  d  +  1);  [BUGGY]    }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  d  +  1);	  cc.addNumber(d    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
