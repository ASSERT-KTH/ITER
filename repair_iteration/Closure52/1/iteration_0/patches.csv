bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  cc.addExpr(d);  [CE]  cannot  find  symbol  [FE]    ComparisonFailure  [CONTEXT]  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [BUGGY]  cc.addExpr(d);  [BUGGY]  }  else  {  addExpr(c,  1);  }  }  add( ": ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addExpr(d);	cc.addNumber(d);  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
2	[BUG]  [BUGGY]  cc.add(d);  [CE]  method  add  in  class  CodeConsumer  cannot  be  applied  to  given  types;  [FE]      ComparisonFailure  [CONTEXT]  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [BUGGY]  cc.add(d);  [BUGGY]  }  else  {  addExpr(c,  1);  }  }  add( ": ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d);	cc.addNumber(d);  	non-compiled	[CE]  method  add  in  class  CodeConsumer  cannot  be  applied  to  given  types;	1	None	replace
3	[BUG]  [BUGGY]  cc.addChildToFront(d);  [CE]  [FE]        ComparisonFailure  [CONTEXT]  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [BUGGY]  cc.addChildToFront(d);  [BUGGY]  }  else  {  addExpr(c,  1);  }  }  add( ": ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToFront(d);	cc.addNumber(d);  	non-compiled	[CE]  	1	None	replace
4	[BUG]  [BUGGY]  cc.addValue(d);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure  [CONTEXT]  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [BUGGY]  cc.addValue(d);  [BUGGY]  }  else  {  addExpr(c,  1);  }  }  add( ": ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addValue(d);	cc.addNumber(d);  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
5	[BUG]  [BUGGY]  cc.addNumber(d,  1);  [CE]  method  addNumber  in  class  CodeConsumer  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure  [CONTEXT]  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [BUGGY]  cc.addNumber(d,  1);  [BUGGY]  }  else  {  addExpr(c,  1);  }  }  add( ": ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  1);	cc.addNumber(d);  	non-compiled	[CE]  method  addNumber  in  class  CodeConsumer  cannot  be  applied  to  given  types;	1	None	replace
6	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x={ "a ": "paul "  [FE]              ComparisonFailure  [CONTEXT]  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [BUGGY]  cc.addNumber(d  +  1);  [BUGGY]  }  else  {  addExpr(c,  1);  }  }  add( ": ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	add	cc.addNumber(d  +  1);	cc.addNumber(d);  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x={ "a ": "paul "  	1	5	replace
7	[BUG]  [BUGGY]  cc.addNumber(d  +  1);  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x={ "a ": "paul "  [FE]              ComparisonFailure  [CONTEXT]  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [BUGGY]  cc.addNumber(d  +  1);  [BUGGY]  }  else  {  addExpr(c,  1);  }  }  add( ": ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d  +  1);	cc.addNumber(d);  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x={ "a ": "paul "  	1	5	replace
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                ComparisonFailure  [CONTEXT]  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [BUGGY]    [BUGGY]  }  else  {  addExpr(c,  1);  }  }  add( ": ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	add	  	cc.addNumber(d);  	compilable	  [FE]  AssertionFailedError  	1	5	replace
9	[BUG]  [BUGGY]    [FE]  AssertionFailedError  [FE]                ComparisonFailure  [CONTEXT]  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [BUGGY]    [BUGGY]  }  else  {  addExpr(c,  1);  }  }  add( ": ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	  	cc.addNumber(d);  	compilable	  [FE]  AssertionFailedError  	1	5	replace
10	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x={ "a ": "paul "  [FE]    ComparisonFailure  [CONTEXT]  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [BUGGY]  cc.addNumber(d  -  1);  [BUGGY]  }  else  {  addExpr(c,  1);  }  }  add( ": ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	add	cc.addNumber(d  -  1);	cc.addNumber(d);  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x={ "a ": "paul "  	1	5	replace
11	[BUG]  [BUGGY]  cc.addNumber(d  -  1);  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x={ "a ": "paul "  [FE]    ComparisonFailure  [CONTEXT]  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [BUGGY]  cc.addNumber(d  -  1);  [BUGGY]  }  else  {  addExpr(c,  1);  }  }  add( ": ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d  -  1);	cc.addNumber(d);  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  x={ "a ": "paul "  	1	5	replace
12	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure  [CONTEXT]  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [BUGGY]  cc.add(Double.toString(d));  [BUGGY]  }  else  {  addExpr(c,  1);  }  }  add( ": ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	add	cc.add(Double.toString(d));	cc.addNumber(d);  	compilable	  [FE]  ComparisonFailure  	1	4	replace
13	[BUG]  [BUGGY]  cc.add(Double.toString(d));  [FE]  ComparisonFailure  [FE]    ComparisonFailure  [CONTEXT]  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [BUGGY]  cc.add(Double.toString(d));  [BUGGY]  }  else  {  addExpr(c,  1);  }  }  add( ": ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d));	cc.addNumber(d);  	compilable	  [FE]  ComparisonFailure  	1	4	replace
14	[BUG]  [BUGGY]  cc.addPosition(d);  [CE]  cannot  find  symbol  [FE]      ComparisonFailure  [CONTEXT]  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [BUGGY]  cc.addPosition(d);  [BUGGY]  }  else  {  addExpr(c,  1);  }  }  add( ": ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addPosition(d);	cc.addNumber(d);  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
