bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  cc.addNumber(d,  4);  [CE]  invalid  method  declaration;  return  type  required  [FE]                            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d,  4);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  4);	  cc.addNumber(d,    3);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
2	[BUG]  [BUGGY]  c.addNumber(d,  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addNumber(d,  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addNumber(d,  1);	  cc.addNumber(d,    3);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
3	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().getContextForNoInOperator(context);  [CE]  invalid  method  declaration;  return  type  required  [FE]        junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getCurrentContext().getContextForNoInOperator(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getCurrentContext().getContextForNoInOperator(context);	  cc.addNumber(d    +    1);    Context    cc    =    getCurrentContext().getContextForNoInOperator(context);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	136	None	replace
4	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().getContextForNoneOperator(context);  [CE]  orphaned  case  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getCurrentContext().getContextForNoneOperator(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getCurrentContext().getContextForNoneOperator(context);	  cc.addNumber(d    +    1);    Context    cc    =    getCurrentContext().getContextForNoInOperator(context);    	non-compiled	[CE]  orphaned  case	136	None	replace
5	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().getContextForNonInoperator(context);  [CE]  orphaned  case  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getCurrentContext().getContextForNonInoperator(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getCurrentContext().getContextForNonInoperator(context);	  cc.addNumber(d    +    1);    Context    cc    =    getCurrentContext().getContextForNoInOperator(context);    	non-compiled	[CE]  orphaned  case	136	None	replace
6	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().getContextForNonLocal(context);  [CE]  orphaned  case  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getCurrentContext().getContextForNonLocal(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getCurrentContext().getContextForNonLocal(context);	  cc.addNumber(d    +    1);    Context    cc    =    getCurrentContext().getContextForNoInOperator(context);    	non-compiled	[CE]  orphaned  case	136	None	replace
7	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().getContextForNonEmpty(context);  [CE]  orphaned  case  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getCurrentContext().getContextForNonEmpty(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getCurrentContext().getContextForNonEmpty(context);	  cc.addNumber(d    +    1);    Context    cc    =    getCurrentContext().getContextForNoInOperator(context);    	non-compiled	[CE]  orphaned  case	136	None	replace
8	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().getContextForNaN(context);  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getCurrentContext().getContextForNaN(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getCurrentContext().getContextForNaN(context);	  cc.addNumber(d    +    1);    Context    cc    =    getCurrentContext().getContextForNoInOperator(context);    	non-compiled	[CE]  orphaned  case	136	None	replace
9	[BUG]  [BUGGY]  c  =  getSimpleNumber(d,  1);  [CE]  orphaned  case  [FE]        AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  getSimpleNumber(d,  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  getSimpleNumber(d,  1);	          c    =    getSimpleNumber(d);    	non-compiled	[CE]  orphaned  case	89	None	replace
10	[BUG]  [BUGGY]  c  =  getSimpleNumber(d  +  1);  [CE]  orphaned  case  [FE]          AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  getSimpleNumber(d  +  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  getSimpleNumber(d  +  1);	          c    =    getSimpleNumber(d);    	non-compiled	[CE]  orphaned  case	89	None	replace
11	[BUG]  [BUGGY]  c  =  getSimpleNumber(n);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  getSimpleNumber(n);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  getSimpleNumber(n);	          c    =    getSimpleNumber(d);    	non-compiled	[CE]  orphaned  case	89	None	replace
12	[BUG]  [BUGGY]  c  =  getSimpleNumber(d.getLastChild());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  getSimpleNumber(d.getLastChild());  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  getSimpleNumber(d.getLastChild());	          c    =    getSimpleNumber(d);    	non-compiled	[CE]  orphaned  case	89	None	replace
13	[BUG]  [BUGGY]  c  =  getSimpleNumber(Double.valueOf(d));  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  getSimpleNumber(Double.valueOf(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  getSimpleNumber(Double.valueOf(d));	          c    =    getSimpleNumber(d);    	non-compiled	[CE]  orphaned  case	89	None	replace
14	[BUG]  [BUGGY]  Context  cc  =  getContext().addNumber(Double.valueOf(d));  [CE]  orphaned  case  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getContext().addNumber(Double.valueOf(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getContext().addNumber(Double.valueOf(d));	  cc.addNumber(d    -    1);    Context    cc    =    getContext().addNumber(Double.valueOf(d));    	non-compiled	[CE]  orphaned  case	84	None	replace
15	[BUG]  [BUGGY]  conn.add(d  -  1);  Context  cc  =  getContext().addNumber(Double.valueOf(d));  [CE]  orphaned  case  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  conn.add(d  -  1);  Context  cc  =  getContext().addNumber(Double.valueOf(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	conn.add(d  -  1);  Context  cc  =  getContext().addNumber(Double.valueOf(d));	  cc.addNumber(d    -    1);    Context    cc    =    getContext().addNumber(Double.valueOf(d));    	non-compiled	[CE]  orphaned  case	84	None	replace
16	[BUG]  [BUGGY]  cc  =  getContext().addNumber(Double.valueOf(d));  [CE]  orphaned  case  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc  =  getContext().addNumber(Double.valueOf(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc  =  getContext().addNumber(Double.valueOf(d));	  cc.addNumber(d    -    1);    Context    cc    =    getContext().addNumber(Double.valueOf(d));    	non-compiled	[CE]  orphaned  case	84	None	replace
17	[BUG]  [BUGGY]  cc.addNumber(Double.valueOf(d));  [CE]  orphaned  case  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(Double.valueOf(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(Double.valueOf(d));	  cc.addNumber(d    -    1);    Context    cc    =    getContext().addNumber(Double.valueOf(d));    	non-compiled	[CE]  orphaned  case	84	None	replace
18	[BUG]  [BUGGY]  Context  cc  =  getContext().addNumber(Double.parseDouble(d));  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getContext().addNumber(Double.parseDouble(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getContext().addNumber(Double.parseDouble(d));	  cc.addNumber(d    -    1);    Context    cc    =    getContext().addNumber(Double.valueOf(d));    	non-compiled	[CE]  orphaned  case	84	None	replace
19	[BUG]  [BUGGY]  c  =  getContext().addNumber(Double.valueOf(d));  [CE]  orphaned  case  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  getContext().addNumber(Double.valueOf(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  getContext().addNumber(Double.valueOf(d));	  cc.addNumber(d    -    1);    Context    cc    =    getContext().addNumber(Double.valueOf(d));    	non-compiled	[CE]  orphaned  case	84	None	replace
20	[BUG]  [BUGGY]  Context.reportCodeChange();  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context.reportCodeChange();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context.reportCodeChange();	  Context.addExpr(d);    	non-compiled	[CE]  orphaned  case	45	None	replace
21	[BUG]  [BUGGY]  Context.addExpr(d,  c);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context.addExpr(d,  c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context.addExpr(d,  c);	  Context.addExpr(d);    	non-compiled	[CE]  orphaned  case	45	None	replace
22	[BUG]  [BUGGY]  Context.addExpr(c,  d);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context.addExpr(c,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context.addExpr(c,  d);	  Context.addExpr(d);    	non-compiled	[CE]  orphaned  case	45	None	replace
23	[BUG]  [BUGGY]  Context.report(JSError.make(c,  n,  UNKNOWN_SYNTHETIC));  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context.report(JSError.make(c,  n,  UNKNOWN_SYNTHETIC));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context.report(JSError.make(c,  n,  UNKNOWN_SYNTHETIC));	  Context.addExpr(d);    	non-compiled	[CE]  orphaned  case	45	None	replace
24	[BUG]  [BUGGY]  Context.report(JSError.make(c,  n,  UNKNOWN_EXPR_TYPE));  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context.report(JSError.make(c,  n,  UNKNOWN_EXPR_TYPE));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context.report(JSError.make(c,  n,  UNKNOWN_EXPR_TYPE));	  Context.addExpr(d);    	non-compiled	[CE]  orphaned  case	45	None	replace
25	[BUG]  [BUGGY]  Context.report(JSError.make(c,  n,  DUPLICATE_NUMBER_ERROR,  d));  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context.report(JSError.make(c,  n,  DUPLICATE_NUMBER_ERROR,  d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context.report(JSError.make(c,  n,  DUPLICATE_NUMBER_ERROR,  d));	  Context.addExpr(d);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
26	[BUG]  [BUGGY]  Context.report(JSError.make(c,  n,  UNKNOWN_SYNTHETIC,  d));  [CE]  invalid  method  declaration;  return  type  required  [FE]                            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context.report(JSError.make(c,  n,  UNKNOWN_SYNTHETIC,  d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context.report(JSError.make(c,  n,  UNKNOWN_SYNTHETIC,  d));	  Context.addExpr(d);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
27	[BUG]  [BUGGY]  cc.addNumber(d  +  1,  double  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]        junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  +  1,  double  n);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d  +  1,  double  n);	  cc.addNumber(d    +    1,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	88	None	replace
28	[BUG]  [BUGGY]  cc.addNumber(d  +  1,  n,  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  +  1,  n,  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d  +  1,  n,  1);	  cc.addNumber(d    +    1,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	88	None	replace
29	[BUG]  [BUGGY]  cc.addNumber(d  *  1,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  *  1,  n);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d  *  1,  n);	  cc.addNumber(d    +    1,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	88	None	replace
30	[BUG]  [BUGGY]  cc.addNumber(d,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d,  n);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  n);	  cc.addNumber(d    +    1,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	88	None	replace
31	[BUG]  [BUGGY]  cc.addNumber(d  +  1,  n,  context);  [CE]  invalid  method  declaration;  return  type  required  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  +  1,  n,  context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d  +  1,  n,  context);	  cc.addNumber(d    +    1,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	88	None	replace
32	[BUG]  [BUGGY]  cc.addNumber(n  +  1,  d);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(n  +  1,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(n  +  1,  d);	  cc.addNumber(d    +    1,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	88	None	replace
33	[BUG]  [BUGGY]  cc.add(Double.toString(d).doubleValue()  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toString(d).doubleValue()  +  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d).doubleValue()  +  1);	  cc.add(Double.toString(d).doubleValue());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	134	None	replace
34	[BUG]  [BUGGY]  cc.add(Double.toString(d),  Double.valueOf(d));  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toString(d),  Double.valueOf(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d),  Double.valueOf(d));	  cc.add(Double.toString(d).doubleValue());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	134	None	replace
35	[BUG]  [BUGGY]  cc.add(Double.toString(d),  Double.parseDouble(d));  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toString(d),  Double.parseDouble(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d),  Double.parseDouble(d));	  cc.add(Double.toString(d).doubleValue());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	134	None	replace
36	[BUG]  [BUGGY]  cc.add(Double.toString(d),  doubleValue());  [CE]  [FE]                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toString(d),  doubleValue());  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d),  doubleValue());	  cc.add(Double.toString(d).doubleValue());    	non-compiled	[CE]  	134	None	replace
37	[BUG]  [BUGGY]  cc.add(Double.toString(d),  Double.doubleValue());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toString(d),  Double.doubleValue());  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d),  Double.doubleValue());	  cc.add(Double.toString(d).doubleValue());    	non-compiled	[CE]  	134	None	replace
38	[BUG]  [BUGGY]  Context  cc  =  getContext().getContextForNoInOperator(context);  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getContext().getContextForNoInOperator(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getContext().getContextForNoInOperator(context);	  cc.addNumber(d    +    1);    Context    cc    =    getContext().getContextForNoInOperator(context);    	non-compiled	[CE]  <identifier>  expected	139	None	replace
39	[BUG]  [BUGGY]  conn.add(d  +  1);  Context  cc  =  getContext().getContextForNoInOperator(context);  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  conn.add(d  +  1);  Context  cc  =  getContext().getContextForNoInOperator(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	conn.add(d  +  1);  Context  cc  =  getContext().getContextForNoInOperator(context);	  cc.addNumber(d    +    1);    Context    cc    =    getContext().getContextForNoInOperator(context);    	non-compiled	[CE]  <identifier>  expected	139	None	replace
40	[BUG]  [BUGGY]  Node  c  =  getContext().getContextForNoInOperator(context);  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Node  c  =  getContext().getContextForNoInOperator(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Node  c  =  getContext().getContextForNoInOperator(context);	  cc.addNumber(d    +    1);    Context    cc    =    getContext().getContextForNoInOperator(context);    	non-compiled	[CE]  <identifier>  expected	139	None	replace
41	[BUG]  [BUGGY]  Context  cc  =  getContext().getContextForNoOutOperator(context);  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getContext().getContextForNoOutOperator(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getContext().getContextForNoOutOperator(context);	  cc.addNumber(d    +    1);    Context    cc    =    getContext().getContextForNoInOperator(context);    	non-compiled	[CE]  <identifier>  expected	139	None	replace
42	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().addNumber(d  +  1);  [CE]  <identifier>  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getCurrentContext().addNumber(d  +  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getCurrentContext().addNumber(d  +  1);	  cc.addNumber(d    +    1);    Context    cc    =    getCurrentContext().addNumber(d    +    1);    	non-compiled	[CE]  <identifier>  expected	97	None	replace
43	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().addNumber(d);  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getCurrentContext().addNumber(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getCurrentContext().addNumber(d);	  cc.addNumber(d    +    1);    Context    cc    =    getCurrentContext().addNumber(d    +    1);    	non-compiled	[CE]  	97	None	replace
44	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().addNumber(d  +  2);  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getCurrentContext().addNumber(d  +  2);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getCurrentContext().addNumber(d  +  2);	  cc.addNumber(d    +    1);    Context    cc    =    getCurrentContext().addNumber(d    +    1);    	non-compiled	[CE]  	97	None	replace
45	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().addNumber(d  +  1,  d);  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getCurrentContext().addNumber(d  +  1,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getCurrentContext().addNumber(d  +  1,  d);	  cc.addNumber(d    +    1);    Context    cc    =    getCurrentContext().addNumber(d    +    1);    	non-compiled	[CE]  	97	None	replace
46	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().addNumber(d  +  3);  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getCurrentContext().addNumber(d  +  3);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getCurrentContext().addNumber(d  +  3);	  cc.addNumber(d    +    1);    Context    cc    =    getCurrentContext().addNumber(d    +    1);    	non-compiled	[CE]  	97	None	replace
47	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().addNumber(d  +  1,  n);  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getCurrentContext().addNumber(d  +  1,  n);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getCurrentContext().addNumber(d  +  1,  n);	  cc.addNumber(d    +    1);    Context    cc    =    getCurrentContext().addNumber(d    +    1);    	non-compiled	[CE]  	97	None	replace
48	[BUG]  [BUGGY]  c.addChildToFront(Double.toString(d));  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addChildToFront(Double.toString(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addChildToFront(Double.toString(d));	  cc.addChildToFront(Double.toString(d));    	non-compiled	[CE]  	15	None	replace
49	[BUG]  [BUGGY]  Context  c  =  context.addChildToFront(Double.toString(d));  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  context.addChildToFront(Double.toString(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  context.addChildToFront(Double.toString(d));	  cc.addChildToFront(Double.toString(d));    	non-compiled	[CE]  	15	None	replace
50	[BUG]  [BUGGY]  Context  cc  =  context.addChildToFront(Double.toString(d));  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  context.addChildToFront(Double.toString(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  context.addChildToFront(Double.toString(d));	  cc.addChildToFront(Double.toString(d));    	non-compiled	[CE]  orphaned  case	15	None	replace
51	[BUG]  [BUGGY]  cc.addChildToFront(Double.toString(d),  c);  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addChildToFront(Double.toString(d),  c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToFront(Double.toString(d),  c);	  cc.addChildToFront(Double.toString(d));    	non-compiled	[CE]  orphaned  case	15	None	replace
52	[BUG]  [BUGGY]  c.addChildToFront(Double.toString(d),  c);  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addChildToFront(Double.toString(d),  c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addChildToFront(Double.toString(d),  c);	  cc.addChildToFront(Double.toString(d));    	non-compiled	[CE]  orphaned  case	15	None	replace
53	[BUG]  [BUGGY]  c  =  context.getStructure();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  context.getStructure();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  context.getStructure();	          c    =    context.getCurrentStructure();    	non-compiled	[CE]  orphaned  case	28	None	replace
54	[BUG]  [BUGGY]  c  =  context.getCurrentNode();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  context.getCurrentNode();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  context.getCurrentNode();	          c    =    context.getCurrentStructure();    	non-compiled	[CE]  orphaned  case	28	None	replace
55	[BUG]  [BUGGY]  c  =  context.getFirstChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  context.getFirstChild();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  context.getFirstChild();	          c    =    context.getCurrentStructure();    	non-compiled	[CE]  orphaned  case	28	None	replace
56	[BUG]  [BUGGY]  c  =  context.createStructure(d);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  context.createStructure(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  context.createStructure(d);	          c    =    context.getCurrentStructure();    	non-compiled	[CE]  orphaned  case	28	None	replace
57	[BUG]  [BUGGY]  c  =  context.getCurrentContext();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  context.getCurrentContext();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  context.getCurrentContext();	          c    =    context.getCurrentStructure();    	non-compiled	[CE]  orphaned  case	28	None	replace
58	[BUG]  [BUGGY]  this.context.putBooleanProp(NodeUtil.isJavaIdentifier(d));  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  this.context.putBooleanProp(NodeUtil.isJavaIdentifier(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	this.context.putBooleanProp(NodeUtil.isJavaIdentifier(d));	  cc.add(Double.toString(d));    cc.add(Double.toString(d));    this.context.putBooleanProp(NodeUtil.isJavaIdentifier(d));    	non-compiled	[CE]  orphaned  case	71	None	replace
59	[BUG]  [BUGGY]  this.context.putBooleanProp(NodeUtil.isJSIdentifier(d));  [CE]  [FE]              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  this.context.putBooleanProp(NodeUtil.isJSIdentifier(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	this.context.putBooleanProp(NodeUtil.isJSIdentifier(d));	  cc.add(Double.toString(d));    cc.add(Double.toString(d));    this.context.putBooleanProp(NodeUtil.isJavaIdentifier(d));    	non-compiled	[CE]  	71	None	replace
60	[BUG]  [BUGGY]  this.context.putBooleanProp(NodeUtil.isImmutableValue(d));  [CE]  [FE]                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  this.context.putBooleanProp(NodeUtil.isImmutableValue(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	this.context.putBooleanProp(NodeUtil.isImmutableValue(d));	  cc.add(Double.toString(d));    cc.add(Double.toString(d));    this.context.putBooleanProp(NodeUtil.isJavaIdentifier(d));    	non-compiled	[CE]  	71	None	replace
61	[BUG]  [BUGGY]  this.context.putBooleanProp(NodeUtil.isNaN(d));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  this.context.putBooleanProp(NodeUtil.isNaN(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	this.context.putBooleanProp(NodeUtil.isNaN(d));	  cc.add(Double.toString(d));    cc.add(Double.toString(d));    this.context.putBooleanProp(NodeUtil.isJavaIdentifier(d));    	non-compiled	[CE]  	71	None	replace
62	[BUG]  [BUGGY]  c.add(d);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.add(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.add(d);	  cc.add(Double.toString(d));    cc.add(Double.toString(d));    this.context.putBooleanProp(NodeUtil.isJavaIdentifier(d));    	non-compiled	[CE]  	71	None	replace
63	[BUG]  [BUGGY]  c.addNumber(d  -  1);  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addNumber(d  -  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addNumber(d  -  1);	  cc.addNumber(d    -    1);    cc.addNumber(d    -    1);    }    else    {    addExpr(c,    2);    	non-compiled	[CE]  	86	None	replace
64	[BUG]  [BUGGY]  c.addNumber(d  -  1);  addExpr(c,  2);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addNumber(d  -  1);  addExpr(c,  2);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addNumber(d  -  1);  addExpr(c,  2);	  cc.addNumber(d    -    1);    cc.addNumber(d    -    1);    }    else    {    addExpr(c,    2);    	non-compiled	[CE]  not  a  statement	86	None	replace
65	[BUG]  [BUGGY]  c.add(d  -  1);  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.add(d  -  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.add(d  -  1);	  cc.addNumber(d    -    1);    cc.addNumber(d    -    1);    }    else    {    addExpr(c,    2);    	non-compiled	[CE]  not  a  statement	86	None	replace
66	[BUG]  [BUGGY]  c.addNumber(d  -  1);  }  else  {  addExpr(c,  2);  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addNumber(d  -  1);  }  else  {  addExpr(c,  2);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addNumber(d  -  1);  }  else  {  addExpr(c,  2);	  cc.addNumber(d    -    1);    cc.addNumber(d    -    1);    }    else    {    addExpr(c,    2);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
67	[BUG]  [BUGGY]  cc.addNumber(d  -  1,  d);  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  -  1,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d  -  1,  d);	  cc.addNumber(d    -    1,    c);    	non-compiled	[CE]  not  a  statement	9	None	replace
68	[BUG]  [BUGGY]  cc.addNumber(d,  c  -  1,  d);  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d,  c  -  1,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  c  -  1,  d);	  cc.addNumber(d    -    1,    c);    	non-compiled	[CE]  not  a  statement	9	None	replace
69	[BUG]  [BUGGY]  cc.addNumber(d,  c  -  1);  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d,  c  -  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  c  -  1);	  cc.addNumber(d    -    1,    c);    	non-compiled	[CE]  not  a  statement	9	None	replace
70	[BUG]  [BUGGY]  cc.addNumber(d  /  1,  c);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  /  1,  c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d  /  1,  c);	  cc.addNumber(d    -    1,    c);    	non-compiled	[CE]  not  a  statement	9	None	replace
71	[BUG]  [BUGGY]  cc.addNumber(d,  d  -  1,  c);  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d,  d  -  1,  c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  d  -  1,  c);	  cc.addNumber(d    -    1,    c);    	non-compiled	[CE]  orphaned  case	9	None	replace
72	[BUG]  [BUGGY]  cc.addNumber(d  -  1,  d,  c);  [CE]  orphaned  case  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  -  1,  d,  c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d  -  1,  d,  c);	  cc.addNumber(d    -    1,    c);    	non-compiled	[CE]  orphaned  case	9	None	replace
73	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext();  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getCurrentContext();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getCurrentContext();	  cc.addNumber(d    -    1);    Context    cc    =    getCurrentContext();    	non-compiled	[CE]  orphaned  case	118	None	replace
74	[BUG]  [BUGGY]  conn.add(d  -  1);  Context  cc  =  getCurrentContext();  [CE]  orphaned  case  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  conn.add(d  -  1);  Context  cc  =  getCurrentContext();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	conn.add(d  -  1);  Context  cc  =  getCurrentContext();	  cc.addNumber(d    -    1);    Context    cc    =    getCurrentContext();    	non-compiled	[CE]  orphaned  case	118	None	replace
75	[BUG]  [BUGGY]  cc.addNumber(d,  1,  d);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d,  1,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  1,  d);	  cc.addNumber(d,    1,    c);    	non-compiled	[CE]  orphaned  case	30	None	replace
76	[BUG]  [BUGGY]  c.addNumber(d,  1,  c);  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addNumber(d,  1,  c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addNumber(d,  1,  c);	  cc.addNumber(d,    1,    c);    	non-compiled	[CE]  not  a  statement	30	None	replace
77	[BUG]  [BUGGY]  c.addNumber(d,  1,  d);  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addNumber(d,  1,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addNumber(d,  1,  d);	  cc.addNumber(d,    1,    c);    	non-compiled	[CE]  orphaned  case	30	None	replace
78	[BUG]  [BUGGY]  cc.addNumber(d,  2,  c);  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d,  2,  c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  2,  c);	  cc.addNumber(d,    1,    c);    	non-compiled	[CE]  orphaned  case	30	None	replace
79	[BUG]  [BUGGY]  cc.addNumber(d,  1,  double  d);  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d,  1,  double  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  1,  double  d);	  cc.addNumber(d,    1,    c);    	non-compiled	[CE]  orphaned  case	30	None	replace
80	[BUG]  [BUGGY]  cc.addNumber(d,  0,  c);  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d,  0,  c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  0,  c);	  cc.addNumber(d,    1,    c);    	non-compiled	[CE]  orphaned  case	30	None	replace
81	[BUG]  [BUGGY]  Context  cc  =  getContext().add(context,  double  d  +  1);  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getContext().add(context,  double  d  +  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getContext().add(context,  double  d  +  1);	  cc.addNumber(d    +    1);    Context    cc    =    getContext().add(context,    d    +    1);    	non-compiled	[CE]  orphaned  case	41	None	replace
82	[BUG]  [BUGGY]  Context  cc  =  getContext().add(context,  d  +  1);  [CE]  orphaned  case  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getContext().add(context,  d  +  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getContext().add(context,  d  +  1);	  cc.addNumber(d    +    1);    Context    cc    =    getContext().add(context,    d    +    1);    	non-compiled	[CE]  orphaned  case	41	None	replace
83	[BUG]  [BUGGY]  Context  cc  =  getContext().add(context,  Double.POSITIVE_INFINITY);  [CE]  orphaned  case  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getContext().add(context,  Double.POSITIVE_INFINITY);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getContext().add(context,  Double.POSITIVE_INFINITY);	  cc.addNumber(d    +    1);    Context    cc    =    getContext().add(context,    d    +    1);    	non-compiled	[CE]  orphaned  case	41	None	replace
84	[BUG]  [BUGGY]  Context  cc  =  getContext().add(context,  Double.NaN);  [CE]  orphaned  case  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getContext().add(context,  Double.NaN);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getContext().add(context,  Double.NaN);	  cc.addNumber(d    +    1);    Context    cc    =    getContext().add(context,    d    +    1);    	non-compiled	[CE]  orphaned  case	41	None	replace
85	[BUG]  [BUGGY]  Context  cc  =  getContext().add(context,  d);  [CE]  orphaned  case  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getContext().add(context,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getContext().add(context,  d);	  cc.addNumber(d    +    1);    Context    cc    =    getContext().add(context,    d    +    1);    	non-compiled	[CE]  orphaned  case	41	None	replace
86	[BUG]  [BUGGY]  Context  cc  =  getContext().add(context,  double  d);  [CE]  orphaned  case  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getContext().add(context,  double  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getContext().add(context,  double  d);	  cc.addNumber(d    +    1);    Context    cc    =    getContext().add(context,    d    +    1);    	non-compiled	[CE]  orphaned  case	41	None	replace
87	[BUG]  [BUGGY]  Context  cc  =  getContext().add(context,  d  +  1,  d);  [CE]  orphaned  case  [FE]                              junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getContext().add(context,  d  +  1,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getContext().add(context,  d  +  1,  d);	  cc.addNumber(d    +    1);    Context    cc    =    getContext().add(context,    d    +    1);    	non-compiled	[CE]  orphaned  case	41	None	replace
88	[BUG]  [BUGGY]  c.addNumber(d  -  1,  d);  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addNumber(d  -  1,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addNumber(d  -  1,  d);	  cc.addNumber(d    -    1);    cc.addNumber(d    -    1);    	non-compiled	[CE]  not  a  statement	55	None	replace
89	[BUG]  [BUGGY]  c.addNumber(double  d  -  1);  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addNumber(double  d  -  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addNumber(double  d  -  1);	  cc.addNumber(d    -    1);    cc.addNumber(d    -    1);    	non-compiled	[CE]  not  a  statement	55	None	replace
90	[BUG]  [BUGGY]  c.addNumber(n  -  1);  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addNumber(n  -  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addNumber(n  -  1);	  cc.addNumber(d    -    1);    cc.addNumber(d    -    1);    	non-compiled	[CE]  not  a  statement	55	None	replace
91	[BUG]  [BUGGY]  c.add(d  -  1,  d);  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.add(d  -  1,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.add(d  -  1,  d);	  cc.addNumber(d    -    1);    cc.addNumber(d    -    1);    	non-compiled	[CE]  not  a  statement	55	None	replace
92	[BUG]  [BUGGY]  Context  c  =  getCurrentContext();  add(d,  c);  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  getCurrentContext();  add(d,  c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  getCurrentContext();  add(d,  c);	          Context    c    =    getCurrentContext();    add(c,    d);    	non-compiled	[CE]  not  a  statement	120	None	replace
93	[BUG]  [BUGGY]  Context  c  =  getCurrentContext();  addExpr(c,  d);  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  getCurrentContext();  addExpr(c,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  getCurrentContext();  addExpr(c,  d);	          Context    c    =    getCurrentContext();    add(c,    d);    	non-compiled	[CE]  not  a  statement	120	None	replace
94	[BUG]  [BUGGY]  Context  c  =  getCurrentContext();  add(c,  double  d);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  getCurrentContext();  add(c,  double  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  getCurrentContext();  add(c,  double  d);	          Context    c    =    getCurrentContext();    add(c,    d);    	non-compiled	[CE]  not  a  statement	120	None	replace
95	[BUG]  [BUGGY]  Context  c  =  getCurrentContext();  add(context,  d);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  getCurrentContext();  add(context,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  getCurrentContext();  add(context,  d);	          Context    c    =    getCurrentContext();    add(c,    d);    	non-compiled	[CE]  not  a  statement	120	None	replace
96	[BUG]  [BUGGY]  Context  c  =  getCurrentContext();  add(c,  d,  1);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  getCurrentContext();  add(c,  d,  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  getCurrentContext();  add(c,  d,  1);	          Context    c    =    getCurrentContext();    add(c,    d);    	non-compiled	[CE]  not  a  statement	120	None	replace
97	[BUG]  [BUGGY]  Context  c  =  getCurrentContext();  add(c,  d,  n);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  getCurrentContext();  add(c,  d,  n);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  getCurrentContext();  add(c,  d,  n);	          Context    c    =    getCurrentContext();    add(c,    d);    	non-compiled	[CE]  orphaned  case	120	None	replace
98	[BUG]  [BUGGY]  cc.addValue(Double.toString(d)+  1);  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addValue(Double.toString(d)+  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addValue(Double.toString(d)+  1);	  cc.addValue(Double.toString(d));    	non-compiled	[CE]  orphaned  case	135	None	replace
99	[BUG]  [BUGGY]  c.addValue(Double.toString(d));  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addValue(Double.toString(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addValue(Double.toString(d));	  cc.addValue(Double.toString(d));    	non-compiled	[CE]  orphaned  case	135	None	replace
100	[BUG]  [BUGGY]  cc.addValue(Double.toString(d),  1);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addValue(Double.toString(d),  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addValue(Double.toString(d),  1);	  cc.addValue(Double.toString(d));    	non-compiled	[CE]  orphaned  case	135	None	replace
101	[BUG]  [BUGGY]  cc.addValue(d.toString());  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addValue(d.toString());  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addValue(d.toString());	  cc.addValue(Double.toString(d));    	non-compiled	[CE]  orphaned  case	135	None	replace
102	[BUG]  [BUGGY]  cc.addValue(Double.toString(d  +  1));  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addValue(Double.toString(d  +  1));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addValue(Double.toString(d  +  1));	  cc.addValue(Double.toString(d));    	non-compiled	[CE]  orphaned  case	135	None	replace
103	[BUG]  [BUGGY]  double  d  =  getSimpleNumber(key);  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  double  d  =  getSimpleNumber(key);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	double  d  =  getSimpleNumber(key);	  cc.addNumber(d    -    1);    cc.addNumber(d    -    1);    }    else    {    addExpr(c,    1);    	non-compiled	[CE]  orphaned  case	60	None	replace
104	[BUG]  [BUGGY]  c.addNumber(d  -  1);  addExpr(c,  1);  [CE]  orphaned  case  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addNumber(d  -  1);  addExpr(c,  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addNumber(d  -  1);  addExpr(c,  1);	  cc.addNumber(d    -    1);    cc.addNumber(d    -    1);    }    else    {    addExpr(c,    1);    	non-compiled	[CE]  orphaned  case	60	None	replace
105	[BUG]  [BUGGY]  cc.add(d,  context);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(d,  context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d,  context);	  cc.add(context,    d);    	non-compiled	[CE]  orphaned  case	65	None	replace
106	[BUG]  [BUGGY]  cc.add(context,  double  d);  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(context,  double  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(context,  double  d);	  cc.add(context,    d);    	non-compiled	[CE]  orphaned  case	65	None	replace
107	[BUG]  [BUGGY]  cc.add(d,  Context.IN_FOR_INIT_CLAUSE);  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(d,  Context.IN_FOR_INIT_CLAUSE);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d,  Context.IN_FOR_INIT_CLAUSE);	  cc.add(context,    d);    	non-compiled	[CE]  orphaned  case	65	None	replace
108	[BUG]  [BUGGY]  cc.add(context,  Double.POSITIVE_INFINITY);  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(context,  Double.POSITIVE_INFINITY);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(context,  Double.POSITIVE_INFINITY);	  cc.add(context,    d);    	non-compiled	[CE]  orphaned  case	65	None	replace
109	[BUG]  [BUGGY]  cc.add(d,  Context.OUT_FOR_INIT_CLAUSE);  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(d,  Context.OUT_FOR_INIT_CLAUSE);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d,  Context.OUT_FOR_INIT_CLAUSE);	  cc.add(context,    d);    	non-compiled	[CE]  orphaned  case	65	None	replace
110	[BUG]  [BUGGY]  cc.add(d,  Context.NEGATIVE_INIT_CLAUSE);  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(d,  Context.NEGATIVE_INIT_CLAUSE);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d,  Context.NEGATIVE_INIT_CLAUSE);	  cc.add(context,    d);    	non-compiled	[CE]  orphaned  case	65	None	replace
111	[BUG]  [BUGGY]  cc.addPosition(d,  double  d);  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addPosition(d,  double  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addPosition(d,  double  d);	  cc.addPosition(d,    d);    	non-compiled	[CE]  orphaned  case	119	None	replace
112	[BUG]  [BUGGY]  cc.addPosition(d,  double);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addPosition(d,  double);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addPosition(d,  double);	  cc.addPosition(d,    d);    	non-compiled	[CE]  orphaned  case	119	None	replace
113	[BUG]  [BUGGY]  cc.addPosition(d,  Double.POSITIVE_INFINITY);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addPosition(d,  Double.POSITIVE_INFINITY);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addPosition(d,  Double.POSITIVE_INFINITY);	  cc.addPosition(d,    d);    	non-compiled	[CE]  orphaned  case	119	None	replace
114	[BUG]  [BUGGY]  cc.addPosition(d,  1);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addPosition(d,  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addPosition(d,  1);	  cc.addPosition(d,    d);    	non-compiled	[CE]  orphaned  case	119	None	replace
115	[BUG]  [BUGGY]  cc.addPosition(d,  double  n);  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addPosition(d,  double  n);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addPosition(d,  double  n);	  cc.addPosition(d,    d);    	non-compiled	[CE]  orphaned  case	119	None	replace
116	[BUG]  [BUGGY]  cc.addValue(d  /  1);  [CE]  orphaned  case  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addValue(d  /  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addValue(d  /  1);	  cc.addValue(d    -    1);    	non-compiled	[CE]  orphaned  case	124	None	replace
117	[BUG]  [BUGGY]  cc.addValue(d  *  1);  [CE]  orphaned  case  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addValue(d  *  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addValue(d  *  1);	  cc.addValue(d    -    1);    	non-compiled	[CE]  orphaned  case	124	None	replace
118	[BUG]  [BUGGY]  cc.addValue(d,  1);  [CE]  orphaned  case  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addValue(d,  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addValue(d,  1);	  cc.addValue(d    -    1);    	non-compiled	[CE]  orphaned  case	124	None	replace
119	[BUG]  [BUGGY]  cc.addValue(d  +  1);  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addValue(d  +  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addValue(d  +  1);	  cc.addValue(d    -    1);    	non-compiled	[CE]  	124	None	replace
120	[BUG]  [BUGGY]  cc.addValue(d  -  1,  c);  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addValue(d  -  1,  c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addValue(d  -  1,  c);	  cc.addValue(d    -    1);    	non-compiled	[CE]  orphaned  case	124	None	replace
121	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().getContextForNoDeclaration(d);  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getCurrentContext().getContextForNoDeclaration(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getCurrentContext().getContextForNoDeclaration(d);	  cc.addNumber(d    -    1);    Context    cc    =    getCurrentContext().getContextForNoDeclaration(d);    	non-compiled	[CE]  	117	None	replace
122	[BUG]  [BUGGY]  cc.add(d  -  1);  Context  cc  =  getCurrentContext().getContextForNoDeclaration(d);  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(d  -  1);  Context  cc  =  getCurrentContext().getContextForNoDeclaration(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d  -  1);  Context  cc  =  getCurrentContext().getContextForNoDeclaration(d);	  cc.addNumber(d    -    1);    Context    cc    =    getCurrentContext().getContextForNoDeclaration(d);    	non-compiled	[CE]  	117	None	replace
123	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().getContextForNodeDeclaration(d);  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getCurrentContext().getContextForNodeDeclaration(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getCurrentContext().getContextForNodeDeclaration(d);	  cc.addNumber(d    -    1);    Context    cc    =    getCurrentContext().getContextForNoDeclaration(d);    	non-compiled	[CE]  	117	None	replace
124	[BUG]  [BUGGY]  cc  =  getCurrentContext().getContextForNoDeclaration(d);  [CE]  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc  =  getCurrentContext().getContextForNoDeclaration(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc  =  getCurrentContext().getContextForNoDeclaration(d);	  cc.addNumber(d    -    1);    Context    cc    =    getCurrentContext().getContextForNoDeclaration(d);    	non-compiled	[CE]  	117	None	replace
125	[BUG]  [BUGGY]  c.addPosition(d,  c);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addPosition(d,  c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addPosition(d,  c);	  cc.addPosition(d,    c);    	non-compiled	[CE]  	20	None	replace
126	[BUG]  [BUGGY]  Context  cc  =  context.addNumber(d  -  1);  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  context.addNumber(d  -  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  context.addNumber(d  -  1);	  cc.addNumber(d    -    1);    Context    cc.addNumber(d    -    1);    	non-compiled	[CE]  	61	None	replace
127	[BUG]  [BUGGY]  Context  cc  =  context.createContext();  [CE]  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  context.createContext();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  context.createContext();	  cc.addNumber(d    -    1);    Context    cc.addNumber(d    -    1);    	non-compiled	[CE]  	61	None	replace
128	[BUG]  [BUGGY]  Context  cc  =  context.getContext();  [CE]  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  context.getContext();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  context.getContext();	  cc.addNumber(d    -    1);    Context    cc.addNumber(d    -    1);    	non-compiled	[CE]  	61	None	replace
129	[BUG]  [BUGGY]  Context  cc  =  context.createContext(d);  [CE]  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  context.createContext(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  context.createContext(d);	  cc.addNumber(d    -    1);    Context    cc.addNumber(d    -    1);    	non-compiled	[CE]  	61	None	replace
130	[BUG]  [BUGGY]  Context  cc  =  context.createContext(n);  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  context.createContext(n);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  context.createContext(n);	  cc.addNumber(d    -    1);    Context    cc.addNumber(d    -    1);    	non-compiled	[CE]  ')'  expected	61	None	replace
131	[BUG]  [BUGGY]  int  d  =  getSimpleNumber(key);  cc.addNumber(d  -  1);  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  int  d  =  getSimpleNumber(key);  cc.addNumber(d  -  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	int  d  =  getSimpleNumber(key);  cc.addNumber(d  -  1);	  cc.addNumber(d    -    1);    int    d    =    getSimpleNumber(key);    cc.addNumber(d    -    1);    	non-compiled	[CE]  	56	None	replace
132	[BUG]  [BUGGY]  c.addNumber(d  -  1);  int  d  =  getSimpleNumber(key);  cc.addNumber(d  -  1);  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addNumber(d  -  1);  int  d  =  getSimpleNumber(key);  cc.addNumber(d  -  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addNumber(d  -  1);  int  d  =  getSimpleNumber(key);  cc.addNumber(d  -  1);	  cc.addNumber(d    -    1);    int    d    =    getSimpleNumber(key);    cc.addNumber(d    -    1);    	non-compiled	[CE]  ')'  expected	56	None	replace
133	[BUG]  [BUGGY]  d  =  getSimpleNumber(key);  cc.addNumber(d  -  1);  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  d  =  getSimpleNumber(key);  cc.addNumber(d  -  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	d  =  getSimpleNumber(key);  cc.addNumber(d  -  1);	  cc.addNumber(d    -    1);    int    d    =    getSimpleNumber(key);    cc.addNumber(d    -    1);    	non-compiled	[CE]  ')'  expected	56	None	replace
134	[BUG]  [BUGGY]  c.add(d  -  1);  int  d  =  getSimpleNumber(key);  cc.addNumber(d  -  1);  [CE]  orphaned  case  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.add(d  -  1);  int  d  =  getSimpleNumber(key);  cc.addNumber(d  -  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.add(d  -  1);  int  d  =  getSimpleNumber(key);  cc.addNumber(d  -  1);	  cc.addNumber(d    -    1);    int    d    =    getSimpleNumber(key);    cc.addNumber(d    -    1);    	non-compiled	[CE]  orphaned  case	56	None	replace
135	[BUG]  [BUGGY]  double  d  =  getSimpleNumber(key);  cc.addNumber(d  -  1);  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  double  d  =  getSimpleNumber(key);  cc.addNumber(d  -  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	double  d  =  getSimpleNumber(key);  cc.addNumber(d  -  1);	  cc.addNumber(d    -    1);    int    d    =    getSimpleNumber(key);    cc.addNumber(d    -    1);    	non-compiled	[CE]  ')'  expected	56	None	replace
136	[BUG]  [BUGGY]  c.addNumber(d  -  1);  int  d  =  getSimpleNumber(key);  [CE]  orphaned  case  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addNumber(d  -  1);  int  d  =  getSimpleNumber(key);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addNumber(d  -  1);  int  d  =  getSimpleNumber(key);	  cc.addNumber(d    -    1);    int    d    =    getSimpleNumber(key);    cc.addNumber(d    -    1);    	non-compiled	[CE]  orphaned  case	56	None	replace
137	[BUG]  [BUGGY]  cc.add(d,  3);  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(d,  3);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d,  3);	  cc.add(d,    2);    	non-compiled	[CE]  orphaned  case	66	None	replace
138	[BUG]  [BUGGY]  cc.add(Double.POSITIVE_INFINITY,  d);  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.POSITIVE_INFINITY,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.POSITIVE_INFINITY,  d);	  cc.add(d,    2);    	non-compiled	[CE]  orphaned  case	66	None	replace
139	[BUG]  [BUGGY]  cc.add(Double.valueOf(d),  2);  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.valueOf(d),  2);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.valueOf(d),  2);	  cc.add(d,    2);    	non-compiled	[CE]  orphaned  case	66	None	replace
140	[BUG]  [BUGGY]  cc.add(Double.parseDouble(d),  2);  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.parseDouble(d),  2);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.parseDouble(d),  2);	  cc.add(d,    2);    	non-compiled	[CE]  orphaned  case	66	None	replace
141	[BUG]  [BUGGY]  cc.add(Double.parseDouble(d));  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.parseDouble(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.parseDouble(d));	  cc.add(d,    2);    	non-compiled	[CE]  orphaned  case	66	None	replace
142	[BUG]  [BUGGY]  cc.addNumber(d,  1,  0);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d,  1,  0);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  1,  0);	  cc.addNumber(d,    0);    	non-compiled	[CE]  orphaned  case	108	None	replace
143	[BUG]  [BUGGY]  c.addChildToFront(d);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addChildToFront(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addChildToFront(d);	  c.addValue(d);    	non-compiled	[CE]  orphaned  case	49	None	replace
144	[BUG]  [BUGGY]  c.addValue(d,  Double.POSITIVE_INFINITY);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addValue(d,  Double.POSITIVE_INFINITY);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addValue(d,  Double.POSITIVE_INFINITY);	  c.addValue(d);    	non-compiled	[CE]  orphaned  case	49	None	replace
145	[BUG]  [BUGGY]  c.addValue(d,  1);  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addValue(d,  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addValue(d,  1);	  c.addValue(d);    	non-compiled	[CE]  orphaned  case	49	None	replace
146	[BUG]  [BUGGY]  c.addChildToBack(d);  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addChildToBack(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addChildToBack(d);	  c.addValue(d);    	non-compiled	[CE]  orphaned  case	49	None	replace
147	[BUG]  [BUGGY]  c.setValue(d);  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.setValue(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.setValue(d);	  c.addValue(d);    	non-compiled	[CE]  orphaned  case	49	None	replace
148	[BUG]  [BUGGY]  cc.addNumber(d,  d  +  1,  c);  [CE]  orphaned  case  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d,  d  +  1,  c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  d  +  1,  c);	  cc.addNumber(d    +    1,    c);    	non-compiled	[CE]  orphaned  case	5	None	replace
149	[BUG]  [BUGGY]  cc.addNumber(d,  c);  [CE]  orphaned  case  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d,  c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  c);	  cc.addNumber(d    +    1,    c);    	non-compiled	[CE]  orphaned  case	5	None	replace
150	[BUG]  [BUGGY]  cc.addNumber(d  *  1,  c);  [CE]  orphaned  case  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  *  1,  c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d  *  1,  c);	  cc.addNumber(d    +    1,    c);    	non-compiled	[CE]  orphaned  case	5	None	replace
151	[BUG]  [BUGGY]  cc.addNumber(denominator,  d  +  1,  c);  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(denominator,  d  +  1,  c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(denominator,  d  +  1,  c);	  cc.addNumber(d    +    1,    c);    	non-compiled	[CE]  orphaned  case	5	None	replace
152	[BUG]  [BUGGY]  cc.addNumber(d,  c  +  1,  d);  [CE]  orphaned  case  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d,  c  +  1,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  c  +  1,  d);	  cc.addNumber(d    +    1,    c);    	non-compiled	[CE]  orphaned  case	5	None	replace
153	[BUG]  [BUGGY]  c.addNumber(d  +  1,  c);  [CE]  orphaned  case  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addNumber(d  +  1,  c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addNumber(d  +  1,  c);	  cc.addNumber(d    +    1,    c);    	non-compiled	[CE]  orphaned  case	5	None	replace
154	[BUG]  [BUGGY]  cc.add(d,  Double.POSITIVE_INFINITY);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(d,  Double.POSITIVE_INFINITY);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d,  Double.POSITIVE_INFINITY);	  cc.add(d,    fn);    	non-compiled	[CE]  orphaned  case	94	None	replace
155	[BUG]  [BUGGY]  cc.add(d,  double  n);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(d,  double  n);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d,  double  n);	  cc.add(d,    fn);    	non-compiled	[CE]  orphaned  case	94	None	replace
156	[BUG]  [BUGGY]  cc.add(d,  double);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(d,  double);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d,  double);	  cc.add(d,    fn);    	non-compiled	[CE]  orphaned  case	94	None	replace
157	[BUG]  [BUGGY]  cc.add(d,  Double.NaN);  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(d,  Double.NaN);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d,  Double.NaN);	  cc.add(d,    fn);    	non-compiled	[CE]  orphaned  case	94	None	replace
158	[BUG]  [BUGGY]  c.addPosition(d,  1);  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addPosition(d,  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addPosition(d,  1);	  c.addPosition(d,    n);    	non-compiled	[CE]  orphaned  case	21	None	replace
159	[BUG]  [BUGGY]  c.addPosition(d,  double  n);  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addPosition(d,  double  n);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addPosition(d,  double  n);	  c.addPosition(d,    n);    	non-compiled	[CE]  orphaned  case	21	None	replace
160	[BUG]  [BUGGY]  c.addPosition(d,  2);  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addPosition(d,  2);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addPosition(d,  2);	  c.addPosition(d,    n);    	non-compiled	[CE]  orphaned  case	21	None	replace
161	[BUG]  [BUGGY]  c.addPosition(d,  Double.POSITIVE_INFINITY);  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addPosition(d,  Double.POSITIVE_INFINITY);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addPosition(d,  Double.POSITIVE_INFINITY);	  c.addPosition(d,    n);    	non-compiled	[CE]  orphaned  case	21	None	replace
162	[BUG]  [BUGGY]  c.addPosition(d,  1,  n);  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addPosition(d,  1,  n);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addPosition(d,  1,  n);	  c.addPosition(d,    n);    	non-compiled	[CE]  orphaned  case	21	None	replace
163	[BUG]  [BUGGY]  c.addPosition(d,  n  +  1);  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addPosition(d,  n  +  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addPosition(d,  n  +  1);	  c.addPosition(d,    n);    	non-compiled	[CE]  orphaned  case	21	None	replace
164	[BUG]  [BUGGY]  c.addPosition(d,  2,  n);  [CE]  orphaned  case  [FE]                                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addPosition(d,  2,  n);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addPosition(d,  2,  n);	  c.addPosition(d,    n);    	non-compiled	[CE]  orphaned  case	21	None	replace
165	[BUG]  [BUGGY]  cc.addPosition(d  +  1,  c);  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addPosition(d  +  1,  c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addPosition(d  +  1,  c);	  cc.addPosition(d    +    1);    	non-compiled	[CE]  orphaned  case	87	None	replace
166	[BUG]  [BUGGY]  cc.addPosition(d  *  1);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addPosition(d  *  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addPosition(d  *  1);	  cc.addPosition(d    +    1);    	non-compiled	[CE]  orphaned  case	87	None	replace
167	[BUG]  [BUGGY]  cc.addPosition(d,  d  +  1);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addPosition(d,  d  +  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addPosition(d,  d  +  1);	  cc.addPosition(d    +    1);    	non-compiled	[CE]  orphaned  case	87	None	replace
168	[BUG]  [BUGGY]  cc.addPosition(d  +  2);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addPosition(d  +  2);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addPosition(d  +  2);	  cc.addPosition(d    +    1);    	non-compiled	[CE]  orphaned  case	87	None	replace
169	[BUG]  [BUGGY]  cc.addPosition(d  +  1,  n);  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addPosition(d  +  1,  n);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addPosition(d  +  1,  n);	  cc.addPosition(d    +    1);    	non-compiled	[CE]  orphaned  case	87	None	replace
170	[BUG]  [BUGGY]  cc.addPosition(d  /  1);  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addPosition(d  /  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addPosition(d  /  1);	  cc.addPosition(d    +    1);    	non-compiled	[CE]  orphaned  case	87	None	replace
171	[BUG]  [BUGGY]  conn.add(d);  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  conn.add(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	conn.add(d);	  conn.addExpr(d);    	non-compiled	[CE]  orphaned  case	48	None	replace
172	[BUG]  [BUGGY]  conn.addChildToFront(d);  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  conn.addChildToFront(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	conn.addChildToFront(d);	  conn.addExpr(d);    	non-compiled	[CE]  orphaned  case	48	None	replace
173	[BUG]  [BUGGY]  conn.addChildToBack(d);  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  conn.addChildToBack(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	conn.addChildToBack(d);	  conn.addExpr(d);    	non-compiled	[CE]  orphaned  case	48	None	replace
174	[BUG]  [BUGGY]  conn.addValue(d);  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  conn.addValue(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	conn.addValue(d);	  conn.addExpr(d);    	non-compiled	[CE]  orphaned  case	48	None	replace
175	[BUG]  [BUGGY]  conn.addExpr(d,  c);  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  conn.addExpr(d,  c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	conn.addExpr(d,  c);	  conn.addExpr(d);    	non-compiled	[CE]  orphaned  case	48	None	replace
176	[BUG]  [BUGGY]  cc.add(Double.toString(d  *  1));  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toString(d  *  1));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d  *  1));	  cc.add(Double.toString(d    +    1));    	non-compiled	[CE]  orphaned  case	80	None	replace
177	[BUG]  [BUGGY]  cc.add(Double.toString(d  +  1)+  1);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toString(d  +  1)+  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d  +  1)+  1);	  cc.add(Double.toString(d    +    1));    	non-compiled	[CE]  orphaned  case	80	None	replace
178	[BUG]  [BUGGY]  c.add(Double.toString(d  +  1));  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.add(Double.toString(d  +  1));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.add(Double.toString(d  +  1));	  cc.add(Double.toString(d    +    1));    	non-compiled	[CE]  orphaned  case	80	None	replace
179	[BUG]  [BUGGY]  Context  cc  =  Context.createContext(context,  n);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  Context.createContext(context,  n);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  Context.createContext(context,  n);	  cc.add(Double.toString(d));    Context    cc    =    Context.createContext(context,    n);    	non-compiled	[CE]  orphaned  case	106	None	replace
180	[BUG]  [BUGGY]  Context  cc  =  Context.createContext(context,  double.toString());  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  Context.createContext(context,  double.toString());  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  Context.createContext(context,  double.toString());	  cc.add(Double.toString(d));    Context    cc    =    Context.createContext(context,    n);    	non-compiled	[CE]  orphaned  case	106	None	replace
181	[BUG]  [BUGGY]  cc  =  Context.createContext(context,  n);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc  =  Context.createContext(context,  n);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc  =  Context.createContext(context,  n);	  cc.add(Double.toString(d));    Context    cc    =    Context.createContext(context,    n);    	non-compiled	[CE]  orphaned  case	106	None	replace
182	[BUG]  [BUGGY]  Context  cc  =  Context.createContext(context,  Double.POSITIVE_INFINITY);  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  Context.createContext(context,  Double.POSITIVE_INFINITY);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  Context.createContext(context,  Double.POSITIVE_INFINITY);	  cc.add(Double.toString(d));    Context    cc    =    Context.createContext(context,    n);    	non-compiled	[CE]  orphaned  case	106	None	replace
183	[BUG]  [BUGGY]  Context  cc  =  Context.createContext(context,  double.doubleValue());  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  Context.createContext(context,  double.doubleValue());  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  Context.createContext(context,  double.doubleValue());	  cc.add(Double.toString(d));    Context    cc    =    Context.createContext(context,    n);    	non-compiled	[CE]  orphaned  case	106	None	replace
184	[BUG]  [BUGGY]  cc.add(Double.toString(d));  Context  cc  =  Context.createContext(context,  2);  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toString(d));  Context  cc  =  Context.createContext(context,  2);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d));  Context  cc  =  Context.createContext(context,  2);	  cc.add(Double.toString(d));    Context    cc    =    Context.createContext(context,    n);    	non-compiled	[CE]  orphaned  case	106	None	replace
185	[BUG]  [BUGGY]  cc.addChildToFront(Double.parseDouble(d));  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addChildToFront(Double.parseDouble(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToFront(Double.parseDouble(d));	  cc.addChildToFront(double    d);    	non-compiled	[CE]  orphaned  case	12	None	replace
186	[BUG]  [BUGGY]  cc.addChildToFront(Double.doubleToLongBits(d));  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addChildToFront(Double.doubleToLongBits(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToFront(Double.doubleToLongBits(d));	  cc.addChildToFront(double    d);    	non-compiled	[CE]  orphaned  case	12	None	replace
187	[BUG]  [BUGGY]  cc.addChildToFront(double  d,  1);  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addChildToFront(double  d,  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToFront(double  d,  1);	  cc.addChildToFront(double    d);    	non-compiled	[CE]  orphaned  case	12	None	replace
188	[BUG]  [BUGGY]  c.addChildToFront(double  d);  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addChildToFront(double  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addChildToFront(double  d);	  cc.addChildToFront(double    d);    	non-compiled	[CE]  orphaned  case	12	None	replace
189	[BUG]  [BUGGY]  addPosition(d);  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  addPosition(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	addPosition(d);	  c.addPosition(d);    	non-compiled	[CE]  orphaned  case	16	None	replace
190	[BUG]  [BUGGY]  c.addPosition(d  +  1);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addPosition(d  +  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addPosition(d  +  1);	  c.addPosition(d);    	non-compiled	[CE]  orphaned  case	16	None	replace
191	[BUG]  [BUGGY]  c.addChildToFront(d,  Double.POSITIVE_INFINITY);  [CE]  unclosed  string  literal  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addChildToFront(d,  Double.POSITIVE_INFINITY);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addChildToFront(d,  Double.POSITIVE_INFINITY);	  cc.addChildToFront(d,    Double.POSITIVE_INFINITY);    	non-compiled	[CE]  unclosed  string  literal	13	None	replace
192	[BUG]  [BUGGY]  Context  cc  =  context.addChildToFront(d,  Double.POSITIVE_INFINITY);  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  context.addChildToFront(d,  Double.POSITIVE_INFINITY);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  context.addChildToFront(d,  Double.POSITIVE_INFINITY);	  cc.addChildToFront(d,    Double.POSITIVE_INFINITY);    	non-compiled	[CE]  orphaned  case	13	None	replace
193	[BUG]  [BUGGY]  Context.addChildToFront(c,  Double.POSITIVE_INFINITY);  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context.addChildToFront(c,  Double.POSITIVE_INFINITY);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context.addChildToFront(c,  Double.POSITIVE_INFINITY);	  cc.addChildToFront(d,    Double.POSITIVE_INFINITY);    	non-compiled	[CE]  orphaned  case	13	None	replace
194	[BUG]  [BUGGY]  Context.addChildToFront(c,  d,  Double.POSITIVE_INFINITY);  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context.addChildToFront(c,  d,  Double.POSITIVE_INFINITY);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context.addChildToFront(c,  d,  Double.POSITIVE_INFINITY);	  cc.addChildToFront(d,    Double.POSITIVE_INFINITY);    	non-compiled	[CE]  orphaned  case	13	None	replace
195	[BUG]  [BUGGY]  conn.addChildToFront(d,  Double.POSITIVE_INFINITY);  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  conn.addChildToFront(d,  Double.POSITIVE_INFINITY);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	conn.addChildToFront(d,  Double.POSITIVE_INFINITY);	  cc.addChildToFront(d,    Double.POSITIVE_INFINITY);    	non-compiled	[CE]  orphaned  case	13	None	replace
196	[BUG]  [BUGGY]  cc.addExpr(d  /  1);  [CE]  orphaned  case  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addExpr(d  /  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addExpr(d  /  1);	  cc.addExpr(d    -    1);    	non-compiled	[CE]  orphaned  case	125	None	replace
197	[BUG]  [BUGGY]  cc.addExpr(d  -  1,  c);  [CE]  orphaned  case  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addExpr(d  -  1,  c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addExpr(d  -  1,  c);	  cc.addExpr(d    -    1);    	non-compiled	[CE]  orphaned  case	125	None	replace
198	[BUG]  [BUGGY]  cc.addExpr(d  +  1);  [CE]  orphaned  case  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addExpr(d  +  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addExpr(d  +  1);	  cc.addExpr(d    -    1);    	non-compiled	[CE]  orphaned  case	125	None	replace
199	[BUG]  [BUGGY]  cc.addExpr(d  *  1);  [CE]  orphaned  case  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addExpr(d  *  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addExpr(d  *  1);	  cc.addExpr(d    -    1);    	non-compiled	[CE]  orphaned  case	125	None	replace
200	[BUG]  [BUGGY]  Context  c  =  this.context.getContext();  [CE]  orphaned  case  [FE]          AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  this.context.getContext();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  this.context.getContext();	          Context    c    =    context.getContext();    	non-compiled	[CE]  orphaned  case	23	None	replace
201	[BUG]  [BUGGY]  Context  c  =  context.getContext(n);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  context.getContext(n);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  context.getContext(n);	          Context    c    =    context.getContext();    	non-compiled	[CE]  orphaned  case	23	None	replace
202	[BUG]  [BUGGY]  Context  c  =  context.getStatementContext();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  context.getStatementContext();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  context.getStatementContext();	          Context    c    =    context.getContext();    	non-compiled	[CE]  orphaned  case	23	None	replace
203	[BUG]  [BUGGY]  Context  c  =  context.createContext(n);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  context.createContext(n);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  context.createContext(n);	          Context    c    =    context.getContext();    	non-compiled	[CE]  orphaned  case	23	None	replace
204	[BUG]  [BUGGY]  cc.addValue(d,  double  n);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addValue(d,  double  n);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addValue(d,  double  n);	  cc.addValue(d,    n);    	non-compiled	[CE]  	53	None	replace
205	[BUG]  [BUGGY]  cc.addValue(d,  Double.POSITIVE_INFINITY);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addValue(d,  Double.POSITIVE_INFINITY);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addValue(d,  Double.POSITIVE_INFINITY);	  cc.addValue(d,    n);    	non-compiled	[CE]  	53	None	replace
206	[BUG]  [BUGGY]  cc.addValue(d,  n  +  1);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addValue(d,  n  +  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addValue(d,  n  +  1);	  cc.addValue(d,    n);    	non-compiled	[CE]  	53	None	replace
207	[BUG]  [BUGGY]  cc.addValue(d,  double);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addValue(d,  double);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addValue(d,  double);	  cc.addValue(d,    n);    	non-compiled	[CE]  	53	None	replace
208	[BUG]  [BUGGY]  cc.addValue(d,  n,  1);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addValue(d,  n,  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addValue(d,  n,  1);	  cc.addValue(d,    n);    	non-compiled	[CE]  	53	None	replace
209	[BUG]  [BUGGY]  cc.addValue(d,  2);  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addValue(d,  2);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addValue(d,  2);	  cc.addValue(d,    n);    	non-compiled	[CE]  	53	None	replace
210	[BUG]  [BUGGY]  d  =  cc.addDouble(d);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  d  =  cc.addDouble(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	d  =  cc.addDouble(d);	  d    =    cc.addValue(d);    	non-compiled	[CE]  	111	None	replace
211	[BUG]  [BUGGY]  d  =  cc.addNumber(d);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  d  =  cc.addNumber(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	d  =  cc.addNumber(d);	  d    =    cc.addValue(d);    	non-compiled	[CE]  	111	None	replace
212	[BUG]  [BUGGY]  d  =  cc.getValue(d);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  d  =  cc.getValue(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	d  =  cc.getValue(d);	  d    =    cc.addValue(d);    	non-compiled	[CE]  	111	None	replace
213	[BUG]  [BUGGY]  d  =  cc.addLast(d);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  d  =  cc.addLast(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	d  =  cc.addLast(d);	  d    =    cc.addValue(d);    	non-compiled	[CE]  	111	None	replace
214	[BUG]  [BUGGY]  d  =  cc.addDecimal(d);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  d  =  cc.addDecimal(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	d  =  cc.addDecimal(d);	  d    =    cc.addValue(d);    	non-compiled	[CE]  	111	None	replace
215	[BUG]  [BUGGY]  d  =  cc.add(d);  [CE]  not  a  statement  [FE]                            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  d  =  cc.add(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	d  =  cc.add(d);	  d    =    cc.addValue(d);    	non-compiled	[CE]  not  a  statement	111	None	replace
216	[BUG]  [BUGGY]  addPosition(c);  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  addPosition(c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	addPosition(c);	  d.addPosition(c);    	non-compiled	[CE]  not  a  statement	18	None	replace
217	[BUG]  [BUGGY]  Context.addPosition(c);  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context.addPosition(c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context.addPosition(c);	  d.addPosition(c);    	non-compiled	[CE]  not  a  statement	18	None	replace
218	[BUG]  [BUGGY]  d.addPosition(c,  1);  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  d.addPosition(c,  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	d.addPosition(c,  1);	  d.addPosition(c);    	non-compiled	[CE]  not  a  statement	18	None	replace
219	[BUG]  [BUGGY]  conn.addPosition(c);  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  conn.addPosition(c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	conn.addPosition(c);	  d.addPosition(c);    	non-compiled	[CE]  not  a  statement	18	None	replace
220	[BUG]  [BUGGY]  Context  cc  =  getContext().addNumber(Double.valueOf(d  -  1));  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getContext().addNumber(Double.valueOf(d  -  1));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getContext().addNumber(Double.valueOf(d  -  1));	  cc.addNumber(d    -    1);    Context    cc    =    getContext().addNumber(Double.valueOf(d    -    1));    	non-compiled	[CE]  not  a  statement	85	None	replace
221	[BUG]  [BUGGY]  cc.addNumber(Double.valueOf(d  -  1));  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(Double.valueOf(d  -  1));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(Double.valueOf(d  -  1));	  cc.addNumber(d    -    1);    Context    cc    =    getContext().addNumber(Double.valueOf(d    -    1));    	non-compiled	[CE]  not  a  statement	85	None	replace
222	[BUG]  [BUGGY]  cc  =  getContext().addNumber(Double.valueOf(d  -  1));  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc  =  getContext().addNumber(Double.valueOf(d  -  1));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc  =  getContext().addNumber(Double.valueOf(d  -  1));	  cc.addNumber(d    -    1);    Context    cc    =    getContext().addNumber(Double.valueOf(d    -    1));    	non-compiled	[CE]  not  a  statement	85	None	replace
223	[BUG]  [BUGGY]  c  =  getContext().addNumber(Double.valueOf(d  -  1));  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  getContext().addNumber(Double.valueOf(d  -  1));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  getContext().addNumber(Double.valueOf(d  -  1));	  cc.addNumber(d    -    1);    Context    cc    =    getContext().addNumber(Double.valueOf(d    -    1));    	non-compiled	[CE]  not  a  statement	85	None	replace
224	[BUG]  [BUGGY]  Context  cc  =  getContext().addNumber(Double.valueOf(d  +  1));  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getContext().addNumber(Double.valueOf(d  +  1));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getContext().addNumber(Double.valueOf(d  +  1));	  cc.addNumber(d    -    1);    Context    cc    =    getContext().addNumber(Double.valueOf(d    -    1));    	non-compiled	[CE]  not  a  statement	85	None	replace
225	[BUG]  [BUGGY]  cc.add(Double.valueOf(d)+  1);  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.valueOf(d)+  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.valueOf(d)+  1);	  cc.add(Double.valueOf(d));    	non-compiled	[CE]  not  a  statement	81	None	replace
226	[BUG]  [BUGGY]  cc.add(Double.valueOf(d),  Double.POSITIVE_INFINITY);  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.valueOf(d),  Double.POSITIVE_INFINITY);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.valueOf(d),  Double.POSITIVE_INFINITY);	  cc.add(Double.valueOf(d));    	non-compiled	[CE]  not  a  statement	81	None	replace
227	[BUG]  [BUGGY]  cc.add(Double.valueOf(d),  1);  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.valueOf(d),  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.valueOf(d),  1);	  cc.add(Double.valueOf(d));    	non-compiled	[CE]  not  a  statement	81	None	replace
228	[BUG]  [BUGGY]  c.add(Double.valueOf(d));  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.add(Double.valueOf(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.add(Double.valueOf(d));	  cc.add(Double.valueOf(d));    	non-compiled	[CE]  not  a  statement	81	None	replace
229	[BUG]  [BUGGY]  cc.add(Double.toNaN(d)+  1);  [CE]  not  a  statement  [FE]        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toNaN(d)+  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toNaN(d)+  1);	  cc.add(Double.toNaN(d));    	non-compiled	[CE]  not  a  statement	107	None	replace
230	[BUG]  [BUGGY]  cc.add(d,  Double.toNaN(d));  [CE]  not  a  statement  [FE]          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(d,  Double.toNaN(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d,  Double.toNaN(d));	  cc.add(Double.toNaN(d));    	non-compiled	[CE]  not  a  statement	107	None	replace
231	[BUG]  [BUGGY]  cc.add(Double.toNaN(d)-  1);  [CE]  not  a  statement  [FE]            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toNaN(d)-  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toNaN(d)-  1);	  cc.add(Double.toNaN(d));    	non-compiled	[CE]  not  a  statement	107	None	replace
232	[BUG]  [BUGGY]  int  d  =  getSimpleNumber(key).intValue();  cc.addNumber(d  -  1);  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  int  d  =  getSimpleNumber(key).intValue();  cc.addNumber(d  -  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	int  d  =  getSimpleNumber(key).intValue();  cc.addNumber(d  -  1);	  cc.addNumber(d    -    1);    int    d    =    getSimpleNumber(key).intValue();    cc.addNumber(d    -    1);    	non-compiled	[CE]  not  a  statement	57	None	replace
233	[BUG]  [BUGGY]  double  d  =  getSimpleNumber(key).intValue();  cc.addNumber(d  -  1);  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  double  d  =  getSimpleNumber(key).intValue();  cc.addNumber(d  -  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	double  d  =  getSimpleNumber(key).intValue();  cc.addNumber(d  -  1);	  cc.addNumber(d    -    1);    int    d    =    getSimpleNumber(key).intValue();    cc.addNumber(d    -    1);    	non-compiled	[CE]  	57	None	replace
234	[BUG]  [BUGGY]  c  =  getSimpleNumber(key).intValue();  cc.addNumber(d  -  1);  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  getSimpleNumber(key).intValue();  cc.addNumber(d  -  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  getSimpleNumber(key).intValue();  cc.addNumber(d  -  1);	  cc.addNumber(d    -    1);    int    d    =    getSimpleNumber(key).intValue();    cc.addNumber(d    -    1);    	non-compiled	[CE]  	57	None	replace
235	[BUG]  [BUGGY]  int  d  =  getSimpleNumber(key).intValue();  cc.addNumber(d);  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  int  d  =  getSimpleNumber(key).intValue();  cc.addNumber(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	int  d  =  getSimpleNumber(key).intValue();  cc.addNumber(d);	  cc.addNumber(d    -    1);    int    d    =    getSimpleNumber(key).intValue();    cc.addNumber(d    -    1);    	non-compiled	[CE]  	57	None	replace
236	[BUG]  [BUGGY]  c.add(Double.toString(d)+  1);  [CE]  [FE]          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.add(Double.toString(d)+  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.add(Double.toString(d)+  1);	  c.add(Double.toString(d));    	non-compiled	[CE]  	78	None	replace
237	[BUG]  [BUGGY]  c.add(Double.toString(d),  1);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.add(Double.toString(d),  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.add(Double.toString(d),  1);	  c.add(Double.toString(d));    	non-compiled	[CE]  	78	None	replace
238	[BUG]  [BUGGY]  c.add(d,  Double.toString(d));  [CE]  [FE]              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.add(d,  Double.toString(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.add(d,  Double.toString(d));	  c.add(Double.toString(d));    	non-compiled	[CE]  	78	None	replace
239	[BUG]  [BUGGY]  cc.add(n,  double  d);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(n,  double  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(n,  double  d);	  cc.add(n,    d);    	non-compiled	[CE]  	67	None	replace
240	[BUG]  [BUGGY]  cc.add(n,  Double.POSITIVE_INFINITY);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(n,  Double.POSITIVE_INFINITY);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(n,  Double.POSITIVE_INFINITY);	  cc.add(n,    d);    	non-compiled	[CE]  	67	None	replace
241	[BUG]  [BUGGY]  cc.addExpr(d,  Double.POSITIVE_INFINITY);  [CE]  orphaned  default  [FE]            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addExpr(d,  Double.POSITIVE_INFINITY);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addExpr(d,  Double.POSITIVE_INFINITY);	  cc.addExpr(d,    0);    	non-compiled	[CE]  orphaned  default	95	None	replace
242	[BUG]  [BUGGY]  cc.addExpr(d,  3);  [CE]  orphaned  default  [FE]              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addExpr(d,  3);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addExpr(d,  3);	  cc.addExpr(d,    0);    	non-compiled	[CE]  orphaned  default	95	None	replace
243	[BUG]  [BUGGY]  cc.addExpr(d,  0,  d.doubleValue());  [CE]  orphaned  default  [FE]                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addExpr(d,  0,  d.doubleValue());  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addExpr(d,  0,  d.doubleValue());	  cc.addExpr(d,    0);    	non-compiled	[CE]  orphaned  default	95	None	replace
244	[BUG]  [BUGGY]  cc.addExpr(d,  0,  d.length);  [CE]  orphaned  default  [FE]                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addExpr(d,  0,  d.length);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addExpr(d,  0,  d.length);	  cc.addExpr(d,    0);    	non-compiled	[CE]  orphaned  default	95	None	replace
245	[BUG]  [BUGGY]  c  =  n.getFirstChild();  [CE]  orphaned  default  [FE]        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  n.getFirstChild();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  n.getFirstChild();	  cc.add(Double.toString(d));    cc.add(Double.toString(d));    	non-compiled	[CE]  orphaned  default	69	None	replace
246	[BUG]  [BUGGY]  c  =  Context.createChildObjectContext(context);  [CE]  orphaned  default  [FE]          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  Context.createChildObjectContext(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  Context.createChildObjectContext(context);	  cc.add(Double.toString(d));    cc.add(Double.toString(d));    	non-compiled	[CE]  orphaned  default	69	None	replace
247	[BUG]  [BUGGY]  c  =  Context.createChildObjectContext(n,  context);  [CE]  orphaned  default  [FE]            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  Context.createChildObjectContext(n,  context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  Context.createChildObjectContext(n,  context);	  cc.add(Double.toString(d));    cc.add(Double.toString(d));    	non-compiled	[CE]  orphaned  default	69	None	replace
248	[BUG]  [BUGGY]  c.addExpr(d,  c);  [CE]  orphaned  default  [FE]              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addExpr(d,  c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addExpr(d,  c);	  cc.addExpr(d,    c);    	non-compiled	[CE]  orphaned  default	44	None	replace
249	[BUG]  [BUGGY]  c.addExpr(d,  1);  [CE]  orphaned  default  [FE]                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addExpr(d,  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addExpr(d,  1);	  cc.addExpr(d,    c);    	non-compiled	[CE]  orphaned  default	44	None	replace
250	[BUG]  [BUGGY]  cc.addChildToFront(new  Double(d),  c);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addChildToFront(new  Double(d),  c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToFront(new  Double(d),  c);	  cc.addChildToFront(new    Double(d));    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
251	[BUG]  [BUGGY]  c.addChildToFront(new  Double(d));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addChildToFront(new  Double(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addChildToFront(new  Double(d));	  cc.addChildToFront(new    Double(d));    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
252	[BUG]  [BUGGY]  cc.addChildToFront(new  Double(d).doubleValue());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addChildToFront(new  Double(d).doubleValue());  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToFront(new  Double(d).doubleValue());	  cc.addChildToFront(new    Double(d));    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
253	[BUG]  [BUGGY]  cc.addChildToFront(new  Double(d),  1);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addChildToFront(new  Double(d),  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToFront(new  Double(d),  1);	  cc.addChildToFront(new    Double(d));    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
254	[BUG]  [BUGGY]  cc.addChildToFront(new  Double(d,  0));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addChildToFront(new  Double(d,  0));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToFront(new  Double(d,  0));	  cc.addChildToFront(new    Double(d));    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
255	[BUG]  [BUGGY]  cc.addChildToFront(d,  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addChildToFront(d,  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToFront(d,  1);	  cc.addExpr(d,    1);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
256	[BUG]  [BUGGY]  cc.addExpr(d,  4);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addExpr(d,  4);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addExpr(d,  4);	  cc.addExpr(d,    1);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
257	[BUG]  [BUGGY]  c.addChildToFront(Double.valueOf(d));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addChildToFront(Double.valueOf(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addChildToFront(Double.valueOf(d));	  cc.addChildToFront(Double.valueOf(d));    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
258	[BUG]  [BUGGY]  cc.addChildToFront(Double.valueOf(d),  c);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addChildToFront(Double.valueOf(d),  c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToFront(Double.valueOf(d),  c);	  cc.addChildToFront(Double.valueOf(d));    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
259	[BUG]  [BUGGY]  c.addChildToFront(Double.valueOf(d),  c);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addChildToFront(Double.valueOf(d),  c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addChildToFront(Double.valueOf(d),  c);	  cc.addChildToFront(Double.valueOf(d));    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
260	[BUG]  [BUGGY]  Context  cc  =  context.addChildToFront(Double.valueOf(d));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  context.addChildToFront(Double.valueOf(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  context.addChildToFront(Double.valueOf(d));	  cc.addChildToFront(Double.valueOf(d));    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
261	[BUG]  [BUGGY]  Context  c  =  context.addChildToFront(Double.valueOf(d));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  context.addChildToFront(Double.valueOf(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  context.addChildToFront(Double.valueOf(d));	  cc.addChildToFront(Double.valueOf(d));    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
262	[BUG]  [BUGGY]  cc.add(d,  Double.NEGATIVE_INFINITY);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(d,  Double.NEGATIVE_INFINITY);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d,  Double.NEGATIVE_INFINITY);	  cc.add(d,    d);    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
263	[BUG]  [BUGGY]  cc.addNumber(d,  50);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d,  50);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  50);	  cc.addNumber(d,    59);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
264	[BUG]  [BUGGY]  cc.addNumber(d,  100);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d,  100);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  100);	  cc.addNumber(d,    59);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
265	[BUG]  [BUGGY]  cc.addNumber(d,  60);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d,  60);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  60);	  cc.addNumber(d,    59);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
266	[BUG]  [BUGGY]  cc.addNumber(d,  20);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d,  20);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  20);	  cc.addNumber(d,    59);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
267	[BUG]  [BUGGY]  cc.addNumber(d,  52);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d,  52);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  52);	  cc.addNumber(d,    59);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
268	[BUG]  [BUGGY]  cc.addNumber(d,  10);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d,  10);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  10);	  cc.addNumber(d,    59);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
269	[BUG]  [BUGGY]  cc.addNumber(d,  500);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d,  500);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  500);	  cc.addNumber(d,    59);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
270	[BUG]  [BUGGY]  cc.add(d,  c  +  1);  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(d,  c  +  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d,  c  +  1);	  cc.add(d    +    1);    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
271	[BUG]  [BUGGY]  cc.add(d  +  1,  c);  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(d  +  1,  c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d  +  1,  c);	  cc.add(d    +    1);    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
272	[BUG]  [BUGGY]  cc.add(d  *  1);  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(d  *  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d  *  1);	  cc.add(d    +    1);    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
273	[BUG]  [BUGGY]  cc.add(d,  n  +  1);  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(d,  n  +  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d,  n  +  1);	  cc.add(d    +    1);    	non-compiled	[CE]  	143	None	replace
274	[BUG]  [BUGGY]  cc.addLastChild(d,  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addLastChild(d,  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addLastChild(d,  1);	  cc.addLastChild(d);    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
275	[BUG]  [BUGGY]  cc.addFirstChild(d);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addFirstChild(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addFirstChild(d);	  cc.addLastChild(d);    	non-compiled	[CE]  	131	None	replace
276	[BUG]  [BUGGY]  cc.removeLastChild(d);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.removeLastChild(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.removeLastChild(d);	  cc.addLastChild(d);    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
277	[BUG]  [BUGGY]  cc.addLastChild(d,  2);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addLastChild(d,  2);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addLastChild(d,  2);	  cc.addLastChild(d);    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
278	[BUG]  [BUGGY]  cc.addNumber(d  *  1);  cc.addNumber(d  *  1);  [CE]  <identifier>  expected  [FE]    ComparisonFailure    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  *  1);  cc.addNumber(d  *  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    *    1);    cc.addNumber(d  *  1);	  	non-compiled	[CE]  <identifier>  expected	1	None	add
279	[BUG]  [BUGGY]  cc.addNumber(d  *  1);  Context  cc  =  getContext().addNumber(d  *  1);  [CE]  <identifier>  expected  [FE]      ComparisonFailure    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  *  1);  Context  cc  =  getContext().addNumber(d  *  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    *    1);    Context  cc  =  getContext().addNumber(d  *  1);	  	non-compiled	[CE]  <identifier>  expected	1	None	add
280	[BUG]  [BUGGY]  cc.addNumber(d  *  1);  cc.addNumber(d  *  1);  this.context.putBooleanProp(NodeUtil.isJavaIdentifier(d));  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  *  1);  cc.addNumber(d  *  1);  this.context.putBooleanProp(NodeUtil.isJavaIdentifier(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    *    1);    cc.addNumber(d  *  1);  this.context.putBooleanProp(NodeUtil.isJavaIdentifier(d));	  	non-compiled	[CE]  <identifier>  expected	1	None	add
281	[BUG]  [BUGGY]  cc.addNumber(d  *  1);  cc.addNumber(d  *  1);  this.context.putBooleanProp(NodeUtil.isJSIdentifier(d));  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  *  1);  cc.addNumber(d  *  1);  this.context.putBooleanProp(NodeUtil.isJSIdentifier(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    *    1);    cc.addNumber(d  *  1);  this.context.putBooleanProp(NodeUtil.isJSIdentifier(d));	  	non-compiled	[CE]  <identifier>  expected	1	None	add
282	[BUG]  [BUGGY]  cc.addNumber(d  *  1);  cc.addNumber(d  *  1);  this.context.putBooleanProp(NodeUtil.isEmpty(n));  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  *  1);  cc.addNumber(d  *  1);  this.context.putBooleanProp(NodeUtil.isEmpty(n));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    *    1);    cc.addNumber(d  *  1);  this.context.putBooleanProp(NodeUtil.isEmpty(n));	  	non-compiled	[CE]  <identifier>  expected	1	None	add
283	[BUG]  [BUGGY]  cc.addNumber(d  *  1);  cc.addNumber(d  *  1);  this.context.putBooleanProp(NodeUtil.isJavaIdentifier(key));  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  *  1);  cc.addNumber(d  *  1);  this.context.putBooleanProp(NodeUtil.isJavaIdentifier(key));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    *    1);    cc.addNumber(d  *  1);  this.context.putBooleanProp(NodeUtil.isJavaIdentifier(key));	  	non-compiled	[CE]  <identifier>  expected	1	None	add
284	[BUG]  [BUGGY]  cc.addNumber(d  *  1);  cc.addNumber(d  *  1);  this.context.putBooleanProp(NodeUtil.isLitKey(key));  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  *  1);  cc.addNumber(d  *  1);  this.context.putBooleanProp(NodeUtil.isLitKey(key));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    *    1);    cc.addNumber(d  *  1);  this.context.putBooleanProp(NodeUtil.isLitKey(key));	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
285	[BUG]  [BUGGY]  cc.addNumber(d  *  1);  cc.addNumber(d  *  1);  this.context.putBooleanProp(NodeUtil.isName(key));  [CE]  [FE]                  ComparisonFailure    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  *  1);  cc.addNumber(d  *  1);  this.context.putBooleanProp(NodeUtil.isName(key));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    *    1);    cc.addNumber(d  *  1);  this.context.putBooleanProp(NodeUtil.isName(key));	  	non-compiled	[CE]  	1	None	add
286	[BUG]  [BUGGY]  Context  cc  =  getContext().addNumber(Double.toString(d));  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getContext().addNumber(Double.toString(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getContext().addNumber(Double.toString(d));	  cc.addNumber(d    +    1);    Context    cc    =    getContext().addNumber(Double.valueOf(d));    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
287	[BUG]  [BUGGY]  Context  cc  =  getContext().addNumber(Double.valueOf(d),  Double.POSITIVE_INFINITY);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getContext().addNumber(Double.valueOf(d),  Double.POSITIVE_INFINITY);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getContext().addNumber(Double.valueOf(d),  Double.POSITIVE_INFINITY);	  cc.addNumber(d    +    1);    Context    cc    =    getContext().addNumber(Double.valueOf(d));    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
288	[BUG]  [BUGGY]  Context  c  =  getContext().addNumber(Double.valueOf(d));  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  getContext().addNumber(Double.valueOf(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  getContext().addNumber(Double.valueOf(d));	  cc.addNumber(d    +    1);    Context    cc    =    getContext().addNumber(Double.valueOf(d));    	non-compiled	[CE]  	99	None	replace
289	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().getContextForNoInOperator(d);  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getCurrentContext().getContextForNoInOperator(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getCurrentContext().getContextForNoInOperator(d);	  cc.addNumber(d    -    1);    Context    cc    =    getCurrentContext().getContextForNoInOperator(d);    	non-compiled	[CE]  	115	None	replace
290	[BUG]  [BUGGY]  cc.add(d  -  1);  Context  cc  =  getCurrentContext().getContextForNoInOperator(d);  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(d  -  1);  Context  cc  =  getCurrentContext().getContextForNoInOperator(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d  -  1);  Context  cc  =  getCurrentContext().getContextForNoInOperator(d);	  cc.addNumber(d    -    1);    Context    cc    =    getCurrentContext().getContextForNoInOperator(d);    	non-compiled	[CE]  	115	None	replace
291	[BUG]  [BUGGY]  cc  =  getCurrentContext().getContextForNoInOperator(d);  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc  =  getCurrentContext().getContextForNoInOperator(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc  =  getCurrentContext().getContextForNoInOperator(d);	  cc.addNumber(d    -    1);    Context    cc    =    getCurrentContext().getContextForNoInOperator(d);    	non-compiled	[CE]  	115	None	replace
292	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().getContextForNonEmpty(d);  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getCurrentContext().getContextForNonEmpty(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getCurrentContext().getContextForNonEmpty(d);	  cc.addNumber(d    -    1);    Context    cc    =    getCurrentContext().getContextForNoInOperator(d);    	non-compiled	[CE]  	115	None	replace
293	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().getContextForNonInoperator(d);  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getCurrentContext().getContextForNonInoperator(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getCurrentContext().getContextForNonInoperator(d);	  cc.addNumber(d    -    1);    Context    cc    =    getCurrentContext().getContextForNoInOperator(d);    	non-compiled	[CE]  	115	None	replace
294	[BUG]  [BUGGY]  cc.add(Double.toString(d)+  2);  [CE]  [FE]        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toString(d)+  2);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d)+  2);	  cc.add(Double.toString(d)+    1);    	non-compiled	[CE]  	77	None	replace
295	[BUG]  [BUGGY]  cc.add(Double.toString(d)+  1,  c);  [CE]  [FE]          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toString(d)+  1,  c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d)+  1,  c);	  cc.add(Double.toString(d)+    1);    	non-compiled	[CE]  	77	None	replace
296	[BUG]  [BUGGY]  cc.add(Double.toString(d)/  1);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toString(d)/  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d)/  1);	  cc.add(Double.toString(d)+    1);    	non-compiled	[CE]  	77	None	replace
297	[BUG]  [BUGGY]  cc.add(Double.toString(d)+  3);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toString(d)+  3);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d)+  3);	  cc.add(Double.toString(d)+    1);    	non-compiled	[CE]  	77	None	replace
298	[BUG]  [BUGGY]  cc.add(Double.toString(d)+  4);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toString(d)+  4);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d)+  4);	  cc.add(Double.toString(d)+    1);    	non-compiled	[CE]  	77	None	replace
299	[BUG]  [BUGGY]  cc.addNumber(d,  2  -  d);  [CE]  'catch'  without  'try'  [FE]                          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d,  2  -  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  2  -  d);	  cc.addNumber(d,    1    -    d);    	non-compiled	[CE]  'catch'  without  'try'	33	None	replace
300	[BUG]  [BUGGY]  cc.addNumber(d,  double  -  d);  [CE]  'catch'  without  'try'  [FE]                            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d,  double  -  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  double  -  d);	  cc.addNumber(d,    1    -    d);    	non-compiled	[CE]  'catch'  without  'try'	33	None	replace
301	[BUG]  [BUGGY]  cc.addNumber(d,  1  +  d);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d,  1  +  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  1  +  d);	  cc.addNumber(d,    1    -    d);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
302	[BUG]  [BUGGY]  cc.addNumber(d,  1  +  1,  d);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d,  1  +  1,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  1  +  1,  d);	  cc.addNumber(d,    1    +    1,    c);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
303	[BUG]  [BUGGY]  c.addNumber(d,  1  +  1,  c);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addNumber(d,  1  +  1,  c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addNumber(d,  1  +  1,  c);	  cc.addNumber(d,    1    +    1,    c);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
304	[BUG]  [BUGGY]  Context  cc  =  getContext().addNumber(d  +  1);  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getContext().addNumber(d  +  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getContext().addNumber(d  +  1);	  cc.addNumber(d    +    1);    Context    cc    =    getContext().addNumber(d    +    1);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
305	[BUG]  [BUGGY]  Context  cc  =  getContext().addNumber(d);  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getContext().addNumber(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getContext().addNumber(d);	  cc.addNumber(d    +    1);    Context    cc    =    getContext().addNumber(d    +    1);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
306	[BUG]  [BUGGY]  Context  cc  =  getContext().addNumber(d  +  2);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getContext().addNumber(d  +  2);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getContext().addNumber(d  +  2);	  cc.addNumber(d    +    1);    Context    cc    =    getContext().addNumber(d    +    1);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
307	[BUG]  [BUGGY]  Context  cc  =  getContext().addNumber(d  +  3);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getContext().addNumber(d  +  3);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getContext().addNumber(d  +  3);	  cc.addNumber(d    +    1);    Context    cc    =    getContext().addNumber(d    +    1);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
308	[BUG]  [BUGGY]  Context  cc  =  getContext().addNumber(d  +  1,  n);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getContext().addNumber(d  +  1,  n);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getContext().addNumber(d  +  1,  n);	  cc.addNumber(d    +    1);    Context    cc    =    getContext().addNumber(d    +    1);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
309	[BUG]  [BUGGY]  Context  cc  =  getContext().addNumber(d  +  1,  0);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getContext().addNumber(d  +  1,  0);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getContext().addNumber(d  +  1,  0);	  cc.addNumber(d    +    1);    Context    cc    =    getContext().addNumber(d    +    1);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
310	[BUG]  [BUGGY]  Context  c  =  context.createContext(context);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  context.createContext(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  context.createContext(context);	  cc.add(Double.toString(d));    Cc.add(Double.toString(d));    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
311	[BUG]  [BUGGY]  int  cc  =  getSimpleNumber(key).intValue();  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  int  cc  =  getSimpleNumber(key).intValue();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	int  cc  =  getSimpleNumber(key).intValue();	  cc.addNumber(d    +    1);    int    cc    =    getSimpleNumber(key).intValue();    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
312	[BUG]  [BUGGY]  cc.add(d  +  1);  int  cc  =  getSimpleNumber(key).intValue();  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(d  +  1);  int  cc  =  getSimpleNumber(key).intValue();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d  +  1);  int  cc  =  getSimpleNumber(key).intValue();	  cc.addNumber(d    +    1);    int    cc    =    getSimpleNumber(key).intValue();    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
313	[BUG]  [BUGGY]  cc.addNumber(d  +  1,  double  cc  =  getSimpleNumber(key).intValue();  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  +  1,  double  cc  =  getSimpleNumber(key).intValue();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d  +  1,  double  cc  =  getSimpleNumber(key).intValue();	  cc.addNumber(d    +    1);    int    cc    =    getSimpleNumber(key).intValue();    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
314	[BUG]  [BUGGY]  Integer  cc  =  getSimpleNumber(key).intValue();  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Integer  cc  =  getSimpleNumber(key).intValue();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Integer  cc  =  getSimpleNumber(key).intValue();	  cc.addNumber(d    +    1);    int    cc    =    getSimpleNumber(key).intValue();    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
315	[BUG]  [BUGGY]  Context  c  =  getCurrentContext(context);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  getCurrentContext(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  getCurrentContext(context);	          Context    c    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
316	[BUG]  [BUGGY]  Context  c  =  getCurrentContextInNode();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  getCurrentContextInNode();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  getCurrentContextInNode();	          Context    c    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
317	[BUG]  [BUGGY]  Context  c  =  createCurrentContext();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  createCurrentContext();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  createCurrentContext();	          Context    c    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
318	[BUG]  [BUGGY]  Context  c  =  findCurrentContext();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  findCurrentContext();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  findCurrentContext();	          Context    c    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
319	[BUG]  [BUGGY]  Context  c  =  getCurrentContextForNode();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  getCurrentContextForNode();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  getCurrentContextForNode();	          Context    c    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
320	[BUG]  [BUGGY]  d.addExpr(d);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  d.addExpr(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	d.addExpr(d);	  d.addExpr(c);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
321	[BUG]  [BUGGY]  d.add(c);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  d.add(c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	d.add(c);	  d.addExpr(c);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
322	[BUG]  [BUGGY]  d.addChildToFront(c);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  d.addChildToFront(c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	d.addChildToFront(c);	  d.addExpr(c);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
323	[BUG]  [BUGGY]  d.add( ": ");  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  d.add( ": ");  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	d.add( ": ");	  d.addExpr(c);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
324	[BUG]  [BUGGY]  Context  c  =  context.getCurrentContext();  add(d,  c);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  context.getCurrentContext();  add(d,  c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  context.getCurrentContext();  add(d,  c);	          Context    c    =    context.getCurrentContext();    add(c,    d);    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
325	[BUG]  [BUGGY]  Context  c  =  context.getCurrentContext();  addExpr(c,  d);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  context.getCurrentContext();  addExpr(c,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  context.getCurrentContext();  addExpr(c,  d);	          Context    c    =    context.getCurrentContext();    add(c,    d);    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
326	[BUG]  [BUGGY]  Context  c  =  context.getCurrentContext();  add(c,  double  d);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  context.getCurrentContext();  add(c,  double  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  context.getCurrentContext();  add(c,  double  d);	          Context    c    =    context.getCurrentContext();    add(c,    d);    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
327	[BUG]  [BUGGY]  Context  c  =  context.getCurrentContext();  add(c,  d,  n);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  context.getCurrentContext();  add(c,  d,  n);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  context.getCurrentContext();  add(c,  d,  n);	          Context    c    =    context.getCurrentContext();    add(c,    d);    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
328	[BUG]  [BUGGY]  Context  c  =  context.getCurrentContext();  add(c,  d,  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  context.getCurrentContext();  add(c,  d,  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  context.getCurrentContext();  add(c,  d,  1);	          Context    c    =    context.getCurrentContext();    add(c,    d);    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
329	[BUG]  [BUGGY]  Context  c  =  context.getCurrentContext();  add(c,  d,  double);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  context.getCurrentContext();  add(c,  d,  double);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  context.getCurrentContext();  add(c,  d,  double);	          Context    c    =    context.getCurrentContext();    add(c,    d);    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
330	[BUG]  [BUGGY]  cc.add(Double.parseDouble(d),  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.parseDouble(d),  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.parseDouble(d),  1);	  cc.add(d,    1);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
331	[BUG]  [BUGGY]  Context.addValue(d,  c);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context.addValue(d,  c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context.addValue(d,  c);	  Context.addValue(d);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
332	[BUG]  [BUGGY]  Context.addValue(d,  Double.POSITIVE_INFINITY);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context.addValue(d,  Double.POSITIVE_INFINITY);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context.addValue(d,  Double.POSITIVE_INFINITY);	  Context.addValue(d);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
333	[BUG]  [BUGGY]  Context.addValue(d,  1);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context.addValue(d,  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context.addValue(d,  1);	  Context.addValue(d);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
334	[BUG]  [BUGGY]  Context.addDecimal(d,  c);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context.addDecimal(d,  c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context.addDecimal(d,  c);	  Context.addValue(d);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
335	[BUG]  [BUGGY]  Context.setValue(d);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context.setValue(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context.setValue(d);	  Context.addValue(d);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
336	[BUG]  [BUGGY]  Context.addValue(d,  n);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context.addValue(d,  n);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context.addValue(d,  n);	  Context.addValue(d);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
337	[BUG]  [BUGGY]  int  d  =  getSimpleNumber(key).intValue();  cc.addNumber(d  -  1,  d);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  int  d  =  getSimpleNumber(key).intValue();  cc.addNumber(d  -  1,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	int  d  =  getSimpleNumber(key).intValue();  cc.addNumber(d  -  1,  d);	  cc.addNumber(d    -    1);    int    d    =    getSimpleNumber(key).intValue();    cc.addNumber(d    -    1,    d);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
338	[BUG]  [BUGGY]  d  =  getSimpleNumber(key).intValue();  cc.addNumber(d  -  1,  d);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  d  =  getSimpleNumber(key).intValue();  cc.addNumber(d  -  1,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	d  =  getSimpleNumber(key).intValue();  cc.addNumber(d  -  1,  d);	  cc.addNumber(d    -    1);    int    d    =    getSimpleNumber(key).intValue();    cc.addNumber(d    -    1,    d);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
339	[BUG]  [BUGGY]  c  =  getSimpleNumber(key).intValue();  cc.addNumber(d  -  1,  d);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  getSimpleNumber(key).intValue();  cc.addNumber(d  -  1,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  getSimpleNumber(key).intValue();  cc.addNumber(d  -  1,  d);	  cc.addNumber(d    -    1);    int    d    =    getSimpleNumber(key).intValue();    cc.addNumber(d    -    1,    d);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
340	[BUG]  [BUGGY]  int  d  =  getSimpleNumber(key).intValue();  cc.addNumber(d,  d);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  int  d  =  getSimpleNumber(key).intValue();  cc.addNumber(d,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	int  d  =  getSimpleNumber(key).intValue();  cc.addNumber(d,  d);	  cc.addNumber(d    -    1);    int    d    =    getSimpleNumber(key).intValue();    cc.addNumber(d    -    1,    d);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
341	[BUG]  [BUGGY]  int  d  =  getSimpleNumber(key).intValue();  cc.addNumber(d  +  1,  d);  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  int  d  =  getSimpleNumber(key).intValue();  cc.addNumber(d  +  1,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	int  d  =  getSimpleNumber(key).intValue();  cc.addNumber(d  +  1,  d);	  cc.addNumber(d    -    1);    int    d    =    getSimpleNumber(key).intValue();    cc.addNumber(d    -    1,    d);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
342	[BUG]  [BUGGY]  cc.addNumber(d  +  2);  cc.addNumber(d  +  2);  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  +  2);  cc.addNumber(d  +  2);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    +    2);    cc.addNumber(d  +  2);	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
343	[BUG]  [BUGGY]  cc.addNumber(d  +  2);  Context  cc  =  getContext().addNumber(d  +  2);  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  +  2);  Context  cc  =  getContext().addNumber(d  +  2);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    +    2);    Context  cc  =  getContext().addNumber(d  +  2);	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
344	[BUG]  [BUGGY]  cc.addNumber(d  +  2);  Cc  cc.addNumber(d  +  2);  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  +  2);  Cc  cc.addNumber(d  +  2);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    +    2);    Cc  cc.addNumber(d  +  2);	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
345	[BUG]  [BUGGY]  cc.addNumber(d  +  2);  Context  cc  =  getContext().add(context);  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  +  2);  Context  cc  =  getContext().add(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    +    2);    Context  cc  =  getContext().add(context);	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
346	[BUG]  [BUGGY]  cc.addNumber(d  +  2);  Context  cc  =  getContext().addNumber(d  +  1);  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  +  2);  Context  cc  =  getContext().addNumber(d  +  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    +    2);    Context  cc  =  getContext().addNumber(d  +  1);	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
347	[BUG]  [BUGGY]  cc.addNumber(d  +  2);  Context  cc  =  context.getContext();  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  +  2);  Context  cc  =  context.getContext();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    +    2);    Context  cc  =  context.getContext();	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
348	[BUG]  [BUGGY]  cc.addNumber(d  +  2);  Context  cc  =  context.createContext(context);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  +  2);  Context  cc  =  context.createContext(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    +    2);    Context  cc  =  context.createContext(context);	  	non-compiled	[CE]  not  a  statement	3	None	add
349	[BUG]  [BUGGY]  Context  cc  =  Context.createContext(context);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  Context.createContext(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  Context.createContext(context);	  cc.add(Double.toString(d));    Context    cc    =    Context.createContext(context);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
350	[BUG]  [BUGGY]  cc  =  Context.createContext(context);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc  =  Context.createContext(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc  =  Context.createContext(context);	  cc.add(Double.toString(d));    Context    cc    =    Context.createContext(context);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
351	[BUG]  [BUGGY]  c  =  Context.createContext(context);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  Context.createContext(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  Context.createContext(context);	  cc.add(Double.toString(d));    Context    cc    =    Context.createContext(context);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
352	[BUG]  [BUGGY]  cc.add(Double.toString(d));  Context  cc  =  Context.createContext(context,  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toString(d));  Context  cc  =  Context.createContext(context,  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d));  Context  cc  =  Context.createContext(context,  1);	  cc.add(Double.toString(d));    Context    cc    =    Context.createContext(context);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
353	[BUG]  [BUGGY]  Context  cc  =  context.getCurrentContext().addValue(d);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  context.getCurrentContext().addValue(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  context.getCurrentContext().addValue(d);	  Context    cc    =    context.addValue(d);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
354	[BUG]  [BUGGY]  Context  cc  =  context.getContext().addValue(d);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  context.getContext().addValue(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  context.getContext().addValue(d);	  Context    cc    =    context.addValue(d);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
355	[BUG]  [BUGGY]  Context  cc  =  context.addContext(d);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  context.addContext(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  context.addContext(d);	  Context    cc    =    context.addValue(d);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
356	[BUG]  [BUGGY]  Context  cc  =  context.addValue(d,  Double.POSITIVE_INFINITY);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  context.addValue(d,  Double.POSITIVE_INFINITY);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  context.addValue(d,  Double.POSITIVE_INFINITY);	  Context    cc    =    context.addValue(d);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
357	[BUG]  [BUGGY]  Context  cc  =  context.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  context.getCurrentContext();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  context.getCurrentContext();	  Context    cc    =    context.addValue(d);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
358	[BUG]  [BUGGY]  Context  cc  =  context.addValue(d,  n);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  context.addValue(d,  n);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  context.addValue(d,  n);	  Context    cc    =    context.addValue(d);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
359	[BUG]  [BUGGY]  Context  cc  =  context.addValue(d,  1);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  context.addValue(d,  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  context.addValue(d,  1);	  Context    cc    =    context.addValue(d);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
360	[BUG]  [BUGGY]  c  =  getSimpleNumber(key);  add( ": ");  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  getSimpleNumber(key);  add( ": ");  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  getSimpleNumber(key);  add( ": ");	          c    =    getSimpleNumber(d);    add(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
361	[BUG]  [BUGGY]  c  =  getSimpleNumber(n);  add( ": ");  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  getSimpleNumber(n);  add( ": ");  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  getSimpleNumber(n);  add( ": ");	          c    =    getSimpleNumber(d);    add(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
362	[BUG]  [BUGGY]  c  =  getSimpleNumber(d);  addExpr( ": ");  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  getSimpleNumber(d);  addExpr( ": ");  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  getSimpleNumber(d);  addExpr( ": ");	          c    =    getSimpleNumber(d);    add(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
363	[BUG]  [BUGGY]  Node  cc  =  getCurrentNode();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Node  cc  =  getCurrentNode();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Node  cc  =  getCurrentNode();	  cc.add(Double.toString(d));    Node    cc    =    getCurrentNode();    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
364	[BUG]  [BUGGY]  cc.add(Double.toString(d));  node  =  getCurrentNode();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toString(d));  node  =  getCurrentNode();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d));  node  =  getCurrentNode();	  cc.add(Double.toString(d));    Node    cc    =    getCurrentNode();    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
365	[BUG]  [BUGGY]  cc.add(Double.toString(d));  Node  cc  =  context.getCurrentNode();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toString(d));  Node  cc  =  context.getCurrentNode();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d));  Node  cc  =  context.getCurrentNode();	  cc.add(Double.toString(d));    Node    cc    =    getCurrentNode();    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
366	[BUG]  [BUGGY]  Context  cc  =  getContext().getCurrentContext();  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getContext().getCurrentContext();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getContext().getCurrentContext();	  cc.addNumber(d    +    1);    Context    cc    =    getContext().getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
367	[BUG]  [BUGGY]  conn.add(d  +  1);  Context  cc  =  getContext().getCurrentContext();  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  conn.add(d  +  1);  Context  cc  =  getContext().getCurrentContext();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	conn.add(d  +  1);  Context  cc  =  getContext().getCurrentContext();	  cc.addNumber(d    +    1);    Context    cc    =    getContext().getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
368	[BUG]  [BUGGY]  cc.addNumber(d  *  1);  Context  cc  =  getContext().getCurrentContext();  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  *  1);  Context  cc  =  getContext().getCurrentContext();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d  *  1);  Context  cc  =  getContext().getCurrentContext();	  cc.addNumber(d    +    1);    Context    cc    =    getContext().getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
369	[BUG]  [BUGGY]  cc.addNumber(d  +  1);  Context  cc  =  getContext().currentContext();  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  +  1);  Context  cc  =  getContext().currentContext();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d  +  1);  Context  cc  =  getContext().currentContext();	  cc.addNumber(d    +    1);    Context    cc    =    getContext().getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
370	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().addNumber(d  -  1);  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getCurrentContext().addNumber(d  -  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getCurrentContext().addNumber(d  -  1);	  cc.addNumber(d    -    1);    Context    cc    =    getCurrentContext().addNumber(d    -    1);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
371	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().addDouble(d  -  1);  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getCurrentContext().addDouble(d  -  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getCurrentContext().addDouble(d  -  1);	  cc.addNumber(d    -    1);    Context    cc    =    getCurrentContext().addNumber(d    -    1);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
372	[BUG]  [BUGGY]  cc  =  getCurrentContext().addNumber(d  -  1);  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc  =  getCurrentContext().addNumber(d  -  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc  =  getCurrentContext().addNumber(d  -  1);	  cc.addNumber(d    -    1);    Context    cc    =    getCurrentContext().addNumber(d    -    1);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
373	[BUG]  [BUGGY]  cc.add(Double.valueOf(d),  0);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.valueOf(d),  0);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.valueOf(d),  0);	  cc.add(d,    0);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
374	[BUG]  [BUGGY]  Context  c  =  getCallbackContext();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  getCallbackContext();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  getCallbackContext();	          Context    c    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
375	[BUG]  [BUGGY]  Context  c  =  getCallback();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  getCallback();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  getCallback();	          Context    c    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
376	[BUG]  [BUGGY]  Context  c  =  createContext();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  createContext();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  createContext();	          Context    c    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
377	[BUG]  [BUGGY]  Context  c  =  getContext().addNumber(Double.toString(d));  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  getContext().addNumber(Double.toString(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  getContext().addNumber(Double.toString(d));	  cc.addNumber(d    +    1);    Context    cc    =    getContext().addNumber(Double.toString(d));    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
378	[BUG]  [BUGGY]  cc  =  getContext().addNumber(Double.toString(d));  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc  =  getContext().addNumber(Double.toString(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc  =  getContext().addNumber(Double.toString(d));	  cc.addNumber(d    +    1);    Context    cc    =    getContext().addNumber(Double.toString(d));    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
379	[BUG]  [BUGGY]  c  =  getContext().addNumber(Double.toString(d));  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  getContext().addNumber(Double.toString(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  getContext().addNumber(Double.toString(d));	  cc.addNumber(d    +    1);    Context    cc    =    getContext().addNumber(Double.toString(d));    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
380	[BUG]  [BUGGY]  Context  cc  =  getContext().addNumber(Double.toString(d  +  1));  [CE]  :  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getContext().addNumber(Double.toString(d  +  1));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getContext().addNumber(Double.toString(d  +  1));	  cc.addNumber(d    +    1);    Context    cc    =    getContext().addNumber(Double.toString(d));    	non-compiled	[CE]  :  expected	100	None	replace
381	[BUG]  [BUGGY]  cc.addNumber(Double.toString(d));  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(Double.toString(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(Double.toString(d));	  cc.addNumber(d    +    1);    Context    cc    =    getContext().addNumber(Double.toString(d));    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
382	[BUG]  [BUGGY]  int  cc  =  getSimpleNumber(key);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  int  cc  =  getSimpleNumber(key);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	int  cc  =  getSimpleNumber(key);	  cc.addNumber(d    +    1);    int    cc    =    getSimpleNumber(key);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
383	[BUG]  [BUGGY]  cc.add(d  +  1);  int  cc  =  getSimpleNumber(key);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(d  +  1);  int  cc  =  getSimpleNumber(key);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d  +  1);  int  cc  =  getSimpleNumber(key);	  cc.addNumber(d    +    1);    int    cc    =    getSimpleNumber(key);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
384	[BUG]  [BUGGY]  Integer  cc  =  getSimpleNumber(key);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Integer  cc  =  getSimpleNumber(key);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Integer  cc  =  getSimpleNumber(key);	  cc.addNumber(d    +    1);    int    cc    =    getSimpleNumber(key);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
385	[BUG]  [BUGGY]  cc.addNumber(d,  1,  1);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d,  1,  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  1,  1);	  cc.addNumber(d,    2,    1);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
386	[BUG]  [BUGGY]  cc.addNumber(d,  0,  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d,  0,  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  0,  1);	  cc.addNumber(d,    2,    1);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
387	[BUG]  [BUGGY]  cc.addNumber(d,  2,  2);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d,  2,  2);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  2,  2);	  cc.addNumber(d,    2,    1);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
388	[BUG]  [BUGGY]  cc.addNumber(d,  4,  1);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d,  4,  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  4,  1);	  cc.addNumber(d,    2,    1);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
389	[BUG]  [BUGGY]  cc.addNumber(d,  1,  2);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d,  1,  2);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  1,  2);	  cc.addNumber(d,    2,    1);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
390	[BUG]  [BUGGY]  cc.addNumber(d,  2,  3);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d,  2,  3);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  2,  3);	  cc.addNumber(d,    2,    1);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
391	[BUG]  [BUGGY]  Context  cc  =  getContext().addNumber(Double.valueOf(d),  Double.MAX_VALUE);  [CE]  :  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getContext().addNumber(Double.valueOf(d),  Double.MAX_VALUE);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getContext().addNumber(Double.valueOf(d),  Double.MAX_VALUE);	  cc.addNumber(d    +    1);    Context    cc    =    getContext().addNumber(Double.valueOf(d    +    1));    	non-compiled	[CE]  :  expected	101	None	replace
392	[BUG]  [BUGGY]  Context  cc  =  getContext().addNumber(Double.valueOf(d),  Double.MIN_VALUE);  [CE]  :  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getContext().addNumber(Double.valueOf(d),  Double.MIN_VALUE);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getContext().addNumber(Double.valueOf(d),  Double.MIN_VALUE);	  cc.addNumber(d    +    1);    Context    cc    =    getContext().addNumber(Double.valueOf(d    +    1));    	non-compiled	[CE]  :  expected	101	None	replace
393	[BUG]  [BUGGY]  Context  cc  =  getContext().addNumber(Double.valueOf(d),  Double.NEGATIVE_INFINITY);  [CE]  :  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getContext().addNumber(Double.valueOf(d),  Double.NEGATIVE_INFINITY);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getContext().addNumber(Double.valueOf(d),  Double.NEGATIVE_INFINITY);	  cc.addNumber(d    +    1);    Context    cc    =    getContext().addNumber(Double.valueOf(d    +    1));    	non-compiled	[CE]  :  expected	101	None	replace
394	[BUG]  [BUGGY]  cc.addNumber(d,  d  +  1,  d);  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d,  d  +  1,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  d  +  1,  d);	  cc.addNumber(d    +    1,    d);    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
395	[BUG]  [BUGGY]  cc.addNumber(d  *  1,  d);  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  *  1,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d  *  1,  d);	  cc.addNumber(d    +    1,    d);    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
396	[BUG]  [BUGGY]  cc.addNumber(d,  d);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  d);	  cc.addNumber(d    +    1,    d);    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
397	[BUG]  [BUGGY]  cc.addNumber(d  +  1,  d,  1);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  +  1,  d,  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d  +  1,  d,  1);	  cc.addNumber(d    +    1,    d);    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
398	[BUG]  [BUGGY]  cc.addNumber(d  +  1,  d,  c);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  +  1,  d,  c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d  +  1,  d,  c);	  cc.addNumber(d    +    1,    d);    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
399	[BUG]  [BUGGY]  cc.addExpr(d,  Double.NEGATIVE_INFINITY);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addExpr(d,  Double.NEGATIVE_INFINITY);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addExpr(d,  Double.NEGATIVE_INFINITY);	  cc.addExpr(d,    d);    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
400	[BUG]  [BUGGY]  cc.addExpr(d,  double);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addExpr(d,  double);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addExpr(d,  double);	  cc.addExpr(d,    d);    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
401	[BUG]  [BUGGY]  this.context.putBooleanProp(NodeUtil.isSimpleNumber(d));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  this.context.putBooleanProp(NodeUtil.isSimpleNumber(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	this.context.putBooleanProp(NodeUtil.isSimpleNumber(d));	  cc.add(Double.toString(d));    cc.add(Double.toString(d));    this.context.putBooleanProp(NodeUtil.isSimpleNumber(d));    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
402	[BUG]  [BUGGY]  this.context.putBooleanProp(NodeUtil.isSimpleNumber(c));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  this.context.putBooleanProp(NodeUtil.isSimpleNumber(c));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	this.context.putBooleanProp(NodeUtil.isSimpleNumber(c));	  cc.add(Double.toString(d));    cc.add(Double.toString(d));    this.context.putBooleanProp(NodeUtil.isSimpleNumber(d));    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
403	[BUG]  [BUGGY]  this.context.putBooleanProp(NodeUtil.isImmutableNumber(d));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  this.context.putBooleanProp(NodeUtil.isImmutableNumber(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	this.context.putBooleanProp(NodeUtil.isImmutableNumber(d));	  cc.add(Double.toString(d));    cc.add(Double.toString(d));    this.context.putBooleanProp(NodeUtil.isSimpleNumber(d));    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
404	[BUG]  [BUGGY]  this.context.putBooleanProp(NodeUtil.isSimpleNumber(d),  false);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  this.context.putBooleanProp(NodeUtil.isSimpleNumber(d),  false);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	this.context.putBooleanProp(NodeUtil.isSimpleNumber(d),  false);	  cc.add(Double.toString(d));    cc.add(Double.toString(d));    this.context.putBooleanProp(NodeUtil.isSimpleNumber(d));    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
405	[BUG]  [BUGGY]  cc.replaceChild(n,  body);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.replaceChild(n,  body);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.replaceChild(n,  body);	  cc.removeChild(d);    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
406	[BUG]  [BUGGY]  cc.removeChild(n);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.removeChild(n);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.removeChild(n);	  cc.removeChild(d);    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
407	[BUG]  [BUGGY]  cc.removeChild(body);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.removeChild(body);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.removeChild(body);	  cc.removeChild(d);    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
408	[BUG]  [BUGGY]  c.removeChild(d);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.removeChild(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.removeChild(d);	  cc.removeChild(d);    	non-compiled	[CE]  ';'  expected	132	None	replace
409	[BUG]  [BUGGY]  c.addChildToFront(d,  c);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addChildToFront(d,  c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addChildToFront(d,  c);	  cc.addChildToFront(d,    c);    	non-compiled	[CE]  ';'  expected	14	None	replace
410	[BUG]  [BUGGY]  Context.addChildToFront(c,  d);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context.addChildToFront(c,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context.addChildToFront(c,  d);	  cc.addChildToFront(d,    c);    	non-compiled	[CE]  ';'  expected	14	None	replace
411	[BUG]  [BUGGY]  Context  cc  =  context.addChildToFront(d,  c);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  context.addChildToFront(d,  c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  context.addChildToFront(d,  c);	  cc.addChildToFront(d,    c);    	non-compiled	[CE]  ';'  expected	14	None	replace
412	[BUG]  [BUGGY]  Context  c  =  context.addChildToFront(d,  c);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  context.addChildToFront(d,  c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  context.addChildToFront(d,  c);	  cc.addChildToFront(d,    c);    	non-compiled	[CE]  ';'  expected	14	None	replace
413	[BUG]  [BUGGY]  d.addChildToFront(c,  c);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  d.addChildToFront(c,  c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	d.addChildToFront(c,  c);	  cc.addChildToFront(d,    c);    	non-compiled	[CE]  ';'  expected	14	None	replace
414	[BUG]  [BUGGY]  conn.addChildToFront(d,  c);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  conn.addChildToFront(d,  c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	conn.addChildToFront(d,  c);	  cc.addChildToFront(d,    c);    	non-compiled	[CE]  ';'  expected	14	None	replace
415	[BUG]  [BUGGY]  c.addExpr(d,  2);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addExpr(d,  2);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addExpr(d,  2);	  cc.addExpr(d,    2);    	non-compiled	[CE]  ';'  expected	96	None	replace
416	[BUG]  [BUGGY]  cc.addPosition(d,  n,  context);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addPosition(d,  n,  context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addPosition(d,  n,  context);	  cc.addPosition(d,    n);    	non-compiled	[CE]  	19	None	replace
417	[BUG]  [BUGGY]  c.addPosition(d,  n,  context);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addPosition(d,  n,  context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addPosition(d,  n,  context);	  cc.addPosition(d,    n);    	non-compiled	[CE]  	19	None	replace
418	[BUG]  [BUGGY]  Context.addPosition(d,  n);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context.addPosition(d,  n);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context.addPosition(d,  n);	  cc.addPosition(d,    n);    	non-compiled	[CE]  	19	None	replace
419	[BUG]  [BUGGY]  cc.addPosition(d,  n,  1);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addPosition(d,  n,  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addPosition(d,  n,  1);	  cc.addPosition(d,    n);    	non-compiled	[CE]  	19	None	replace
420	[BUG]  [BUGGY]  d.addValue(d);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  d.addValue(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	d.addValue(d);	  d.addValue(c);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
421	[BUG]  [BUGGY]  d.add(Double.valueOf(d));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  d.add(Double.valueOf(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	d.add(Double.valueOf(d));	  d.addValue(c);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
422	[BUG]  [BUGGY]  cc.add(d,  double  p);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(d,  double  p);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d,  double  p);	  cc.add(d,    p);    	non-compiled	[CE]  	142	None	replace
423	[BUG]  [BUGGY]  c.addNumber(d  +  1);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addNumber(d  +  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addNumber(d  +  1);	  cc.addNumber(d    +    1);    cc.addNumber(d    +    1);    }    else    {    addExpr(c,    1);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
424	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d))  {  cc.addNumber(d  +  1);  }  else  {  addExpr(c,  1);  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d))  {  cc.addNumber(d  +  1);  }  else  {  addExpr(c,  1);  }  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	if(Double.isNaN(d)||  Double.isNaN(d))  {  cc.addNumber(d  +  1);  }  else  {  addExpr(c,  1);  }	  cc.addNumber(d    +    1);    cc.addNumber(d    +    1);    }    else    {    addExpr(c,    1);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
425	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d))  {  cc.addNumber(d  +  1);  }  else  {  addExpr(c,  1);  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d))  {  cc.addNumber(d  +  1);  }  else  {  addExpr(c,  1);  }  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d))  {  cc.addNumber(d  +  1);  }  else  {  addExpr(c,  1);  }	  cc.addNumber(d    +    1);    cc.addNumber(d    +    1);    }    else    {    addExpr(c,    1);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
426	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d))  {  cc.addNumber(d  +  1);  }  else  {  addExpr(c,  2);  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d))  {  cc.addNumber(d  +  1);  }  else  {  addExpr(c,  2);  }  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	if(Double.isNaN(d)||  Double.isNaN(d))  {  cc.addNumber(d  +  1);  }  else  {  addExpr(c,  2);  }	  cc.addNumber(d    +    1);    cc.addNumber(d    +    1);    }    else    {    addExpr(c,    1);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
427	[BUG]  [BUGGY]  if(Double.isNaN(d))  {  cc.addNumber(d  +  1);  }  else  {  addExpr(c,  1);  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  if(Double.isNaN(d))  {  cc.addNumber(d  +  1);  }  else  {  addExpr(c,  1);  }  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	if(Double.isNaN(d))  {  cc.addNumber(d  +  1);  }  else  {  addExpr(c,  1);  }	  cc.addNumber(d    +    1);    cc.addNumber(d    +    1);    }    else    {    addExpr(c,    1);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
428	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d))  {  cc.addNumber(d  +  1);  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d))  {  cc.addNumber(d  +  1);  }  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	if(Double.isNaN(d)||  Double.isNaN(d))  {  cc.addNumber(d  +  1);  }	  cc.addNumber(d    +    1);    cc.addNumber(d    +    1);    }    else    {    addExpr(c,    1);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
429	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d))  {  cc.addNumber(d  +  1);  }  else  {  addExpr(c,  3);  }  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d))  {  cc.addNumber(d  +  1);  }  else  {  addExpr(c,  3);  }  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	if(Double.isNaN(d)||  Double.isNaN(d))  {  cc.addNumber(d  +  1);  }  else  {  addExpr(c,  3);  }	  cc.addNumber(d    +    1);    cc.addNumber(d    +    1);    }    else    {    addExpr(c,    1);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
430	[BUG]  [BUGGY]  cc.add(Double.toString(d),  Context.END_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toString(d),  Context.END_OF_EXPR);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d),  Context.END_OF_EXPR);	  cc.add(Double.toString(d),    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
431	[BUG]  [BUGGY]  cc.add(Double.toString(d)+  1,  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toString(d)+  1,  Context.START_OF_EXPR);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d)+  1,  Context.START_OF_EXPR);	  cc.add(Double.toString(d),    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
432	[BUG]  [BUGGY]  c.add(Double.toString(d),  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.add(Double.toString(d),  Context.START_OF_EXPR);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.add(Double.toString(d),  Context.START_OF_EXPR);	  cc.add(Double.toString(d),    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
433	[BUG]  [BUGGY]  Context  c  =(context  ==  null)?  context.getCurrentContext()  :  context.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =(context  ==  null)?  context.getCurrentContext()  :  context.getCurrentContext();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =(context  ==  null)?  context.getCurrentContext()  :  context.getCurrentContext();	          Context    c    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
434	[BUG]  [BUGGY]  Context  c  =  context.getCurrentContext(d);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  context.getCurrentContext(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  context.getCurrentContext(d);	          Context    c    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
435	[BUG]  [BUGGY]  Context  c  =  this.context.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  this.context.getCurrentContext();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  this.context.getCurrentContext();	          Context    c    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
436	[BUG]  [BUGGY]  Context  c  =(context  ==  null)?  context.getCurrentContext()  :  context;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =(context  ==  null)?  context.getCurrentContext()  :  context;  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =(context  ==  null)?  context.getCurrentContext()  :  context;	          Context    c    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
437	[BUG]  [BUGGY]  Context  c  =  context.getCurrentContext(n);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  context.getCurrentContext(n);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  context.getCurrentContext(n);	          Context    c    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
438	[BUG]  [BUGGY]  cc.addNumber(Double.parseDouble(d));  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(Double.parseDouble(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(Double.parseDouble(d));	  cc.addNumber(d    +    1);    Context    cc    =    getContext().addNumber(Double.parseDouble(d));    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
439	[BUG]  [BUGGY]  Context  c  =  getContext().addNumber(Double.parseDouble(d));  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  getContext().addNumber(Double.parseDouble(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  getContext().addNumber(Double.parseDouble(d));	  cc.addNumber(d    +    1);    Context    cc    =    getContext().addNumber(Double.parseDouble(d));    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
440	[BUG]  [BUGGY]  cc  =  getContext().addNumber(Double.parseDouble(d));  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc  =  getContext().addNumber(Double.parseDouble(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc  =  getContext().addNumber(Double.parseDouble(d));	  cc.addNumber(d    +    1);    Context    cc    =    getContext().addNumber(Double.parseDouble(d));    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
441	[BUG]  [BUGGY]  Context  cc  =  getContext().addDouble(Double.parseDouble(d));  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getContext().addDouble(Double.parseDouble(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getContext().addDouble(Double.parseDouble(d));	  cc.addNumber(d    +    1);    Context    cc    =    getContext().addNumber(Double.parseDouble(d));    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
442	[BUG]  [BUGGY]  c  =  getContext().addNumber(Double.parseDouble(d));  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  getContext().addNumber(Double.parseDouble(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  getContext().addNumber(Double.parseDouble(d));	  cc.addNumber(d    +    1);    Context    cc    =    getContext().addNumber(Double.parseDouble(d));    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
443	[BUG]  [BUGGY]  cc.addNumber(d  /  1);  cc.addNumber(d  /  1);  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  /  1);  cc.addNumber(d  /  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    /    1);    cc.addNumber(d  /  1);	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
444	[BUG]  [BUGGY]  cc.addNumber(d  /  1);  int  d  =  getSimpleNumber(key);  cc.addNumber(d  /  1);  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  /  1);  int  d  =  getSimpleNumber(key);  cc.addNumber(d  /  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    /    1);    int  d  =  getSimpleNumber(key);  cc.addNumber(d  /  1);	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
445	[BUG]  [BUGGY]  cc.addNumber(d  /  1);  int  d  =  getSimpleNumber(key).intValue();  cc.addNumber(d  /  1);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  /  1);  int  d  =  getSimpleNumber(key).intValue();  cc.addNumber(d  /  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    /    1);    int  d  =  getSimpleNumber(key).intValue();  cc.addNumber(d  /  1);	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
446	[BUG]  [BUGGY]  cc.addNumber(d  /  1);  int  d  =  getSimpleNumber(key).doubleValue();  cc.addNumber(d  /  1);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  /  1);  int  d  =  getSimpleNumber(key).doubleValue();  cc.addNumber(d  /  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    /    1);    int  d  =  getSimpleNumber(key).doubleValue();  cc.addNumber(d  /  1);	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
447	[BUG]  [BUGGY]  cc.addNumber(d  /  1);  int  d  =  getSimpleNumber(key);  if(!Double.isNaN(d))  {  add( ": ");  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  /  1);  int  d  =  getSimpleNumber(key);  if(!Double.isNaN(d))  {  add( ": ");  }  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    /    1);    int  d  =  getSimpleNumber(key);  if(!Double.isNaN(d))  {  add( ": ");  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
448	[BUG]  [BUGGY]  cc.addNumber(d  /  1);  int  d  =  getSimpleNumber(key);  if(!Double.isNaN(d))  {  addExpr(c,  1);  }  [CE]  [FE]              ComparisonFailure    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  /  1);  int  d  =  getSimpleNumber(key);  if(!Double.isNaN(d))  {  addExpr(c,  1);  }  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    /    1);    int  d  =  getSimpleNumber(key);  if(!Double.isNaN(d))  {  addExpr(c,  1);  }	  	non-compiled	[CE]  	6	None	add
449	[BUG]  [BUGGY]  cc.addNumber(d  /  1);  int  d  =  getSimpleNumber(key).intValue();  cc.addNumber(d  /  2);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  /  1);  int  d  =  getSimpleNumber(key).intValue();  cc.addNumber(d  /  2);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    /    1);    int  d  =  getSimpleNumber(key).intValue();  cc.addNumber(d  /  2);	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
450	[BUG]  [BUGGY]  cc.addNumber(d  /  1);  int  d  =  getSimpleNumber(key);  if(!Double.isNaN(d))  {  add( "cc ");  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  /  1);  int  d  =  getSimpleNumber(key);  if(!Double.isNaN(d))  {  add( "cc ");  }  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    /    1);    int  d  =  getSimpleNumber(key);  if(!Double.isNaN(d))  {  add( "cc ");  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
451	[BUG]  [BUGGY]  cc.add(Double.toString(d),  2);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toString(d),  2);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d),  2);	  cc.add(Double.toString(d),    1);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
452	[BUG]  [BUGGY]  cc.add(Double.toString(d)+  1,  1);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toString(d)+  1,  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d)+  1,  1);	  cc.add(Double.toString(d),    1);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
453	[BUG]  [BUGGY]  cc.add(Double.toString(d),  3);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toString(d),  3);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d),  3);	  cc.add(Double.toString(d),    1);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
454	[BUG]  [BUGGY]  cc.add(Double.toString(d)-  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toString(d)-  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d)-  1);	  cc.add(Double.toString(d),    1);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
455	[BUG]  [BUGGY]  Preconditions.checkState(!Double.isNaN(d));  Context  cc  =  getCurrentContext();  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Preconditions.checkState(!Double.isNaN(d));  Context  cc  =  getCurrentContext();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Preconditions.checkState(!Double.isNaN(d));  Context  cc  =  getCurrentContext();	  cc.add(Double.toString(d));    Context    cc    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
456	[BUG]  [BUGGY]  cc  =  getCurrentContext();  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc  =  getCurrentContext();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc  =  getCurrentContext();	  cc.add(Double.toString(d));    Context    cc    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
457	[BUG]  [BUGGY]  cc.add(d,  c  -  1);  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(d,  c  -  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d,  c  -  1);	  cc.add(d    -    1);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
458	[BUG]  [BUGGY]  cc.add(d,  n  -  1);  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(d,  n  -  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d,  n  -  1);	  cc.add(d    -    1);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
459	[BUG]  [BUGGY]  cc.add(d,  p  -  1);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(d,  p  -  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d,  p  -  1);	  cc.add(d    -    1);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
460	[BUG]  [BUGGY]  cc.add(d,  c.getFirstChild()  -  1);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(d,  c.getFirstChild()  -  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d,  c.getFirstChild()  -  1);	  cc.add(d    -    1);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
461	[BUG]  [BUGGY]  cc.add(d,  c.getLastChild()  -  1);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(d,  c.getLastChild()  -  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d,  c.getLastChild()  -  1);	  cc.add(d    -    1);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
462	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().getContextForNumber(d);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getCurrentContext().getContextForNumber(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getCurrentContext().getContextForNumber(d);	  cc.addNumber(d    -    1);    Context    cc    =    getCurrentContext().getContextForNumber(d);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
463	[BUG]  [BUGGY]  cc.add(d  -  1);  Context  cc  =  getCurrentContext().getContextForNumber(d);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(d  -  1);  Context  cc  =  getCurrentContext().getContextForNumber(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d  -  1);  Context  cc  =  getCurrentContext().getContextForNumber(d);	  cc.addNumber(d    -    1);    Context    cc    =    getCurrentContext().getContextForNumber(d);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
464	[BUG]  [BUGGY]  cc  =  getCurrentContext().getContextForNumber(d);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc  =  getCurrentContext().getContextForNumber(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc  =  getCurrentContext().getContextForNumber(d);	  cc.addNumber(d    -    1);    Context    cc    =    getCurrentContext().getContextForNumber(d);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
465	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().getContext(d);  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getCurrentContext().getContext(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getCurrentContext().getContext(d);	  cc.addNumber(d    -    1);    Context    cc    =    getCurrentContext().getContextForNumber(d);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
466	[BUG]  [BUGGY]  c.addNumber(d);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addNumber(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addNumber(d);	  cc.addNumber(d    +    1);    Cc    cc.addNumber(d    +    1);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
467	[BUG]  [BUGGY]  c.add(d  +  1);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.add(d  +  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.add(d  +  1);	  cc.addNumber(d    +    1);    Cc    cc.addNumber(d    +    1);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
468	[BUG]  [BUGGY]  c.addNumber(d  +  1,  d);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addNumber(d  +  1,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addNumber(d  +  1,  d);	  cc.addNumber(d    +    1);    Cc    cc.addNumber(d    +    1);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
469	[BUG]  [BUGGY]  cc.addValue(d,  double  d);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addValue(d,  double  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addValue(d,  double  d);	  cc.addValue(d,    d);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
470	[BUG]  [BUGGY]  cc.addValue(d,  Double.NaN);  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addValue(d,  Double.NaN);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addValue(d,  Double.NaN);	  cc.addValue(d,    d);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
471	[BUG]  [BUGGY]  Node  c  =  getCurrentContext().getContextForNoInOperator(d);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Node  c  =  getCurrentContext().getContextForNoInOperator(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Node  c  =  getCurrentContext().getContextForNoInOperator(d);	  cc.addNumber(d    +    1);    Context    cc    =    getCurrentContext().getContextForNoInOperator(d);    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
472	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().getContextForNonLocal(d);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getCurrentContext().getContextForNonLocal(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getCurrentContext().getContextForNonLocal(d);	  cc.addNumber(d    +    1);    Context    cc    =    getCurrentContext().getContextForNoInOperator(d);    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
473	[BUG]  [BUGGY]  Context  c  =  getCurrentContext();  addExpr(c);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  getCurrentContext();  addExpr(c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  getCurrentContext();  addExpr(c);	          Context    c    =    getCurrentContext();    add(c);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
474	[BUG]  [BUGGY]  Context  c  =  getCurrentContext();  add(d);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  getCurrentContext();  add(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  getCurrentContext();  add(d);	          Context    c    =    getCurrentContext();    add(c);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
475	[BUG]  [BUGGY]  Context  c  =  getCurrentContext();  add(c,  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  getCurrentContext();  add(c,  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  getCurrentContext();  add(c,  1);	          Context    c    =    getCurrentContext();    add(c);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
476	[BUG]  [BUGGY]  Context  c  =  getCurrentContext();  add(n);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  getCurrentContext();  add(n);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  getCurrentContext();  add(n);	          Context    c    =    getCurrentContext();    add(c);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
477	[BUG]  [BUGGY]  Context  c  =  getCurrentContext();  add(c,  false);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  getCurrentContext();  add(c,  false);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  getCurrentContext();  add(c,  false);	          Context    c    =    getCurrentContext();    add(c);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
478	[BUG]  [BUGGY]  cc.addNumber(d  /  2);  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  /  2);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d  /  2);	  cc.addNumber(d    /    1);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
479	[BUG]  [BUGGY]  cc.addNumber(double  d  /  1);  [CE]  illegal  start  of  type  [FE]      ComparisonFailure    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(double  d  /  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(double  d  /  1);	  cc.addNumber(d    /    1);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
480	[BUG]  [BUGGY]  cc.addNumber(d  /  2.0);  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  /  2.0);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d  /  2.0);	  cc.addNumber(d    /    1);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
481	[BUG]  [BUGGY]  d,  c.addValue(d);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  d,  c.addValue(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	d,  c.addValue(d);	  d,    cc.addValue(d);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
482	[BUG]  [BUGGY]  d,  cc.addNumber(d);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  d,  cc.addNumber(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	d,  cc.addNumber(d);	  d,    cc.addValue(d);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
483	[BUG]  [BUGGY]  double  d  =  c.addValue(d);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  double  d  =  c.addValue(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	double  d  =  c.addValue(d);	  d,    cc.addValue(d);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
484	[BUG]  [BUGGY]  d,  cc.addDecimal(d);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  d,  cc.addDecimal(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	d,  cc.addDecimal(d);	  d,    cc.addValue(d);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
485	[BUG]  [BUGGY]  d,  c.addLast(d);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  d,  c.addLast(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	d,  c.addLast(d);	  d,    cc.addValue(d);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
486	[BUG]  [BUGGY]  d,  c.addNumber(d);  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  d,  c.addNumber(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	d,  c.addNumber(d);	  d,    cc.addValue(d);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
487	[BUG]  [BUGGY]  cc.addChildToFront(double  d  -  1);  [CE]  illegal  start  of  type  [FE]        junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addChildToFront(double  d  -  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToFront(double  d  -  1);	  cc.addChildToFront(d    -    1);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
488	[BUG]  [BUGGY]  cc.addChildToFront(d  /  1);  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addChildToFront(d  /  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToFront(d  /  1);	  cc.addChildToFront(d    -    1);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
489	[BUG]  [BUGGY]  cc.addChildToFront(d  -  2);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addChildToFront(d  -  2);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToFront(d  -  2);	  cc.addChildToFront(d    -    1);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
490	[BUG]  [BUGGY]  cc.addChildToFront(d  -  1,  c);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addChildToFront(d  -  1,  c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToFront(d  -  1,  c);	  cc.addChildToFront(d    -    1);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
491	[BUG]  [BUGGY]  c  =  getSimpleNode(d);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  getSimpleNode(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  getSimpleNode(d);	          c    =    getSimpleNumber(key);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
492	[BUG]  [BUGGY]  c  =  getSimpleDouble(d);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  getSimpleDouble(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  getSimpleDouble(d);	          c    =    getSimpleNumber(key);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
493	[BUG]  [BUGGY]  c  =  getSimpleDecimal(d);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  getSimpleDecimal(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  getSimpleDecimal(d);	          c    =    getSimpleNumber(key);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
494	[BUG]  [BUGGY]  c  =  getSimplePosition(d);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  getSimplePosition(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  getSimplePosition(d);	          c    =    getSimpleNumber(key);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
495	[BUG]  [BUGGY]  c  =  getNumber(d);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  getNumber(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  getNumber(d);	          c    =    getSimpleNumber(key);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
496	[BUG]  [BUGGY]  c  =  getSimpleElement(d);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  getSimpleElement(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  getSimpleElement(d);	          c    =    getSimpleNumber(key);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
497	[BUG]  [BUGGY]  Context  c  =  getCurrentContext();  add( ": ");  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  getCurrentContext();  add( ": ");  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  getCurrentContext();  add( ": ");	          Node    c    =    getCurrentNode();    add(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
498	[BUG]  [BUGGY]  c  =  getCurrentNode();  add( ": ");  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  getCurrentNode();  add( ": ");  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  getCurrentNode();  add( ": ");	          Node    c    =    getCurrentNode();    add(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
499	[BUG]  [BUGGY]  Node  c  =  context.getCurrentNode();  add( ": ");  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Node  c  =  context.getCurrentNode();  add( ": ");  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Node  c  =  context.getCurrentNode();  add( ": ");	          Node    c    =    getCurrentNode();    add(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
500	[BUG]  [BUGGY]  Node  c  =  getCurrentNode();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Node  c  =  getCurrentNode();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Node  c  =  getCurrentNode();	          Node    c    =    getCurrentNode();    add(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
501	[BUG]  [BUGGY]  Node  c  =  getCurrentNode();  add( ": ",  d);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Node  c  =  getCurrentNode();  add( ": ",  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Node  c  =  getCurrentNode();  add( ": ",  d);	          Node    c    =    getCurrentNode();    add(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
502	[BUG]  [BUGGY]  cc.addNumber(d,  10.0);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d,  10.0);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  10.0);	  cc.addNumber(d,    1L);    	non-compiled	[CE]  <identifier>  expected	109	None	replace
503	[BUG]  [BUGGY]  Context.addPosition(d,  c);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context.addPosition(d,  c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context.addPosition(d,  c);	  Context.addPosition(d);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
504	[BUG]  [BUGGY]  Context.addPosition(c,  d);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context.addPosition(c,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context.addPosition(c,  d);	  Context.addPosition(d);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
505	[BUG]  [BUGGY]  Context.addPosition(n,  d);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context.addPosition(n,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context.addPosition(n,  d);	  Context.addPosition(d);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
506	[BUG]  [BUGGY]  Context.addPosition(double  d);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context.addPosition(double  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context.addPosition(double  d);	  Context.addPosition(d);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
507	[BUG]  [BUGGY]  this.context.putBooleanProp(NodeUtil.isJSIdentifier(key));  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  this.context.putBooleanProp(NodeUtil.isJSIdentifier(key));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	this.context.putBooleanProp(NodeUtil.isJSIdentifier(key));	  cc.add(Double.toString(d));    cc.add(Double.toString(d));    this.context.putBooleanProp(NodeUtil.isJSIdentifier(key));    	non-compiled	[CE]  <identifier>  expected	73	None	replace
508	[BUG]  [BUGGY]  Node  body  =  n.getFirstChild();  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Node  body  =  n.getFirstChild();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Node  body  =  n.getFirstChild();	  cc.add(Double.toString(d));    cc.add(Double.toString(d));    this.context.putBooleanProp(NodeUtil.isJSIdentifier(key));    	non-compiled	[CE]  <identifier>  expected	73	None	replace
509	[BUG]  [BUGGY]  this.context.putBooleanProp(NodeUtil.isJavaIdentifier(key));  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  this.context.putBooleanProp(NodeUtil.isJavaIdentifier(key));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	this.context.putBooleanProp(NodeUtil.isJavaIdentifier(key));	  cc.add(Double.toString(d));    cc.add(Double.toString(d));    this.context.putBooleanProp(NodeUtil.isJSIdentifier(key));    	non-compiled	[CE]  <identifier>  expected	73	None	replace
510	[BUG]  [BUGGY]  Context  context  =  Context.createContext(n,  c);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  context  =  Context.createContext(n,  c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  context  =  Context.createContext(n,  c);	  cc.add(Double.toString(d));    cc.add(Double.toString(d));    context.put(   ":   "    +    c.getLastChild());    	non-compiled	[CE]  <identifier>  expected	76	None	replace
511	[BUG]  [BUGGY]  Context  context  =  Context.createContext(n);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  context  =  Context.createContext(n);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  context  =  Context.createContext(n);	  cc.add(Double.toString(d));    cc.add(Double.toString(d));    context.put(   ":   "    +    c.getLastChild());    	non-compiled	[CE]  <identifier>  expected	76	None	replace
512	[BUG]  [BUGGY]  Context  context  =  getContext();  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  context  =  getContext();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  context  =  getContext();	  cc.add(Double.toString(d));    cc.add(Double.toString(d));    context.put(   ":   "    +    c.getLastChild());    	non-compiled	[CE]  <identifier>  expected	76	None	replace
513	[BUG]  [BUGGY]  Context  context  =  Context.createContext(context);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  context  =  Context.createContext(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  context  =  Context.createContext(context);	  cc.add(Double.toString(d));    cc.add(Double.toString(d));    context.put(   ":   "    +    c.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
514	[BUG]  [BUGGY]  cc.addNumber(d,  c  +  1);  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d,  c  +  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  c  +  1);	  cc.addNumber(d,    d    +    1);    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
515	[BUG]  [BUGGY]  cc.addNumber(d,  p  +  1);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d,  p  +  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  p  +  1);	  cc.addNumber(d,    d    +    1);    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
516	[BUG]  [BUGGY]  cc.addNumber(key,  d  +  1);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(key,  d  +  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(key,  d  +  1);	  cc.addNumber(d,    d    +    1);    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
517	[BUG]  [BUGGY]  cc.addNumber(d,  n  +  1);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d,  n  +  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  n  +  1);	  cc.addNumber(d,    d    +    1);    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
518	[BUG]  [BUGGY]  cc.addNumber(d,  double  d  +  1);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d,  double  d  +  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  double  d  +  1);	  cc.addNumber(d,    d    +    1);    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
519	[BUG]  [BUGGY]  Context  cc  =  getContext().getCurrentContext().getContextForNoInOperator(context);  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getContext().getCurrentContext().getContextForNoInOperator(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getContext().getCurrentContext().getContextForNoInOperator(context);	  cc.addNumber(d    +    1);    Context    cc    =    getContext().getCurrentContext().getContextForNoInOperator(context);    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
520	[BUG]  [BUGGY]  Context  cc  =  getContext().getCurrentContext().getContextForNoneOperator(context);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getContext().getCurrentContext().getContextForNoneOperator(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getContext().getCurrentContext().getContextForNoneOperator(context);	  cc.addNumber(d    +    1);    Context    cc    =    getContext().getCurrentContext().getContextForNoInOperator(context);    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
521	[BUG]  [BUGGY]  Context  cc  =  getContext().getCurrentContext().getContextForNonInoperator(context);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getContext().getCurrentContext().getContextForNonInoperator(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getContext().getCurrentContext().getContextForNonInoperator(context);	  cc.addNumber(d    +    1);    Context    cc    =    getContext().getCurrentContext().getContextForNoInOperator(context);    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
522	[BUG]  [BUGGY]  Context  cc  =  getContext().getCurrentContext().getContextForNonLocal(context);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getContext().getCurrentContext().getContextForNonLocal(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getContext().getCurrentContext().getContextForNonLocal(context);	  cc.addNumber(d    +    1);    Context    cc    =    getContext().getCurrentContext().getContextForNoInOperator(context);    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
523	[BUG]  [BUGGY]  Context  cc  =  getContext().getCurrentContext().getContextForNonEmpty(context);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getContext().getCurrentContext().getContextForNonEmpty(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getContext().getCurrentContext().getContextForNonEmpty(context);	  cc.addNumber(d    +    1);    Context    cc    =    getContext().getCurrentContext().getContextForNoInOperator(context);    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
524	[BUG]  [BUGGY]  Context  cc  =  getContext().getCurrentContext().getContextForNaN(context);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getContext().getCurrentContext().getContextForNaN(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getContext().getCurrentContext().getContextForNaN(context);	  cc.addNumber(d    +    1);    Context    cc    =    getContext().getCurrentContext().getContextForNoInOperator(context);    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
525	[BUG]  [BUGGY]  Context  cc  =  getContext().getCurrentContext().getContext(context);  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getContext().getCurrentContext().getContext(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getContext().getCurrentContext().getContext(context);	  cc.addNumber(d    +    1);    Context    cc    =    getContext().getCurrentContext().getContextForNoInOperator(context);    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
526	[BUG]  [BUGGY]  cc.addNumber(d  *  2);  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  *  2);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d  *  2);	  cc.addNumber(d    *    1);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
527	[BUG]  [BUGGY]  double  c  =  getSimpleNumber(d);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  double  c  =  getSimpleNumber(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	double  c  =  getSimpleNumber(d);	          double    c    =    getSimpleNumber(key);    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
528	[BUG]  [BUGGY]  double  c  =  getSimpleNumber(body);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  double  c  =  getSimpleNumber(body);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	double  c  =  getSimpleNumber(body);	          double    c    =    getSimpleNumber(key);    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
529	[BUG]  [BUGGY]  double  c  =  getSimpleNumber(d,  key);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  double  c  =  getSimpleNumber(d,  key);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	double  c  =  getSimpleNumber(d,  key);	          double    c    =    getSimpleNumber(key);    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
530	[BUG]  [BUGGY]  double  c  =  getSimpleNumber(key,  d);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  double  c  =  getSimpleNumber(key,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	double  c  =  getSimpleNumber(key,  d);	          double    c    =    getSimpleNumber(key);    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
531	[BUG]  [BUGGY]  int  c  =  getSimpleNumber(key);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  int  c  =  getSimpleNumber(key);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	int  c  =  getSimpleNumber(key);	          double    c    =    getSimpleNumber(key);    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
532	[BUG]  [BUGGY]  double  c  =  getSimpleNumber(n);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  double  c  =  getSimpleNumber(n);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	double  c  =  getSimpleNumber(n);	          double    c    =    getSimpleNumber(key);    	non-compiled	[CE]  	122	None	replace
533	[BUG]  [BUGGY]  this.context.putBooleanProp(NodeUtil.isJavaIdentifier(c));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  this.context.putBooleanProp(NodeUtil.isJavaIdentifier(c));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	this.context.putBooleanProp(NodeUtil.isJavaIdentifier(c));	  cc.add(Double.toString(d));    cc.add(Double.toString(d));    this.context.putBooleanProp(NodeUtil.isJavaIdentifier(key));    	non-compiled	[CE]  	75	None	replace
534	[BUG]  [BUGGY]  cc  =  context.getCurrentContext();  [CE]  [FE]          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc  =  context.getCurrentContext();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc  =  context.getCurrentContext();	  cc.add(Double.toString(d));    Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  	128	None	replace
535	[BUG]  [BUGGY]  cc.add(Double.toString(d));  Context  cc  =  context.getContext();  [CE]  [FE]            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toString(d));  Context  cc  =  context.getContext();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d));  Context  cc  =  context.getContext();	  cc.add(Double.toString(d));    Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  	128	None	replace
536	[BUG]  [BUGGY]  cc.add(Double.toString(d),  context.getCurrentContext());  [CE]  [FE]              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toString(d),  context.getCurrentContext());  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d),  context.getCurrentContext());	  cc.add(Double.toString(d));    Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  	128	None	replace
537	[BUG]  [BUGGY]  cc.add(d  -  1);  Context  cc  =  getCurrentContext().getContextForNoInOperator(context);  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(d  -  1);  Context  cc  =  getCurrentContext().getContextForNoInOperator(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d  -  1);  Context  cc  =  getCurrentContext().getContextForNoInOperator(context);	  cc.addNumber(d    -    1);    Context    cc    =    getCurrentContext().getContextForNoInOperator(context);    	non-compiled	[CE]  	114	None	replace
538	[BUG]  [BUGGY]  cc  =  getCurrentContext().getContextForNoInOperator(context);  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc  =  getCurrentContext().getContextForNoInOperator(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc  =  getCurrentContext().getContextForNoInOperator(context);	  cc.addNumber(d    -    1);    Context    cc    =    getCurrentContext().getContextForNoInOperator(context);    	non-compiled	[CE]  	114	None	replace
539	[BUG]  [BUGGY]  c  =  getCurrentContext().getContextForNoInOperator(context);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  getCurrentContext().getContextForNoInOperator(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  getCurrentContext().getContextForNoInOperator(context);	  cc.addNumber(d    -    1);    Context    cc    =    getCurrentContext().getContextForNoInOperator(context);    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
540	[BUG]  [BUGGY]  cc.addNull(d,  2);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNull(d,  2);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNull(d,  2);	  cc.addNumber(d,    2);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
541	[BUG]  [BUGGY]  c.add( ": ");  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.add( ": ");  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.add( ": ");	          add(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
542	[BUG]  [BUGGY]  add( ": ".equals(d));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  add( ": ".equals(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	add( ": ".equals(d));	          add(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
543	[BUG]  [BUGGY]  add( ": ".equals(d)&&  c.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  add( ": ".equals(d)&&  c.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	add( ": ".equals(d)&&  c.getFirstChild().getType()  ==  Token.EXPR_RESULT);	          add(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
544	[BUG]  [BUGGY]  add( ": ".equals(d)&&  c.getFirstChild().getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  add( ": ".equals(d)&&  c.getFirstChild().getType()  ==  Token.FUNCTION);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	add( ": ".equals(d)&&  c.getFirstChild().getType()  ==  Token.FUNCTION);	          add(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
545	[BUG]  [BUGGY]  add( ": ".equals(d)&&!Double.isNaN(d));  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  add( ": ".equals(d)&&!Double.isNaN(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	add( ": ".equals(d)&&!Double.isNaN(d));	          add(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
546	[BUG]  [BUGGY]  add( ": ".equals(d)&&  c.getFirstChild().getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  add( ": ".equals(d)&&  c.getFirstChild().getType()  ==  Token.NAME);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	add( ": ".equals(d)&&  c.getFirstChild().getType()  ==  Token.NAME);	          add(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
547	[BUG]  [BUGGY]  cc.add(d,  Double.MIN_VALUE);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(d,  Double.MIN_VALUE);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d,  Double.MIN_VALUE);	  cc.add(d,    double    d);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
548	[BUG]  [BUGGY]  Context  cc  =  getContext().addNumber(d  -  1);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getContext().addNumber(d  -  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getContext().addNumber(d  -  1);	  cc.addNumber(d    -    1);    Context    cc    =    getContext().addNumber(d    -    1);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
549	[BUG]  [BUGGY]  cc  =  getContext().addNumber(d  -  1);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc  =  getContext().addNumber(d  -  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc  =  getContext().addNumber(d  -  1);	  cc.addNumber(d    -    1);    Context    cc    =    getContext().addNumber(d    -    1);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
550	[BUG]  [BUGGY]  Node  c  =  getContext().addNumber(d  -  1);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Node  c  =  getContext().addNumber(d  -  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Node  c  =  getContext().addNumber(d  -  1);	  cc.addNumber(d    -    1);    Context    cc    =    getContext().addNumber(d    -    1);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
551	[BUG]  [BUGGY]  c.add(d,  c);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.add(d,  c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.add(d,  c);	  cc.add(d,    c);    	non-compiled	[CE]  	62	None	replace
552	[BUG]  [BUGGY]  Context  c  =  context.getCurrentContext();  addExpr(c);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  context.getCurrentContext();  addExpr(c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  context.getCurrentContext();  addExpr(c);	          Context    c    =    context.getCurrentContext();    add(c);    	non-compiled	[CE]  	25	None	replace
553	[BUG]  [BUGGY]  Context  c  =  context.getCurrentContext();  add(d);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  context.getCurrentContext();  add(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  context.getCurrentContext();  add(d);	          Context    c    =    context.getCurrentContext();    add(c);    	non-compiled	[CE]  	25	None	replace
554	[BUG]  [BUGGY]  Context  c  =  context.getCurrentContext();  add(c,  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  context.getCurrentContext();  add(c,  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  context.getCurrentContext();  add(c,  1);	          Context    c    =    context.getCurrentContext();    add(c);    	non-compiled	[CE]  	25	None	replace
555	[BUG]  [BUGGY]  Context  c  =  context.getCurrentContext();  add(n);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  context.getCurrentContext();  add(n);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  context.getCurrentContext();  add(n);	          Context    c    =    context.getCurrentContext();    add(c);    	non-compiled	[CE]  	25	None	replace
556	[BUG]  [BUGGY]  cc.add(Double.toString(d),  n);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toString(d),  n);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d),  n);	  cc.add(d,    n);    	non-compiled	[CE]  	63	None	replace
557	[BUG]  [BUGGY]  d.addChildToBack(c);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  d.addChildToBack(c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	d.addChildToBack(c);	  cc.addChildToBack(d);    	non-compiled	[CE]  	10	None	replace
558	[BUG]  [BUGGY]  Context  cc  =  context.addChildToBack(d);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  context.addChildToBack(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  context.addChildToBack(d);	  cc.addChildToBack(d);    	non-compiled	[CE]  	10	None	replace
559	[BUG]  [BUGGY]  cc.addChildToBack(d,  c);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addChildToBack(d,  c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToBack(d,  c);	  cc.addChildToBack(d);    	non-compiled	[CE]  	10	None	replace
560	[BUG]  [BUGGY]  Context.addChildToBack(c);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context.addChildToBack(c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context.addChildToBack(c);	  cc.addChildToBack(d);    	non-compiled	[CE]  	10	None	replace
561	[BUG]  [BUGGY]  cc.addChildToBack(d,  n);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addChildToBack(d,  n);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToBack(d,  n);	  cc.addChildToBack(d);    	non-compiled	[CE]  	10	None	replace
562	[BUG]  [BUGGY]  Context  cc  =  Context.getCurrentContext();  [CE]  [FE]        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  Context.getCurrentContext();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  Context.getCurrentContext();	  cc.add(Double.toString(d));    Context    cc    =    Context.getCurrentContext();    	non-compiled	[CE]  	102	None	replace
563	[BUG]  [BUGGY]  cc  =  Context.getCurrentContext();  [CE]  [FE]          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc  =  Context.getCurrentContext();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc  =  Context.getCurrentContext();	  cc.add(Double.toString(d));    Context    cc    =    Context.getCurrentContext();    	non-compiled	[CE]  	102	None	replace
564	[BUG]  [BUGGY]  cc.add(Double.toString(d));  Context  cc  =  Context.currentContext();  [CE]  [FE]            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toString(d));  Context  cc  =  Context.currentContext();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d));  Context  cc  =  Context.currentContext();	  cc.add(Double.toString(d));    Context    cc    =    Context.getCurrentContext();    	non-compiled	[CE]  	102	None	replace
565	[BUG]  [BUGGY]  cc.add(Double.toString(d),  Context.getCurrentContext());  [CE]  [FE]              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toString(d),  Context.getCurrentContext());  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d),  Context.getCurrentContext());	  cc.add(Double.toString(d));    Context    cc    =    Context.getCurrentContext();    	non-compiled	[CE]  	102	None	replace
566	[BUG]  [BUGGY]  c  =  Context.getCurrentContext();  [CE]  [FE]                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  Context.getCurrentContext();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  Context.getCurrentContext();	  cc.add(Double.toString(d));    Context    cc    =    Context.getCurrentContext();    	non-compiled	[CE]  	102	None	replace
567	[BUG]  [BUGGY]  cc.add(Double.toString(d),  d);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toString(d),  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d),  d);	  cc.add(d,    d);    	non-compiled	[CE]  	141	None	replace
568	[BUG]  [BUGGY]  cc.addNumber(double.toString());  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(double.toString());  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(double.toString());	  cc.addNumber(d    +    1);    Context    cc    =    getContext().addNumber(Double.toString(d));    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
569	[BUG]  [BUGGY]  cc  =  getContext().getCurrentContext();  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc  =  getContext().getCurrentContext();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc  =  getContext().getCurrentContext();	  cc.addNumber(d    +    1);    Context    cc    =    getContext().getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
570	[BUG]  [BUGGY]  Node  c  =  getContext().getCurrentNode();  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Node  c  =  getContext().getCurrentNode();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Node  c  =  getContext().getCurrentNode();	  cc.addNumber(d    +    1);    Context    cc    =    getContext().getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
571	[BUG]  [BUGGY]  cc.addNumber(d  +  1,  n  -  1);  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  +  1,  n  -  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d  +  1,  n  -  1);	  cc.addNumber(d    +    1,    n);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
572	[BUG]  [BUGGY]  d.addValue(new  Double(d));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  d.addValue(new  Double(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	d.addValue(new  Double(d));	  d.addValue(c);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
573	[BUG]  [BUGGY]  d.addValue(Double.valueOf(d));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  d.addValue(Double.valueOf(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	d.addValue(Double.valueOf(d));	  d.addValue(c);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
574	[BUG]  [BUGGY]  d.addValue(n);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  d.addValue(n);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	d.addValue(n);	  d.addValue(c);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
575	[BUG]  [BUGGY]  d.addValue(Double.parseDouble(d));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  d.addValue(Double.parseDouble(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	d.addValue(Double.parseDouble(d));	  d.addValue(c);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
576	[BUG]  [BUGGY]  c  =  this.context.getBooleanProp(NodeUtil.isJSIdentifier(key));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  this.context.getBooleanProp(NodeUtil.isJSIdentifier(key));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  this.context.getBooleanProp(NodeUtil.isJSIdentifier(key));	  cc.add(Double.toString(d));    cc.add(Double.toString(d));    this.context.putBooleanProp(NodeUtil.isJSIdentifier(key));    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
577	[BUG]  [BUGGY]  c  =  this.context.getBooleanProp(NodeUtil.isJSIdentifier(d));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  this.context.getBooleanProp(NodeUtil.isJSIdentifier(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  this.context.getBooleanProp(NodeUtil.isJSIdentifier(d));	  cc.add(Double.toString(d));    cc.add(Double.toString(d));    this.context.putBooleanProp(NodeUtil.isJSIdentifier(key));    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
578	[BUG]  [BUGGY]  c  =  this.context.getBooleanProp(NodeUtil.isJavaIdentifier(key));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  this.context.getBooleanProp(NodeUtil.isJavaIdentifier(key));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  this.context.getBooleanProp(NodeUtil.isJavaIdentifier(key));	  cc.add(Double.toString(d));    cc.add(Double.toString(d));    this.context.putBooleanProp(NodeUtil.isJSIdentifier(key));    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
579	[BUG]  [BUGGY]  c  =  this.context.getBooleanProp(NodeUtil.isJSIdentifier(n));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  this.context.getBooleanProp(NodeUtil.isJSIdentifier(n));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  this.context.getBooleanProp(NodeUtil.isJSIdentifier(n));	  cc.add(Double.toString(d));    cc.add(Double.toString(d));    this.context.putBooleanProp(NodeUtil.isJSIdentifier(key));    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
580	[BUG]  [BUGGY]  c  =  this.context.getBooleanProp(NodeUtil.isJavaIdentifier(d));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  this.context.getBooleanProp(NodeUtil.isJavaIdentifier(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  this.context.getBooleanProp(NodeUtil.isJavaIdentifier(d));	  cc.add(Double.toString(d));    cc.add(Double.toString(d));    this.context.putBooleanProp(NodeUtil.isJSIdentifier(key));    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
581	[BUG]  [BUGGY]  c  =  this.context.getBooleanProp(NodeUtil.isNaN(d));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  this.context.getBooleanProp(NodeUtil.isNaN(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  this.context.getBooleanProp(NodeUtil.isNaN(d));	  cc.add(Double.toString(d));    cc.add(Double.toString(d));    this.context.putBooleanProp(NodeUtil.isJSIdentifier(key));    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
582	[BUG]  [BUGGY]  c  =  this.context.getBooleanProp(NodeUtil.isJSIdentifier(key),  false);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  this.context.getBooleanProp(NodeUtil.isJSIdentifier(key),  false);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  this.context.getBooleanProp(NodeUtil.isJSIdentifier(key),  false);	  cc.add(Double.toString(d));    cc.add(Double.toString(d));    this.context.putBooleanProp(NodeUtil.isJSIdentifier(key));    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
583	[BUG]  [BUGGY]  c  =  getLastChild();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  getLastChild();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  getLastChild();	          c    =    getSimpleNumber(key);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
584	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().getContextForNumber(context);  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getCurrentContext().getContextForNumber(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getCurrentContext().getContextForNumber(context);	  cc.addNumber(d    -    1);    Context    cc    =    getCurrentContext().getContextForNoInOperator(context);    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
585	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().getContextForNonInOperator(context);  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getCurrentContext().getContextForNonInOperator(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getCurrentContext().getContextForNonInOperator(context);	  cc.addNumber(d    -    1);    Context    cc    =    getCurrentContext().getContextForNoInOperator(context);    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
586	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().getContextForNonOperator(context);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getCurrentContext().getContextForNonOperator(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getCurrentContext().getContextForNonOperator(context);	  cc.addNumber(d    -    1);    Context    cc    =    getCurrentContext().getContextForNoInOperator(context);    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
587	[BUG]  [BUGGY]  conn.setNumber(d);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  conn.setNumber(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	conn.setNumber(d);	  conn.addExpr(d);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
588	[BUG]  [BUGGY]  c  =  this.context.getBooleanProp(NodeUtil.isJavaIdentifier(n));  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  this.context.getBooleanProp(NodeUtil.isJavaIdentifier(n));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  this.context.getBooleanProp(NodeUtil.isJavaIdentifier(n));	  cc.add(Double.toString(d));    cc.add(Double.toString(d));    this.context.putBooleanProp(NodeUtil.isJavaIdentifier(d));    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
589	[BUG]  [BUGGY]  c  =  this.context.getBooleanProp(NodeUtil.isImmutableValue(d));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  this.context.getBooleanProp(NodeUtil.isImmutableValue(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  this.context.getBooleanProp(NodeUtil.isImmutableValue(d));	  cc.add(Double.toString(d));    cc.add(Double.toString(d));    this.context.putBooleanProp(NodeUtil.isJavaIdentifier(d));    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
590	[BUG]  [BUGGY]  c  =  this.context.getBooleanProperty(NodeUtil.isJavaIdentifier(d));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  this.context.getBooleanProperty(NodeUtil.isJavaIdentifier(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  this.context.getBooleanProperty(NodeUtil.isJavaIdentifier(d));	  cc.add(Double.toString(d));    cc.add(Double.toString(d));    this.context.putBooleanProp(NodeUtil.isJavaIdentifier(d));    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
591	[BUG]  [BUGGY]  c  =  this.context.getBooleanProp(NodeUtil.isJavaIdentifier(d),  false);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  this.context.getBooleanProp(NodeUtil.isJavaIdentifier(d),  false);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  this.context.getBooleanProp(NodeUtil.isJavaIdentifier(d),  false);	  cc.add(Double.toString(d));    cc.add(Double.toString(d));    this.context.putBooleanProp(NodeUtil.isJavaIdentifier(d));    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
592	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isEmpty(d));  Context  cc  =  context.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isEmpty(d));  Context  cc  =  context.getCurrentContext();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Preconditions.checkState(NodeUtil.isEmpty(d));  Context  cc  =  context.getCurrentContext();	  cc.add(Double.toString(d));    Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
593	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGet(d));  Context  cc  =  context.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isGet(d));  Context  cc  =  context.getCurrentContext();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Preconditions.checkState(NodeUtil.isGet(d));  Context  cc  =  context.getCurrentContext();	  cc.add(Double.toString(d));    Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
594	[BUG]  [BUGGY]  cc.add(d,  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(d,  Context.START_OF_EXPR);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d,  Context.START_OF_EXPR);	  cc.add(context,    d);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
595	[BUG]  [BUGGY]  cc.add(d,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(d,  Context.OTHER);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d,  Context.OTHER);	  cc.add(context,    d);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
596	[BUG]  [BUGGY]  cc.addNumber(double,  d  +  1,  d);  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(double,  d  +  1,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(double,  d  +  1,  d);	  cc.addNumber(d    +    1,    d);    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
597	[BUG]  [BUGGY]  cc.addNumber(d  /  1,  d);  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  /  1,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d  /  1,  d);	  cc.addNumber(d    +    1,    d);    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
598	[BUG]  [BUGGY]  c.addValue(d  +  1);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addValue(d  +  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addValue(d  +  1);	  c.addValue(d);    	non-compiled	[CE]  	49	None	replace
599	[BUG]  [BUGGY]  c.removeValue(d);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.removeValue(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.removeValue(d);	  c.addValue(d);    	non-compiled	[CE]  	49	None	replace
600	[BUG]  [BUGGY]  c  =  getSimpleNumber(Double.parseDouble(d));  [CE]  [FE]        AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  getSimpleNumber(Double.parseDouble(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  getSimpleNumber(Double.parseDouble(d));	          c    =    getSimpleNumber(d);    	non-compiled	[CE]  	89	None	replace
601	[BUG]  [BUGGY]  c  =  getSimpleNumber(Double.toNaN(d));  [CE]  [FE]          AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  getSimpleNumber(Double.toNaN(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  getSimpleNumber(Double.toNaN(d));	          c    =    getSimpleNumber(d);    	non-compiled	[CE]  	89	None	replace
602	[BUG]  [BUGGY]  cc.addChildToFront(Double.toString(d),  context);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addChildToFront(Double.toString(d),  context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToFront(Double.toString(d),  context);	  cc.addChildToFront(Double.toString(d));    	non-compiled	[CE]  	15	None	replace
603	[BUG]  [BUGGY]  add(d,  getCurrentContext());  [CE]  [FE]        AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  add(d,  getCurrentContext());  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	add(d,  getCurrentContext());	          Context    c    =    getCurrentContext();    add(c,    d);    	non-compiled	[CE]  	120	None	replace
604	[BUG]  [BUGGY]  Context  c  =  getCurrentContext();  add(c,  d,  false);  [CE]  [FE]          AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  getCurrentContext();  add(c,  d,  false);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  getCurrentContext();  add(c,  d,  false);	          Context    c    =    getCurrentContext();    add(c,    d);    	non-compiled	[CE]  	120	None	replace
605	[BUG]  [BUGGY]  c.addPosition(d,  double);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addPosition(d,  double);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addPosition(d,  double);	  c.addPosition(d,    n);    	non-compiled	[CE]  	21	None	replace
606	[BUG]  [BUGGY]  c.addPosition(d,  0);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addPosition(d,  0);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addPosition(d,  0);	  c.addPosition(d,    n);    	non-compiled	[CE]  	21	None	replace
607	[BUG]  [BUGGY]  c.addPosition(d,  -1);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addPosition(d,  -1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addPosition(d,  -1);	  c.addPosition(d,    n);    	non-compiled	[CE]  	21	None	replace
608	[BUG]  [BUGGY]  Context  cc  =  getContext().getContextForNonInOperator(context);  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getContext().getContextForNonInOperator(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getContext().getContextForNonInOperator(context);	  cc.addNumber(d    +    1);    Context    cc    =    getContext().getContextForNoInOperator(context);    	non-compiled	[CE]  	139	None	replace
609	[BUG]  [BUGGY]  Context  cc  =  getContext().getContextForNonOperator(context);  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getContext().getContextForNonOperator(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getContext().getContextForNonOperator(context);	  cc.addNumber(d    +    1);    Context    cc    =    getContext().getContextForNoInOperator(context);    	non-compiled	[CE]  	139	None	replace
610	[BUG]  [BUGGY]  c  =  getSimpleNumber(key);  cc.addNumber(d  -  1);  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  getSimpleNumber(key);  cc.addNumber(d  -  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  getSimpleNumber(key);  cc.addNumber(d  -  1);	  cc.addNumber(d    -    1);    int    d    =    getSimpleNumber(key);    cc.addNumber(d    -    1);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
611	[BUG]  [BUGGY]  c  =  getSimpleNumber(key);  c.addNumber(d  -  1);  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  getSimpleNumber(key);  c.addNumber(d  -  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  getSimpleNumber(key);  c.addNumber(d  -  1);	  cc.addNumber(d    -    1);    int    d    =    getSimpleNumber(key);    cc.addNumber(d    -    1);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
612	[BUG]  [BUGGY]  c.add(getSimpleNumber(key));  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.add(getSimpleNumber(key));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.add(getSimpleNumber(key));	  cc.addNumber(d    -    1);    int    d    =    getSimpleNumber(key);    cc.addNumber(d    -    1);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
613	[BUG]  [BUGGY]  cc.add(d,  p  +  1);  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(d,  p  +  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d,  p  +  1);	  cc.add(d    +    1);    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
614	[BUG]  [BUGGY]  cc.addChildToFront(Double.valueOf(d),  0);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addChildToFront(Double.valueOf(d),  0);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToFront(Double.valueOf(d),  0);	  cc.addChildToFront(Double.valueOf(d));    	non-compiled	[CE]  <identifier>  expected	11	None	replace
615	[BUG]  [BUGGY]  cc.addChildToFront(Double.valueOf(d),  n);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addChildToFront(Double.valueOf(d),  n);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToFront(Double.valueOf(d),  n);	  cc.addChildToFront(Double.valueOf(d));    	non-compiled	[CE]  <identifier>  expected	11	None	replace
616	[BUG]  [BUGGY]  cc.addChildToFront(Double.valueOf(d),  1);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addChildToFront(Double.valueOf(d),  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToFront(Double.valueOf(d),  1);	  cc.addChildToFront(Double.valueOf(d));    	non-compiled	[CE]  <identifier>  expected	11	None	replace
617	[BUG]  [BUGGY]  add( ": ".equals(d)||!Double.isNaN(d));  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  add( ": ".equals(d)||!Double.isNaN(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	add( ": ".equals(d)||!Double.isNaN(d));	          add(   ":   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
618	[BUG]  [BUGGY]  add( ": ".equals(d)&&!Double.isNaN(d))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  add( ": ".equals(d)&&!Double.isNaN(d))  {  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	add( ": ".equals(d)&&!Double.isNaN(d))  {	          add(   ":   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
619	[BUG]  [BUGGY]  add( ": ".equals(d)||  c.getLastChild().getString());  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  add( ": ".equals(d)||  c.getLastChild().getString());  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	add( ": ".equals(d)||  c.getLastChild().getString());	          add(   ":   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
620	[BUG]  [BUGGY]  add( ": ".equalsIgnoreCase(d));  [CE]  invalid  method  declaration;  return  type  required  [FE]                            AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  add( ": ".equalsIgnoreCase(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	add( ": ".equalsIgnoreCase(d));	          add(   ":   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
621	[BUG]  [BUGGY]  cc.replaceChild(body,  d);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.replaceChild(body,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.replaceChild(body,  d);	  cc.removeChild(d);    	non-compiled	[CE]  <identifier>  expected	132	None	replace
622	[BUG]  [BUGGY]  cc.addPosition(d,  n  +  1);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addPosition(d,  n  +  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addPosition(d,  n  +  1);	  cc.addPosition(d,    n);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
623	[BUG]  [BUGGY]  cc.add(Node.toString(d));  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Node.toString(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Node.toString(d));	  cc.add(Double.toString(d));    Cc    cc.add(Double.toString(d));    	non-compiled	[CE]  <identifier>  expected	72	None	replace
624	[BUG]  [BUGGY]  cc.add(new  Double(d));  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(new  Double(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(new  Double(d));	  cc.add(Double.toString(d));    Cc    cc.add(Double.toString(d));    	non-compiled	[CE]  <identifier>  expected	72	None	replace
625	[BUG]  [BUGGY]  cc.add(Node.newNumber(d));  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Node.newNumber(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Node.newNumber(d));	  cc.add(Double.toString(d));    Cc    cc.add(Double.toString(d));    	non-compiled	[CE]  <identifier>  expected	72	None	replace
626	[BUG]  [BUGGY]  Context.report(JSError.make(c,  d,  IN_FOR_INIT_CLAUSE));  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context.report(JSError.make(c,  d,  IN_FOR_INIT_CLAUSE));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context.report(JSError.make(c,  d,  IN_FOR_INIT_CLAUSE));	  Context.addExpr(d);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
627	[BUG]  [BUGGY]  Context.report(JSError.make(c,  d,  NON_GLOBAL_NUMBER_INIT_CLAUSE));  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context.report(JSError.make(c,  d,  NON_GLOBAL_NUMBER_INIT_CLAUSE));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context.report(JSError.make(c,  d,  NON_GLOBAL_NUMBER_INIT_CLAUSE));	  Context.addExpr(d);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
628	[BUG]  [BUGGY]  Context.report(JSError.make(c,  d,  BAD_IN_FOR_INIT_CLAUSE));  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context.report(JSError.make(c,  d,  BAD_IN_FOR_INIT_CLAUSE));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context.report(JSError.make(c,  d,  BAD_IN_FOR_INIT_CLAUSE));	  Context.addExpr(d);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
629	[BUG]  [BUGGY]  Context.report(JSError.make(c,  d,  NON_GLOBAL_NUMBER_ERROR));  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context.report(JSError.make(c,  d,  NON_GLOBAL_NUMBER_ERROR));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context.report(JSError.make(c,  d,  NON_GLOBAL_NUMBER_ERROR));	  Context.addExpr(d);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
630	[BUG]  [BUGGY]  Context.report(JSError.make(c,  d,  UNKNOWN_EXPR_TYPE));  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context.report(JSError.make(c,  d,  UNKNOWN_EXPR_TYPE));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context.report(JSError.make(c,  d,  UNKNOWN_EXPR_TYPE));	  Context.addExpr(d);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
631	[BUG]  [BUGGY]  Context.report(JSError.make(c,  d,  NON_GLOBAL_NUMBER_IN_FOR_INIT_CLAUSE));  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context.report(JSError.make(c,  d,  NON_GLOBAL_NUMBER_IN_FOR_INIT_CLAUSE));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context.report(JSError.make(c,  d,  NON_GLOBAL_NUMBER_IN_FOR_INIT_CLAUSE));	  Context.addExpr(d);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
632	[BUG]  [BUGGY]  Context  c  =  getCurrentContext();  add(c,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  getCurrentContext();  add(c,  n);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  getCurrentContext();  add(c,  n);	          Context    c    =    getCurrentContext();    add(c);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	92	None	replace
633	[BUG]  [BUGGY]  Context  c  =  getCurrentContext();  add(c,  0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  getCurrentContext();  add(c,  0);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  getCurrentContext();  add(c,  0);	          Context    c    =    getCurrentContext();    add(c);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	92	None	replace
634	[BUG]  [BUGGY]  d,  c.addDecimal(d);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  d,  c.addDecimal(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	d,  c.addDecimal(d);	  d,    cc.addValue(d);    	non-compiled	[CE]  <identifier>  expected	112	None	replace
635	[BUG]  [BUGGY]  d,  c.addToString(d);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  d,  c.addToString(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	d,  c.addToString(d);	  d,    cc.addValue(d);    	non-compiled	[CE]  <identifier>  expected	112	None	replace
636	[BUG]  [BUGGY]  cc.addNumber(d  -  1,  c,  1);  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  -  1,  c,  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d  -  1,  c,  1);	  cc.addNumber(d    -    1,    c);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
637	[BUG]  [BUGGY]  c.addNumber(d  -  1,  c);  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addNumber(d  -  1,  c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addNumber(d  -  1,  c);	  cc.addNumber(d    -    1,    c);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
638	[BUG]  [BUGGY]  cc  =  getSimpleNumber(key);  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc  =  getSimpleNumber(key);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc  =  getSimpleNumber(key);	  cc.addNumber(d    +    1);    int    cc    =    getSimpleNumber(key);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
639	[BUG]  [BUGGY]  double  cc  =  getSimpleNumber(key);  [CE]  invalid  method  declaration;  return  type  required  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  double  cc  =  getSimpleNumber(key);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	double  cc  =  getSimpleNumber(key);	  cc.addNumber(d    +    1);    int    cc    =    getSimpleNumber(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
640	[BUG]  [BUGGY]  cc.addNumber(d,  3,  1);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d,  3,  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  3,  1);	  cc.addNumber(d,    2,    1);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
641	[BUG]  [BUGGY]  Context  cc  =  context.addValue(d,  0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  context.addValue(d,  0);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  context.addValue(d,  0);	  Context    cc    =    context.addValue(d);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
642	[BUG]  [BUGGY]  cc.put(Double.toString(d));  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.put(Double.toString(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.put(Double.toString(d));	  cc.add(Double.toString(d));    Context    cc    =    Context.createContext(context);    	non-compiled	[CE]  <identifier>  expected	104	None	replace
643	[BUG]  [BUGGY]  Node  body  =  n.getLastChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Node  body  =  n.getLastChild();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Node  body  =  n.getLastChild();	  cc.add(Double.toString(d));    Context    cc    =    Context.createContext(context);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	104	None	replace
644	[BUG]  [BUGGY]  cc.add(Double.valueOf(d),  p);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.valueOf(d),  p);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.valueOf(d),  p);	  cc.add(d,    p);    	non-compiled	[CE]  <identifier>  expected	142	None	replace
645	[BUG]  [BUGGY]  c  =  this.context.getBooleanProp(NodeUtil.isSimpleNumber(d));  [CE]  <identifier>  expected  [FE]          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  this.context.getBooleanProp(NodeUtil.isSimpleNumber(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  this.context.getBooleanProp(NodeUtil.isSimpleNumber(d));	  cc.add(Double.toString(d));    cc.add(Double.toString(d));    this.context.putBooleanProp(NodeUtil.isJSIdentifier(d));    	non-compiled	[CE]  <identifier>  expected	70	None	replace
646	[BUG]  [BUGGY]  c  =  this.context.getBooleanProp(NodeUtil.isJSIdentifier(d),  false);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  this.context.getBooleanProp(NodeUtil.isJSIdentifier(d),  false);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  this.context.getBooleanProp(NodeUtil.isJSIdentifier(d),  false);	  cc.add(Double.toString(d));    cc.add(Double.toString(d));    this.context.putBooleanProp(NodeUtil.isJSIdentifier(d));    	non-compiled	[CE]  <identifier>  expected	70	None	replace
647	[BUG]  [BUGGY]  cc.add(Double.valueOf(d),  fn);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.valueOf(d),  fn);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.valueOf(d),  fn);	  cc.add(d,    fn);    	non-compiled	[CE]  <identifier>  expected	94	None	replace
648	[BUG]  [BUGGY]  cc.add(Double.toString(d),  fn);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toString(d),  fn);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d),  fn);	  cc.add(d,    fn);    	non-compiled	[CE]  <identifier>  expected	94	None	replace
649	[BUG]  [BUGGY]  Context.addValue(d,  0);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context.addValue(d,  0);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context.addValue(d,  0);	  Context.addValue(d);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
650	[BUG]  [BUGGY]  Context.addValue(d  -  1);  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context.addValue(d  -  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context.addValue(d  -  1);	  Context.addValue(d);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
651	[BUG]  [BUGGY]  cc.addValue(d,  0);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addValue(d,  0);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addValue(d,  0);	  cc.addExpr(d,    0);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
652	[BUG]  [BUGGY]  cc.add(Double.toString(d),  0);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toString(d),  0);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d),  0);	  cc.add(Double.toString(d),    1);    	non-compiled	[CE]  <identifier>  expected	79	None	replace
653	[BUG]  [BUGGY]  cc.addValue(d,  Double.toString(d));  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addValue(d,  Double.toString(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addValue(d,  Double.toString(d));	  cc.addValue(Double.toString(d));    	non-compiled	[CE]  <identifier>  expected	135	None	replace
654	[BUG]  [BUGGY]  cc.addValue(Double.toString(d),  0);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addValue(Double.toString(d),  0);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addValue(Double.toString(d),  0);	  cc.addValue(Double.toString(d));    	non-compiled	[CE]  <identifier>  expected	135	None	replace
655	[BUG]  [BUGGY]  cc.addChildToFront(new  Double(d),  n);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addChildToFront(new  Double(d),  n);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToFront(new  Double(d),  n);	  cc.addChildToFront(new    Double(d));    	non-compiled	[CE]  <identifier>  expected	82	None	replace
656	[BUG]  [BUGGY]  cc.addChildToFront(new  Double(d),  0);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addChildToFront(new  Double(d),  0);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToFront(new  Double(d),  0);	  cc.addChildToFront(new    Double(d));    	non-compiled	[CE]  <identifier>  expected	82	None	replace
657	[BUG]  [BUGGY]  cc.addChildToFront(new  Double(d)+  1);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addChildToFront(new  Double(d)+  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToFront(new  Double(d)+  1);	  cc.addChildToFront(new    Double(d));    	non-compiled	[CE]  <identifier>  expected	82	None	replace
658	[BUG]  [BUGGY]  cc.addChildToFront(new  Double(d,  0.0));  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addChildToFront(new  Double(d,  0.0));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToFront(new  Double(d,  0.0));	  cc.addChildToFront(new    Double(d));    	non-compiled	[CE]  <identifier>  expected	82	None	replace
659	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().getContextForNoDeclaration(n);  [CE]  invalid  method  declaration;  return  type  required  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getCurrentContext().getContextForNoDeclaration(n);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getCurrentContext().getContextForNoDeclaration(n);	  cc.addNumber(d    -    1);    Context    cc    =    getCurrentContext().getContextForNoDeclaration(d);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	117	None	replace
660	[BUG]  [BUGGY]  c  =  this.context.getBooleanProp(NodeUtil.isJavaIdentifier(value));  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  this.context.getBooleanProp(NodeUtil.isJavaIdentifier(value));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  this.context.getBooleanProp(NodeUtil.isJavaIdentifier(value));	  cc.add(Double.toString(d));    cc.add(Double.toString(d));    this.context.putBooleanProp(NodeUtil.isJavaIdentifier(key));    	non-compiled	[CE]  <identifier>  expected	75	None	replace
661	[BUG]  [BUGGY]  c  =  this.context.getBooleanProperty(NodeUtil.isJavaIdentifier(key));  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  this.context.getBooleanProperty(NodeUtil.isJavaIdentifier(key));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  this.context.getBooleanProperty(NodeUtil.isJavaIdentifier(key));	  cc.add(Double.toString(d));    cc.add(Double.toString(d));    this.context.putBooleanProp(NodeUtil.isJavaIdentifier(key));    	non-compiled	[CE]  <identifier>  expected	75	None	replace
662	[BUG]  [BUGGY]  c  =  this.context.getBooleanProp(NodeUtil.isJavaIdentifier(key),  false);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  this.context.getBooleanProp(NodeUtil.isJavaIdentifier(key),  false);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  this.context.getBooleanProp(NodeUtil.isJavaIdentifier(key),  false);	  cc.add(Double.toString(d));    cc.add(Double.toString(d));    this.context.putBooleanProp(NodeUtil.isJavaIdentifier(key));    	non-compiled	[CE]  <identifier>  expected	75	None	replace
663	[BUG]  [BUGGY]  cc.addNumber(Double.valueOf(d  +  1));  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(Double.valueOf(d  +  1));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(Double.valueOf(d  +  1));	  cc.addNumber(d    +    1);    Context    cc    =    getContext().addNumber(Double.valueOf(d    +    1));    	non-compiled	[CE]  <identifier>  expected	101	None	replace
664	[BUG]  [BUGGY]  Context  cc  =  getContext().addNumber(Double.valueOf(d),  double.doubleValue());  [CE]  class  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getContext().addNumber(Double.valueOf(d),  double.doubleValue());  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getContext().addNumber(Double.valueOf(d),  double.doubleValue());	  cc.addNumber(d    +    1);    Context    cc    =    getContext().addNumber(Double.valueOf(d    +    1));    	non-compiled	[CE]  class  expected	101	None	replace
665	[BUG]  [BUGGY]  cc.add(n,  d  -  1);  [CE]  <identifier>  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(n,  d  -  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(n,  d  -  1);	  cc.add(d    -    1);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
666	[BUG]  [BUGGY]  c.add(Double.toNaN(d));  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.add(Double.toNaN(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.add(Double.toNaN(d));	  c.addExpr(d);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
667	[BUG]  [BUGGY]  c.add(Node.toString(d));  [CE]  <identifier>  expected  [FE]          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.add(Node.toString(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.add(Node.toString(d));	  cc.add(Double.toString(d));    Cc.add(Double.toString(d));    	non-compiled	[CE]  <identifier>  expected	103	None	replace
668	[BUG]  [BUGGY]  c.add(Node.newNumber(d));  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.add(Node.newNumber(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.add(Node.newNumber(d));	  cc.add(Double.toString(d));    Cc.add(Double.toString(d));    	non-compiled	[CE]  <identifier>  expected	103	None	replace
669	[BUG]  [BUGGY]  if(Double.isNaN(d))  {  cc.addNumber(d  -  1);  cc.addNumber(d  -  1);  }  else  {  addExpr(c,  2);  }  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  if(Double.isNaN(d))  {  cc.addNumber(d  -  1);  cc.addNumber(d  -  1);  }  else  {  addExpr(c,  2);  }  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	if(Double.isNaN(d))  {  cc.addNumber(d  -  1);  cc.addNumber(d  -  1);  }  else  {  addExpr(c,  2);  }	  cc.addNumber(d    -    1);    cc.addNumber(d    -    1);    }    else    {    addExpr(c,    2);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
670	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d))  {  cc.addNumber(d  -  1);  }  else  {  addExpr(c,  2);  }  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d))  {  cc.addNumber(d  -  1);  }  else  {  addExpr(c,  2);  }  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	if(Double.isNaN(d)||  Double.isNaN(d))  {  cc.addNumber(d  -  1);  }  else  {  addExpr(c,  2);  }	  cc.addNumber(d    -    1);    cc.addNumber(d    -    1);    }    else    {    addExpr(c,    2);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
671	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d))  {  cc.addNumber(d  -  1);  cc.addNumber(d  -  1);  }  else  {  addExpr(c,  2);  }  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d))  {  cc.addNumber(d  -  1);  cc.addNumber(d  -  1);  }  else  {  addExpr(c,  2);  }  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	if(Double.isNaN(d)||  Double.isNaN(d))  {  cc.addNumber(d  -  1);  cc.addNumber(d  -  1);  }  else  {  addExpr(c,  2);  }	  cc.addNumber(d    -    1);    cc.addNumber(d    -    1);    }    else    {    addExpr(c,    2);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
672	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d))  {  cc.addNumber(d  -  1);  }  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d))  {  cc.addNumber(d  -  1);  }  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	if(Double.isNaN(d)||  Double.isNaN(d))  {  cc.addNumber(d  -  1);  }	  cc.addNumber(d    -    1);    cc.addNumber(d    -    1);    }    else    {    addExpr(c,    2);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
673	[BUG]  [BUGGY]  if(Double.isNaN(d))  {  cc.addNumber(d  -  1);  cc.addNumber(d  -  1);  }  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  if(Double.isNaN(d))  {  cc.addNumber(d  -  1);  cc.addNumber(d  -  1);  }  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	if(Double.isNaN(d))  {  cc.addNumber(d  -  1);  cc.addNumber(d  -  1);  }	  cc.addNumber(d    -    1);    cc.addNumber(d    -    1);    }    else    {    addExpr(c,    2);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
674	[BUG]  [BUGGY]  if(Double.isNaN(d))  {  cc.addNumber(d  -  1);  }  else  {  addExpr(c,  2);  }  [CE]  illegal  start  of  type  [FE]                        junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  if(Double.isNaN(d))  {  cc.addNumber(d  -  1);  }  else  {  addExpr(c,  2);  }  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	if(Double.isNaN(d))  {  cc.addNumber(d  -  1);  }  else  {  addExpr(c,  2);  }	  cc.addNumber(d    -    1);    cc.addNumber(d    -    1);    }    else    {    addExpr(c,    2);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
675	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d))  {  cc.addNumber(d  -  1);  }  else  {  addExpr(c,  2);  }  [CE]  illegal  start  of  type  [FE]                          junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  if(Double.isNaN(d)||  Double.isInfinite(d))  {  cc.addNumber(d  -  1);  }  else  {  addExpr(c,  2);  }  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	if(Double.isNaN(d)||  Double.isInfinite(d))  {  cc.addNumber(d  -  1);  }  else  {  addExpr(c,  2);  }	  cc.addNumber(d    -    1);    cc.addNumber(d    -    1);    }    else    {    addExpr(c,    2);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
676	[BUG]  [BUGGY]  cc.addNumber(d  -  1);  Context  cc  =  getCurrentContext().getContextForNumber(c);  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  -  1);  Context  cc  =  getCurrentContext().getContextForNumber(c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d  -  1);  Context  cc  =  getCurrentContext().getContextForNumber(c);	  cc.addNumber(d    -    1);    Context    cc    =    getCurrentContext().getContextForNumber(d);    	non-compiled	[CE]  <identifier>  expected	116	None	replace
677	[BUG]  [BUGGY]  cc  =  getCurrentContext().addNumber(d  +  1);  [CE]  <identifier>  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc  =  getCurrentContext().addNumber(d  +  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc  =  getCurrentContext().addNumber(d  +  1);	  cc.addNumber(d    +    1);    Context    cc    =    getCurrentContext().addNumber(d    +    1);    	non-compiled	[CE]  <identifier>  expected	97	None	replace
678	[BUG]  [BUGGY]  Context  cc  =  getContext();  [CE]  invalid  method  declaration;  return  type  required  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getContext();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getContext();	  cc.addNumber(d    -    1);    Context    cc.addNumber(d    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
679	[BUG]  [BUGGY]  conn.addPosition(d);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  conn.addPosition(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	conn.addPosition(d);	  c.addPosition(d);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
680	[BUG]  [BUGGY]  cc.addNumber(d  /  1);  Context  cc  =  getContext().addNumber(d  /  1);  [CE]  <identifier>  expected  [FE]    ComparisonFailure    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  /  1);  Context  cc  =  getContext().addNumber(d  /  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    /    1);    Context  cc  =  getContext().addNumber(d  /  1);	  	non-compiled	[CE]  <identifier>  expected	6	None	add
681	[BUG]  [BUGGY]  cc.addNumber(d  /  1);  Cc  cc.addNumber(d  /  1);  [CE]  <identifier>  expected  [FE]      ComparisonFailure    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  /  1);  Cc  cc.addNumber(d  /  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    /    1);    Cc  cc.addNumber(d  /  1);	  	non-compiled	[CE]  <identifier>  expected	6	None	add
682	[BUG]  [BUGGY]  cc.addNumber(d  /  1);  cc.addNumber(d  /  2);  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  /  1);  cc.addNumber(d  /  2);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    /    1);    cc.addNumber(d  /  2);	  	non-compiled	[CE]  <identifier>  expected	6	None	add
683	[BUG]  [BUGGY]  cc.addNumber(d  /  1);  Context  cc.addNumber(d  /  1);  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  /  1);  Context  cc.addNumber(d  /  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    /    1);    Context  cc.addNumber(d  /  1);	  	non-compiled	[CE]  <identifier>  expected	6	None	add
684	[BUG]  [BUGGY]  cc.addNumber(d  /  1);  Context  cc  =  getContext().addNumber(d  /  2);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  /  1);  Context  cc  =  getContext().addNumber(d  /  2);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    /    1);    Context  cc  =  getContext().addNumber(d  /  2);	  	non-compiled	[CE]  <identifier>  expected	6	None	add
685	[BUG]  [BUGGY]  Context  c  =  context.getCurrentContext();  add(c,  0);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  context.getCurrentContext();  add(c,  0);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  context.getCurrentContext();  add(c,  0);	          Context    c    =    context.getCurrentContext();    add(c);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
686	[BUG]  [BUGGY]  Context  c  =  context.getCurrentContext();  add(c,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  context.getCurrentContext();  add(c,  n);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  context.getCurrentContext();  add(c,  n);	          Context    c    =    context.getCurrentContext();    add(c);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
687	[BUG]  [BUGGY]  Node  c  =  getCurrentNode();  add( ": ".equals(d));  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Node  c  =  getCurrentNode();  add( ": ".equals(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Node  c  =  getCurrentNode();  add( ": ".equals(d));	          Node    c    =    getCurrentNode();    add(   ":   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	90	None	replace
688	[BUG]  [BUGGY]  Context  c  =  getCurrentNode();  add( ": ");  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  getCurrentNode();  add( ": ");  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  getCurrentNode();  add( ": ");	          Node    c    =    getCurrentNode();    add(   ":   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	90	None	replace
689	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isNaN(d));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Preconditions.checkState(NodeUtil.isNaN(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Preconditions.checkState(NodeUtil.isNaN(d));	          Node    c    =    getCurrentNode();    add(   ":   ");    	non-compiled	[CE]  <identifier>  expected	90	None	replace
690	[BUG]  [BUGGY]  Context  c  =  context.getCurrentContextForNode(n);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  context.getCurrentContextForNode(n);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  context.getCurrentContextForNode(n);	          Context    c    =    context.getCurrentContext();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
691	[BUG]  [BUGGY]  Context  c  =  getContextForNode(context);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  getContextForNode(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  getContextForNode(context);	          Context    c    =    context.getContext();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
692	[BUG]  [BUGGY]  cc.add(Double.valueOf(d)-  1);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.valueOf(d)-  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.valueOf(d)-  1);	  cc.add(Double.valueOf(d));    	non-compiled	[CE]  <identifier>  expected	81	None	replace
693	[BUG]  [BUGGY]  d.add(d);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  d.add(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	d.add(d);	  d.addExpr(c);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
694	[BUG]  [BUGGY]  d.add( "- ");  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  d.add( "- ");  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	d.add( "- ");	  d.addExpr(c);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
695	[BUG]  [BUGGY]  d.add(n);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  d.add(n);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	d.add(n);	  d.addExpr(c);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
696	[BUG]  [BUGGY]  double  c  =  getSimpleNumber(d,  context);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  double  c  =  getSimpleNumber(d,  context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	double  c  =  getSimpleNumber(d,  context);	          double    c    =    getSimpleNumber(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	122	None	replace
697	[BUG]  [BUGGY]  double  c  =  getSimpleNumber(d,  body);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  double  c  =  getSimpleNumber(d,  body);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	double  c  =  getSimpleNumber(d,  body);	          double    c    =    getSimpleNumber(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	122	None	replace
698	[BUG]  [BUGGY]  double  c  =  getSimpleNumber(p);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  double  c  =  getSimpleNumber(p);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	double  c  =  getSimpleNumber(p);	          double    c    =    getSimpleNumber(key);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	122	None	replace
699	[BUG]  [BUGGY]  cc.add(Double.toString(d)/  Context.START_OF_EXPR);  [CE]  <identifier>  expected  [FE]        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toString(d)/  Context.START_OF_EXPR);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d)/  Context.START_OF_EXPR);	  cc.add(Double.toString(d),    Context.START_OF_EXPR);    	non-compiled	[CE]  <identifier>  expected	133	None	replace
700	[BUG]  [BUGGY]  cc.add(Double.toString(d)+  Context.START_OF_EXPR);  [CE]  <identifier>  expected  [FE]          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toString(d)+  Context.START_OF_EXPR);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d)+  Context.START_OF_EXPR);	  cc.add(Double.toString(d),    Context.START_OF_EXPR);    	non-compiled	[CE]  <identifier>  expected	133	None	replace
701	[BUG]  [BUGGY]  cc.addNumber(double  d  -  1);  [CE]  <identifier>  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(double  d  -  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(double  d  -  1);	  cc.addNumber(d    -    1);    cc.addNumber(d    -    1);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
702	[BUG]  [BUGGY]  cc.addNumber(d,  d  *  1);  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d,  d  *  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  d  *  1);	  cc.addNumber(d,    d    +    1);    	non-compiled	[CE]  <identifier>  expected	145	None	replace
703	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().getContextForNonInOperator(d);  [CE]  invalid  method  declaration;  return  type  required  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getCurrentContext().getContextForNonInOperator(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getCurrentContext().getContextForNonInOperator(d);	  cc.addNumber(d    +    1);    Context    cc    =    getCurrentContext().getContextForNoInOperator(d);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	140	None	replace
704	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().getContextForNonNaN(d);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getCurrentContext().getContextForNonNaN(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getCurrentContext().getContextForNonNaN(d);	  cc.addNumber(d    +    1);    Context    cc    =    getCurrentContext().getContextForNoInOperator(d);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	140	None	replace
705	[BUG]  [BUGGY]  cc.add(Double.toString(d),  c.doubleValue());  [CE]  <identifier>  expected  [FE]          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toString(d),  c.doubleValue());  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d),  c.doubleValue());	  cc.add(Double.toString(d).doubleValue());    	non-compiled	[CE]  <identifier>  expected	134	None	replace
706	[BUG]  [BUGGY]  if(Double.isNaN(d))  {  cc.addNumber(d  -  1);  cc.addNumber(d  -  1));  }  [CE]  illegal  start  of  type  [FE]        junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  if(Double.isNaN(d))  {  cc.addNumber(d  -  1);  cc.addNumber(d  -  1));  }  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	if(Double.isNaN(d))  {  cc.addNumber(d  -  1);  cc.addNumber(d  -  1));  }	  cc.addNumber(d    -    1);    cc.addNumber(d    -    1));    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
707	[BUG]  [BUGGY]  if(Double.isNaN(d))  {  cc.addNumber(d  -  1);  cc.addNumber(d  -  1));  }  else  {  addExpr(c,  1);  }  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  if(Double.isNaN(d))  {  cc.addNumber(d  -  1);  cc.addNumber(d  -  1));  }  else  {  addExpr(c,  1);  }  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	if(Double.isNaN(d))  {  cc.addNumber(d  -  1);  cc.addNumber(d  -  1));  }  else  {  addExpr(c,  1);  }	  cc.addNumber(d    -    1);    cc.addNumber(d    -    1));    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
708	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d))  {  cc.addNumber(d  -  1);  }  else  {  addExpr(c,  1);  }  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d))  {  cc.addNumber(d  -  1);  }  else  {  addExpr(c,  1);  }  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	if(Double.isNaN(d)||  Double.isNaN(d))  {  cc.addNumber(d  -  1);  }  else  {  addExpr(c,  1);  }	  cc.addNumber(d    -    1);    cc.addNumber(d    -    1));    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
709	[BUG]  [BUGGY]  if(Double.isNaN(d))  {  cc.addNumber(d  -  1);  cc.addNumber(d  -  1));  }  else  {  addExpr(c,  2);  }  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  if(Double.isNaN(d))  {  cc.addNumber(d  -  1);  cc.addNumber(d  -  1));  }  else  {  addExpr(c,  2);  }  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	if(Double.isNaN(d))  {  cc.addNumber(d  -  1);  cc.addNumber(d  -  1));  }  else  {  addExpr(c,  2);  }	  cc.addNumber(d    -    1);    cc.addNumber(d    -    1));    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
710	[BUG]  [BUGGY]  d.addPosition(n);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  d.addPosition(n);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	d.addPosition(n);	  d.addPosition(c);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
711	[BUG]  [BUGGY]  d.addPosition(p);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  d.addPosition(p);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	d.addPosition(p);	  d.addPosition(c);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
712	[BUG]  [BUGGY]  cc.addValue(d,  1.0);  [CE]  <identifier>  expected  [FE]                            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addValue(d,  1.0);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addValue(d,  1.0);	  cc.addValue(d,    d);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
713	[BUG]  [BUGGY]  cc.addValue(d,  Double.NEGATIVE_INFINITY);  [CE]  <identifier>  expected  [FE]                              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addValue(d,  Double.NEGATIVE_INFINITY);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addValue(d,  Double.NEGATIVE_INFINITY);	  cc.addValue(d,    d);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
714	[BUG]  [BUGGY]  Context.addChildToFront(d,  Double.POSITIVE_INFINITY);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context.addChildToFront(d,  Double.POSITIVE_INFINITY);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context.addChildToFront(d,  Double.POSITIVE_INFINITY);	  cc.addChildToFront(d,    Double.POSITIVE_INFINITY);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
715	[BUG]  [BUGGY]  cs.addChildToFront(d,  Double.POSITIVE_INFINITY);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cs.addChildToFront(d,  Double.POSITIVE_INFINITY);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cs.addChildToFront(d,  Double.POSITIVE_INFINITY);	  cc.addChildToFront(d,    Double.POSITIVE_INFINITY);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
716	[BUG]  [BUGGY]  cc.addChildToFront(d,  Double.POSITIVE_INFINITY  |  Double.POSITIVE_INFINITY);  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addChildToFront(d,  Double.POSITIVE_INFINITY  |  Double.POSITIVE_INFINITY);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToFront(d,  Double.POSITIVE_INFINITY  |  Double.POSITIVE_INFINITY);	  cc.addChildToFront(d,    Double.POSITIVE_INFINITY);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
717	[BUG]  [BUGGY]  Context  cc  =  getContext().getCurrentContext().getContextForNumber(context);  [CE]  invalid  method  declaration;  return  type  required  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getContext().getCurrentContext().getContextForNumber(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getContext().getCurrentContext().getContextForNumber(context);	  cc.addNumber(d    +    1);    Context    cc    =    getContext().getCurrentContext().getContextForNoInOperator(context);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	138	None	replace
718	[BUG]  [BUGGY]  Context  cc  =  getContext().getCurrentContext().getContextForNonNaN(context);  [CE]  invalid  method  declaration;  return  type  required  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getContext().getCurrentContext().getContextForNonNaN(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getContext().getCurrentContext().getContextForNonNaN(context);	  cc.addNumber(d    +    1);    Context    cc    =    getContext().getCurrentContext().getContextForNoInOperator(context);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	138	None	replace
719	[BUG]  [BUGGY]  Context  cc  =  getContext().getCurrentContext().getContextForNonInOperator(context);  [CE]  invalid  method  declaration;  return  type  required  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getContext().getCurrentContext().getContextForNonInOperator(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getContext().getCurrentContext().getContextForNonInOperator(context);	  cc.addNumber(d    +    1);    Context    cc    =    getContext().getCurrentContext().getContextForNoInOperator(context);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	138	None	replace
720	[BUG]  [BUGGY]  cc  =  getSimpleNumber(key).intValue();  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc  =  getSimpleNumber(key).intValue();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc  =  getSimpleNumber(key).intValue();	  cc.addNumber(d    +    1);    int    cc    =    getSimpleNumber(key).intValue();    	non-compiled	[CE]  <identifier>  expected	42	None	replace
721	[BUG]  [BUGGY]  double  cc  =  getSimpleNumber(key).intValue();  [CE]  invalid  method  declaration;  return  type  required  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  double  cc  =  getSimpleNumber(key).intValue();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	double  cc  =  getSimpleNumber(key).intValue();	  cc.addNumber(d    +    1);    int    cc    =    getSimpleNumber(key).intValue();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
722	[BUG]  [BUGGY]  Node  c  =  getCurrentContext().addNumber(d  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]        junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Node  c  =  getCurrentContext().addNumber(d  -  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Node  c  =  getCurrentContext().addNumber(d  -  1);	  cc.addNumber(d    -    1);    Context    cc    =    getCurrentContext().addNumber(d    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	113	None	replace
723	[BUG]  [BUGGY]  cc  =  getContext().addNumber(d  +  1);  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc  =  getContext().addNumber(d  +  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc  =  getContext().addNumber(d  +  1);	  cc.addNumber(d    +    1);    Context    cc    =    getContext().addNumber(d    +    1);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
724	[BUG]  [BUGGY]  cc.addNumber(d  *  1);  Context  cc  =  getCurrentContext().addNumber(d  *  1);  [CE]  <identifier>  expected  [FE]    ComparisonFailure    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  *  1);  Context  cc  =  getCurrentContext().addNumber(d  *  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    *    1);    Context  cc  =  getCurrentContext().addNumber(d  *  1);	  	non-compiled	[CE]  <identifier>  expected	1	None	add
725	[BUG]  [BUGGY]  cc.addNumber(d  *  1);  Context  cc  =  getContext().addNumber(Double.parseDouble(d));  [CE]  <identifier>  expected  [FE]      ComparisonFailure    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  *  1);  Context  cc  =  getContext().addNumber(Double.parseDouble(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    *    1);    Context  cc  =  getContext().addNumber(Double.parseDouble(d));	  	non-compiled	[CE]  <identifier>  expected	1	None	add
726	[BUG]  [BUGGY]  cc.addNumber(d  *  1);  Cc  cc.addNumber(d  *  1);  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  *  1);  Cc  cc.addNumber(d  *  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    *    1);    Cc  cc.addNumber(d  *  1);	  	non-compiled	[CE]  <identifier>  expected	1	None	add
727	[BUG]  [BUGGY]  cc.addNumber(d  *  1);  Context  cc  =  getContext().addNumber(Double.valueOf(d));  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  *  1);  Context  cc  =  getContext().addNumber(Double.valueOf(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    *    1);    Context  cc  =  getContext().addNumber(Double.valueOf(d));	  	non-compiled	[CE]  <identifier>  expected	1	None	add
728	[BUG]  [BUGGY]  cc.addNumber(d  *  1);  cc.addNumber(d  *  2);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  *  1);  cc.addNumber(d  *  2);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    *    1);    cc.addNumber(d  *  2);	  	non-compiled	[CE]  <identifier>  expected	1	None	add
729	[BUG]  [BUGGY]  cc.addNumber(d  *  1);  Context  cc  =  getContext().addNumber(Double.toString(d));  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  *  1);  Context  cc  =  getContext().addNumber(Double.toString(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    *    1);    Context  cc  =  getContext().addNumber(Double.toString(d));	  	non-compiled	[CE]  <identifier>  expected	1	None	add
730	[BUG]  [BUGGY]  cc.add(NodeUtil.newNumber(d));  [CE]  <identifier>  expected  [FE]        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(NodeUtil.newNumber(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(NodeUtil.newNumber(d));	  cc.add(Double.toString(d));    cc.add(Double.toString(d));    	non-compiled	[CE]  <identifier>  expected	69	None	replace
731	[BUG]  [BUGGY]  c.addChildToBack(d,  n);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addChildToBack(d,  n);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addChildToBack(d,  n);	  cc.addChildToBack(d);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
732	[BUG]  [BUGGY]  Context  cc  =  getContext().add(context,  Math.abs(d));  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getContext().add(context,  Math.abs(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getContext().add(context,  Math.abs(d));	  cc.addNumber(d    +    1);    Context    cc    =    getContext().add(context,    d    +    1);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
733	[BUG]  [BUGGY]  cc.addNumber(d,  2  +  1);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d,  2  +  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  2  +  1);	  cc.addNumber(d,    2);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
734	[BUG]  [BUGGY]  cc.addLastChild(d,  0);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addLastChild(d,  0);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addLastChild(d,  0);	  cc.addLastChild(d);    	non-compiled	[CE]  <identifier>  expected	131	None	replace
735	[BUG]  [BUGGY]  cc.addValue(d  -  1,  d);  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addValue(d  -  1,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addValue(d  -  1,  d);	  cc.addValue(d    -    1);    	non-compiled	[CE]  <identifier>  expected	124	None	replace
736	[BUG]  [BUGGY]  cc.addValue(d  -  1,  n);  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addValue(d  -  1,  n);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addValue(d  -  1,  n);	  cc.addValue(d    -    1);    	non-compiled	[CE]  <identifier>  expected	124	None	replace
737	[BUG]  [BUGGY]  cc.add(Double.valueOf(d),  n);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.valueOf(d),  n);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.valueOf(d),  n);	  cc.add(d,    n);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
738	[BUG]  [BUGGY]  cc.addChildToFront(d  *  1);  [CE]  <identifier>  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addChildToFront(d  *  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToFront(d  *  1);	  cc.addChildToFront(d    -    1);    	non-compiled	[CE]  <identifier>  expected	123	None	replace
739	[BUG]  [BUGGY]  cc.addChildToBack(d  -  1);  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addChildToBack(d  -  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToBack(d  -  1);	  cc.addChildToFront(d    -    1);    	non-compiled	[CE]  <identifier>  expected	123	None	replace
740	[BUG]  [BUGGY]  c  =  context.getCurrentNumber();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  context.getCurrentNumber();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  context.getCurrentNumber();	          c    =    context.getCurrentStructure();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
741	[BUG]  [BUGGY]  c  =  context.getCurrentDeclaration();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  context.getCurrentDeclaration();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  context.getCurrentDeclaration();	          c    =    context.getCurrentStructure();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
742	[BUG]  [BUGGY]  c  =  context.getCurrentStructure()  +  1;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  context.getCurrentStructure()  +  1;  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  context.getCurrentStructure()  +  1;	          c    =    context.getCurrentStructure();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
743	[BUG]  [BUGGY]  cc.add(Double.toString(value));  [CE]  <identifier>  expected  [FE]        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toString(value));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(value));	  cc.add(Double.toString(d));    Context    cc    =    getCurrentContext();    	non-compiled	[CE]  <identifier>  expected	127	None	replace
744	[BUG]  [BUGGY]  c  =  context.getCurrentSegment();  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  context.getCurrentSegment();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  context.getCurrentSegment();	  cc.addNumber(d    -    1);    cc.addNumber(d    -    1);    }    else    {    addExpr(c,    1);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
745	[BUG]  [BUGGY]  cc.add(d,  0,  d);  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(d,  0,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d,  0,  d);	  cc.add(d,    double    d);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
746	[BUG]  [BUGGY]  Context  c  =  getCurrentContext().getCurrentStatement();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  getCurrentContext().getCurrentStatement();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  getCurrentContext().getCurrentStatement();	          Context    c    =    getCurrentContext();    	non-compiled	[CE]  <identifier>  expected	26	None	replace
747	[BUG]  [BUGGY]  Context  c  =  getCurrentContextIn();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  getCurrentContextIn();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  getCurrentContextIn();	          Context    c    =    getCurrentContext();    	non-compiled	[CE]  <identifier>  expected	26	None	replace
748	[BUG]  [BUGGY]  Context  c  =  getCurrentStatementContext();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  getCurrentStatementContext();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  getCurrentStatementContext();	          Context    c    =    getCurrentContext();    	non-compiled	[CE]  <identifier>  expected	26	None	replace
749	[BUG]  [BUGGY]  cc.addNumber(d  +  2);  Context  cc  =  context.getCurrentContext();  [CE]  <identifier>  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  +  2);  Context  cc  =  context.getCurrentContext();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    +    2);    Context  cc  =  context.getCurrentContext();	  	non-compiled	[CE]  <identifier>  expected	3	None	add
750	[BUG]  [BUGGY]  cc.addNumber(d  +  2);  Context  cc  =  getContext().getCurrentContext();  [CE]  <identifier>  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  +  2);  Context  cc  =  getContext().getCurrentContext();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    +    2);    Context  cc  =  getContext().getCurrentContext();	  	non-compiled	[CE]  <identifier>  expected	3	None	add
751	[BUG]  [BUGGY]  cc.addNumber(d  +  2);  Context  cc  =  getContextForNumber(key);  [CE]  <identifier>  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  +  2);  Context  cc  =  getContextForNumber(key);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    +    2);    Context  cc  =  getContextForNumber(key);	  	non-compiled	[CE]  <identifier>  expected	3	None	add
752	[BUG]  [BUGGY]  cc.addNumber(d  +  2);  Context  cc  =  getContext();  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  +  2);  Context  cc  =  getContext();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    +    2);    Context  cc  =  getContext();	  	non-compiled	[CE]  <identifier>  expected	3	None	add
753	[BUG]  [BUGGY]  cc.addNumber(d  +  2);  Context  cc  =  getCurrentContext();  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  +  2);  Context  cc  =  getCurrentContext();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    +    2);    Context  cc  =  getCurrentContext();	  	non-compiled	[CE]  <identifier>  expected	3	None	add
754	[BUG]  [BUGGY]  Context  cc  =  Context.createContext(context,  n  +  1);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  Context.createContext(context,  n  +  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  Context.createContext(context,  n  +  1);	  cc.add(Double.toString(d));    Context    cc    =    Context.createContext(context,    n);    	non-compiled	[CE]  <identifier>  expected	106	None	replace
755	[BUG]  [BUGGY]  cc  =  Context.createContext(context,  n  +  1);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc  =  Context.createContext(context,  n  +  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc  =  Context.createContext(context,  n  +  1);	  cc.add(Double.toString(d));    Context    cc    =    Context.createContext(context,    n);    	non-compiled	[CE]  <identifier>  expected	106	None	replace
756	[BUG]  [BUGGY]  c  =  Context.createContext(context,  n);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  Context.createContext(context,  n);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  Context.createContext(context,  n);	  cc.add(Double.toString(d));    Context    cc    =    Context.createContext(context,    n);    	non-compiled	[CE]  <identifier>  expected	106	None	replace
757	[BUG]  [BUGGY]  cc.addPosition(d  +  1,  d);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addPosition(d  +  1,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addPosition(d  +  1,  d);	  cc.addPosition(d    +    1);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
758	[BUG]  [BUGGY]  Context  cc  =  getContext().addNumber(Double.parseDouble(d  +  1));  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getContext().addNumber(Double.parseDouble(d  +  1));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getContext().addNumber(Double.parseDouble(d  +  1));	  cc.addNumber(d    +    1);    Context    cc    =    getContext().addNumber(Double.parseDouble(d));    	non-compiled	[CE]  <identifier>  expected	98	None	replace
759	[BUG]  [BUGGY]  Context  c  =  getContext(context);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  getContext(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  getContext(context);	          Context    c    =    getContext();    	non-compiled	[CE]  <identifier>  expected	27	None	replace
760	[BUG]  [BUGGY]  Context  c  =  getContextForNoChild(n);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  getContextForNoChild(n);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  getContextForNoChild(n);	          Context    c    =    getContext();    	non-compiled	[CE]  <identifier>  expected	27	None	replace
761	[BUG]  [BUGGY]  Context  c  =  getContextIn();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  getContextIn();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  getContextIn();	          Context    c    =    getContext();    	non-compiled	[CE]  <identifier>  expected	27	None	replace
762	[BUG]  [BUGGY]  cc.remove(Double.toString(d));  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.remove(Double.toString(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.remove(Double.toString(d));	  cc.add(Double.toString(d));    Node    cc    =    getCurrentNode();    	non-compiled	[CE]  <identifier>  expected	105	None	replace
763	[BUG]  [BUGGY]  cc.add(Double.toString(d));  Preconditions.checkState(cc.getType()  ==  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toString(d));  Preconditions.checkState(cc.getType()  ==  Token.FUNCTION);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d));  Preconditions.checkState(cc.getType()  ==  Token.FUNCTION);	  cc.add(Double.toString(d));    Node    cc    =    getCurrentNode();    	non-compiled	[CE]  <identifier>  expected	105	None	replace
764	[BUG]  [BUGGY]  cc.remove(Double.toString(d));  Node  cc  =  getCurrentNode();  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.remove(Double.toString(d));  Node  cc  =  getCurrentNode();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.remove(Double.toString(d));  Node  cc  =  getCurrentNode();	  cc.add(Double.toString(d));    Node    cc    =    getCurrentNode();    	non-compiled	[CE]  <identifier>  expected	105	None	replace
765	[BUG]  [BUGGY]  cc.addPosition(d,  0);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addPosition(d,  0);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addPosition(d,  0);	  cc.addPosition(d,    d);    	non-compiled	[CE]  <identifier>  expected	119	None	replace
766	[BUG]  [BUGGY]  cc.addPosition(d,  p);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addPosition(d,  p);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addPosition(d,  p);	  cc.addPosition(d,    d);    	non-compiled	[CE]  <identifier>  expected	119	None	replace
767	[BUG]  [BUGGY]  cc.addPosition(d,  -1);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addPosition(d,  -1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addPosition(d,  -1);	  cc.addPosition(d,    d);    	non-compiled	[CE]  <identifier>  expected	119	None	replace
768	[BUG]  [BUGGY]  c.addNumber(d,  2);  [CE]  <identifier>  expected  [FE]                            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addNumber(d,  2);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addNumber(d,  2);	  cc.addNumber(d,    3);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
769	[BUG]  [BUGGY]  c.addPosition(d,  p);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addPosition(d,  p);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addPosition(d,  p);	  cc.addPosition(d,    c);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
770	[BUG]  [BUGGY]  Context.addPosition(d  -  1);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context.addPosition(d  -  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context.addPosition(d  -  1);	  Context.addPosition(d);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
771	[BUG]  [BUGGY]  Context.addPosition(d,  1);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context.addPosition(d,  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context.addPosition(d,  1);	  Context.addPosition(d);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
772	[BUG]  [BUGGY]  Context.addPosition(d,  double);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context.addPosition(d,  double);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context.addPosition(d,  double);	  Context.addPosition(d);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
773	[BUG]  [BUGGY]  Context.addPosition(d,  context);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context.addPosition(d,  context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context.addPosition(d,  context);	  Context.addPosition(d);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
774	[BUG]  [BUGGY]  cc.addNumber(double,  d  +  1,  c);  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(double,  d  +  1,  c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(double,  d  +  1,  c);	  cc.addNumber(d    +    1,    c);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
775	[BUG]  [BUGGY]  c  =  this.context.getBooleanProp(NodeUtil.isSimpleNumber(n));  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  this.context.getBooleanProp(NodeUtil.isSimpleNumber(n));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  this.context.getBooleanProp(NodeUtil.isSimpleNumber(n));	  cc.add(Double.toString(d));    cc.add(Double.toString(d));    this.context.putBooleanProp(NodeUtil.isSimpleNumber(d));    	non-compiled	[CE]  <identifier>  expected	74	None	replace
776	[BUG]  [BUGGY]  c  =  this.context.getBooleanProp(NodeUtil.isSimpleNumber(d),  false);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  this.context.getBooleanProp(NodeUtil.isSimpleNumber(d),  false);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  this.context.getBooleanProp(NodeUtil.isSimpleNumber(d),  false);	  cc.add(Double.toString(d));    cc.add(Double.toString(d));    this.context.putBooleanProp(NodeUtil.isSimpleNumber(d));    	non-compiled	[CE]  <identifier>  expected	74	None	replace
777	[BUG]  [BUGGY]  c  =  this.context.getBooleanProp(NodeUtil.isImmutableNumber(d));  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  this.context.getBooleanProp(NodeUtil.isImmutableNumber(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  this.context.getBooleanProp(NodeUtil.isImmutableNumber(d));	  cc.add(Double.toString(d));    cc.add(Double.toString(d));    this.context.putBooleanProp(NodeUtil.isSimpleNumber(d));    	non-compiled	[CE]  <identifier>  expected	74	None	replace
778	[BUG]  [BUGGY]  c  =  this.context.getBooleanProperty(NodeUtil.isSimpleNumber(d));  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  this.context.getBooleanProperty(NodeUtil.isSimpleNumber(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  this.context.getBooleanProperty(NodeUtil.isSimpleNumber(d));	  cc.add(Double.toString(d));    cc.add(Double.toString(d));    this.context.putBooleanProp(NodeUtil.isSimpleNumber(d));    	non-compiled	[CE]  <identifier>  expected	74	None	replace
779	[BUG]  [BUGGY]  c  =  this.context.getBooleanProp(NodeUtil.isSimpleNumber(double));  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  this.context.getBooleanProp(NodeUtil.isSimpleNumber(double));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  this.context.getBooleanProp(NodeUtil.isSimpleNumber(double));	  cc.add(Double.toString(d));    cc.add(Double.toString(d));    this.context.putBooleanProp(NodeUtil.isSimpleNumber(d));    	non-compiled	[CE]  <identifier>  expected	74	None	replace
780	[BUG]  [BUGGY]  Context.addChildToFront(d,  c);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context.addChildToFront(d,  c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context.addChildToFront(d,  c);	  cc.addChildToFront(d,    c);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
781	[BUG]  [BUGGY]  c.addExpr(d,  Double.POSITIVE_INFINITY);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addExpr(d,  Double.POSITIVE_INFINITY);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addExpr(d,  Double.POSITIVE_INFINITY);	  cc.addExpr(d,    c);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
782	[BUG]  [BUGGY]  c.addExpr(d,  Double.NEGATIVE_INFINITY);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addExpr(d,  Double.NEGATIVE_INFINITY);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addExpr(d,  Double.NEGATIVE_INFINITY);	  cc.addExpr(d,    c);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
783	[BUG]  [BUGGY]  cc.addChildToFront(d,  d);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addChildToFront(d,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToFront(d,  d);	  cc.addExpr(d,    d);    	non-compiled	[CE]  <identifier>  expected	126	None	replace
784	[BUG]  [BUGGY]  cc.addChildAfter(d,  d);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addChildAfter(d,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildAfter(d,  d);	  cc.addChildToFront(double);    	non-compiled	[CE]  <identifier>  expected	130	None	replace
785	[BUG]  [BUGGY]  cc.addNumber(d  -  1,  d));  [CE]  <identifier>  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  -  1,  d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d  -  1,  d));	  cc.addNumber(d    -    1);    cc.addNumber(d    -    1));    	non-compiled	[CE]  <identifier>  expected	83	None	replace
786	[BUG]  [BUGGY]  cc.add(d  -  1,  d);  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(d  -  1,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d  -  1,  d);	  cc.addNumber(d    -    1);    cc.addNumber(d    -    1));    	non-compiled	[CE]  <identifier>  expected	83	None	replace
787	[BUG]  [BUGGY]  cc.addNumber(d  -  1,  1);  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  -  1,  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d  -  1,  1);	  cc.addNumber(d    -    1);    cc.addNumber(d    -    1));    	non-compiled	[CE]  <identifier>  expected	83	None	replace
788	[BUG]  [BUGGY]  cc.add(Double.toString(d)+  1,  d);  [CE]  <identifier>  expected  [FE]        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toString(d)+  1,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d)+  1,  d);	  cc.add(Double.toString(d)+    1);    	non-compiled	[CE]  <identifier>  expected	77	None	replace
789	[BUG]  [BUGGY]  cc.add(d,  Context.NEGATIVE_IN_FOR_INIT_CLAUSE);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(d,  Context.NEGATIVE_IN_FOR_INIT_CLAUSE);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d,  Context.NEGATIVE_IN_FOR_INIT_CLAUSE);	  cc.add(context,    d);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
790	[BUG]  [BUGGY]  cc.add(d,  Context.STATEMENT);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(d,  Context.STATEMENT);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d,  Context.STATEMENT);	  cc.add(context,    d);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
791	[BUG]  [BUGGY]  Context  cc  =  c.addChildToFront(d,  c);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  c.addChildToFront(d,  c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  c.addChildToFront(d,  c);	  cc.addChildToFront(d,    c);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
792	[BUG]  [BUGGY]  Context  cc  =  getContext().add(context,  Double.NEGATIVE_INFINITY);  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getContext().add(context,  Double.NEGATIVE_INFINITY);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getContext().add(context,  Double.NEGATIVE_INFINITY);	  cc.addNumber(d    +    1);    Context    cc    =    getContext().add(context,    d    +    1);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
793	[BUG]  [BUGGY]  cc.add(d,  d  -  1);  [CE]  <identifier>  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(d,  d  -  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d,  d  -  1);	  cc.add(d    -    1);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
794	[BUG]  [BUGGY]  cc.addChildToFront(d,  0);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addChildToFront(d,  0);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToFront(d,  0);	  cc.addNumber(d,    0);    	non-compiled	[CE]  <identifier>  expected	108	None	replace
795	[BUG]  [BUGGY]  d.addChildToFront(c,  Double.POSITIVE_INFINITY);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  d.addChildToFront(c,  Double.POSITIVE_INFINITY);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	d.addChildToFront(c,  Double.POSITIVE_INFINITY);	  cc.addChildToFront(d,    Double.POSITIVE_INFINITY);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
796	[BUG]  [BUGGY]  cc.addChildToFront(double,  Double.POSITIVE_INFINITY);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addChildToFront(double,  Double.POSITIVE_INFINITY);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToFront(double,  Double.POSITIVE_INFINITY);	  cc.addChildToFront(d,    Double.POSITIVE_INFINITY);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
797	[BUG]  [BUGGY]  cc.addNumber(d  /  1);  Context  cc  =  getCurrentContext().addNumber(d  /  1);  [CE]  <identifier>  expected  [FE]    ComparisonFailure    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  /  1);  Context  cc  =  getCurrentContext().addNumber(d  /  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    /    1);    Context  cc  =  getCurrentContext().addNumber(d  /  1);	  	non-compiled	[CE]  <identifier>  expected	6	None	add
798	[BUG]  [BUGGY]  cc.addNumber(d  /  1);  Context  cc  =  getCurrentContext().getContextForNoInOperator(context);  [CE]  <identifier>  expected  [FE]      ComparisonFailure    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  /  1);  Context  cc  =  getCurrentContext().getContextForNoInOperator(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    /    1);    Context  cc  =  getCurrentContext().getContextForNoInOperator(context);	  	non-compiled	[CE]  <identifier>  expected	6	None	add
799	[BUG]  [BUGGY]  cc.addNumber(d  /  1);  Context  cc  =  getCurrentContext().getContextForNoInOperator(d);  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  /  1);  Context  cc  =  getCurrentContext().getContextForNoInOperator(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    /    1);    Context  cc  =  getCurrentContext().getContextForNoInOperator(d);	  	non-compiled	[CE]  <identifier>  expected	6	None	add
800	[BUG]  [BUGGY]  cc.addNumber(d  /  1);  Context  cc  =  getCurrentContext().getContextForNumber(d);  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  /  1);  Context  cc  =  getCurrentContext().getContextForNumber(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    /    1);    Context  cc  =  getCurrentContext().getContextForNumber(d);	  	non-compiled	[CE]  <identifier>  expected	6	None	add
801	[BUG]  [BUGGY]  cc.add(Double.toHexString(d));  [CE]  <identifier>  expected  [FE]        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toHexString(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toHexString(d));	  cc.add(Double.toNaN(d));    	non-compiled	[CE]  <identifier>  expected	107	None	replace
802	[BUG]  [BUGGY]  cc.add(d  -  1,  getCurrentContext());  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(d  -  1,  getCurrentContext());  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d  -  1,  getCurrentContext());	  cc.addNumber(d    -    1);    Context    cc    =    getCurrentContext();    	non-compiled	[CE]  <identifier>  expected	118	None	replace
803	[BUG]  [BUGGY]  cc.addNumber(d  -  1,  getCurrentContext());  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  -  1,  getCurrentContext());  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d  -  1,  getCurrentContext());	  cc.addNumber(d    -    1);    Context    cc    =    getCurrentContext();    	non-compiled	[CE]  <identifier>  expected	118	None	replace
804	[BUG]  [BUGGY]  cc.addValue(d  -  1,  getCurrentContext());  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addValue(d  -  1,  getCurrentContext());  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addValue(d  -  1,  getCurrentContext());	  cc.addNumber(d    -    1);    Context    cc    =    getCurrentContext();    	non-compiled	[CE]  <identifier>  expected	118	None	replace
805	[BUG]  [BUGGY]  cc.addPosition(d  -  1);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addPosition(d  -  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addPosition(d  -  1);	  cc.addPosition(d    +    1);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
806	[BUG]  [BUGGY]  cc.addPosition(d  *  d);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addPosition(d  *  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addPosition(d  *  d);	  cc.addPosition(d    +    1);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
807	[BUG]  [BUGGY]  c  =  this.context.getBooleanProp(NodeUtil.isName(d));  [CE]  <identifier>  expected  [FE]          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  this.context.getBooleanProp(NodeUtil.isName(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  this.context.getBooleanProp(NodeUtil.isName(d));	  cc.add(Double.toString(d));    cc.add(Double.toString(d));    this.context.putBooleanProp(NodeUtil.isJSIdentifier(d));    	non-compiled	[CE]  <identifier>  expected	70	None	replace
808	[BUG]  [BUGGY]  c  =  this.context.getBooleanProp(NodeUtil.isForIn(d));  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  this.context.getBooleanProp(NodeUtil.isForIn(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  this.context.getBooleanProp(NodeUtil.isForIn(d));	  cc.add(Double.toString(d));    cc.add(Double.toString(d));    this.context.putBooleanProp(NodeUtil.isJSIdentifier(d));    	non-compiled	[CE]  <identifier>  expected	70	None	replace
809	[BUG]  [BUGGY]  c.addPosition(d,  d);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addPosition(d,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addPosition(d,  d);	  cc.addPosition(d,    c);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
810	[BUG]  [BUGGY]  cc.addIndexedField(d,  c);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addIndexedField(d,  c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addIndexedField(d,  c);	  cc.addPosition(d,    c);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
811	[BUG]  [BUGGY]  cc.addNumber(d  +  1,  n  +  1);  [CE]  <identifier>  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  +  1,  n  +  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d  +  1,  n  +  1);	  cc.addNumber(d    +    1,    n);    	non-compiled	[CE]  <identifier>  expected	88	None	replace
812	[BUG]  [BUGGY]  cc.addNumber(d  +  1,  double);  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  +  1,  double);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d  +  1,  double);	  cc.addNumber(d    +    1,    n);    	non-compiled	[CE]  <identifier>  expected	88	None	replace
813	[BUG]  [BUGGY]  cc.addNumber(d  /  1,  n);  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  /  1,  n);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d  /  1,  n);	  cc.addNumber(d    +    1,    n);    	non-compiled	[CE]  <identifier>  expected	88	None	replace
814	[BUG]  [BUGGY]  cc.add(Double.toString(d));  Preconditions.checkState(cc.getType()  ==  Token.BLOCK);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toString(d));  Preconditions.checkState(cc.getType()  ==  Token.BLOCK);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d));  Preconditions.checkState(cc.getType()  ==  Token.BLOCK);	  cc.add(Double.toString(d));    Node    cc    =    getCurrentNode();    	non-compiled	[CE]  <identifier>  expected	105	None	replace
815	[BUG]  [BUGGY]  cc.add(Double.toString(d));  Preconditions.checkState(cc.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toString(d));  Preconditions.checkState(cc.getType()  ==  Token.VAR);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d));  Preconditions.checkState(cc.getType()  ==  Token.VAR);	  cc.add(Double.toString(d));    Node    cc    =    getCurrentNode();    	non-compiled	[CE]  <identifier>  expected	105	None	replace
816	[BUG]  [BUGGY]  cc.add(Double.toString(d));  Preconditions.checkState(cc.getType()  ==  Token.CATCH);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toString(d));  Preconditions.checkState(cc.getType()  ==  Token.CATCH);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d));  Preconditions.checkState(cc.getType()  ==  Token.CATCH);	  cc.add(Double.toString(d));    Node    cc    =    getCurrentNode();    	non-compiled	[CE]  <identifier>  expected	105	None	replace
817	[BUG]  [BUGGY]  cc.add(Double.toString(d));  Preconditions.checkState(cc.getType()  ==  Token.NAME);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toString(d));  Preconditions.checkState(cc.getType()  ==  Token.NAME);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d));  Preconditions.checkState(cc.getType()  ==  Token.NAME);	  cc.add(Double.toString(d));    Node    cc    =    getCurrentNode();    	non-compiled	[CE]  <identifier>  expected	105	None	replace
818	[BUG]  [BUGGY]  cc.addNumber(key  -  1);  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(key  -  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(key  -  1);	  cc.addNumber(d    -    1);    int    d    =    getSimpleNumber(key);    cc.addNumber(d    -    1);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
819	[BUG]  [BUGGY]  cc.addNumber(d  +  1,  cc  =  getSimpleNumber(key).intValue();  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  +  1,  cc  =  getSimpleNumber(key).intValue();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d  +  1,  cc  =  getSimpleNumber(key).intValue();	  cc.addNumber(d    +    1);    int    cc    =    getSimpleNumber(key).intValue();    	non-compiled	[CE]  <identifier>  expected	42	None	replace
820	[BUG]  [BUGGY]  d  =  cc.addLastChild(d);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  d  =  cc.addLastChild(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	d  =  cc.addLastChild(d);	  d    =    cc.addValue(d);    	non-compiled	[CE]  <identifier>  expected	111	None	replace
821	[BUG]  [BUGGY]  d.add(Double.toString(c));  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  d.add(Double.toString(c));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	d.add(Double.toString(c));	  d.addExpr(c);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
822	[BUG]  [BUGGY]  d.add(Double.parseDouble(d));  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  d.add(Double.parseDouble(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	d.add(Double.parseDouble(d));	  d.addExpr(c);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
823	[BUG]  [BUGGY]  d.add(new  Double(d));  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  d.add(new  Double(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	d.add(new  Double(d));	  d.addExpr(c);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
824	[BUG]  [BUGGY]  d.add(Double.toNaN(d));  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  d.add(Double.toNaN(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	d.add(Double.toNaN(d));	  d.addExpr(c);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
825	[BUG]  [BUGGY]  d.add(Double.doubleToLongBits(d));  [CE]  <identifier>  expected  [FE]                            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  d.add(Double.doubleToLongBits(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	d.add(Double.doubleToLongBits(d));	  d.addExpr(c);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
826	[BUG]  [BUGGY]  cc.add(NodeUtil.nodeToString(d));  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(NodeUtil.nodeToString(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(NodeUtil.nodeToString(d));	  cc.add(Double.toString(d));    cc.add(Double.toString(d);    	non-compiled	[CE]  <identifier>  expected	129	None	replace
827	[BUG]  [BUGGY]  cc.add(d,  1,  d);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(d,  1,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d,  1,  d);	  cc.addNumber(d,    1,    c);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
828	[BUG]  [BUGGY]  cc.addNumber(d,  1,  d  +  1);  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d,  1,  d  +  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  1,  d  +  1);	  cc.addNumber(d,    d    +    1);    	non-compiled	[CE]  <identifier>  expected	145	None	replace
829	[BUG]  [BUGGY]  if(Double.isNaN(d))  {  cc.addNumber(d  +  1);  cc.addNumber(d  +  1);  }  else  {  addExpr(c,  1);  }  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  if(Double.isNaN(d))  {  cc.addNumber(d  +  1);  cc.addNumber(d  +  1);  }  else  {  addExpr(c,  1);  }  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	if(Double.isNaN(d))  {  cc.addNumber(d  +  1);  cc.addNumber(d  +  1);  }  else  {  addExpr(c,  1);  }	  cc.addNumber(d    +    1);    cc.addNumber(d    +    1);    }    else    {    addExpr(c,    1);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
830	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d))  {  cc.addNumber(d  +  1,  d);  }  else  {  addExpr(c,  1);  }  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d))  {  cc.addNumber(d  +  1,  d);  }  else  {  addExpr(c,  1);  }  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	if(Double.isNaN(d)||  Double.isNaN(d))  {  cc.addNumber(d  +  1,  d);  }  else  {  addExpr(c,  1);  }	  cc.addNumber(d    +    1);    cc.addNumber(d    +    1);    }    else    {    addExpr(c,    1);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
831	[BUG]  [BUGGY]  if(c.getType()  ==  Token.NAME)  {  cc.add(Double.toString(d));  cc.add(Double.toString(d));  context.put( ":   "  +  c.getLastChild());  }  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  if(c.getType()  ==  Token.NAME)  {  cc.add(Double.toString(d));  cc.add(Double.toString(d));  context.put( ":   "  +  c.getLastChild());  }  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	if(c.getType()  ==  Token.NAME)  {  cc.add(Double.toString(d));  cc.add(Double.toString(d));  context.put( ":   "  +  c.getLastChild());  }	  cc.add(Double.toString(d));    cc.add(Double.toString(d));    context.put(   ":   "    +    c.getLastChild());    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
832	[BUG]  [BUGGY]  if(c.getType()  ==  Token.CATCH)  {  cc.add(Double.toString(d));  cc.add(Double.toString(d));  context.put( ":   "  +  c.getLastChild());  }  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  if(c.getType()  ==  Token.CATCH)  {  cc.add(Double.toString(d));  cc.add(Double.toString(d));  context.put( ":   "  +  c.getLastChild());  }  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	if(c.getType()  ==  Token.CATCH)  {  cc.add(Double.toString(d));  cc.add(Double.toString(d));  context.put( ":   "  +  c.getLastChild());  }	  cc.add(Double.toString(d));    cc.add(Double.toString(d));    context.put(   ":   "    +    c.getLastChild());    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
833	[BUG]  [BUGGY]  if(c.getType()  ==  Token.STRING)  {  cc.add(Double.toString(d));  cc.add(Double.toString(d));  context.put( ":   "  +  c.getLastChild());  }  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  if(c.getType()  ==  Token.STRING)  {  cc.add(Double.toString(d));  cc.add(Double.toString(d));  context.put( ":   "  +  c.getLastChild());  }  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	if(c.getType()  ==  Token.STRING)  {  cc.add(Double.toString(d));  cc.add(Double.toString(d));  context.put( ":   "  +  c.getLastChild());  }	  cc.add(Double.toString(d));    cc.add(Double.toString(d));    context.put(   ":   "    +    c.getLastChild());    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
834	[BUG]  [BUGGY]  if(c.getType()  ==  Token.STRING)  {  cc.add(Double.toString(d));  context.put( ":   "  +  c.getLastChild());  }  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  if(c.getType()  ==  Token.STRING)  {  cc.add(Double.toString(d));  context.put( ":   "  +  c.getLastChild());  }  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	if(c.getType()  ==  Token.STRING)  {  cc.add(Double.toString(d));  context.put( ":   "  +  c.getLastChild());  }	  cc.add(Double.toString(d));    cc.add(Double.toString(d));    context.put(   ":   "    +    c.getLastChild());    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
835	[BUG]  [BUGGY]  cc.addNumber(d,  2,  0);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d,  2,  0);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  2,  0);	  cc.addNumber(d,    2,    1);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
836	[BUG]  [BUGGY]  cc.add(d  -  1,  getCurrentContext().getContextForNoDeclaration(d));  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(d  -  1,  getCurrentContext().getContextForNoDeclaration(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d  -  1,  getCurrentContext().getContextForNoDeclaration(d));	  cc.addNumber(d    -    1);    Context    cc    =    getCurrentContext().getContextForNoDeclaration(d);    	non-compiled	[CE]  <identifier>  expected	117	None	replace
837	[BUG]  [BUGGY]  cc.add(Double.toString(d));  context  =  Context.getCurrentContext();  [CE]  <identifier>  expected  [FE]        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toString(d));  context  =  Context.getCurrentContext();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d));  context  =  Context.getCurrentContext();	  cc.add(Double.toString(d));    Context    cc    =    Context.getCurrentContext();    	non-compiled	[CE]  <identifier>  expected	102	None	replace
838	[BUG]  [BUGGY]  Context  c  =  getCurrentContext();  add(c,  d,  d);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  getCurrentContext();  add(c,  d,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  getCurrentContext();  add(c,  d,  d);	          Context    c    =    getCurrentContext();    add(c,    d);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	120	None	replace
839	[BUG]  [BUGGY]  Context  c  =  getCurrentContext();  add(c,  d,  body);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  getCurrentContext();  add(c,  d,  body);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  getCurrentContext();  add(c,  d,  body);	          Context    c    =    getCurrentContext();    add(c,    d);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	120	None	replace
840	[BUG]  [BUGGY]  Context  c  =(context  ==  null)?  context.getCurrentContext()  :  context.getRootContext();  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =(context  ==  null)?  context.getCurrentContext()  :  context.getRootContext();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =(context  ==  null)?  context.getCurrentContext()  :  context.getRootContext();	          Context    c    =    context.getCurrentContext();    	non-compiled	[CE]  <identifier>  expected	22	None	replace
841	[BUG]  [BUGGY]  cc.addNumber(d  +  2);  Context  cc  =  getCurrentContext().getContextForNoInOperator(context);  [CE]  <identifier>  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  +  2);  Context  cc  =  getCurrentContext().getContextForNoInOperator(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    +    2);    Context  cc  =  getCurrentContext().getContextForNoInOperator(context);	  	non-compiled	[CE]  <identifier>  expected	3	None	add
842	[BUG]  [BUGGY]  cc.addNumber(d  +  2);  Context  cc  =  getContext().getContextForNoInOperator(context);  [CE]  <identifier>  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  +  2);  Context  cc  =  getContext().getContextForNoInOperator(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    +    2);    Context  cc  =  getContext().getContextForNoInOperator(context);	  	non-compiled	[CE]  <identifier>  expected	3	None	add
843	[BUG]  [BUGGY]  cc.addNumber(d  +  2);  Context  cc  =  getContextForNoInOperator(context);  [CE]  <identifier>  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  +  2);  Context  cc  =  getContextForNoInOperator(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    +    2);    Context  cc  =  getContextForNoInOperator(context);	  	non-compiled	[CE]  <identifier>  expected	3	None	add
844	[BUG]  [BUGGY]  cc.addNumber(d  +  2);  Context  cc  =  getContext().getCurrentContext().getContextForNoInOperator(context);  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  +  2);  Context  cc  =  getContext().getCurrentContext().getContextForNoInOperator(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    +    2);    Context  cc  =  getContext().getCurrentContext().getContextForNoInOperator(context);	  	non-compiled	[CE]  <identifier>  expected	3	None	add
845	[BUG]  [BUGGY]  cc.add(Double.toString(d),  double.doubleValue());  [CE]  <identifier>  expected  [FE]          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toString(d),  double.doubleValue());  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d),  double.doubleValue());	  cc.add(Double.toString(d).doubleValue());    	non-compiled	[CE]  <identifier>  expected	134	None	replace
846	[BUG]  [BUGGY]  cc.add(Double.toString(d),  Double.NaN);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toString(d),  Double.NaN);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d),  Double.NaN);	  cc.add(Double.toString(d).doubleValue());    	non-compiled	[CE]  <identifier>  expected	134	None	replace
847	[BUG]  [BUGGY]  cc.add(Double.toString(d),  Double.MAX_VALUE);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toString(d),  Double.MAX_VALUE);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d),  Double.MAX_VALUE);	  cc.add(Double.toString(d).doubleValue());    	non-compiled	[CE]  <identifier>  expected	134	None	replace
848	[BUG]  [BUGGY]  context.addPosition(d);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  context.addPosition(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	context.addPosition(d);	  c.addPosition(d);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
849	[BUG]  [BUGGY]  cc.add(d,  double  -  1);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(d,  double  -  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d,  double  -  1);	  cc.add(d,    p);    	non-compiled	[CE]  <identifier>  expected	142	None	replace
850	[BUG]  [BUGGY]  cc.addChildToFront(Double.toString(d),  d);  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addChildToFront(Double.toString(d),  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToFront(Double.toString(d),  d);	  cc.addChildToFront(Double.toString(d));    	non-compiled	[CE]  <identifier>  expected	15	None	replace
851	[BUG]  [BUGGY]  cc.addChildToFront(Double.toString(d,  d));  [CE]  <identifier>  expected  [FE]                            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addChildToFront(Double.toString(d,  d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToFront(Double.toString(d,  d));	  cc.addChildToFront(Double.toString(d));    	non-compiled	[CE]  <identifier>  expected	15	None	replace
852	[BUG]  [BUGGY]  cc.addChildToFront(Double.toString(d,  context));  [CE]  <identifier>  expected  [FE]                              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addChildToFront(Double.toString(d,  context));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToFront(Double.toString(d,  context));	  cc.addChildToFront(Double.toString(d));    	non-compiled	[CE]  <identifier>  expected	15	None	replace
853	[BUG]  [BUGGY]  cc.addChildToFront(Double.toString(p));  [CE]  <identifier>  expected  [FE]                                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addChildToFront(Double.toString(p));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToFront(Double.toString(p));	  cc.addChildToFront(Double.toString(d));    	non-compiled	[CE]  <identifier>  expected	15	None	replace
854	[BUG]  [BUGGY]  cc.add(d  +  1);  Context  cc  =  getContext().getContextForNoInOperator(context);  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(d  +  1);  Context  cc  =  getContext().getContextForNoInOperator(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d  +  1);  Context  cc  =  getContext().getContextForNoInOperator(context);	  cc.addNumber(d    +    1);    Context    cc    =    getContext().getContextForNoInOperator(context);    	non-compiled	[CE]  <identifier>  expected	139	None	replace
855	[BUG]  [BUGGY]  Node  body  =  getContext().getContextForNoInOperator(context);  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Node  body  =  getContext().getContextForNoInOperator(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Node  body  =  getContext().getContextForNoInOperator(context);	  cc.addNumber(d    +    1);    Context    cc    =    getContext().getContextForNoInOperator(context);    	non-compiled	[CE]  <identifier>  expected	139	None	replace
856	[BUG]  [BUGGY]  cc  =  getContext().getContextForNoInOperator(context);  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc  =  getContext().getContextForNoInOperator(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc  =  getContext().getContextForNoInOperator(context);	  cc.addNumber(d    +    1);    Context    cc    =    getContext().getContextForNoInOperator(context);    	non-compiled	[CE]  <identifier>  expected	139	None	replace
857	[BUG]  [BUGGY]  if(Double.isNaN(d)&&  Double.isNaN(d))  {  cc.addNumber(d  -  1);  }  else  {  addExpr(c,  2);  }  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  if(Double.isNaN(d)&&  Double.isNaN(d))  {  cc.addNumber(d  -  1);  }  else  {  addExpr(c,  2);  }  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	if(Double.isNaN(d)&&  Double.isNaN(d))  {  cc.addNumber(d  -  1);  }  else  {  addExpr(c,  2);  }	  cc.addNumber(d    -    1);    cc.addNumber(d    -    1);    }    else    {    addExpr(c,    2);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
858	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d))  {  cc.addNumber(d  -  1,  d);  }  else  {  addExpr(c,  2);  }  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d))  {  cc.addNumber(d  -  1,  d);  }  else  {  addExpr(c,  2);  }  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	if(Double.isNaN(d)||  Double.isNaN(d))  {  cc.addNumber(d  -  1,  d);  }  else  {  addExpr(c,  2);  }	  cc.addNumber(d    -    1);    cc.addNumber(d    -    1);    }    else    {    addExpr(c,    2);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
859	[BUG]  [BUGGY]  cc.add(d,  first);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(d,  first);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d,  first);	  cc.add(d,    fn);    	non-compiled	[CE]  <identifier>  expected	94	None	replace
860	[BUG]  [BUGGY]  Context.addPosition(d  -  1,  c);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context.addPosition(d  -  1,  c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context.addPosition(d  -  1,  c);	  Context.addPosition(d);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
861	[BUG]  [BUGGY]  cc.add(d,  d  +  1);  [CE]  <identifier>  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(d,  d  +  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d,  d  +  1);	  cc.add(d    +    1);    	non-compiled	[CE]  <identifier>  expected	143	None	replace
862	[BUG]  [BUGGY]  cc.add(d  +  1,  d);  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(d  +  1,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d  +  1,  d);	  cc.add(d    +    1);    	non-compiled	[CE]  <identifier>  expected	143	None	replace
863	[BUG]  [BUGGY]  cc.add(Double.toString(d),  d  +  1);  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toString(d),  d  +  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d),  d  +  1);	  cc.add(d    +    1);    	non-compiled	[CE]  <identifier>  expected	143	None	replace
864	[BUG]  [BUGGY]  cc.add(d  -  1,  getCurrentContext().getContextForNumber(d));  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(d  -  1,  getCurrentContext().getContextForNumber(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d  -  1,  getCurrentContext().getContextForNumber(d));	  cc.addNumber(d    -    1);    Context    cc    =    getCurrentContext().getContextForNumber(d);    	non-compiled	[CE]  <identifier>  expected	116	None	replace
865	[BUG]  [BUGGY]  Context  c  =  context.getCurrentContext();  add(c,  d,  d);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  context.getCurrentContext();  add(c,  d,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  context.getCurrentContext();  add(c,  d,  d);	          Context    c    =    context.getCurrentContext();    add(c,    d);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	121	None	replace
866	[BUG]  [BUGGY]  add(d,  context.getCurrentContext());  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  add(d,  context.getCurrentContext());  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	add(d,  context.getCurrentContext());	          Context    c    =    context.getCurrentContext();    add(c,    d);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	121	None	replace
867	[BUG]  [BUGGY]  Context  c  =  context.getCurrentContext();  add(c,  d,  body);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  context.getCurrentContext();  add(c,  d,  body);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  context.getCurrentContext();  add(c,  d,  body);	          Context    c    =    context.getCurrentContext();    add(c,    d);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	121	None	replace
868	[BUG]  [BUGGY]  double  d  =  cc.addValue(d);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  double  d  =  cc.addValue(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	double  d  =  cc.addValue(d);	  d,    cc.addValue(d);    	non-compiled	[CE]  <identifier>  expected	112	None	replace
869	[BUG]  [BUGGY]  d,  cc.getValue(d);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  d,  cc.getValue(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	d,  cc.getValue(d);	  d,    cc.addValue(d);    	non-compiled	[CE]  <identifier>  expected	112	None	replace
870	[BUG]  [BUGGY]  d,  cc.addLast(d);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  d,  cc.addLast(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	d,  cc.addLast(d);	  d,    cc.addValue(d);    	non-compiled	[CE]  <identifier>  expected	112	None	replace
871	[BUG]  [BUGGY]  d,  cc.addToString(d);  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  d,  cc.addToString(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	d,  cc.addToString(d);	  d,    cc.addValue(d);    	non-compiled	[CE]  <identifier>  expected	112	None	replace
872	[BUG]  [BUGGY]  c  =  this.context.getBooleanProp(NodeUtil.isName(key));  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  this.context.getBooleanProp(NodeUtil.isName(key));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  this.context.getBooleanProp(NodeUtil.isName(key));	  cc.add(Double.toString(d));    cc.add(Double.toString(d));    this.context.putBooleanProp(NodeUtil.isJSIdentifier(key));    	non-compiled	[CE]  <identifier>  expected	73	None	replace
873	[BUG]  [BUGGY]  c  =  this.context.getBooleanProp(NodeUtil.isBaseValue(key));  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  this.context.getBooleanProp(NodeUtil.isBaseValue(key));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  this.context.getBooleanProp(NodeUtil.isBaseValue(key));	  cc.add(Double.toString(d));    cc.add(Double.toString(d));    this.context.putBooleanProp(NodeUtil.isJSIdentifier(key));    	non-compiled	[CE]  <identifier>  expected	73	None	replace
874	[BUG]  [BUGGY]  cc.addNumber(d  -  1,  c,  2);  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  -  1,  c,  2);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d  -  1,  c,  2);	  cc.addNumber(d    -    1,    c);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
875	[BUG]  [BUGGY]  cc.addNumber(double  d  -  1,  c);  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(double  d  -  1,  c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(double  d  -  1,  c);	  cc.addNumber(d    -    1,    c);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
876	[BUG]  [BUGGY]  cc.addNumber(d  -  1,  c,  context);  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  -  1,  c,  context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d  -  1,  c,  context);	  cc.addNumber(d    -    1,    c);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
877	[BUG]  [BUGGY]  cc.addNumber(d  -  1,  p);  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  -  1,  p);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d  -  1,  p);	  cc.addNumber(d    -    1,    c);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
878	[BUG]  [BUGGY]  cc.replaceChild(n,  d);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.replaceChild(n,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.replaceChild(n,  d);	  cc.removeChild(d);    	non-compiled	[CE]  <identifier>  expected	132	None	replace
879	[BUG]  [BUGGY]  cc.addChildrenToFront(d);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addChildrenToFront(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildrenToFront(d);	  cc.removeChild(d);    	non-compiled	[CE]  <identifier>  expected	132	None	replace
880	[BUG]  [BUGGY]  cc.removeLastChild();  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.removeLastChild();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.removeLastChild();	  cc.addLastChild(d);    	non-compiled	[CE]  <identifier>  expected	131	None	replace
881	[BUG]  [BUGGY]  cc.addLastChild(d,  n);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addLastChild(d,  n);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addLastChild(d,  n);	  cc.addLastChild(d);    	non-compiled	[CE]  <identifier>  expected	131	None	replace
882	[BUG]  [BUGGY]  cc.addNumber(d  +  1,  getContext().getCurrentContext());  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  +  1,  getContext().getCurrentContext());  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d  +  1,  getContext().getCurrentContext());	  cc.addNumber(d    +    1);    Context    cc    =    getContext().getCurrentContext();    	non-compiled	[CE]  <identifier>  expected	137	None	replace
883	[BUG]  [BUGGY]  cc.add(Double.toString(d)/  2.0);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toString(d)/  2.0);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d)/  2.0);	  cc.add(Double.toString(d),    1);    	non-compiled	[CE]  <identifier>  expected	79	None	replace
884	[BUG]  [BUGGY]  cc.add(Double.toString(d)-  1,  1);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toString(d)-  1,  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d)-  1,  1);	  cc.add(Double.toString(d),    1);    	non-compiled	[CE]  <identifier>  expected	79	None	replace
885	[BUG]  [BUGGY]  Node  body  =  getCurrentContext().getContextForNoInOperator(d);  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Node  body  =  getCurrentContext().getContextForNoInOperator(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Node  body  =  getCurrentContext().getContextForNoInOperator(d);	  cc.addNumber(d    +    1);    Context    cc    =    getCurrentContext().getContextForNoInOperator(d);    	non-compiled	[CE]  <identifier>  expected	140	None	replace
886	[BUG]  [BUGGY]  cc.addValue(Double.toString(value));  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addValue(Double.toString(value));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addValue(Double.toString(value));	  cc.addValue(Double.toString(d));    	non-compiled	[CE]  <identifier>  expected	135	None	replace
887	[BUG]  [BUGGY]  cc.addValue(Double.toString(d),  d);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addValue(Double.toString(d),  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addValue(Double.toString(d),  d);	  cc.addValue(Double.toString(d));    	non-compiled	[CE]  <identifier>  expected	135	None	replace
888	[BUG]  [BUGGY]  cc.addValue(Double.toString(d,  1));  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addValue(Double.toString(d,  1));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addValue(Double.toString(d,  1));	  cc.addValue(Double.toString(d));    	non-compiled	[CE]  <identifier>  expected	135	None	replace
889	[BUG]  [BUGGY]  cc.addPosition(d,  d)-  1;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addPosition(d,  d)-  1;  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addPosition(d,  d)-  1;	  cc.addPosition(d,    d);    	non-compiled	[CE]  <identifier>  expected	119	None	replace
890	[BUG]  [BUGGY]  Context  c  =  getCurrentContextForNoInOperator(context);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  getCurrentContextForNoInOperator(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  getCurrentContextForNoInOperator(context);	          Context    c    =    getCurrentContext();    	non-compiled	[CE]  <identifier>  expected	26	None	replace
891	[BUG]  [BUGGY]  Context  c  =  getCurrentContextForNoInOperator();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  getCurrentContextForNoInOperator();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  getCurrentContextForNoInOperator();	          Context    c    =    getCurrentContext();    	non-compiled	[CE]  <identifier>  expected	26	None	replace
892	[BUG]  [BUGGY]  cc.addNumber(d,  2  +  1,  c);  [CE]  <identifier>  expected  [FE]                              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d,  2  +  1,  c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  2  +  1,  c);	  cc.addNumber(d,    1    +    1,    c);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
893	[BUG]  [BUGGY]  c.add(d,  d);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.add(d,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.add(d,  d);	  cc.add(d,    c);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
894	[BUG]  [BUGGY]  Context  c  =  getCurrentContext();  conn.addExpr(d);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  getCurrentContext();  conn.addExpr(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  getCurrentContext();  conn.addExpr(d);	  conn.addExpr(d);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
895	[BUG]  [BUGGY]  Context  c  =  context.getCurrentContext();  conn.addExpr(d);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  context.getCurrentContext();  conn.addExpr(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  context.getCurrentContext();  conn.addExpr(d);	  conn.addExpr(d);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
896	[BUG]  [BUGGY]  Context  c  =  getCurrentContext();  conn.addExpr(d,  c);  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  getCurrentContext();  conn.addExpr(d,  c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  getCurrentContext();  conn.addExpr(d,  c);	  conn.addExpr(d);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
897	[BUG]  [BUGGY]  cc.addChildToFront(new  Double(d,  d));  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addChildToFront(new  Double(d,  d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToFront(new  Double(d,  d));	  cc.addChildToFront(new    Double(d));    	non-compiled	[CE]  <identifier>  expected	82	None	replace
898	[BUG]  [BUGGY]  cc.addChildToFront(new  Double(d,  1.0));  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addChildToFront(new  Double(d,  1.0));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToFront(new  Double(d,  1.0));	  cc.addChildToFront(new    Double(d));    	non-compiled	[CE]  <identifier>  expected	82	None	replace
899	[BUG]  [BUGGY]  cc.addChildToFront(new  Double(d  +  1));  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addChildToFront(new  Double(d  +  1));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToFront(new  Double(d  +  1));	  cc.addChildToFront(new    Double(d));    	non-compiled	[CE]  <identifier>  expected	82	None	replace
900	[BUG]  [BUGGY]  c.add(Double.toString(d),  Double.POSITIVE_INFINITY);  [CE]  <identifier>  expected  [FE]          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.add(Double.toString(d),  Double.POSITIVE_INFINITY);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.add(Double.toString(d),  Double.POSITIVE_INFINITY);	  c.add(Double.toString(d));    	non-compiled	[CE]  <identifier>  expected	78	None	replace
901	[BUG]  [BUGGY]  c.add(Double.toString(d),  Double.NaN);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.add(Double.toString(d),  Double.NaN);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.add(Double.toString(d),  Double.NaN);	  c.add(Double.toString(d));    	non-compiled	[CE]  <identifier>  expected	78	None	replace
902	[BUG]  [BUGGY]  c.add(Double.toHexString(d));  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.add(Double.toHexString(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.add(Double.toHexString(d));	  c.add(Double.toString(d));    	non-compiled	[CE]  <identifier>  expected	78	None	replace
903	[BUG]  [BUGGY]  cc.addNumber(d  -  1,  getSimpleNumber(key).intValue());  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  -  1,  getSimpleNumber(key).intValue());  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d  -  1,  getSimpleNumber(key).intValue());	  cc.addNumber(d    -    1);    int    d    =    getSimpleNumber(key).intValue();    cc.addNumber(d    -    1);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
904	[BUG]  [BUGGY]  cc.addNumber(d  -  1,  getSimpleNumber(key).doubleValue());  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  -  1,  getSimpleNumber(key).doubleValue());  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d  -  1,  getSimpleNumber(key).doubleValue());	  cc.addNumber(d    -    1);    int    d    =    getSimpleNumber(key).intValue();    cc.addNumber(d    -    1);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
905	[BUG]  [BUGGY]  cc.add(d  -  1,  getCurrentContext().getContextForNoInOperator(d));  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(d  -  1,  getCurrentContext().getContextForNoInOperator(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d  -  1,  getCurrentContext().getContextForNoInOperator(d));	  cc.addNumber(d    -    1);    Context    cc    =    getCurrentContext().getContextForNoInOperator(d);    	non-compiled	[CE]  <identifier>  expected	115	None	replace
906	[BUG]  [BUGGY]  Context  c  =  getContextForNoInOperator(context);  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  getContextForNoInOperator(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  getContextForNoInOperator(context);	          Context    c    =    context.getContext();    	non-compiled	[CE]  <identifier>  expected	23	None	replace
907	[BUG]  [BUGGY]  Context  c  =  context.createChildContext(n);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  context.createChildContext(n);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  context.createChildContext(n);	          Context    c    =    context.getContext();    	non-compiled	[CE]  <identifier>  expected	23	None	replace
908	[BUG]  [BUGGY]  cc.add(Double.POSITIVE_INFINITY);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.POSITIVE_INFINITY);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.POSITIVE_INFINITY);	  cc.add(Double.valueOf(d));    	non-compiled	[CE]  <identifier>  expected	81	None	replace
909	[BUG]  [BUGGY]  cc.add(Double.doubleToLongBits(d));  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.doubleToLongBits(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.doubleToLongBits(d));	  cc.add(Double.valueOf(d));    	non-compiled	[CE]  <identifier>  expected	81	None	replace
910	[BUG]  [BUGGY]  cc.addChildToBack(d,  d);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addChildToBack(d,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToBack(d,  d);	  cc.addChildToBack(d);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
911	[BUG]  [BUGGY]  cc.addChildToBack(body);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addChildToBack(body);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToBack(body);	  cc.addChildToBack(d);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
912	[BUG]  [BUGGY]  cc.add(Double.toString(d),  Context.createContext(context));  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toString(d),  Context.createContext(context));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d),  Context.createContext(context));	  cc.add(Double.toString(d));    Context    cc    =    Context.createContext(context);    	non-compiled	[CE]  <identifier>  expected	104	None	replace
913	[BUG]  [BUGGY]  Context  cc  =  getContext().addNumber(Double.parseDouble(d),  d);  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getContext().addNumber(Double.parseDouble(d),  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getContext().addNumber(Double.parseDouble(d),  d);	  cc.addNumber(d    +    1);    Context    cc    =    getContext().addNumber(Double.parseDouble(d));    	non-compiled	[CE]  <identifier>  expected	98	None	replace
914	[BUG]  [BUGGY]  cc.add(d  +  1);  Context  cc  =  getContext().getCurrentContext().getContextForNoInOperator(context);  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(d  +  1);  Context  cc  =  getContext().getCurrentContext().getContextForNoInOperator(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d  +  1);  Context  cc  =  getContext().getCurrentContext().getContextForNoInOperator(context);	  cc.addNumber(d    +    1);    Context    cc    =    getContext().getCurrentContext().getContextForNoInOperator(context);    	non-compiled	[CE]  <identifier>  expected	138	None	replace
915	[BUG]  [BUGGY]  cc  =  getContext().getCurrentContext().getContextForNoInOperator(context);  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc  =  getContext().getCurrentContext().getContextForNoInOperator(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc  =  getContext().getCurrentContext().getContextForNoInOperator(context);	  cc.addNumber(d    +    1);    Context    cc    =    getContext().getCurrentContext().getContextForNoInOperator(context);    	non-compiled	[CE]  <identifier>  expected	138	None	replace
916	[BUG]  [BUGGY]  Node  body  =  getContext().getCurrentContext().getContextForNoInOperator(context);  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Node  body  =  getContext().getCurrentContext().getContextForNoInOperator(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Node  body  =  getContext().getCurrentContext().getContextForNoInOperator(context);	  cc.addNumber(d    +    1);    Context    cc    =    getContext().getCurrentContext().getContextForNoInOperator(context);    	non-compiled	[CE]  <identifier>  expected	138	None	replace
917	[BUG]  [BUGGY]  Context  cc  =  getContext().getCurrentContext().getContextForNonSimpleOperator(context);  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getContext().getCurrentContext().getContextForNonSimpleOperator(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getContext().getCurrentContext().getContextForNonSimpleOperator(context);	  cc.addNumber(d    +    1);    Context    cc    =    getContext().getCurrentContext().getContextForNoInOperator(context);    	non-compiled	[CE]  <identifier>  expected	138	None	replace
918	[BUG]  [BUGGY]  cc.add(d  /  1);  [CE]  <identifier>  expected  [FE]    ComparisonFailure    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(d  /  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d  /  1);	  cc.addNumber(d    /    1);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
919	[BUG]  [BUGGY]  cc.add(d  /  2);  [CE]  <identifier>  expected  [FE]      ComparisonFailure    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(d  /  2);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d  /  2);	  cc.addNumber(d    /    1);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
920	[BUG]  [BUGGY]  cc.addNumber(d  *  1);  Context  cc  =  getCurrentContext().getContextForNoInOperator(context);  [CE]  <identifier>  expected  [FE]    ComparisonFailure    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  *  1);  Context  cc  =  getCurrentContext().getContextForNoInOperator(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    *    1);    Context  cc  =  getCurrentContext().getContextForNoInOperator(context);	  	non-compiled	[CE]  <identifier>  expected	1	None	add
921	[BUG]  [BUGGY]  cc.addNumber(d  *  1);  Context  cc  =  getContext().getCurrentContext().addNumber(d  *  1);  [CE]  <identifier>  expected  [FE]      ComparisonFailure    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  *  1);  Context  cc  =  getContext().getCurrentContext().addNumber(d  *  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    *    1);    Context  cc  =  getContext().getCurrentContext().addNumber(d  *  1);	  	non-compiled	[CE]  <identifier>  expected	1	None	add
922	[BUG]  [BUGGY]  cc.addNumber(d  *  1);  Context  cc  =  getContext().getCurrentContext().getContextForNoInOperator(context);  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  *  1);  Context  cc  =  getContext().getCurrentContext().getContextForNoInOperator(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    *    1);    Context  cc  =  getContext().getCurrentContext().getContextForNoInOperator(context);	  	non-compiled	[CE]  <identifier>  expected	1	None	add
923	[BUG]  [BUGGY]  cc.addNumber(d  *  1);  Context  cc  =  getCurrentContext().getContextForNoInOperator(d);  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  *  1);  Context  cc  =  getCurrentContext().getContextForNoInOperator(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    *    1);    Context  cc  =  getCurrentContext().getContextForNoInOperator(d);	  	non-compiled	[CE]  <identifier>  expected	1	None	add
924	[BUG]  [BUGGY]  cc.addNumber(d  *  1);  Context  cc  =  getContext().getContextForNoInOperator(context);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  *  1);  Context  cc  =  getContext().getContextForNoInOperator(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d    *    1);    Context  cc  =  getContext().getContextForNoInOperator(context);	  	non-compiled	[CE]  <identifier>  expected	1	None	add
925	[BUG]  [BUGGY]  cc.addNumber(d  *  2,  d);  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  *  2,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d  *  2,  d);	  cc.addNumber(d    +    1,    d);    	non-compiled	[CE]  <identifier>  expected	144	None	replace
926	[BUG]  [BUGGY]  cc.addNumber(d  /  2,  d);  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  /  2,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d  /  2,  d);	  cc.addNumber(d    +    1,    d);    	non-compiled	[CE]  <identifier>  expected	144	None	replace
927	[BUG]  [BUGGY]  cc.add(Double.toString(d)/  2,  Context.START_OF_EXPR);  [CE]  <identifier>  expected  [FE]        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toString(d)/  2,  Context.START_OF_EXPR);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d)/  2,  Context.START_OF_EXPR);	  cc.add(Double.toString(d),    Context.START_OF_EXPR);    	non-compiled	[CE]  <identifier>  expected	133	None	replace
928	[BUG]  [BUGGY]  cc.add(Double.toString(d)-  1,  Context.START_OF_EXPR);  [CE]  <identifier>  expected  [FE]          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toString(d)-  1,  Context.START_OF_EXPR);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d)-  1,  Context.START_OF_EXPR);	  cc.add(Double.toString(d),    Context.START_OF_EXPR);    	non-compiled	[CE]  <identifier>  expected	133	None	replace
929	[BUG]  [BUGGY]  cc.add(Double.toString(d),  Context.STATEMENT);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toString(d),  Context.STATEMENT);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d),  Context.STATEMENT);	  cc.add(Double.toString(d),    Context.START_OF_EXPR);    	non-compiled	[CE]  <identifier>  expected	133	None	replace
930	[BUG]  [BUGGY]  Context.report(JSError.make(c,  d,  NON_GLOBAL_NUMBER_FOR_INIT_CLAUSE));  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context.report(JSError.make(c,  d,  NON_GLOBAL_NUMBER_FOR_INIT_CLAUSE));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context.report(JSError.make(c,  d,  NON_GLOBAL_NUMBER_FOR_INIT_CLAUSE));	  Context.addValue(d);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
931	[BUG]  [BUGGY]  Context.report(JSError.make(c,  d,  NON_GLOBAL_NUMBER_INT,  d));  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context.report(JSError.make(c,  d,  NON_GLOBAL_NUMBER_INT,  d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context.report(JSError.make(c,  d,  NON_GLOBAL_NUMBER_INT,  d));	  Context.addValue(d);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
932	[BUG]  [BUGGY]  c  =  getSimplePositionInt(d);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  getSimplePositionInt(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  getSimplePositionInt(d);	          c    =    getSimpleNumber(key);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
933	[BUG]  [BUGGY]  cc.addChildToFront(d,  2);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addChildToFront(d,  2);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToFront(d,  2);	  cc.addNumber(d,    2);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
934	[BUG]  [BUGGY]  if(Double.isNaN(d))  {  cc.addNumber(d  -  1);  cc.addNumber(d  -  1);  }  else  {  addExpr(c,  1);  }  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  if(Double.isNaN(d))  {  cc.addNumber(d  -  1);  cc.addNumber(d  -  1);  }  else  {  addExpr(c,  1);  }  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	if(Double.isNaN(d))  {  cc.addNumber(d  -  1);  cc.addNumber(d  -  1);  }  else  {  addExpr(c,  1);  }	  cc.addNumber(d    -    1);    cc.addNumber(d    -    1);    }    else    {    addExpr(c,    1);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
935	[BUG]  [BUGGY]  if(Double.isNaN(d))  {  cc.addNumber(d  -  1);  }  else  {  addExpr(c,  1);  }  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  if(Double.isNaN(d))  {  cc.addNumber(d  -  1);  }  else  {  addExpr(c,  1);  }  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	if(Double.isNaN(d))  {  cc.addNumber(d  -  1);  }  else  {  addExpr(c,  1);  }	  cc.addNumber(d    -    1);    cc.addNumber(d    -    1);    }    else    {    addExpr(c,    1);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
936	[BUG]  [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d))  {  cc.addNumber(d  -  1,  d);  }  else  {  addExpr(c,  1);  }  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  if(Double.isNaN(d)||  Double.isNaN(d))  {  cc.addNumber(d  -  1,  d);  }  else  {  addExpr(c,  1);  }  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	if(Double.isNaN(d)||  Double.isNaN(d))  {  cc.addNumber(d  -  1,  d);  }  else  {  addExpr(c,  1);  }	  cc.addNumber(d    -    1);    cc.addNumber(d    -    1);    }    else    {    addExpr(c,    1);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
937	[BUG]  [BUGGY]  cc.add(Double.toString(d));  this.context.putBooleanProp(NodeUtil.isJavaIdentifier(key));  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toString(d));  this.context.putBooleanProp(NodeUtil.isJavaIdentifier(key));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d));  this.context.putBooleanProp(NodeUtil.isJavaIdentifier(key));	  cc.add(Double.toString(d));    cc.add(Double.toString(d));    this.context.putBooleanProp(NodeUtil.isJavaIdentifier(key));    	non-compiled	[CE]  <identifier>  expected	75	None	replace
938	[BUG]  [BUGGY]  Context  cc  =  context.getContextForNoInOperator(d);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  context.getContextForNoInOperator(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  context.getContextForNoInOperator(d);	  Context    cc    =    context.addValue(d);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
939	[BUG]  [BUGGY]  Context  cc  =  context.getValueContext();  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  context.getValueContext();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  context.getValueContext();	  Context    cc    =    context.addValue(d);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
940	[BUG]  [BUGGY]  c.put(key,  d);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.put(key,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.put(key,  d);	  c.addValue(d);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
941	[BUG]  [BUGGY]  cc.addPosition(d  -  1,  d);  [CE]  <identifier>  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addPosition(d  -  1,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addPosition(d  -  1,  d);	  cc.addNumber(d    -    1);    cc.addNumber(d    -    1);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
942	[BUG]  [BUGGY]  d.addPosition(context.getCurrentNodePointer());  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  d.addPosition(context.getCurrentNodePointer());  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	d.addPosition(context.getCurrentNodePointer());	  d.addPosition(c);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
943	[BUG]  [BUGGY]  d.addPosition(context.getContextPosition(c));  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  d.addPosition(context.getContextPosition(c));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	d.addPosition(context.getContextPosition(c));	  d.addPosition(c);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
944	[BUG]  [BUGGY]  d.addPosition(c,  d);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  d.addPosition(c,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	d.addPosition(c,  d);	  d.addPosition(c);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
945	[BUG]  [BUGGY]  Context.report(JSError.make(c,  d,  NON_GLOBAL_INIT_CLAUSE));  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context.report(JSError.make(c,  d,  NON_GLOBAL_INIT_CLAUSE));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context.report(JSError.make(c,  d,  NON_GLOBAL_INIT_CLAUSE));	  Context.addExpr(d);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
946	[BUG]  [BUGGY]  Context.report(JSError.make(c,  d,  UNKNOWN_EXPR_RESULT));  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context.report(JSError.make(c,  d,  UNKNOWN_EXPR_RESULT));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context.report(JSError.make(c,  d,  UNKNOWN_EXPR_RESULT));	  Context.addExpr(d);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
947	[BUG]  [BUGGY]  Context  cc  =  getContext().addNumber(d  +  1,  d);  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getContext().addNumber(d  +  1,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getContext().addNumber(d  +  1,  d);	  cc.addNumber(d    +    1);    Context    cc    =    getContext().addNumber(d    +    1);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
948	[BUG]  [BUGGY]  cc.add(Double.toString(d));  this.context.putBooleanProp(NodeUtil.isSimpleNumber(d));  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toString(d));  this.context.putBooleanProp(NodeUtil.isSimpleNumber(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d));  this.context.putBooleanProp(NodeUtil.isSimpleNumber(d));	  cc.add(Double.toString(d));    cc.add(Double.toString(d));    this.context.putBooleanProp(NodeUtil.isSimpleNumber(d));    	non-compiled	[CE]  <identifier>  expected	74	None	replace
949	[BUG]  [BUGGY]  c  =  this.context.getBooleanProp(NodeUtil.isLongNumber(d));  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  this.context.getBooleanProp(NodeUtil.isLongNumber(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  this.context.getBooleanProp(NodeUtil.isLongNumber(d));	  cc.add(Double.toString(d));    cc.add(Double.toString(d));    this.context.putBooleanProp(NodeUtil.isSimpleNumber(d));    	non-compiled	[CE]  <identifier>  expected	74	None	replace
950	[BUG]  [BUGGY]  Context  cc  =  getContextForNumber(key);  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  getContextForNumber(key);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  getContextForNumber(key);	  cc.addNumber(d    -    1);    Context    cc.addNumber(d    -    1);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
951	[BUG]  [BUGGY]  cc.add(d  +  1);  Context  cc  =  getCurrentContext().getContextForNoInOperator(context);  [CE]  <identifier>  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(d  +  1);  Context  cc  =  getCurrentContext().getContextForNoInOperator(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d  +  1);  Context  cc  =  getCurrentContext().getContextForNoInOperator(context);	  cc.addNumber(d    +    1);    Context    cc    =    getCurrentContext().getContextForNoInOperator(context);    	non-compiled	[CE]  <identifier>  expected	136	None	replace
952	[BUG]  [BUGGY]  Node  body  =  getCurrentContext().getContextForNoInOperator(context);  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Node  body  =  getCurrentContext().getContextForNoInOperator(context);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Node  body  =  getCurrentContext().getContextForNoInOperator(context);	  cc.addNumber(d    +    1);    Context    cc    =    getCurrentContext().getContextForNoInOperator(context);    	non-compiled	[CE]  <identifier>  expected	136	None	replace
953	[BUG]  [BUGGY]  cc.add(d,  1.0);  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(d,  1.0);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(d,  1.0);	  cc.add(d,    double    d);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
954	[BUG]  [BUGGY]  cc.add(Double.MIN_VALUE,  d);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.MIN_VALUE,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.MIN_VALUE,  d);	  cc.add(d,    2);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
955	[BUG]  [BUGGY]  cc.addNumber(d,  1.0);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d,  1.0);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  1.0);	  cc.addNumber(d,    1L);    	non-compiled	[CE]  <identifier>  expected	109	None	replace
956	[BUG]  [BUGGY]  add(d,  c.getLastChild());  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  add(d,  c.getLastChild());  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	add(d,  c.getLastChild());	          add(   ":   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
957	[BUG]  [BUGGY]  c  =  Context.createChildObjectContext(context,  d);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  Context.createChildObjectContext(context,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  Context.createChildObjectContext(context,  d);	          add(   ":   ");    	non-compiled	[CE]  <identifier>  expected	29	None	replace
958	[BUG]  [BUGGY]  add( ": ",  d);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  add( ": ",  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	add( ": ",  d);	          add(   ":   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
959	[BUG]  [BUGGY]  add(d,  c.getFirstChild());  [CE]  invalid  method  declaration;  return  type  required  [FE]                            AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  add(d,  c.getFirstChild());  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	add(d,  c.getFirstChild());	          add(   ":   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
960	[BUG]  [BUGGY]  c  =  getSimpleNumber(value);  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  getSimpleNumber(value);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  getSimpleNumber(value);	          c    =    getSimpleNumber(d);    	non-compiled	[CE]  <identifier>  expected	89	None	replace
961	[BUG]  [BUGGY]  c.addPosition(d,  n,  1);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.addPosition(d,  n,  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.addPosition(d,  n,  1);	  c.addPosition(d,    n);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
962	[BUG]  [BUGGY]  cc.add(Double.toString(d  +  1),  c);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.add(Double.toString(d  +  1),  c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.add(Double.toString(d  +  1),  c);	  cc.add(Double.toString(d    +    1));    	non-compiled	[CE]  <identifier>  expected	80	None	replace
963	[BUG]  [BUGGY]  cc.addChildToFront(Double.valueOf(d),  d);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addChildToFront(Double.valueOf(d),  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToFront(Double.valueOf(d),  d);	  cc.addChildToFront(Double.valueOf(d));    	non-compiled	[CE]  <identifier>  expected	11	None	replace
964	[BUG]  [BUGGY]  cc.addChildToFront(Double.valueOf(d,  d));  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addChildToFront(Double.valueOf(d,  d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToFront(Double.valueOf(d,  d));	  cc.addChildToFront(Double.valueOf(d));    	non-compiled	[CE]  <identifier>  expected	11	None	replace
965	[BUG]  [BUGGY]  cc.addChildToFront(Double.valueOf(d).doubleValue());  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addChildToFront(Double.valueOf(d).doubleValue());  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToFront(Double.valueOf(d).doubleValue());	  cc.addChildToFront(Double.valueOf(d));    	non-compiled	[CE]  <identifier>  expected	11	None	replace
966	[BUG]  [BUGGY]  Context  c  =  getContextForNoInOperator();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  getContextForNoInOperator();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  getContextForNoInOperator();	          Context    c    =    getContext();    	non-compiled	[CE]  <identifier>  expected	27	None	replace
967	[BUG]  [BUGGY]  c  =  n.getCurrentStructure();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  n.getCurrentStructure();  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  n.getCurrentStructure();	          c    =    context.getCurrentStructure();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
968	[BUG]  [BUGGY]  c  =  context.convertUTCToLocal(d);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c  =  context.convertUTCToLocal(d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c  =  context.convertUTCToLocal(d);	          c    =    context.getCurrentStructure();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
969	[BUG]  [BUGGY]  cc.addNumber(d,  120);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d,  120);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  120);	  cc.addNumber(d,    59);    	non-compiled	[CE]  <identifier>  expected	110	None	replace
970	[BUG]  [BUGGY]  c.add(Double.parseDouble(d));  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  c.add(Double.parseDouble(d));  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	c.add(Double.parseDouble(d));	  c.addExpr(d);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
971	[BUG]  [BUGGY]  cc.addNumber(d,  0  -  d);  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d,  0  -  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  0  -  d);	  cc.addNumber(d,    1    -    d);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
972	[BUG]  [BUGGY]  cc.addNumber(d,  -1  -  d);  [CE]  <identifier>  expected  [FE]                            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d,  -1  -  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d,  -1  -  d);	  cc.addNumber(d,    1    -    d);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
973	[BUG]  [BUGGY]  cc.addExpr(d  -  1,  d);  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addExpr(d  -  1,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addExpr(d  -  1,  d);	  cc.addExpr(d    -    1);    	non-compiled	[CE]  <identifier>  expected	125	None	replace
974	[BUG]  [BUGGY]  Context  c  =  this.context.getCurrentContext();  add(c);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  c  =  this.context.getCurrentContext();  add(c);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  c  =  this.context.getCurrentContext();  add(c);	          Context    c    =    context.getCurrentContext();    add(c);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
975	[BUG]  [BUGGY]  Context  cc  =  Context.createContext(context,  double  d);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  Context  cc  =  Context.createContext(context,  double  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	Context  cc  =  Context.createContext(context,  double  d);	  cc.add(Double.toString(d));    Context    cc    =    Context.createContext(context,    n);    	non-compiled	[CE]  	106	None	replace
976	[BUG]  [BUGGY]  n  =  Context.createContext(context,  n);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  n  =  Context.createContext(context,  n);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	n  =  Context.createContext(context,  n);	  cc.add(Double.toString(d));    Context    cc    =    Context.createContext(context,    n);    	non-compiled	[CE]  <identifier>  expected	106	None	replace
977	[BUG]  [BUGGY]  d.addValue(context  ==  Context.EXPR_RESULT);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  d.addValue(context  ==  Context.EXPR_RESULT);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	d.addValue(context  ==  Context.EXPR_RESULT);	  d.addValue(c);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
978	[BUG]  [BUGGY]  d.addValue(context  ==  Context.STATEMENT);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  d.addValue(context  ==  Context.STATEMENT);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	d.addValue(context  ==  Context.STATEMENT);	  d.addValue(c);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
979	[BUG]  [BUGGY]  cc.addChildToFront(d,  3);  [CE]  <identifier>  expected  [FE]                            ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addChildToFront(d,  3);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToFront(d,  3);	  cc.addNumber(d,    3);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
980	[BUG]  [BUGGY]  cc.addValue(d,  3);  [CE]  <identifier>  expected  [FE]                              ComparisonFailure      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addValue(d,  3);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addValue(d,  3);	  cc.addNumber(d,    3);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
981	[BUG]  [BUGGY]  cc.addNumber(d  +  1,  x);  [CE]  <identifier>  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  var  x={   "a   ":   "paul   "    [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addNumber(d  +  1,  x);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addNumber(d  +  1,  x);	  cc.addNumber(d    +    2);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
982	[BUG]  [BUGGY]  cc.addChildToFront(d,  d  -  1);  [CE]  <identifier>  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addChildToFront(d,  d  -  1);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToFront(d,  d  -  1);	  cc.addChildToFront(d    -    1);    	non-compiled	[CE]  <identifier>  expected	123	None	replace
983	[BUG]  [BUGGY]  cc.addChildToFront(d  -  1,  d);  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  var  x={     "a     ":     "paul     "      [CONTEXT]      !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {      [BUGGY]  cc.addChildToFront(d  -  1,  d);  [BUGGY]      }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	cc.addChildToFront(d  -  1,  d);	  cc.addChildToFront(d    -    1);    	non-compiled	[CE]  <identifier>  expected	123	None	replace
