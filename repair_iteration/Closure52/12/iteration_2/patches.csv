bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  long  l  =  getLocalMillis(s);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  getLocalMillis(s);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  getLocalMillis(s);	  Long    l    =    getLocalMillis(s);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
2	[BUG]  [BUGGY]  Long  l  =  getLocalMillis(s).longValue();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Long  l  =  getLocalMillis(s).longValue();  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Long  l  =  getLocalMillis(s).longValue();	  Long    l    =    getLocalMillis(s);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
3	[BUG]  [BUGGY]  Long  l  =  getLocalMillis(s)+  1;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Long  l  =  getLocalMillis(s)+  1;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Long  l  =  getLocalMillis(s)+  1;	  Long    l    =    getLocalMillis(s);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
4	[BUG]  [BUGGY]  Long  l  =  getLocalMillis(s  +  1);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Long  l  =  getLocalMillis(s  +  1);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Long  l  =  getLocalMillis(s  +  1);	  Long    l    =    getLocalMillis(s);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
5	[BUG]  [BUGGY]  Long  l  =  getLocalMillis(s,  false);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Long  l  =  getLocalMillis(s,  false);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Long  l  =  getLocalMillis(s,  false);	  Long    l    =    getLocalMillis(s);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
6	[BUG]  [BUGGY]  long  l  =  Long.parseInt(s);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Long.parseInt(s);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Long.parseInt(s);	  int    l    =    Long.parseInt(s);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
7	[BUG]  [BUGGY]  double  l  =  Long.parseInt(s);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  double  l  =  Long.parseInt(s);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	double  l  =  Long.parseInt(s);	  int    l    =    Long.parseInt(s);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
8	[BUG]  [BUGGY]  double  l  =  Integer.parseInt(s);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  double  l  =  Integer.parseInt(s);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	double  l  =  Integer.parseInt(s);	  int    l    =    Integer.parseInt(s);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
9	[BUG]  [BUGGY]  Long  l  =  Integer.parseLong(s);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Long  l  =  Integer.parseLong(s);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Long  l  =  Integer.parseLong(s);	  int    l    =    Integer.parseInt(s);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
10	[BUG]  [BUGGY]  int  l  =  Integer.parseInt(s)+  1;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  int  l  =  Integer.parseInt(s)+  1;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	int  l  =  Integer.parseInt(s)+  1;	  int    l    =    Integer.parseInt(s);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
11	[BUG]  [BUGGY]  short  l  =  Integer.parseInt(s);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  short  l  =  Integer.parseInt(s);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	short  l  =  Integer.parseInt(s);	  int    l    =    Integer.parseInt(s);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
12	[BUG]  [BUGGY]  double  l  =  Double.parseDouble(s);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  double  l  =  Double.parseDouble(s);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	double  l  =  Double.parseDouble(s);	  int    l    =    Double.parseDouble(s);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
13	[BUG]  [BUGGY]  int  l  =  Float.parseFloat(s);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  int  l  =  Float.parseFloat(s);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	int  l  =  Float.parseFloat(s);	  int    l    =    Double.parseDouble(s);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
14	[BUG]  [BUGGY]  int  l  =  Double.parseDouble(s)+  1;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  int  l  =  Double.parseDouble(s)+  1;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	int  l  =  Double.parseDouble(s)+  1;	  int    l    =    Double.parseDouble(s);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
15	[BUG]  [BUGGY]  long  l  =  Context.getCurrentName();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Context.getCurrentName();  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Context.getCurrentName();	  long    l    =    Context.getCurrentToken();    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
16	[BUG]  [BUGGY]  int  l  =  Context.getCurrentToken();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  int  l  =  Context.getCurrentToken();  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	int  l  =  Context.getCurrentToken();	  long    l    =    Context.getCurrentToken();    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
17	[BUG]  [BUGGY]  long  l  =  Context.currentToken();  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Context.currentToken();  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Context.currentToken();	  long    l    =    Context.getCurrentToken();    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
18	[BUG]  [BUGGY]  long  l  =  Context.getCurrentLongToken();  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Context.getCurrentLongToken();  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Context.getCurrentLongToken();	  long    l    =    Context.getCurrentToken();    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
19	[BUG]  [BUGGY]  long  l  =  Context.getCurrentLocalToken();  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Context.getCurrentLocalToken();  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Context.getCurrentLocalToken();	  long    l    =    Context.getCurrentToken();    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
20	[BUG]  [BUGGY]  long  l  =  Context.getCurrentNameNode();  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Context.getCurrentNameNode();  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Context.getCurrentNameNode();	  long    l    =    Context.getCurrentToken();    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
21	[BUG]  [BUGGY]  int  l  =  Context.getCurrentContext().getSimpleNumber(s);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  int  l  =  Context.getCurrentContext().getSimpleNumber(s);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	int  l  =  Context.getCurrentContext().getSimpleNumber(s);	  long    l    =    Context.getCurrentContext().getSimpleNumber(s);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
22	[BUG]  [BUGGY]  long  l  =  Context.getCurrentContext().getSimpleNumber(s)+  1;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Context.getCurrentContext().getSimpleNumber(s)+  1;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Context.getCurrentContext().getSimpleNumber(s)+  1;	  long    l    =    Context.getCurrentContext().getSimpleNumber(s);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
23	[BUG]  [BUGGY]  long  l  =  Context.getCurrentContext().getSimpleNumber(s,  0);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Context.getCurrentContext().getSimpleNumber(s,  0);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Context.getCurrentContext().getSimpleNumber(s,  0);	  long    l    =    Context.getCurrentContext().getSimpleNumber(s);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
24	[BUG]  [BUGGY]  long  l  =  Context.getCurrentContext().getSimpleNumber(s).doubleValue();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Context.getCurrentContext().getSimpleNumber(s).doubleValue();  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Context.getCurrentContext().getSimpleNumber(s).doubleValue();	  long    l    =    Context.getCurrentContext().getSimpleNumber(s);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
25	[BUG]  [BUGGY]  long  l  =  Context.getCurrentContext().getSimpleNumber(s,  false);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Context.getCurrentContext().getSimpleNumber(s,  false);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Context.getCurrentContext().getSimpleNumber(s,  false);	  long    l    =    Context.getCurrentContext().getSimpleNumber(s);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
26	[BUG]  [BUGGY]  long  l  =  Context.getCurrentContext().getSimpleNumber(s,  true);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Context.getCurrentContext().getSimpleNumber(s,  true);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Context.getCurrentContext().getSimpleNumber(s,  true);	  long    l    =    Context.getCurrentContext().getSimpleNumber(s);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
27	[BUG]  [BUGGY]  long  l  =  Long.parseLong(s)/  3;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Long.parseLong(s)/  3;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Long.parseLong(s)/  3;	  long    l    =    Long.parseLong(s)+    3;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
28	[BUG]  [BUGGY]  int  l  =  Long.parseLong(s)+  3;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  int  l  =  Long.parseLong(s)+  3;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	int  l  =  Long.parseLong(s)+  3;	  long    l    =    Long.parseLong(s)+    3;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
29	[BUG]  [BUGGY]  long  l  =  Integer.parseInt(s)+  3;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Integer.parseInt(s)+  3;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Integer.parseInt(s)+  3;	  long    l    =    Long.parseLong(s)+    3;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
30	[BUG]  [BUGGY]  double  l  =  Long.parseLong(s)+  1;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  double  l  =  Long.parseLong(s)+  1;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	double  l  =  Long.parseLong(s)+  1;	  double    l    =    Long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
31	[BUG]  [BUGGY]  int  l  =  Long.parseInt(s  +  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  int  l  =  Long.parseInt(s  +  1);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	int  l  =  Long.parseInt(s  +  1);	  int    l    =    Long.parseLong(s    +    1);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
32	[BUG]  [BUGGY]  int  l  =  Integer.parseInt(s  +  1);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  int  l  =  Integer.parseInt(s  +  1);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	int  l  =  Integer.parseInt(s  +  1);	  int    l    =    Long.parseLong(s    +    1);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
33	[BUG]  [BUGGY]  Long  l  =  Long.parseLong(s  +  1);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Long  l  =  Long.parseLong(s  +  1);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Long  l  =  Long.parseLong(s  +  1);	  int    l    =    Long.parseLong(s    +    1);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
34	[BUG]  [BUGGY]  double  l  =  Long.parseLong(s  +  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  double  l  =  Long.parseLong(s  +  1);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	double  l  =  Long.parseLong(s  +  1);	  int    l    =    Long.parseLong(s    +    1);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
35	[BUG]  [BUGGY]  long  l  =  Long.parseLong(s)/  4;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Long.parseLong(s)/  4;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Long.parseLong(s)/  4;	  long    l    =    Long.parseLong(s)+    4;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
36	[BUG]  [BUGGY]  int  l  =  Long.parseLong(s)+  4;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  int  l  =  Long.parseLong(s)+  4;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	int  l  =  Long.parseLong(s)+  4;	  long    l    =    Long.parseLong(s)+    4;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
37	[BUG]  [BUGGY]  long  l  =  Long.parseLong(s)+  2  +  1;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Long.parseLong(s)+  2  +  1;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Long.parseLong(s)+  2  +  1;	  long    l    =    Long.parseLong(s)+    1    +    1;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
38	[BUG]  [BUGGY]  long  l  =  Long.parseLong(s)+  4  +  1;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Long.parseLong(s)+  4  +  1;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Long.parseLong(s)+  4  +  1;	  long    l    =    Long.parseLong(s)+    1    +    1;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
39	[BUG]  [BUGGY]  long  l  =  Long.parseLong(s)+  3  +  1;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Long.parseLong(s)+  3  +  1;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Long.parseLong(s)+  3  +  1;	  long    l    =    Long.parseLong(s)+    1    +    1;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
40	[BUG]  [BUGGY]  long  l  =  Long.parseLong(s)/  1  +  1;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Long.parseLong(s)/  1  +  1;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Long.parseLong(s)/  1  +  1;	  long    l    =    Long.parseLong(s)+    1    +    1;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
41	[BUG]  [BUGGY]  long  l  =  Long.parseLong(s)+  10  +  1;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Long.parseLong(s)+  10  +  1;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Long.parseLong(s)+  10  +  1;	  long    l    =    Long.parseLong(s)+    1    +    1;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
42	[BUG]  [BUGGY]  long  l  =  Integer.parseInt(s)/  2;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Integer.parseInt(s)/  2;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Integer.parseInt(s)/  2;	  long    l    =    Integer.parseInt(s)+    2;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
43	[BUG]  [BUGGY]  int  l  =  Integer.parseInt(s)+  2;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  int  l  =  Integer.parseInt(s)+  2;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	int  l  =  Integer.parseInt(s)+  2;	  long    l    =    Integer.parseInt(s)+    2;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
44	[BUG]  [BUGGY]  long  l  =  Integer.parseInt(s)+  4;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Integer.parseInt(s)+  4;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Integer.parseInt(s)+  4;	  long    l    =    Integer.parseInt(s)+    2;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
45	[BUG]  [BUGGY]  int  l  =  Long.parseInt(s)+  1;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  int  l  =  Long.parseInt(s)+  1;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	int  l  =  Long.parseInt(s)+  1;	  int    l    =    Long.parseLong(s)+    1;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
46	[BUG]  [BUGGY]  int  l  =  Long.parseLong(s)/  1;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  int  l  =  Long.parseLong(s)/  1;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	int  l  =  Long.parseLong(s)/  1;	  int    l    =    Long.parseLong(s)+    1;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
47	[BUG]  [BUGGY]  int  l  =  Long.parseLong(s)+  2;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  int  l  =  Long.parseLong(s)+  2;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	int  l  =  Long.parseLong(s)+  2;	  int    l    =    Long.parseLong(s)+    1;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
48	[BUG]  [BUGGY]  long  l  =  Integer.parseInt(s)/  1;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Integer.parseInt(s)/  1;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Integer.parseInt(s)/  1;	  long    l    =    Integer.parseInt(s)+    1;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
49	[BUG]  [BUGGY]  long  l  =  Integer.parseInt(s)+  1L;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Integer.parseInt(s)+  1L;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Integer.parseInt(s)+  1L;	  long    l    =    Integer.parseInt(s)+    1;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
50	[BUG]  [BUGGY]  long  l  =  Long.parseLong(s  *  3);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Long.parseLong(s  *  3);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Long.parseLong(s  *  3);	  long    l    =    Long.parseLong(s    +    3);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
51	[BUG]  [BUGGY]  int  l  =  Long.parseLong(s  +  3);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  int  l  =  Long.parseLong(s  +  3);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	int  l  =  Long.parseLong(s  +  3);	  long    l    =    Long.parseLong(s    +    3);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
52	[BUG]  [BUGGY]  int  l  =  Integer.parseInt(s)-  1;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  int  l  =  Integer.parseInt(s)-  1;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	int  l  =  Integer.parseInt(s)-  1;	  long    l    =    Integer.parseInt(s)-    1;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
53	[BUG]  [BUGGY]  long  l  =  Integer.parseInt(s)-  2;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Integer.parseInt(s)-  2;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Integer.parseInt(s)-  2;	  long    l    =    Integer.parseInt(s)-    1;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
54	[BUG]  [BUGGY]  long  l  =  Integer.parseInt(s)-  1L;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Integer.parseInt(s)-  1L;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Integer.parseInt(s)-  1L;	  long    l    =    Integer.parseInt(s)-    1;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
55	[BUG]  [BUGGY]  long  l  =  Integer.parseInt(s)-  1  +  1;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Integer.parseInt(s)-  1  +  1;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Integer.parseInt(s)-  1  +  1;	  long    l    =    Integer.parseInt(s)-    1;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
56	[BUG]  [BUGGY]  long  l  =  Double.parseDouble(s)/  1;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Double.parseDouble(s)/  1;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Double.parseDouble(s)/  1;	  long    l    =    Double.parseDouble(s)+    1;    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
57	[BUG]  [BUGGY]  long  l  =  Double.parseDouble(s)+  2;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Double.parseDouble(s)+  2;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Double.parseDouble(s)+  2;	  long    l    =    Double.parseDouble(s)+    1;    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
58	[BUG]  [BUGGY]  long  l  =  Double.parseDouble(s)+  1L;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Double.parseDouble(s)+  1L;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Double.parseDouble(s)+  1L;	  long    l    =    Double.parseDouble(s)+    1;    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
59	[BUG]  [BUGGY]  long  l  =  Double.parseDouble(s)+  3;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Double.parseDouble(s)+  3;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Double.parseDouble(s)+  3;	  long    l    =    Double.parseDouble(s)+    1;    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
60	[BUG]  [BUGGY]  long  l  =  Double.parseDouble(s)+  4;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Double.parseDouble(s)+  4;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Double.parseDouble(s)+  4;	  long    l    =    Double.parseDouble(s)+    1;    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
61	[BUG]  [BUGGY]  long  l  =  Integer.parseInt(s).doubleValue();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Integer.parseInt(s).doubleValue();  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Integer.parseInt(s).doubleValue();	  long    l    =    Long.parseLong(s).doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
62	[BUG]  [BUGGY]  int  l  =  Long.parseLong(s).doubleValue();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  int  l  =  Long.parseLong(s).doubleValue();  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	int  l  =  Long.parseLong(s).doubleValue();	  long    l    =    Long.parseLong(s).doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
63	[BUG]  [BUGGY]  long  l  =  Long.parseLong(s).doubleValue()  +  1;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Long.parseLong(s).doubleValue()  +  1;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Long.parseLong(s).doubleValue()  +  1;	  long    l    =    Long.parseLong(s).doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
64	[BUG]  [BUGGY]  long  l  =  Character.toLongBits(s)+  1;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Character.toLongBits(s)+  1;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Character.toLongBits(s)+  1;	  long    l    =    Character.toLongBits(s);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
65	[BUG]  [BUGGY]  int  l  =  Character.toLongBits(s);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  int  l  =  Character.toLongBits(s);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	int  l  =  Character.toLongBits(s);	  long    l    =    Character.toLongBits(s);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
66	[BUG]  [BUGGY]  long  l  =  Character.toLongBits(s).longValue();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Character.toLongBits(s).longValue();  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Character.toLongBits(s).longValue();	  long    l    =    Character.toLongBits(s);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
67	[BUG]  [BUGGY]  long  l  =  Character.toLongBits(s  +  1);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Character.toLongBits(s  +  1);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Character.toLongBits(s  +  1);	  long    l    =    Character.toLongBits(s);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
68	[BUG]  [BUGGY]  long  l  =  Character.toLongBits(s,  1);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Character.toLongBits(s,  1);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Character.toLongBits(s,  1);	  long    l    =    Character.toLongBits(s);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
69	[BUG]  [BUGGY]  long  l  =  Character.toLongBits(s,  false);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Character.toLongBits(s,  false);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Character.toLongBits(s,  false);	  long    l    =    Character.toLongBits(s);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
70	[BUG]  [BUGGY]  long  l  =  Character.toLongBoolean(s)+  1;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Character.toLongBoolean(s)+  1;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Character.toLongBoolean(s)+  1;	  long    l    =    Character.toLongBoolean(s);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
71	[BUG]  [BUGGY]  int  l  =  Character.toLongBoolean(s);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  int  l  =  Character.toLongBoolean(s);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	int  l  =  Character.toLongBoolean(s);	  long    l    =    Character.toLongBoolean(s);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
72	[BUG]  [BUGGY]  long  l  =  Character.toLongBoolean(s,  false);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Character.toLongBoolean(s,  false);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Character.toLongBoolean(s,  false);	  long    l    =    Character.toLongBoolean(s);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
73	[BUG]  [BUGGY]  long  l  =  Character.toLongBoolean(s)-  1;  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Character.toLongBoolean(s)-  1;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Character.toLongBoolean(s)-  1;	  long    l    =    Character.toLongBoolean(s);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
74	[BUG]  [BUGGY]  long  l  =  Character.toLongBoolean(s).longValue();  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Character.toLongBoolean(s).longValue();  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Character.toLongBoolean(s).longValue();	  long    l    =    Character.toLongBoolean(s);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
75	[BUG]  [BUGGY]  long  l  =  Character.toLongBoolean(s)/  2;  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Character.toLongBoolean(s)/  2;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Character.toLongBoolean(s)/  2;	  long    l    =    Character.toLongBoolean(s);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
76	[BUG]  [BUGGY]  Long  l  =  Long.parseLong(s)+  1;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Long  l  =  Long.parseLong(s)+  1;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Long  l  =  Long.parseLong(s)+  1;	  Long    l    =    Long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
77	[BUG]  [BUGGY]  Integer  l  =  Long.parseInt(s);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Integer  l  =  Long.parseInt(s);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Integer  l  =  Long.parseInt(s);	  Long    l    =    Long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
78	[BUG]  [BUGGY]  Long  l  =  Integer.parseInt(s);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Long  l  =  Integer.parseInt(s);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Long  l  =  Integer.parseInt(s);	  Long    l    =    Long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
79	[BUG]  [BUGGY]  int  l  =  Long.parseInt(s).longValue();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  int  l  =  Long.parseInt(s).longValue();  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	int  l  =  Long.parseInt(s).longValue();	  int    l    =    Long.parseLong(s).longValue();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
80	[BUG]  [BUGGY]  int  l  =  Integer.parseInt(s).longValue();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  int  l  =  Integer.parseInt(s).longValue();  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	int  l  =  Integer.parseInt(s).longValue();	  int    l    =    Long.parseLong(s).longValue();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
81	[BUG]  [BUGGY]  double  l  =  Long.parseLong(s).longValue();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  double  l  =  Long.parseLong(s).longValue();  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	double  l  =  Long.parseLong(s).longValue();	  int    l    =    Long.parseLong(s).longValue();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
82	[BUG]  [BUGGY]  int  l  =  Integer.parseInt(s).intValue();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  int  l  =  Integer.parseInt(s).intValue();  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	int  l  =  Integer.parseInt(s).intValue();	  int    l    =    Long.parseLong(s).longValue();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
83	[BUG]  [BUGGY]  Long  l  =  Long.parseLong(s).longValue();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Long  l  =  Long.parseLong(s).longValue();  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Long  l  =  Long.parseLong(s).longValue();	  int    l    =    Long.parseLong(s).longValue();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
84	[BUG]  [BUGGY]  long  l  =  Double.parseDouble(s)/  2  +  1;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Double.parseDouble(s)/  2  +  1;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Double.parseDouble(s)/  2  +  1;	  long    l    =    Double.parseDouble(s)/    2;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
85	[BUG]  [BUGGY]  long  l  =  Double.parseDouble(s)/  2L;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Double.parseDouble(s)/  2L;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Double.parseDouble(s)/  2L;	  long    l    =    Double.parseDouble(s)/    2;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
86	[BUG]  [BUGGY]  long  l  =  Double.parseDouble(s)/  2.0;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Double.parseDouble(s)/  2.0;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Double.parseDouble(s)/  2.0;	  long    l    =    Double.parseDouble(s)/    2;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
87	[BUG]  [BUGGY]  long  l  =  Double.parseDouble(s)/  4;  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Double.parseDouble(s)/  4;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Double.parseDouble(s)/  4;	  long    l    =    Double.parseDouble(s)/    2;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
88	[BUG]  [BUGGY]  int  l  =  Double.parseDouble(s)/  2;  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  int  l  =  Double.parseDouble(s)/  2;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	int  l  =  Double.parseDouble(s)/  2;	  long    l    =    Double.parseDouble(s)/    2;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
89	[BUG]  [BUGGY]  long  l  =  Double.parseDouble(s)/  3;  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Double.parseDouble(s)/  3;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Double.parseDouble(s)/  3;	  long    l    =    Double.parseDouble(s)/    2;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
90	[BUG]  [BUGGY]  long  l  =  Integer.parseInt(s).intValue();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Integer.parseInt(s).intValue();  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Integer.parseInt(s).intValue();	  long    l    =    Integer.parseInt(s).longValue();    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
91	[BUG]  [BUGGY]  int  l  =  Double.parseDouble(s)-  1;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  int  l  =  Double.parseDouble(s)-  1;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	int  l  =  Double.parseDouble(s)-  1;	  long    l    =    Double.parseDouble(s)-    1;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
92	[BUG]  [BUGGY]  long  l  =  Double.parseDouble(s)-  1L;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Double.parseDouble(s)-  1L;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Double.parseDouble(s)-  1L;	  long    l    =    Double.parseDouble(s)-    1;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
93	[BUG]  [BUGGY]  long  l  =  Double.parseDouble(s)-  2;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Double.parseDouble(s)-  2;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Double.parseDouble(s)-  2;	  long    l    =    Double.parseDouble(s)-    1;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
94	[BUG]  [BUGGY]  long  l  =  Double.parseDouble(s)/  1L;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Double.parseDouble(s)/  1L;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Double.parseDouble(s)/  1L;	  long    l    =    Double.parseDouble(s)-    1;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
95	[BUG]  [BUGGY]  long  l  =  Double.parseDouble(s)-  1  +  1;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Double.parseDouble(s)-  1  +  1;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Double.parseDouble(s)-  1  +  1;	  long    l    =    Double.parseDouble(s)-    1;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
96	[BUG]  [BUGGY]  long  l  =  s.trim().length()  +  1;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  s.trim().length()  +  1;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  s.trim().length()  +  1;	  long    l    =    s.trim().length();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
97	[BUG]  [BUGGY]  int  l  =  s.trim().length();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  int  l  =  s.trim().length();  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	int  l  =  s.trim().length();	  long    l    =    s.trim().length();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
98	[BUG]  [BUGGY]  long  l  =  s.trim().length()  +  2;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  s.trim().length()  +  2;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  s.trim().length()  +  2;	  long    l    =    s.trim().length();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
99	[BUG]  [BUGGY]  long  l  =  s.substring(0,  s.length()  -  1);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  s.substring(0,  s.length()  -  1);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  s.substring(0,  s.length()  -  1);	  long    l    =    s.trim().length();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
100	[BUG]  [BUGGY]  long  l  =  s.trim().length()  +  4;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  s.trim().length()  +  4;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  s.trim().length()  +  4;	  long    l    =    s.trim().length();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
101	[BUG]  [BUGGY]  long  l  =  s.trim().length()  *  2;  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  s.trim().length()  *  2;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  s.trim().length()  *  2;	  long    l    =    s.trim().length();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
102	[BUG]  [BUGGY]  int  l  =  getSimpleNumber(s);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  int  l  =  getSimpleNumber(s);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	int  l  =  getSimpleNumber(s);	  long    l    =    getSimpleNumber(s);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
103	[BUG]  [BUGGY]  long  l  =  getSimpleNumber(s)+  1;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  getSimpleNumber(s)+  1;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  getSimpleNumber(s)+  1;	  long    l    =    getSimpleNumber(s);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
104	[BUG]  [BUGGY]  long  l  =  getSimpleNumber(s).doubleValue();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  getSimpleNumber(s).doubleValue();  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  getSimpleNumber(s).doubleValue();	  long    l    =    getSimpleNumber(s);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
105	[BUG]  [BUGGY]  long  l  =  getSimpleNumber(s).longValue();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  getSimpleNumber(s).longValue();  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  getSimpleNumber(s).longValue();	  long    l    =    getSimpleNumber(s);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
106	[BUG]  [BUGGY]  long  l  =  getSimpleNumber(s  +  1);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  getSimpleNumber(s  +  1);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  getSimpleNumber(s  +  1);	  long    l    =    getSimpleNumber(s);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
107	[BUG]  [BUGGY]  long  l  =  getSimpleNumber(s,  false);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  getSimpleNumber(s,  false);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  getSimpleNumber(s,  false);	  long    l    =    getSimpleNumber(s);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
108	[BUG]  [BUGGY]  long  l  =  Long.parseLong(s)/  1L;  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Long.parseLong(s)/  1L;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Long.parseLong(s)/  1L;	  long    l    =    Long.parseLong(s)+    1L;    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
109	[BUG]  [BUGGY]  long  l  =  Long.parseLong(s)+  128;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Long.parseLong(s)+  128;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Long.parseLong(s)+  128;	  long    l    =    Long.parseLong(s)+    1L;    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
110	[BUG]  [BUGGY]  long  l  =  getLong(s);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  getLong(s);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  getLong(s);	  Long    l    =    getLong(s);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
111	[BUG]  [BUGGY]  Long  l  =  getLong(s).longValue();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Long  l  =  getLong(s).longValue();  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Long  l  =  getLong(s).longValue();	  Long    l    =    getLong(s);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
112	[BUG]  [BUGGY]  Long  l  =  getLong(s)+  1;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Long  l  =  getLong(s)+  1;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Long  l  =  getLong(s)+  1;	  Long    l    =    getLong(s);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
113	[BUG]  [BUGGY]  Long  l  =  getLong(s.length());  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Long  l  =  getLong(s.length());  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Long  l  =  getLong(s.length());	  Long    l    =    getLong(s);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
114	[BUG]  [BUGGY]  Long  l  =  getLong(s.longValue());  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Long  l  =  getLong(s.longValue());  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Long  l  =  getLong(s.longValue());	  Long    l    =    getLong(s);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
115	[BUG]  [BUGGY]  long  l  =  getLocalMask()  +  1;  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  getLocalMask()  +  1;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  getLocalMask()  +  1;	  long    l    =    getLocalMask();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
116	[BUG]  [BUGGY]  int  l  =  getLocalMask();  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  int  l  =  getLocalMask();  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	int  l  =  getLocalMask();	  long    l    =    getLocalMask();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
117	[BUG]  [BUGGY]  long  l  =  getLocalMask(s);  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  getLocalMask(s);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  getLocalMask(s);	  long    l    =    getLocalMask();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
118	[BUG]  [BUGGY]  long  l  =  getLocalMask().length;  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  getLocalMask().length;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  getLocalMask().length;	  long    l    =    getLocalMask();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
119	[BUG]  [BUGGY]  long  l  =  getSimpleNumber();  [CE]  illegal  start  of  expression  [FE]                                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  getSimpleNumber();  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  getSimpleNumber();	  long    l    =    getLocalMask();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
120	[BUG]  [BUGGY]  long  l  =  getLocalMask()  +  2;  [CE]  illegal  start  of  expression  [FE]                                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  getLocalMask()  +  2;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  getLocalMask()  +  2;	  long    l    =    getLocalMask();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
121	[BUG]  [BUGGY]  int  l  =  Long.parseLong(s  +  4);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  int  l  =  Long.parseLong(s  +  4);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	int  l  =  Long.parseLong(s  +  4);	  long    l    =    Long.parseLong(s    +    4);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
122	[BUG]  [BUGGY]  long  l  =  Long.parseLong(s  *  4);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Long.parseLong(s  *  4);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Long.parseLong(s  *  4);	  long    l    =    Long.parseLong(s    +    4);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
123	[BUG]  [BUGGY]  int  l  =  Double.parseDouble(s).doubleValue();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  int  l  =  Double.parseDouble(s).doubleValue();  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	int  l  =  Double.parseDouble(s).doubleValue();	  long    l    =    Double.parseDouble(s).doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
124	[BUG]  [BUGGY]  long  l  =  Double.parseDouble(s).doubleValue()  +  1;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Double.parseDouble(s).doubleValue()  +  1;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Double.parseDouble(s).doubleValue()  +  1;	  long    l    =    Double.parseDouble(s).doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
125	[BUG]  [BUGGY]  long  l  =  Double.parseDouble(s).longValue();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Double.parseDouble(s).longValue();  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Double.parseDouble(s).longValue();	  long    l    =    Double.parseDouble(s).doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
126	[BUG]  [BUGGY]  double  l  =  Double.parseDouble(s).doubleValue();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  double  l  =  Double.parseDouble(s).doubleValue();  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	double  l  =  Double.parseDouble(s).doubleValue();	  long    l    =    Double.parseDouble(s).doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
127	[BUG]  [BUGGY]  long  l  =  Double.parseDouble(s).floatValue();  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Double.parseDouble(s).floatValue();  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Double.parseDouble(s).floatValue();	  long    l    =    Double.parseDouble(s).doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
128	[BUG]  [BUGGY]  long  l  =  getLocalFactory().doubleValue();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  getLocalFactory().doubleValue();  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  getLocalFactory().doubleValue();	  Long    l    =    getLocalFactory().doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
129	[BUG]  [BUGGY]  Long  l  =  getLocalFactory().doubleValue()  +  1;  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Long  l  =  getLocalFactory().doubleValue()  +  1;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Long  l  =  getLocalFactory().doubleValue()  +  1;	  Long    l    =    getLocalFactory().doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
130	[BUG]  [BUGGY]  Long  l  =  getLocalFactory().longValue();  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Long  l  =  getLocalFactory().longValue();  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Long  l  =  getLocalFactory().longValue();	  Long    l    =    getLocalFactory().doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
131	[BUG]  [BUGGY]  Long  l  =  getLocalFactory().doubleValue()  +  2;  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Long  l  =  getLocalFactory().doubleValue()  +  2;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Long  l  =  getLocalFactory().doubleValue()  +  2;	  Long    l    =    getLocalFactory().doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
132	[BUG]  [BUGGY]  long  l  =  Long.parseLong(s  *  2);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Long.parseLong(s  *  2);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Long.parseLong(s  *  2);	  long    l    =    Long.parseLong(s    *    1);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
133	[BUG]  [BUGGY]  long  l  =  Long.parseLong(s.substring(0,  s.length()));  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Long.parseLong(s.substring(0,  s.length()));  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Long.parseLong(s.substring(0,  s.length()));	  long    l    =    Long.parseLong(s    *    1);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
134	[BUG]  [BUGGY]  long  l  =  Long.parseLong(s  /  1);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Long.parseLong(s  /  1);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Long.parseLong(s  /  1);	  long    l    =    Long.parseLong(s    *    1);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
135	[BUG]  [BUGGY]  long  l  =  Long.parseLong(s.length  *  1);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Long.parseLong(s.length  *  1);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Long.parseLong(s.length  *  1);	  long    l    =    Long.parseLong(s    *    1);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
136	[BUG]  [BUGGY]  long  l  =  Long.parseLong(s.substring(0,  s.length()  -  1));  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Long.parseLong(s.substring(0,  s.length()  -  1));  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Long.parseLong(s.substring(0,  s.length()  -  1));	  long    l    =    Long.parseLong(s    *    1);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
137	[BUG]  [BUGGY]  int  l  =  Long.parseLong(s  *  1);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  int  l  =  Long.parseLong(s  *  1);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	int  l  =  Long.parseLong(s  *  1);	  long    l    =    Long.parseLong(s    *    1);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
138	[BUG]  [BUGGY]  long  l  =  s.length()  +  1;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  s.length()  +  1;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  s.length()  +  1;	  long    l    =    s.length();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
139	[BUG]  [BUGGY]  int  l  =  s.length();  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  int  l  =  s.length();  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	int  l  =  s.length();	  long    l    =    s.length();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
140	[BUG]  [BUGGY]  long  l  =  s.length()  +  2;  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  s.length()  +  2;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  s.length()  +  2;	  long    l    =    s.length();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
141	[BUG]  [BUGGY]  long  l  =  s.length()  *  2;  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  s.length()  *  2;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  s.length()  *  2;	  long    l    =    s.length();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
142	[BUG]  [BUGGY]  long  l  =  s.lastIndexOf('.');  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  s.lastIndexOf('.');  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  s.lastIndexOf('.');	  long    l    =    s.length();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
143	[BUG]  [BUGGY]  long  l  =  s.length()  +  4;  [CE]  illegal  start  of  expression  [FE]                                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  s.length()  +  4;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  s.length()  +  4;	  long    l    =    s.length();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
144	[BUG]  [BUGGY]  Long  l  =  getLocalFactory().constructSimpleNumber(s);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Long  l  =  getLocalFactory().constructSimpleNumber(s);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Long  l  =  getLocalFactory().constructSimpleNumber(s);	  Long    l    =    getLocalFactory().constructLocalFactory(s);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
145	[BUG]  [BUGGY]  long  l  =  getLocalFactory().constructLocalFactory(s);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  getLocalFactory().constructLocalFactory(s);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  getLocalFactory().constructLocalFactory(s);	  Long    l    =    getLocalFactory().constructLocalFactory(s);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
146	[BUG]  [BUGGY]  Long  l  =  getLocalFactory().constructStdNumber(s);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Long  l  =  getLocalFactory().constructStdNumber(s);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Long  l  =  getLocalFactory().constructStdNumber(s);	  Long    l    =    getLocalFactory().constructLocalFactory(s);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
147	[BUG]  [BUGGY]  long  l  =  getLocalFactory().constructSimpleNumber(s);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  getLocalFactory().constructSimpleNumber(s);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  getLocalFactory().constructSimpleNumber(s);	  Long    l    =    getLocalFactory().constructLocalFactory(s);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
148	[BUG]  [BUGGY]  Long  l  =  getLocalFactory().constructStaticNumber(s);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Long  l  =  getLocalFactory().constructStaticNumber(s);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Long  l  =  getLocalFactory().constructStaticNumber(s);	  Long    l    =    getLocalFactory().constructLocalFactory(s);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
149	[BUG]  [BUGGY]  Long  l  =  getLocalFactory().constructSingleNumber(s);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Long  l  =  getLocalFactory().constructSingleNumber(s);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Long  l  =  getLocalFactory().constructSingleNumber(s);	  Long    l    =    getLocalFactory().constructLocalFactory(s);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
150	[BUG]  [BUGGY]  Long  l  =  getLocalFactory().constructShort(s);  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Long  l  =  getLocalFactory().constructShort(s);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Long  l  =  getLocalFactory().constructShort(s);	  Long    l    =    getLocalFactory().constructLocalFactory(s);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
151	[BUG]  [BUGGY]  long  l  =  Integer.parseInt(s).floatValue();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Integer.parseInt(s).floatValue();  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Integer.parseInt(s).floatValue();	  long    l    =    Long.parseLong(s).floatValue();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
152	[BUG]  [BUGGY]  int  l  =  Long.parseLong(s).floatValue();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  int  l  =  Long.parseLong(s).floatValue();  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	int  l  =  Long.parseLong(s).floatValue();	  long    l    =    Long.parseLong(s).floatValue();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
153	[BUG]  [BUGGY]  long  l  =  Long.parseLong(s).floatValue()  +  1;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Long.parseLong(s).floatValue()  +  1;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Long.parseLong(s).floatValue()  +  1;	  long    l    =    Long.parseLong(s).floatValue();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
154	[BUG]  [BUGGY]  int  l  =  Long.parseLong(s).intValue();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  int  l  =  Long.parseLong(s).intValue();  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	int  l  =  Long.parseLong(s).intValue();	  long    l    =    Long.parseLong(s).intValue();    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
155	[BUG]  [BUGGY]  int  l  =  Double.parseDouble(s  +  1);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  int  l  =  Double.parseDouble(s  +  1);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	int  l  =  Double.parseDouble(s  +  1);	  long    l    =    Double.parseDouble(s    +    1);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
156	[BUG]  [BUGGY]  long  l  =  Double.parseDouble(s  +  2);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Double.parseDouble(s  +  2);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Double.parseDouble(s  +  2);	  long    l    =    Double.parseDouble(s    +    1);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
157	[BUG]  [BUGGY]  long  l  =  Double.parseDouble(s  +  3);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Double.parseDouble(s  +  3);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Double.parseDouble(s  +  3);	  long    l    =    Double.parseDouble(s    +    1);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
158	[BUG]  [BUGGY]  long  l  =  Double.parseDouble(s  *  1);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Double.parseDouble(s  *  1);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Double.parseDouble(s  *  1);	  long    l    =    Double.parseDouble(s    +    1);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
159	[BUG]  [BUGGY]  long  l  =  Double.parseDouble(s  /  1);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Double.parseDouble(s  /  1);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Double.parseDouble(s  /  1);	  long    l    =    Double.parseDouble(s    +    1);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
160	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Context  cc  =  getCurrentContext();  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Context  cc  =  getCurrentContext();	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
161	[BUG]  [BUGGY]  Context  cc  =  getContext().getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Context  cc  =  getContext().getCurrentContext();  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Context  cc  =  getContext().getCurrentContext();	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
162	[BUG]  [BUGGY]  Context  cc  =  getContext(s);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Context  cc  =  getContext(s);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Context  cc  =  getContext(s);	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
163	[BUG]  [BUGGY]  Context  cc  =  getContext().getCurrentStructure();  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Context  cc  =  getContext().getCurrentStructure();  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Context  cc  =  getContext().getCurrentStructure();	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
164	[BUG]  [BUGGY]  Context  cc  =  getContextInput();  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Context  cc  =  getContextInput();  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Context  cc  =  getContextInput();	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
165	[BUG]  [BUGGY]  Context  cc  =  getContext().getCurrentToken();  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Context  cc  =  getContext().getCurrentToken();  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Context  cc  =  getContext().getCurrentToken();	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
166	[BUG]  [BUGGY]  Integer  l  =  getSimpleNumber(s);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Integer  l  =  getSimpleNumber(s);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Integer  l  =  getSimpleNumber(s);	  Long    l    =    getSimpleNumber(s);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
167	[BUG]  [BUGGY]  Long  l  =  getSimpleNumber(s)+  1;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Long  l  =  getSimpleNumber(s)+  1;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Long  l  =  getSimpleNumber(s)+  1;	  Long    l    =    getSimpleNumber(s);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
168	[BUG]  [BUGGY]  Long  l  =  getSimpleNumber(s,  false);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Long  l  =  getSimpleNumber(s,  false);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Long  l  =  getSimpleNumber(s,  false);	  Long    l    =    getSimpleNumber(s);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
169	[BUG]  [BUGGY]  long  l  =  Long.parseLong(s)/  2;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Long.parseLong(s)/  2;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Long.parseLong(s)/  2;	  long    l    =    Long.parseLong(s)+    2;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
170	[BUG]  [BUGGY]  long  l  =  Long.parseLong(s)/  10;  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Long.parseLong(s)/  10;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Long.parseLong(s)/  10;	  long    l    =    Long.parseLong(s)/    1;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
171	[BUG]  [BUGGY]  long  l  =  Long.parseLong(s)/  2.0;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Long.parseLong(s)/  2.0;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Long.parseLong(s)/  2.0;	  long    l    =    Long.parseLong(s)/    1;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
172	[BUG]  [BUGGY]  int  l  =  Long.parseLong(s  +  2);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  int  l  =  Long.parseLong(s  +  2);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	int  l  =  Long.parseLong(s  +  2);	  long    l    =    Long.parseLong(s    +    2);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
173	[BUG]  [BUGGY]  long  l  =  Integer.parseInt(s  +  2);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Integer.parseInt(s  +  2);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Integer.parseInt(s  +  2);	  long    l    =    Integer.parseInt(s    +    1);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
174	[BUG]  [BUGGY]  long  l  =  Integer.parseInt(s  *  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Integer.parseInt(s  *  1);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Integer.parseInt(s  *  1);	  long    l    =    Integer.parseInt(s    +    1);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
175	[BUG]  [BUGGY]  long  l  =  Integer.parseInt(s  +  3);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Integer.parseInt(s  +  3);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Integer.parseInt(s  +  3);	  long    l    =    Integer.parseInt(s    +    1);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
176	[BUG]  [BUGGY]  long  l  =  Integer.parseInt(s  +  4);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Integer.parseInt(s  +  4);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Integer.parseInt(s  +  4);	  long    l    =    Integer.parseInt(s    +    1);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
177	[BUG]  [BUGGY]  Long  l  =  getLocalFactory().constructStandardNumber(s);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Long  l  =  getLocalFactory().constructStandardNumber(s);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Long  l  =  getLocalFactory().constructStandardNumber(s);	  Long    l    =    getLocalFactory().constructLocalFactory(s);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
178	[BUG]  [BUGGY]  Long  l  =  getSimpleNumber(s.trim());  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Long  l  =  getSimpleNumber(s.trim());  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Long  l  =  getSimpleNumber(s.trim());	  Long    l    =    getSimpleNumber(s);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
179	[BUG]  [BUGGY]  Long  l  =  getSimpleNumber(s  +  1);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Long  l  =  getSimpleNumber(s  +  1);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Long  l  =  getSimpleNumber(s  +  1);	  Long    l    =    getSimpleNumber(s);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
180	[BUG]  [BUGGY]  Long  l  =  getSimpleNumber(s.substring(1));  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Long  l  =  getSimpleNumber(s.substring(1));  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Long  l  =  getSimpleNumber(s.substring(1));	  Long    l    =    getSimpleNumber(s);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
181	[BUG]  [BUGGY]  long  l  =  getSimpleNumber(s.trim());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  getSimpleNumber(s.trim());  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  getSimpleNumber(s.trim());	  long    l    =    getSimpleNumber(s);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
182	[BUG]  [BUGGY]  long  l  =  getSimpleNumber(s,  0);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  getSimpleNumber(s,  0);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  getSimpleNumber(s,  0);	  long    l    =    getSimpleNumber(s);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
183	[BUG]  [BUGGY]  Long  l  =  Double.parseDouble(s);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Long  l  =  Double.parseDouble(s);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Long  l  =  Double.parseDouble(s);	  int    l    =    Double.parseDouble(s);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
184	[BUG]  [BUGGY]  short  l  =  Double.parseDouble(s);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  short  l  =  Double.parseDouble(s);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	short  l  =  Double.parseDouble(s);	  int    l    =    Double.parseDouble(s);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
185	[BUG]  [BUGGY]  long  l  =  Context.getCurrentContext().getSimpleNumber(s,  -1);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Context.getCurrentContext().getSimpleNumber(s,  -1);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Context.getCurrentContext().getSimpleNumber(s,  -1);	  long    l    =    Context.getCurrentContext().getSimpleNumber(s);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
186	[BUG]  [BUGGY]  long  l  =  Context.getCurrentContext().getSimpleNumber(s  +  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Context.getCurrentContext().getSimpleNumber(s  +  1);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Context.getCurrentContext().getSimpleNumber(s  +  1);	  long    l    =    Context.getCurrentContext().getSimpleNumber(s);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
187	[BUG]  [BUGGY]  long  l  =  Integer.parseInt(s)/  1L;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Integer.parseInt(s)/  1L;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Integer.parseInt(s)/  1L;	  long    l    =    Integer.parseInt(s)-    1;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
188	[BUG]  [BUGGY]  Long  l  =  getLocalMillis(s.trim());  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Long  l  =  getLocalMillis(s.trim());  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Long  l  =  getLocalMillis(s.trim());	  Long    l    =    getLocalMillis(s);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
189	[BUG]  [BUGGY]  Long  l  =  getLocalMillis(s,  context);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Long  l  =  getLocalMillis(s,  context);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Long  l  =  getLocalMillis(s,  context);	  Long    l    =    getLocalMillis(s);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
190	[BUG]  [BUGGY]  Long  l  =  getLong(s  +  1);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Long  l  =  getLong(s  +  1);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Long  l  =  getLong(s  +  1);	  Long    l    =    getLong(s);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
191	[BUG]  [BUGGY]  Long  l  =  getLong(s.trim());  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Long  l  =  getLong(s.trim());  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Long  l  =  getLong(s.trim());	  Long    l    =    getLong(s);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
192	[BUG]  [BUGGY]  long  l  =  Long.parseLong(s)+  10.0;  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Long.parseLong(s)+  10.0;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Long.parseLong(s)+  10.0;	  long    l    =    Long.parseLong(s)+    1L;    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
193	[BUG]  [BUGGY]  long  l  =  s.charAt(s.length()  -  1);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  s.charAt(s.length()  -  1);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  s.charAt(s.length()  -  1);	  long    l    =    s.trim().length();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
194	[BUG]  [BUGGY]  long  l  =  Long.parseLong(s).trim();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Long.parseLong(s).trim();  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Long.parseLong(s).trim();	  long    l    =    Long.parseLong(s).intValue();    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
195	[BUG]  [BUGGY]  long  l  =  Character.toLongBoolean(s)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Character.toLongBoolean(s)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Character.toLongBoolean(s)?  Boolean.TRUE  :  Boolean.FALSE;	  long    l    =    Character.toLongBoolean(s);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
196	[BUG]  [BUGGY]  long  l  =  Character.toUpperCase(s);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Character.toUpperCase(s);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Character.toUpperCase(s);	  long    l    =    Character.toLongBoolean(s);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
197	[BUG]  [BUGGY]  long  l  =  Character.toLongBoolean(s)?  Boolean.FALSE  :  Boolean.TRUE;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Character.toLongBoolean(s)?  Boolean.FALSE  :  Boolean.TRUE;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Character.toLongBoolean(s)?  Boolean.FALSE  :  Boolean.TRUE;	  long    l    =    Character.toLongBoolean(s);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
198	[BUG]  [BUGGY]  long  l  =  Integer.parseInt(s  /  1);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Integer.parseInt(s  /  1);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Integer.parseInt(s  /  1);	  long    l    =    Integer.parseInt(s    +    1);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
199	[BUG]  [BUGGY]  long  l  =  Long.parseLong(s)+  1000  +  1;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Long.parseLong(s)+  1000  +  1;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Long.parseLong(s)+  1000  +  1;	  long    l    =    Long.parseLong(s)+    1    +    1;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
200	[BUG]  [BUGGY]  long  l  =  Character.toLongBits(s).doubleValue();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Character.toLongBits(s).doubleValue();  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Character.toLongBits(s).doubleValue();	  long    l    =    Character.toLongBits(s);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
201	[BUG]  [BUGGY]  long  l  =  Double.parseDouble(s)/  2  +  4;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Double.parseDouble(s)/  2  +  4;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Double.parseDouble(s)/  2  +  4;	  long    l    =    Double.parseDouble(s)/    2;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
202	[BUG]  [BUGGY]  long  l  =  Context.getCurrentLength();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Context.getCurrentLength();  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Context.getCurrentLength();	  long    l    =    Context.getCurrentToken();    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
203	[BUG]  [BUGGY]  long  l  =  context.getCurrentToken();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  context.getCurrentToken();  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  context.getCurrentToken();	  long    l    =    Context.getCurrentToken();    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
204	[BUG]  [BUGGY]  Long  l  =  long.parseLong(s);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Long  l  =  long.parseLong(s);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Long  l  =  long.parseLong(s);	  Long    l    =    Long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
205	[BUG]  [BUGGY]  Context  cc  =  getContextForCodeInsertion(s);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Context  cc  =  getContextForCodeInsertion(s);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Context  cc  =  getContextForCodeInsertion(s);	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
206	[BUG]  [BUGGY]  Context  cc  =  getContext(context);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Context  cc  =  getContext(context);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Context  cc  =  getContext(context);	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
207	[BUG]  [BUGGY]  Context  cc  =  getContext().getCurrentNode();  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Context  cc  =  getContext().getCurrentNode();  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Context  cc  =  getContext().getCurrentNode();	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
208	[BUG]  [BUGGY]  long  l  =  getLocalMask()  +  4;  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  getLocalMask()  +  4;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  getLocalMask()  +  4;	  long    l    =    getLocalMask();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
209	[BUG]  [BUGGY]  long  l  =  Context.getCurrentLongToString(s);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Context.getCurrentLongToString(s);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Context.getCurrentLongToString(s);	  long    l    =    Context.getCurrentToken();    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
210	[BUG]  [BUGGY]  long  l  =  Context.currentTimeMillis();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Context.currentTimeMillis();  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Context.currentTimeMillis();	  long    l    =    Context.getCurrentToken();    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
211	[BUG]  [BUGGY]  Long  l  =  getSimpleNumber(s.substring(0,  s.length()  -  1));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Long  l  =  getSimpleNumber(s.substring(0,  s.length()  -  1));  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Long  l  =  getSimpleNumber(s.substring(0,  s.length()  -  1));	  Long    l    =    getSimpleNumber(s);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
212	[BUG]  [BUGGY]  Long  l  =  getSimpleNumber(s.substring(0,  s.length()));  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Long  l  =  getSimpleNumber(s.substring(0,  s.length()));  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Long  l  =  getSimpleNumber(s.substring(0,  s.length()));	  Long    l    =    getSimpleNumber(s);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
213	[BUG]  [BUGGY]  Long  l  =  getSimpleNumber(s.toLongByteArray());  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Long  l  =  getSimpleNumber(s.toLongByteArray());  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Long  l  =  getSimpleNumber(s.toLongByteArray());	  Long    l    =    getSimpleNumber(s);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
214	[BUG]  [BUGGY]  long  l  =  Character.toLongBoolean(s)?  Long.MIN_VALUE  :  Long.MAX_VALUE;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Character.toLongBoolean(s)?  Long.MIN_VALUE  :  Long.MAX_VALUE;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Character.toLongBoolean(s)?  Long.MIN_VALUE  :  Long.MAX_VALUE;	  long    l    =    Character.toLongBoolean(s);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
215	[BUG]  [BUGGY]  Long  l  =  getLocalMillis(s.substring(0,  s.length()  -  1));  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Long  l  =  getLocalMillis(s.substring(0,  s.length()  -  1));  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Long  l  =  getLocalMillis(s.substring(0,  s.length()  -  1));	  Long    l    =    getLocalMillis(s);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
216	[BUG]  [BUGGY]  Long  l  =  getLocalMillis(s.substring(0,  s.length()));  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Long  l  =  getLocalMillis(s.substring(0,  s.length()));  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Long  l  =  getLocalMillis(s.substring(0,  s.length()));	  Long    l    =    getLocalMillis(s);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
217	[BUG]  [BUGGY]  Long  l  =  getLocalFactory().constructStdLocalFactory(s);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Long  l  =  getLocalFactory().constructStdLocalFactory(s);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Long  l  =  getLocalFactory().constructStdLocalFactory(s);	  Long    l    =    getLocalFactory().constructLocalFactory(s);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
218	[BUG]  [BUGGY]  Long  l  =  getLocalFactory().constructShortLocalFactory(s);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Long  l  =  getLocalFactory().constructShortLocalFactory(s);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Long  l  =  getLocalFactory().constructShortLocalFactory(s);	  Long    l    =    getLocalFactory().constructLocalFactory(s);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
219	[BUG]  [BUGGY]  long  l  =  Context.getCurrentContext().getSimpleNumber(s,  s);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Context.getCurrentContext().getSimpleNumber(s,  s);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Context.getCurrentContext().getSimpleNumber(s,  s);	  long    l    =    Context.getCurrentContext().getSimpleNumber(s);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
220	[BUG]  [BUGGY]  Long  l  =  getLong(s.substring(0,  s.length()));  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Long  l  =  getLong(s.substring(0,  s.length()));  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Long  l  =  getLong(s.substring(0,  s.length()));	  Long    l    =    getLong(s);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
221	[BUG]  [BUGGY]  Long  l  =  getLong(s.substring(0,  s.length()  -  1));  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Long  l  =  getLong(s.substring(0,  s.length()  -  1));  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Long  l  =  getLong(s.substring(0,  s.length()  -  1));	  Long    l    =    getLong(s);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
222	[BUG]  [BUGGY]  short  l  =  Integer.parseInt(s)+  1;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  short  l  =  Integer.parseInt(s)+  1;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	short  l  =  Integer.parseInt(s)+  1;	  long    l    =    Integer.parseInt(s)+    2;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
223	[BUG]  [BUGGY]  Long  l  =  Integer.parseInt(s)/  2;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Long  l  =  Integer.parseInt(s)/  2;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Long  l  =  Integer.parseInt(s)/  2;	  long    l    =    Integer.parseInt(s)+    2;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
224	[BUG]  [BUGGY]  long  l  =  s.length()  -  1;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  s.length()  -  1;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  s.length()  -  1;	  long    l    =    s.length();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
225	[BUG]  [BUGGY]  long  l  =  Long.parseLong(s)+  16;  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Long.parseLong(s)+  16;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Long.parseLong(s)+  16;	  long    l    =    Long.parseLong(s)+    1L;    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
226	[BUG]  [BUGGY]  null  l  =  Double.parseDouble(s);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  null  l  =  Double.parseDouble(s);  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	null  l  =  Double.parseDouble(s);	  int    l    =    Double.parseDouble(s);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
227	[BUG]  [BUGGY]  long  l  =  getSimpleNumber(s.toLowerCase());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  getSimpleNumber(s.toLowerCase());  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  getSimpleNumber(s.toLowerCase());	  long    l    =    getSimpleNumber(s);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
228	[BUG]  [BUGGY]  long  l  =  getSimpleNumber(s.substring(0,  s.length()));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  getSimpleNumber(s.substring(0,  s.length()));  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  getSimpleNumber(s.substring(0,  s.length()));	  long    l    =    getSimpleNumber(s);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
229	[BUG]  [BUGGY]  Context  cc  =  getContextForce();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Context  cc  =  getContextForce();  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Context  cc  =  getContextForce();	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
230	[BUG]  [BUGGY]  Context  cc  =  createContext();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  Context  cc  =  createContext();  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Context  cc  =  createContext();	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
231	[BUG]  [BUGGY]  long  l  =  Long.parseLong(s)+  16  +  1;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {      [BUGGY]  long  l  =  Long.parseLong(s)+  16  +  1;  [BUGGY]      if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Long.parseLong(s)+  16  +  1;	  long    l    =    Long.parseLong(s)+    1    +    1;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
