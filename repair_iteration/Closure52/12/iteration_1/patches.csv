bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  long  l  =  Long.parseLong(s  +  2);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {    [BUGGY]  long  l  =  Long.parseLong(s  +  2);  [BUGGY]    if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Long.parseLong(s  +  2);	  long    l    =    Long.parseLong(s    +    1);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
2	[BUG]  [BUGGY]  int  l  =  Long.parseLong(s  +  1);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {    [BUGGY]  int  l  =  Long.parseLong(s  +  1);  [BUGGY]    if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	int  l  =  Long.parseLong(s  +  1);	  long    l    =    Long.parseLong(s    +    1);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
3	[BUG]  [BUGGY]  long  l  =  Long.parseLong(s  +  3);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {    [BUGGY]  long  l  =  Long.parseLong(s  +  3);  [BUGGY]    if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Long.parseLong(s  +  3);	  long    l    =    Long.parseLong(s    +    1);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
4	[BUG]  [BUGGY]  long  l  =  Integer.parseInt(s  +  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {    [BUGGY]  long  l  =  Integer.parseInt(s  +  1);  [BUGGY]    if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Integer.parseInt(s  +  1);	  long    l    =    Long.parseLong(s    +    1);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
5	[BUG]  [BUGGY]  long  l  =  Long.parseLong(s  *  1);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {    [BUGGY]  long  l  =  Long.parseLong(s  *  1);  [BUGGY]    if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Long.parseLong(s  *  1);	  long    l    =    Long.parseLong(s    +    1);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
6	[BUG]  [BUGGY]  long  l  =  Long.parseLong(s  +  4);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {    [BUGGY]  long  l  =  Long.parseLong(s  +  4);  [BUGGY]    if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Long.parseLong(s  +  4);	  long    l    =    Long.parseLong(s    +    1);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
7	[BUG]  [BUGGY]  int  l  =  Integer.parseInt(s);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {    [BUGGY]  int  l  =  Integer.parseInt(s);  [BUGGY]    if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	int  l  =  Integer.parseInt(s);	  int    l    =    Long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
8	[BUG]  [BUGGY]  int  l  =  Long.parseInt(s);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {    [BUGGY]  int  l  =  Long.parseInt(s);  [BUGGY]    if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	int  l  =  Long.parseInt(s);	  int    l    =    Long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
9	[BUG]  [BUGGY]  double  l  =  Long.parseLong(s);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {    [BUGGY]  double  l  =  Long.parseLong(s);  [BUGGY]    if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	double  l  =  Long.parseLong(s);	  int    l    =    Long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
10	[BUG]  [BUGGY]  Long  l  =  Long.parseLong(s);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {    [BUGGY]  Long  l  =  Long.parseLong(s);  [BUGGY]    if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Long  l  =  Long.parseLong(s);	  int    l    =    Long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
11	[BUG]  [BUGGY]  long  l  =  Long.parseLong(s)/  1;  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {    [BUGGY]  long  l  =  Long.parseLong(s)/  1;  [BUGGY]    if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Long.parseLong(s)/  1;	  long    l    =    Long.parseLong(s)+    1;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
12	[BUG]  [BUGGY]  long  l  =  Long.parseLong(s)+  2;  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {    [BUGGY]  long  l  =  Long.parseLong(s)+  2;  [BUGGY]    if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Long.parseLong(s)+  2;	  long    l    =    Long.parseLong(s)+    1;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
13	[BUG]  [BUGGY]  long  l  =  Long.parseLong(s)+  4;  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {    [BUGGY]  long  l  =  Long.parseLong(s)+  4;  [BUGGY]    if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Long.parseLong(s)+  4;	  long    l    =    Long.parseLong(s)+    1;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
14	[BUG]  [BUGGY]  int  l  =  Long.parseLong(s)+  1;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {    [BUGGY]  int  l  =  Long.parseLong(s)+  1;  [BUGGY]    if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	int  l  =  Long.parseLong(s)+  1;	  long    l    =    Long.parseLong(s)+    1;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
15	[BUG]  [BUGGY]  long  l  =  Long.parseLong(s)+  3;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {    [BUGGY]  long  l  =  Long.parseLong(s)+  3;  [BUGGY]    if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Long.parseLong(s)+  3;	  long    l    =    Long.parseLong(s)+    1;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
16	[BUG]  [BUGGY]  long  l  =  Integer.parseInt(s)+  1;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {    [BUGGY]  long  l  =  Integer.parseInt(s)+  1;  [BUGGY]    if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Integer.parseInt(s)+  1;	  long    l    =    Long.parseLong(s)+    1;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
17	[BUG]  [BUGGY]  long  l  =  Integer.parseInt(s)-  1;  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {    [BUGGY]  long  l  =  Integer.parseInt(s)-  1;  [BUGGY]    if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Integer.parseInt(s)-  1;	  long    l    =    Integer.parseInt(s);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
18	[BUG]  [BUGGY]  long  l  =  Integer.parseInt(s)+  2;  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {    [BUGGY]  long  l  =  Integer.parseInt(s)+  2;  [BUGGY]    if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Integer.parseInt(s)+  2;	  long    l    =    Integer.parseInt(s);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
19	[BUG]  [BUGGY]  long  l  =  Long.parseLong(s).doubleValue();  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {    [BUGGY]  long  l  =  Long.parseLong(s).doubleValue();  [BUGGY]    if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Long.parseLong(s).doubleValue();	  long    l    =    Long.parseLong(s).longValue();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
20	[BUG]  [BUGGY]  long  l  =  Long.parseLong(s).floatValue();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {    [BUGGY]  long  l  =  Long.parseLong(s).floatValue();  [BUGGY]    if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Long.parseLong(s).floatValue();	  long    l    =    Long.parseLong(s).longValue();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
21	[BUG]  [BUGGY]  long  l  =  Integer.parseInt(s).longValue();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {    [BUGGY]  long  l  =  Integer.parseInt(s).longValue();  [BUGGY]    if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Integer.parseInt(s).longValue();	  long    l    =    Long.parseLong(s).longValue();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
22	[BUG]  [BUGGY]  int  l  =  Long.parseLong(s).longValue();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {    [BUGGY]  int  l  =  Long.parseLong(s).longValue();  [BUGGY]    if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	int  l  =  Long.parseLong(s).longValue();	  long    l    =    Long.parseLong(s).longValue();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
23	[BUG]  [BUGGY]  long  l  =  Long.parseLong(s).intValue();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {    [BUGGY]  long  l  =  Long.parseLong(s).intValue();  [BUGGY]    if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Long.parseLong(s).intValue();	  long    l    =    Long.parseLong(s).longValue();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
24	[BUG]  [BUGGY]  long  l  =  getSimpleNumber(s);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {    [BUGGY]  long  l  =  getSimpleNumber(s);  [BUGGY]    if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  getSimpleNumber(s);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
25	[BUG]  [BUGGY]  Long  l  =  getSimpleNumber(s);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {    [BUGGY]  Long  l  =  getSimpleNumber(s);  [BUGGY]    if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Long  l  =  getSimpleNumber(s);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
26	[BUG]  [BUGGY]  Long  l  =  getLocalMillis(s);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {    [BUGGY]  Long  l  =  getLocalMillis(s);  [BUGGY]    if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Long  l  =  getLocalMillis(s);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
27	[BUG]  [BUGGY]  Context  cc  =  getContext();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {    [BUGGY]  Context  cc  =  getContext();  [BUGGY]    if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Context  cc  =  getContext();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
28	[BUG]  [BUGGY]  long  l  =  s.length();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {    [BUGGY]  long  l  =  s.length();  [BUGGY]    if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  s.length();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
29	[BUG]  [BUGGY]  long  l  =  getLocalMask();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {    [BUGGY]  long  l  =  getLocalMask();  [BUGGY]    if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  getLocalMask();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
30	[BUG]  [BUGGY]  long  l  =  Double.parseDouble(s)+  1;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {    [BUGGY]  long  l  =  Double.parseDouble(s)+  1;  [BUGGY]    if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Double.parseDouble(s)+  1;	  long    l    =    Double.parseDouble(s);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
31	[BUG]  [BUGGY]  int  l  =  Double.parseDouble(s);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {    [BUGGY]  int  l  =  Double.parseDouble(s);  [BUGGY]    if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	int  l  =  Double.parseDouble(s);	  long    l    =    Double.parseDouble(s);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
32	[BUG]  [BUGGY]  long  l  =  Double.parseDouble(s  +  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {    [BUGGY]  long  l  =  Double.parseDouble(s  +  1);  [BUGGY]    if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Double.parseDouble(s  +  1);	  long    l    =    Double.parseDouble(s);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
33	[BUG]  [BUGGY]  long  l  =  Double.parseDouble(s).doubleValue();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {    [BUGGY]  long  l  =  Double.parseDouble(s).doubleValue();  [BUGGY]    if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Double.parseDouble(s).doubleValue();	  long    l    =    Double.parseDouble(s);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
34	[BUG]  [BUGGY]  long  l  =  Double.parseDouble(s)/  2;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {    [BUGGY]  long  l  =  Double.parseDouble(s)/  2;  [BUGGY]    if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Double.parseDouble(s)/  2;	  long    l    =    Double.parseDouble(s);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
35	[BUG]  [BUGGY]  long  l  =  Long.parseLong(s)+  1L;  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {    [BUGGY]  long  l  =  Long.parseLong(s)+  1L;  [BUGGY]    if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Long.parseLong(s)+  1L;	  long    l    =    Long.parseLong(s)+    1;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
36	[BUG]  [BUGGY]  long  l  =  Long.parseLong(s)+  1  +  1;  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {    [BUGGY]  long  l  =  Long.parseLong(s)+  1  +  1;  [BUGGY]    if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Long.parseLong(s)+  1  +  1;	  long    l    =    Long.parseLong(s)+    1;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
37	[BUG]  [BUGGY]  long  l  =  Context.getCurrentContext().getSimpleNumber(s);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {    [BUGGY]  long  l  =  Context.getCurrentContext().getSimpleNumber(s);  [BUGGY]    if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Context.getCurrentContext().getSimpleNumber(s);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
38	[BUG]  [BUGGY]  Long  l  =  getLocalFactory().constructLocalFactory(s);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {    [BUGGY]  Long  l  =  getLocalFactory().constructLocalFactory(s);  [BUGGY]    if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Long  l  =  getLocalFactory().constructLocalFactory(s);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
39	[BUG]  [BUGGY]  Long  l  =  getLong(s);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {    [BUGGY]  Long  l  =  getLong(s);  [BUGGY]    if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Long  l  =  getLong(s);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
40	[BUG]  [BUGGY]  long  l  =  Context.getCurrentToken();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {    [BUGGY]  long  l  =  Context.getCurrentToken();  [BUGGY]    if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Context.getCurrentToken();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
41	[BUG]  [BUGGY]  Long  l  =  getLocalFactory().doubleValue();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {    [BUGGY]  Long  l  =  getLocalFactory().doubleValue();  [BUGGY]    if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	Long  l  =  getLocalFactory().doubleValue();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
42	[BUG]  [BUGGY]  long  l  =  Double.parseDouble(s)-  1;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {    [BUGGY]  long  l  =  Double.parseDouble(s)-  1;  [BUGGY]    if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Double.parseDouble(s)-  1;	  long    l    =    Double.parseDouble(s);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
43	[BUG]  [BUGGY]  long  l  =  s.trim().length();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {    [BUGGY]  long  l  =  s.trim().length();  [BUGGY]    if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  s.trim().length();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
44	[BUG]  [BUGGY]  long  l  =  Character.toLongBits(s);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {    [BUGGY]  long  l  =  Character.toLongBits(s);  [BUGGY]    if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Character.toLongBits(s);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
45	[BUG]  [BUGGY]  long  l  =  Character.toLongBoolean(s);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {    [BUGGY]  long  l  =  Character.toLongBoolean(s);  [BUGGY]    if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	long  l  =  Character.toLongBoolean(s);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
