bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  append( ": ".equals(context.getString()));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  append( ": ".equals(context.getString()));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	append( ": ".equals(context.getString()));	  append(   ":   ".equals(context.getCurrentName()));    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
2	[BUG]  [BUGGY]  append( ": ".equals(context.getFirstChild()));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  append( ": ".equals(context.getFirstChild()));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	append( ": ".equals(context.getFirstChild()));	  append(   ":   ".equals(context.getCurrentName()));    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
3	[BUG]  [BUGGY]  append( ": ").equals(context.getCurrentName()));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  append( ": ").equals(context.getCurrentName()));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	append( ": ").equals(context.getCurrentName()));	  append(   ":   ".equals(context.getCurrentName()));    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
4	[BUG]  [BUGGY]  append( ": ".equals(c.getCurrentName()));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  append( ": ".equals(c.getCurrentName()));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	append( ": ".equals(c.getCurrentName()));	  append(   ":   ".equals(context.getCurrentName()));    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
5	[BUG]  [BUGGY]  append( ": ".equals(context.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  append( ": ".equals(context.getLastChild()));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	append( ": ".equals(context.getLastChild()));	  append(   ":   ".equals(context.getCurrentName()));    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
6	[BUG]  [BUGGY]  append( ": ".equals(context.getText()));  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  append( ": ".equals(context.getText()));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	append( ": ".equals(context.getText()));	  append(   ":   ".equals(context.getCurrentName()));    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
7	[BUG]  [BUGGY]  addExpr(c.getFirstChild(),  2);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  addExpr(c.getFirstChild(),  2);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	addExpr(c.getFirstChild(),  2);	  addExpr(c.getFirstChild(),    1);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
8	[BUG]  [BUGGY]  add(c.getFirstChild(),  1);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  add(c.getFirstChild(),  1);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	add(c.getFirstChild(),  1);	  addExpr(c.getFirstChild(),    1);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
9	[BUG]  [BUGGY]  cc.addExpr(c.getFirstChild(),  1);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addExpr(c.getFirstChild(),  1);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addExpr(c.getFirstChild(),  1);	  addExpr(c.getFirstChild(),    1);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
10	[BUG]  [BUGGY]  add(c.getLastChild(),  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  add(c.getLastChild(),  1);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	add(c.getLastChild(),  1);	  addExpr(c.getFirstChild(),    1);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
11	[BUG]  [BUGGY]  addExpr(c.getFirstChild(),  3);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  addExpr(c.getFirstChild(),  3);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	addExpr(c.getFirstChild(),  3);	  addExpr(c.getFirstChild(),    1);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
12	[BUG]  [BUGGY]  cc.add( ": "  +  getSimpleNumber(value));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "  +  getSimpleNumber(value));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "  +  getSimpleNumber(value));	  add(   ":   "    +    getSimpleNumber(value));    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
13	[BUG]  [BUGGY]  add( ": "  +  getSimpleNumber(value),  c);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  add( ": "  +  getSimpleNumber(value),  c);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	add( ": "  +  getSimpleNumber(value),  c);	  add(   ":   "    +    getSimpleNumber(value));    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
14	[BUG]  [BUGGY]  cc.add( ": "  +  c.getUpperCase());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "  +  c.getUpperCase());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "  +  c.getUpperCase());	  add(   ":   "    +    c.getUpperCase());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
15	[BUG]  [BUGGY]  add( ": "  +  c.getSimpleNumber());  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  add( ": "  +  c.getSimpleNumber());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	add( ": "  +  c.getSimpleNumber());	  add(   ":   "    +    c.getUpperCase());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
16	[BUG]  [BUGGY]  cc.addExpr( ": "  +  getSimpleNumber(d));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addExpr( ": "  +  getSimpleNumber(d));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addExpr( ": "  +  getSimpleNumber(d));	  addExpr(   ":   "    +    getSimpleNumber(d));    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
17	[BUG]  [BUGGY]  addExpr( ": "  +  getSimpleNumber(c));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  addExpr( ": "  +  getSimpleNumber(c));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	addExpr( ": "  +  getSimpleNumber(c));	  addExpr(   ":   "    +    getSimpleNumber(d));    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
18	[BUG]  [BUGGY]  addExpr( ": "  +  getSimpleNumber(key));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  addExpr( ": "  +  getSimpleNumber(key));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	addExpr( ": "  +  getSimpleNumber(key));	  addExpr(   ":   "    +    getSimpleNumber(d));    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
19	[BUG]  [BUGGY]  addExpr( ": "  +  getSimpleNumber(d),  c);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  addExpr( ": "  +  getSimpleNumber(d),  c);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	addExpr( ": "  +  getSimpleNumber(d),  c);	  addExpr(   ":   "    +    getSimpleNumber(d));    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
20	[BUG]  [BUGGY]  addExpr( ": "  +  getSimpleNumber(d)+  1);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  addExpr( ": "  +  getSimpleNumber(d)+  1);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	addExpr( ": "  +  getSimpleNumber(d)+  1);	  addExpr(   ":   "    +    getSimpleNumber(d));    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
21	[BUG]  [BUGGY]  addExpr( ": "  +  getSimpleNumber(d),  1);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  addExpr( ": "  +  getSimpleNumber(d),  1);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	addExpr( ": "  +  getSimpleNumber(d),  1);	  addExpr(   ":   "    +    getSimpleNumber(d));    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
22	[BUG]  [BUGGY]  n.addChildToFront(body);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.addChildToFront(body);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.addChildToFront(body);	  n.removeChild(body);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
23	[BUG]  [BUGGY]  add( ": "  +  c.getLastChild(),  2);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  add( ": "  +  c.getLastChild(),  2);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	add( ": "  +  c.getLastChild(),  2);	  add(   ":   "    +    c.getLastChild(),    1);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
24	[BUG]  [BUGGY]  add( ": "  +  c.getLastChild(),  3);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  add( ": "  +  c.getLastChild(),  3);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	add( ": "  +  c.getLastChild(),  3);	  add(   ":   "    +    c.getLastChild(),    1);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
25	[BUG]  [BUGGY]  Node  body  =  c.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Node  body  =  c.getFirstChild();  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Node  body  =  c.getFirstChild();	  Node    body    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
26	[BUG]  [BUGGY]  Node  body  =  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Node  body  =  n.getLastChild();  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Node  body  =  n.getLastChild();	  Node    body    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
27	[BUG]  [BUGGY]  Node  body  =  context.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Node  body  =  context.getFirstChild();  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Node  body  =  context.getFirstChild();	  Node    body    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
28	[BUG]  [BUGGY]  Node  body  =  c.getLastChild();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Node  body  =  c.getLastChild();  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Node  body  =  c.getLastChild();	  Node    body    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
29	[BUG]  [BUGGY]  Node  body  =  context.getLastChild();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Node  body  =  context.getLastChild();  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Node  body  =  context.getLastChild();	  Node    body    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
30	[BUG]  [BUGGY]  cc.add( "- ");  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( "- ");  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( "- ");	  cc.addNumber(   "-   ");    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
31	[BUG]  [BUGGY]  cc.addNumber( "- "  +  getSimpleNumber(key));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addNumber( "- "  +  getSimpleNumber(key));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addNumber( "- "  +  getSimpleNumber(key));	  cc.addNumber(   "-   ");    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
32	[BUG]  [BUGGY]  cc.addNumber( "- "  +  Double.parseDouble(d));  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addNumber( "- "  +  Double.parseDouble(d));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addNumber( "- "  +  Double.parseDouble(d));	  cc.addNumber(   "-   ");    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
33	[BUG]  [BUGGY]  cc.addChildToFront( "- ");  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addChildToFront( "- ");  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addChildToFront( "- ");	  cc.addNumber(   "-   ");    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
34	[BUG]  [BUGGY]  cc.addNumber( "- "  +  Double.parseDouble(key));  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addNumber( "- "  +  Double.parseDouble(key));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addNumber( "- "  +  Double.parseDouble(key));	  cc.addNumber(   "-   ");    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
35	[BUG]  [BUGGY]  cc.add( ": "  +  n.getFirstChild());  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "  +  n.getFirstChild());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "  +  n.getFirstChild());	  add(   ":   "    +    n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
36	[BUG]  [BUGGY]  addExpr( ": "  +  n.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  addExpr( ": "  +  n.getFirstChild());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	addExpr( ": "  +  n.getFirstChild());	  add(   ":   "    +    n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
37	[BUG]  [BUGGY]  cc.add( ": "  +  c.getName());  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "  +  c.getName());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "  +  c.getName());	  cc.add(   ":   "    +    c.getLowerCase());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
38	[BUG]  [BUGGY]  cc.add( ": "  +  c.getOwnerCase());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "  +  c.getOwnerCase());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "  +  c.getOwnerCase());	  cc.add(   ":   "    +    c.getLowerCase());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
39	[BUG]  [BUGGY]  append( ": ").append(getSimpleNumber(key));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  append( ": ").append(getSimpleNumber(key));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	append( ": ").append(getSimpleNumber(key));	  append(   ":   ").append(getSimpleNumber(d));    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
40	[BUG]  [BUGGY]  append( ": ").append(getSimpleNumber(c));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  append( ": ").append(getSimpleNumber(c));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	append( ": ").append(getSimpleNumber(c));	  append(   ":   ").append(getSimpleNumber(d));    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
41	[BUG]  [BUGGY]  append( ": ").append(getSimpleNumber(d),  c);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  append( ": ").append(getSimpleNumber(d),  c);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	append( ": ").append(getSimpleNumber(d),  c);	  append(   ":   ").append(getSimpleNumber(d));    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
42	[BUG]  [BUGGY]  append( ": ").append(getSimpleNumber(d)+  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  append( ": ").append(getSimpleNumber(d)+  1);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	append( ": ").append(getSimpleNumber(d)+  1);	  append(   ":   ").append(getSimpleNumber(d));    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
43	[BUG]  [BUGGY]  append( ": ").append(getSimpleNumber(d,  0));  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  append( ": ").append(getSimpleNumber(d,  0));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	append( ": ").append(getSimpleNumber(d,  0));	  append(   ":   ").append(getSimpleNumber(d));    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
44	[BUG]  [BUGGY]  append( ": ").append(getSimpleNumber(n));  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  append( ": ").append(getSimpleNumber(n));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	append( ": ").append(getSimpleNumber(n));	  append(   ":   ").append(getSimpleNumber(d));    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
45	[BUG]  [BUGGY]  Context  c  =  getCurrentContext(context);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Context  c  =  getCurrentContext(context);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Context  c  =  getCurrentContext(context);	  Context    c    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
46	[BUG]  [BUGGY]  Context  c  =  getCurrentContext().getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Context  c  =  getCurrentContext().getCurrentContext();  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Context  c  =  getCurrentContext().getCurrentContext();	  Context    c    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
47	[BUG]  [BUGGY]  Context  c  =  getCurrentContextInNode();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Context  c  =  getCurrentContextInNode();  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Context  c  =  getCurrentContextInNode();	  Context    c    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
48	[BUG]  [BUGGY]  Context  c  =  getCurrentContext().getRootContext();  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Context  c  =  getCurrentContext().getRootContext();  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Context  c  =  getCurrentContext().getRootContext();	  Context    c    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
49	[BUG]  [BUGGY]  Context  c  =  getCurrentContext().getFirstChild();  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Context  c  =  getCurrentContext().getFirstChild();  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Context  c  =  getCurrentContext().getFirstChild();	  Context    c    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
50	[BUG]  [BUGGY]  cc.add(d  + ": "  +  Double.toString(d));  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add(d  + ": "  +  Double.toString(d));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add(d  + ": "  +  Double.toString(d));	  cc.add(   ":   "    +    Double.toString(d));    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
51	[BUG]  [BUGGY]  cc.add(Double.toString(d));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add(Double.toString(d));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add(Double.toString(d));	  cc.add(   ":   "    +    Double.toString(d));    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
52	[BUG]  [BUGGY]  cc.add( ": "  +  Double.toString(d),  1);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "  +  Double.toString(d),  1);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "  +  Double.toString(d),  1);	  cc.add(   ":   "    +    Double.toString(d));    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
53	[BUG]  [BUGGY]  cc.add( ": "  +  Double.toString(key));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "  +  Double.toString(key));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "  +  Double.toString(key));	  cc.add(   ":   "    +    Double.toString(d));    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
54	[BUG]  [BUGGY]  cc.add( ": "  +  getSimpleName(d));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "  +  getSimpleName(d));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "  +  getSimpleName(d));	  cc.add(   ":   "    +    getSimpleName(key));    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
55	[BUG]  [BUGGY]  cc.add( ": "  +  getSimpleName(n));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "  +  getSimpleName(n));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "  +  getSimpleName(n));	  cc.add(   ":   "    +    getSimpleName(key));    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
56	[BUG]  [BUGGY]  cc.add( ": "  +  getSimpleName(context));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "  +  getSimpleName(context));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "  +  getSimpleName(context));	  cc.add(   ":   "    +    getSimpleName(key));    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
57	[BUG]  [BUGGY]  cc.add( ": "  +  getSimpleName(c));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "  +  getSimpleName(c));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "  +  getSimpleName(c));	  cc.add(   ":   "    +    getSimpleName(key));    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
58	[BUG]  [BUGGY]  add( ": "  +  getSimpleNumber(key)+  1);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  add( ": "  +  getSimpleNumber(key)+  1);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	add( ": "  +  getSimpleNumber(key)+  1);	  add(   ":   "    +    getSimpleNumber(d)+    1);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
59	[BUG]  [BUGGY]  add( ": "  +  getSimpleNumber(d)+  2);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  add( ": "  +  getSimpleNumber(d)+  2);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	add( ": "  +  getSimpleNumber(d)+  2);	  add(   ":   "    +    getSimpleNumber(d)+    1);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
60	[BUG]  [BUGGY]  add( ": "  +  getSimpleNumber(c)+  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  add( ": "  +  getSimpleNumber(c)+  1);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	add( ": "  +  getSimpleNumber(c)+  1);	  add(   ":   "    +    getSimpleNumber(d)+    1);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
61	[BUG]  [BUGGY]  add( ": "  +  getSimpleNumber(d)+  1,  c);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  add( ": "  +  getSimpleNumber(d)+  1,  c);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	add( ": "  +  getSimpleNumber(d)+  1,  c);	  add(   ":   "    +    getSimpleNumber(d)+    1);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
62	[BUG]  [BUGGY]  append( ": ").append(context  ==  Context.STATEMENT,  c);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  append( ": ").append(context  ==  Context.STATEMENT,  c);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	append( ": ").append(context  ==  Context.STATEMENT,  c);	  append(   ":   ").append(context    ==    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
63	[BUG]  [BUGGY]  append( ": ").append(context  ==  Context.STATEMENT  ||  context  ==  Context.STATEMENT);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  append( ": ").append(context  ==  Context.STATEMENT  ||  context  ==  Context.STATEMENT);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	append( ": ").append(context  ==  Context.STATEMENT  ||  context  ==  Context.STATEMENT);	  append(   ":   ").append(context    ==    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
64	[BUG]  [BUGGY]  append( ": ").append(context!=  Context.STATEMENT);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  append( ": ").append(context!=  Context.STATEMENT);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	append( ": ").append(context!=  Context.STATEMENT);	  append(   ":   ").append(context    ==    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
65	[BUG]  [BUGGY]  append( ": ").append(context  ==  Context.STATEMENT  +  1);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  append( ": ").append(context  ==  Context.STATEMENT  +  1);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	append( ": ").append(context  ==  Context.STATEMENT  +  1);	  append(   ":   ").append(context    ==    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
66	[BUG]  [BUGGY]  append( ": ").append(context  ==  Context.STATEMENT));  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  append( ": ").append(context  ==  Context.STATEMENT));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	append( ": ").append(context  ==  Context.STATEMENT));	  append(   ":   ").append(context    ==    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
67	[BUG]  [BUGGY]  append( ": ").append(context  ==  Context.STATEMENT)  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  append( ": ").append(context  ==  Context.STATEMENT)  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	append( ": ").append(context  ==  Context.STATEMENT)	  append(   ":   ").append(context    ==    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
68	[BUG]  [BUGGY]  add( ": ",  c.getLastChild());  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  add( ": ",  c.getLastChild());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	add( ": ",  c.getLastChild());	  add(   ":   ",    n.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
69	[BUG]  [BUGGY]  cc.add( ": ",  n.getLastChild());  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": ",  n.getLastChild());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": ",  n.getLastChild());	  add(   ":   ",    n.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
70	[BUG]  [BUGGY]  add( ": ", ",  c.getLastChild());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  add( ": ", ",  c.getLastChild());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	add( ": ", ",  c.getLastChild());	  add(   ":   ",    n.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
71	[BUG]  [BUGGY]  add( ": "  +  c.getQualifiedName());  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  add( ": "  +  c.getQualifiedName());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	add( ": "  +  c.getQualifiedName());	  add(   ":   "    +    c.getName());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
72	[BUG]  [BUGGY]  Node  body  =  cc.getLastChild();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Node  body  =  cc.getLastChild();  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Node  body  =  cc.getLastChild();	  Node    body    =    cc.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
73	[BUG]  [BUGGY]  Node  body  =  cc.getNext();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Node  body  =  cc.getNext();  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Node  body  =  cc.getNext();	  Node    body    =    cc.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
74	[BUG]  [BUGGY]  Context  c  =  getContext().getCurrentStructure();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Context  c  =  getContext().getCurrentStructure();  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Context  c  =  getContext().getCurrentStructure();	  Context    c    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
75	[BUG]  [BUGGY]  Context  c  =  getContext().getCurrentNode();  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Context  c  =  getContext().getCurrentNode();  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Context  c  =  getContext().getCurrentNode();	  Context    c    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
76	[BUG]  [BUGGY]  Context  c  =  getContext(context);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Context  c  =  getContext(context);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Context  c  =  getContext(context);	  Context    c    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
77	[BUG]  [BUGGY]  Context  c  =  getContext().getCurrentScope();  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Context  c  =  getContext().getCurrentScope();  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Context  c  =  getContext().getCurrentScope();	  Context    c    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
78	[BUG]  [BUGGY]  add( ": "  +  c.getFirstChild(),  2);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  add( ": "  +  c.getFirstChild(),  2);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	add( ": "  +  c.getFirstChild(),  2);	  add(   ":   "    +    c.getFirstChild(),    1);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
79	[BUG]  [BUGGY]  add( ": "  +  c.getFirstChild(),  3);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  add( ": "  +  c.getFirstChild(),  3);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	add( ": "  +  c.getFirstChild(),  3);	  add(   ":   "    +    c.getFirstChild(),    1);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
80	[BUG]  [BUGGY]  Context  c  =  this.context.getContext();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Context  c  =  this.context.getContext();  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Context  c  =  this.context.getContext();	  Context    c    =    context.getContext();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
81	[BUG]  [BUGGY]  Context  c  =  context.getContext(n);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Context  c  =  context.getContext(n);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Context  c  =  context.getContext(n);	  Context    c    =    context.getContext();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
82	[BUG]  [BUGGY]  Context  c  =(context  ==  null)?  context.getContext()  :  context;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Context  c  =(context  ==  null)?  context.getContext()  :  context;  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Context  c  =(context  ==  null)?  context.getContext()  :  context;	  Context    c    =    context.getContext();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
83	[BUG]  [BUGGY]  Context  c  =  n.getContext();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Context  c  =  n.getContext();  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Context  c  =  n.getContext();	  Context    c    =    context.getContext();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
84	[BUG]  [BUGGY]  cc.addNumber( ": "  +  getSimpleNumber(c));  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addNumber( ": "  +  getSimpleNumber(c));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addNumber( ": "  +  getSimpleNumber(c));	  add(   ":   "    +    getSimpleNumber(c));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
85	[BUG]  [BUGGY]  cc.add( ": "  +  getSimpleNumber(c));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "  +  getSimpleNumber(c));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "  +  getSimpleNumber(c));	  add(   ":   "    +    getSimpleNumber(c));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
86	[BUG]  [BUGGY]  add( ": "  +  getSimpleNumber(c),  1);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  add( ": "  +  getSimpleNumber(c),  1);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	add( ": "  +  getSimpleNumber(c),  1);	  add(   ":   "    +    getSimpleNumber(c));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
87	[BUG]  [BUGGY]  add( ": "  +  getSimpleNumber(c),  0);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  add( ": "  +  getSimpleNumber(c),  0);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	add( ": "  +  getSimpleNumber(c),  0);	  add(   ":   "    +    getSimpleNumber(c));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
88	[BUG]  [BUGGY]  n.addChildToBack(context,  c);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.addChildToBack(context,  c);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.addChildToBack(context,  c);	  n.addChildToBack(context);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
89	[BUG]  [BUGGY]  n.addChildToBack(this);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.addChildToBack(this);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.addChildToBack(this);	  n.addChildToBack(context);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
90	[BUG]  [BUGGY]  n.addChildToBack(context,  body);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.addChildToBack(context,  body);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.addChildToBack(context,  body);	  n.addChildToBack(context);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
91	[BUG]  [BUGGY]  n.removeChild(last,  c);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.removeChild(last,  c);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.removeChild(last,  c);	  n.removeChild(last);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
92	[BUG]  [BUGGY]  n.addChildToFront(last);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.addChildToFront(last);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.addChildToFront(last);	  n.removeChild(last);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
93	[BUG]  [BUGGY]  cc.add( ": "  +  c.getNext());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "  +  c.getNext());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "  +  c.getNext());	  add(   ":   "    +    c.getNext());    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
94	[BUG]  [BUGGY]  add( ": "  +  c.getChildCount());  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  add( ": "  +  c.getChildCount());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	add( ": "  +  c.getChildCount());	  add(   ":   "    +    c.getNext());    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
95	[BUG]  [BUGGY]  add( ": "  +  c.getPrevious());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  add( ": "  +  c.getPrevious());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	add( ": "  +  c.getPrevious());	  add(   ":   "    +    c.getNext());    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
96	[BUG]  [BUGGY]  cc.addChildToBack( ": ");  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addChildToBack( ": ");  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addChildToBack( ": ");	  cc.addChildToFront(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
97	[BUG]  [BUGGY]  cc.addChildToFront( ": "  +  n);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addChildToFront( ": "  +  n);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addChildToFront( ": "  +  n);	  cc.addChildToFront(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
98	[BUG]  [BUGGY]  cc.addChildToFront(context, ": ");  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addChildToFront(context, ": ");  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addChildToFront(context, ": ");	  cc.addChildToFront(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
99	[BUG]  [BUGGY]  cc.addChildToFront(':');  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addChildToFront(':');  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addChildToFront(':');	  cc.addChildToFront(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
100	[BUG]  [BUGGY]  cc.addChildToFront( ": ",  n);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addChildToFront( ": ",  n);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addChildToFront( ": ",  n);	  cc.addChildToFront(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
101	[BUG]  [BUGGY]  n.addChildToFront(first);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.addChildToFront(first);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.addChildToFront(first);	  n.removeChild(first);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
102	[BUG]  [BUGGY]  n.removeChild(first,  c);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.removeChild(first,  c);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.removeChild(first,  c);	  n.removeChild(first);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
103	[BUG]  [BUGGY]  append( ": ").equals(c.getString());  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  append( ": ").equals(c.getString());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	append( ": ").equals(c.getString());	  append(   ":   ".equals(c.getString()));    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
104	[BUG]  [BUGGY]  append( ": ").equals(c.getString()));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  append( ": ").equals(c.getString()));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	append( ": ").equals(c.getString()));	  append(   ":   ".equals(c.getString()));    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
105	[BUG]  [BUGGY]  append( ": ").append(c.getString());  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  append( ": ").append(c.getString());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	append( ": ").append(c.getString());	  append(   ":   ".equals(c.getString()));    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
106	[BUG]  [BUGGY]  cc.add( ": "  +  getSimpleNumber(n));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "  +  getSimpleNumber(n));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "  +  getSimpleNumber(n));	  cc.add(   ":   "    +    getSimpleNumber(d));    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
107	[BUG]  [BUGGY]  cc.add( ": "  +  getSimpleNumber(d)+  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "  +  getSimpleNumber(d)+  1);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "  +  getSimpleNumber(d)+  1);	  cc.add(   ":   "    +    getSimpleNumber(d));    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
108	[BUG]  [BUGGY]  Preconditions.checkState(childCount  >  1);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Preconditions.checkState(childCount  >  1);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Preconditions.checkState(childCount  >  1);	  Preconditions.checkState(childCount    ==    1);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
109	[BUG]  [BUGGY]  Preconditions.checkState(childCount!=  1);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Preconditions.checkState(childCount!=  1);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Preconditions.checkState(childCount!=  1);	  Preconditions.checkState(childCount    ==    1);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
110	[BUG]  [BUGGY]  Preconditions.checkState(childCount  >=  1);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Preconditions.checkState(childCount  >=  1);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Preconditions.checkState(childCount  >=  1);	  Preconditions.checkState(childCount    ==    1);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
111	[BUG]  [BUGGY]  cc.add( ": "  +  c.getLocalName());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "  +  c.getLocalName());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "  +  c.getLocalName());	  add(   ":   "    +    c.getLocalName());    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
112	[BUG]  [BUGGY]  Preconditions.checkState(childCount  <  0);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Preconditions.checkState(childCount  <  0);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Preconditions.checkState(childCount  <  0);	  Preconditions.checkState(childCount    >    0);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
113	[BUG]  [BUGGY]  cc.addChildToFront(context);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addChildToFront(context);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addChildToFront(context);	  cc.addChildToFront(body);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
114	[BUG]  [BUGGY]  cc.addChildToFront(n);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addChildToFront(n);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addChildToFront(n);	  cc.addChildToFront(body);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
115	[BUG]  [BUGGY]  cc.addChildToFront(body,  c);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addChildToFront(body,  c);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addChildToFront(body,  c);	  cc.addChildToFront(body);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
116	[BUG]  [BUGGY]  cc.addChildToFront(d);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addChildToFront(d);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addChildToFront(d);	  cc.addChildToFront(body);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
117	[BUG]  [BUGGY]  cc.addChildToFront(this.body);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addChildToFront(this.body);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addChildToFront(this.body);	  cc.addChildToFront(body);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
118	[BUG]  [BUGGY]  cc.addChildToFront(p);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addChildToFront(p);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addChildToFront(p);	  cc.addChildToFront(body);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
119	[BUG]  [BUGGY]  cc.add( ": "  +  c.getSimpleName());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "  +  c.getSimpleName());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "  +  c.getSimpleName());	  cc.add(   ":   "    +    c.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
120	[BUG]  [BUGGY]  n.add( ": "  +  getSimpleName(c));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.add( ": "  +  getSimpleName(c));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.add( ": "  +  getSimpleName(c));	  n.add(   ":   "    +    getSimpleName(key));    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
121	[BUG]  [BUGGY]  n.add( ": "  +  getSimpleName(d));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.add( ": "  +  getSimpleName(d));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.add( ": "  +  getSimpleName(d));	  n.add(   ":   "    +    getSimpleName(key));    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
122	[BUG]  [BUGGY]  n.add( ": "  +  getSimpleName(context));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.add( ": "  +  getSimpleName(context));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.add( ": "  +  getSimpleName(context));	  n.add(   ":   "    +    getSimpleName(key));    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
123	[BUG]  [BUGGY]  n.add( ": "  +  getSimpleName(p));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.add( ": "  +  getSimpleName(p));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.add( ": "  +  getSimpleName(p));	  n.add(   ":   "    +    getSimpleName(key));    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
124	[BUG]  [BUGGY]  cc.add( ": ".equals(context.getString()));  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": ".equals(context.getString()));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": ".equals(context.getString()));	  cc.add(   ":   ".equals(context.getCurrentName()));    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
125	[BUG]  [BUGGY]  cc.add( ": ".equals(context.getFirstChild()));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": ".equals(context.getFirstChild()));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": ".equals(context.getFirstChild()));	  cc.add(   ":   ".equals(context.getCurrentName()));    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
126	[BUG]  [BUGGY]  cc.add( ": ".equals(context.getSimpleName()));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": ".equals(context.getSimpleName()));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": ".equals(context.getSimpleName()));	  cc.add(   ":   ".equals(context.getCurrentName()));    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
127	[BUG]  [BUGGY]  cc.add( ": ".equals(context.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": ".equals(context.getLastChild()));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": ".equals(context.getLastChild()));	  cc.add(   ":   ".equals(context.getCurrentName()));    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
128	[BUG]  [BUGGY]  cc.add( ": ".equals(context.getText()));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": ".equals(context.getText()));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": ".equals(context.getText()));	  cc.add(   ":   ".equals(context.getCurrentName()));    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
129	[BUG]  [BUGGY]  cc.add( ": "  +  Context.getCurrentName());  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "  +  Context.getCurrentName());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "  +  Context.getCurrentName());	  cc.add(   ":   ".equals(context.getCurrentName()));    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
130	[BUG]  [BUGGY]  Preconditions.checkState(childCount  >>  0);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Preconditions.checkState(childCount  >>  0);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Preconditions.checkState(childCount  >>  0);	  Preconditions.checkState(childCount    >=    0);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
131	[BUG]  [BUGGY]  Context  c  =(context  ==  null)?  context.getCurrentContext()  :  context.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Context  c  =(context  ==  null)?  context.getCurrentContext()  :  context.getCurrentContext();  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Context  c  =(context  ==  null)?  context.getCurrentContext()  :  context.getCurrentContext();	  Context    c    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
132	[BUG]  [BUGGY]  Context  c  =  this.context.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Context  c  =  this.context.getCurrentContext();  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Context  c  =  this.context.getCurrentContext();	  Context    c    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
133	[BUG]  [BUGGY]  Context  c  =(context  ==  null)?  context.getCurrentContext()  :  context;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Context  c  =(context  ==  null)?  context.getCurrentContext()  :  context;  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Context  c  =(context  ==  null)?  context.getCurrentContext()  :  context;	  Context    c    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
134	[BUG]  [BUGGY]  Context  c  =  context.getCurrentContext(n);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Context  c  =  context.getCurrentContext(n);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Context  c  =  context.getCurrentContext(n);	  Context    c    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
135	[BUG]  [BUGGY]  Context  c  =  n.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Context  c  =  n.getCurrentContext();  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Context  c  =  n.getCurrentContext();	  Context    c    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
136	[BUG]  [BUGGY]  n.add( ": "  +  c.getUpperCase());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.add( ": "  +  c.getUpperCase());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.add( ": "  +  c.getUpperCase());	  n.add(   ":   "    +    c.getLowerCase());    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
137	[BUG]  [BUGGY]  n.add( ": "  +  c.getName());  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.add( ": "  +  c.getName());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.add( ": "  +  c.getName());	  n.add(   ":   "    +    c.getLowerCase());    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
138	[BUG]  [BUGGY]  n.add( ": "  +  c.getNode());  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.add( ": "  +  c.getNode());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.add( ": "  +  c.getNode());	  n.add(   ":   "    +    c.getLowerCase());    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
139	[BUG]  [BUGGY]  append( ": "  +  c.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  append( ": "  +  c.getFirstChild());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	append( ": "  +  c.getFirstChild());	  append(   ":   "    +    c.getString());    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
140	[BUG]  [BUGGY]  append( ": "  +  c.getName());  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  append( ": "  +  c.getName());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	append( ": "  +  c.getName());	  append(   ":   "    +    c.getString());    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
141	[BUG]  [BUGGY]  append( ": "  +  c.getSimpleName());  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  append( ": "  +  c.getSimpleName());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	append( ": "  +  c.getSimpleName());	  append(   ":   "    +    c.getString());    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
142	[BUG]  [BUGGY]  append( ": "  +  c.getQualifiedName());  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  append( ": "  +  c.getQualifiedName());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	append( ": "  +  c.getQualifiedName());	  append(   ":   "    +    c.getString());    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
143	[BUG]  [BUGGY]  cc.add( ": "  +  c.getLastChild(),  1);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "  +  c.getLastChild(),  1);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "  +  c.getLastChild(),  1);	  cc.add(   ":   "    +    c.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
144	[BUG]  [BUGGY]  cc.add( ",   "  +  c.getLastChild());  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ",   "  +  c.getLastChild());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ",   "  +  c.getLastChild());	  cc.add(   ":   "    +    c.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
145	[BUG]  [BUGGY]  addExpr( ": "  +  c.getLastChild());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  addExpr( ": "  +  c.getLastChild());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	addExpr( ": "  +  c.getLastChild());	  addExpr(   ":   "    +    n.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
146	[BUG]  [BUGGY]  cc.addExpr( ": "  +  n.getLastChild());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addExpr( ": "  +  n.getLastChild());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addExpr( ": "  +  n.getLastChild());	  addExpr(   ":   "    +    n.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
147	[BUG]  [BUGGY]  addExpr(c,   ": "  +  n.getLastChild());  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  addExpr(c,   ": "  +  n.getLastChild());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	addExpr(c,   ": "  +  n.getLastChild());	  addExpr(   ":   "    +    n.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
148	[BUG]  [BUGGY]  cc.add( ": "  +  getSimpleNumber());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "  +  getSimpleNumber());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "  +  getSimpleNumber());	  cc.add(   ":   "    +    getSimpleName());    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
149	[BUG]  [BUGGY]  cc.add( ": "  +  getString());  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "  +  getString());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "  +  getString());	  cc.add(   ":   "    +    getSimpleName());    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
150	[BUG]  [BUGGY]  cc.add( ": "  +  getNumber());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "  +  getNumber());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "  +  getNumber());	  cc.add(   ":   "    +    getSimpleName());    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
151	[BUG]  [BUGGY]  cc.add( ": "  +  getFullName());  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "  +  getFullName());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "  +  getFullName());	  cc.add(   ":   "    +    getSimpleName());    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
152	[BUG]  [BUGGY]  n.addChildToFront(context,  c);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.addChildToFront(context,  c);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.addChildToFront(context,  c);	  n.addChildToFront(context);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
153	[BUG]  [BUGGY]  n.addChildToFront(context,  body);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.addChildToFront(context,  body);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.addChildToFront(context,  body);	  n.addChildToFront(context);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
154	[BUG]  [BUGGY]  n.addChildAfter(context);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.addChildAfter(context);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.addChildAfter(context);	  n.addChildToFront(context);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
155	[BUG]  [BUGGY]  n.add( ": "  +  getSimpleNumber(c),  1);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.add( ": "  +  getSimpleNumber(c),  1);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.add( ": "  +  getSimpleNumber(c),  1);	  n.add(   ":   "    +    getSimpleNumber(c));    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
156	[BUG]  [BUGGY]  n.add( ": "  +  getSimpleNumber(c)+  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.add( ": "  +  getSimpleNumber(c)+  1);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.add( ": "  +  getSimpleNumber(c)+  1);	  n.add(   ":   "    +    getSimpleNumber(c));    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
157	[BUG]  [BUGGY]  n.add( ": "  +  getSimpleNumber(p));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.add( ": "  +  getSimpleNumber(p));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.add( ": "  +  getSimpleNumber(p));	  n.add(   ":   "    +    getSimpleNumber(c));    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
158	[BUG]  [BUGGY]  append( ": ").equals(d);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  append( ": ").equals(d);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	append( ": ").equals(d);	  append(   ":   ".equals(d));    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
159	[BUG]  [BUGGY]  append( ": ".equals(c));  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  append( ": ".equals(c));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	append( ": ".equals(c));	  append(   ":   ".equals(d));    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
160	[BUG]  [BUGGY]  append( ": ").append(d);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  append( ": ").append(d);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	append( ": ").append(d);	  append(   ":   ".equals(d));    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
161	[BUG]  [BUGGY]  append( ": ").equals(d));  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  append( ": ").equals(d));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	append( ": ").equals(d));	  append(   ":   ".equals(d));    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
162	[BUG]  [BUGGY]  n.add( ": "  +  getSimpleNumber(d)+  1);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.add( ": "  +  getSimpleNumber(d)+  1);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.add( ": "  +  getSimpleNumber(d)+  1);	  n.add(   ":   "    +    getSimpleNumber(d));    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
163	[BUG]  [BUGGY]  n.add( ": "  +  getSimpleNumber(d),  1);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.add( ": "  +  getSimpleNumber(d),  1);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.add( ": "  +  getSimpleNumber(d),  1);	  n.add(   ":   "    +    getSimpleNumber(d));    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
164	[BUG]  [BUGGY]  append( ": ").append(c.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  append( ": ").append(c.getFirstChild());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	append( ": ").append(c.getFirstChild());	  append(   ":   ").append(c.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
165	[BUG]  [BUGGY]  append( ": ").append(c.getLastChild(),  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  append( ": ").append(c.getLastChild(),  1);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	append( ": ").append(c.getLastChild(),  1);	  append(   ":   ").append(c.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
166	[BUG]  [BUGGY]  append( ": ").append(c.getLastChild(),  2);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  append( ": ").append(c.getLastChild(),  2);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	append( ": ").append(c.getLastChild(),  2);	  append(   ":   ").append(c.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
167	[BUG]  [BUGGY]  append( ": ").append(c.getLastChild()  +  1);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  append( ": ").append(c.getLastChild()  +  1);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	append( ": ").append(c.getLastChild()  +  1);	  append(   ":   ").append(c.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
168	[BUG]  [BUGGY]  cc.addNumber( ": "  +  getSimpleNumber(double));  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addNumber( ": "  +  getSimpleNumber(double));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addNumber( ": "  +  getSimpleNumber(double));	  add(   ":   "    +    getSimpleNumber(double));    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
169	[BUG]  [BUGGY]  cc.add( ": "  +  double  d);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "  +  double  d);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "  +  double  d);	  cc.add(   ":   "    +    d);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
170	[BUG]  [BUGGY]  cc.add( ": "  +  Double.valueOf(d));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "  +  Double.valueOf(d));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "  +  Double.valueOf(d));	  cc.add(   ":   "    +    d);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
171	[BUG]  [BUGGY]  cc.add( ": "  +  Math.abs(d));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "  +  Math.abs(d));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "  +  Math.abs(d));	  cc.add(   ":   "    +    d);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
172	[BUG]  [BUGGY]  cc.add( ": "  +  Double.toHexString(d));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "  +  Double.toHexString(d));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "  +  Double.toHexString(d));	  cc.add(   ":   "    +    d);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
173	[BUG]  [BUGGY]  cc.add( ": "  +  Math.max(d,  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "  +  Math.max(d,  1);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "  +  Math.max(d,  1);	  cc.add(   ":   "    +    d);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
174	[BUG]  [BUGGY]  cc.addNumber( ": "  +  getSimpleNumber(d));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addNumber( ": "  +  getSimpleNumber(d));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addNumber( ": "  +  getSimpleNumber(d));	  cc.addNumber(   ":   "    +    getSimpleNumber(key));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
175	[BUG]  [BUGGY]  cc.addNumber( ": "  +  getSimpleNumber(n));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addNumber( ": "  +  getSimpleNumber(n));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addNumber( ": "  +  getSimpleNumber(n));	  cc.addNumber(   ":   "    +    getSimpleNumber(key));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
176	[BUG]  [BUGGY]  cc.addNumber( ": "  +  getSimpleNumber(key)+  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addNumber( ": "  +  getSimpleNumber(key)+  1);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addNumber( ": "  +  getSimpleNumber(key)+  1);	  cc.addNumber(   ":   "    +    getSimpleNumber(key));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
177	[BUG]  [BUGGY]  cc.addNumber( ": "  +  getSimpleNumber(key),  1);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addNumber( ": "  +  getSimpleNumber(key),  1);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addNumber( ": "  +  getSimpleNumber(key),  1);	  cc.addNumber(   ":   "    +    getSimpleNumber(key));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
178	[BUG]  [BUGGY]  cc.add( ": ").equals(getString());  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": ").equals(getString());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": ").equals(getString());	  cc.add(   ":   ".equals(getString()));    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
179	[BUG]  [BUGGY]  cc.add( ": ".equals(getString()  + "));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": ".equals(getString()  + "));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": ".equals(getString()  + "));	  cc.add(   ":   ".equals(getString()));    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
180	[BUG]  [BUGGY]  cc.add( ": "  +  getSimpleNumber(p));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "  +  getSimpleNumber(p));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "  +  getSimpleNumber(p));	  cc.add(   ":   "    +    getSimpleNumber(key));    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
181	[BUG]  [BUGGY]  cc.add( ": "  +  getSimpleNumber(key)+  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "  +  getSimpleNumber(key)+  1);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "  +  getSimpleNumber(key)+  1);	  cc.add(   ":   "    +    getSimpleNumber(key));    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
182	[BUG]  [BUGGY]  n.addLastChild();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.addLastChild();  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.addLastChild();	  n.removeLastChild();    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
183	[BUG]  [BUGGY]  n.addLastChild(context);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.addLastChild(context);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.addLastChild(context);	  n.removeLastChild();    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
184	[BUG]  [BUGGY]  n.add( ": "  +  c.getSimpleName());  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.add( ": "  +  c.getSimpleName());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.add( ": "  +  c.getSimpleName());	  n.add(   ":   "    +    c.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
185	[BUG]  [BUGGY]  n.add( ": "  +  c.getLocalName());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.add( ": "  +  c.getLocalName());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.add( ": "  +  c.getLocalName());	  n.add(   ":   "    +    c.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
186	[BUG]  [BUGGY]  cc.addNumber( "null ");  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addNumber( "null ");  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addNumber( "null ");	  cc.addNumber(   "n   ");    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
187	[BUG]  [BUGGY]  cc.addNumber( "naN ");  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addNumber( "naN ");  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addNumber( "naN ");	  cc.addNumber(   "n   ");    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
188	[BUG]  [BUGGY]  cc.addNumber( "infinity ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addNumber( "infinity ");  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addNumber( "infinity ");	  cc.addNumber(   "n   ");    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
189	[BUG]  [BUGGY]  cc.addNumber( "# ");  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addNumber( "# ");  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addNumber( "# ");	  cc.addNumber(   "n   ");    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
190	[BUG]  [BUGGY]  cc.addNumber( "next ");  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addNumber( "next ");  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addNumber( "next ");	  cc.addNumber(   "n   ");    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
191	[BUG]  [BUGGY]  cc.addNumber( "no_body ");  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addNumber( "no_body ");  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addNumber( "no_body ");	  cc.addNumber(   "n   ");    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
192	[BUG]  [BUGGY]  cc.addString( ": ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addString( ": ");  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addString( ": ");	  cc.addName(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
193	[BUG]  [BUGGY]  cc.addName( ": "  +  d);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addName( ": "  +  d);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addName( ": "  +  d);	  cc.addName(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
194	[BUG]  [BUGGY]  cc.addName( "[ ");  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addName( "[ ");  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addName( "[ ");	  cc.addName(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
195	[BUG]  [BUGGY]  cc.addNumber( ": ".doubleValue()  +  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addNumber( ": ".doubleValue()  +  1);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addNumber( ": ".doubleValue()  +  1);	  cc.addNumber(   ":   ".doubleValue());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
196	[BUG]  [BUGGY]  cc.addNumber( ".doubleValue());  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addNumber( ".doubleValue());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addNumber( ".doubleValue());	  cc.addNumber(   ":   ".doubleValue());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
197	[BUG]  [BUGGY]  cc.addNumber( ": ").doubleValue();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addNumber( ": ").doubleValue();  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addNumber( ": ").doubleValue();	  cc.addNumber(   ":   ".doubleValue());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
198	[BUG]  [BUGGY]  cc.addNumber( ": "  +  Double.doubleValue());  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addNumber( ": "  +  Double.doubleValue());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addNumber( ": "  +  Double.doubleValue());	  cc.addNumber(   ":   ".doubleValue());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
199	[BUG]  [BUGGY]  cc.addChildToFront(new  Double(d));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addChildToFront(new  Double(d));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addChildToFront(new  Double(d));	  cc.addChildToFront(double);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
200	[BUG]  [BUGGY]  cc.addChildToFront(last);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addChildToFront(last);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addChildToFront(last);	  cc.addChildToFront(double);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
201	[BUG]  [BUGGY]  Preconditions.checkState(childCount!=  3);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Preconditions.checkState(childCount!=  3);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Preconditions.checkState(childCount!=  3);	  Preconditions.checkState(childCount    ==    3);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
202	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  3  -  1);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Preconditions.checkState(childCount  ==  3  -  1);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Preconditions.checkState(childCount  ==  3  -  1);	  Preconditions.checkState(childCount    ==    3);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
203	[BUG]  [BUGGY]  Preconditions.checkState(childCount  >=  3);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Preconditions.checkState(childCount  >=  3);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Preconditions.checkState(childCount  >=  3);	  Preconditions.checkState(childCount    ==    3);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
204	[BUG]  [BUGGY]  add( ": "  +  getSimpleNumber(key),  c);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  add( ": "  +  getSimpleNumber(key),  c);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	add( ": "  +  getSimpleNumber(key),  c);	  add(   ":   "    +    getSimpleNumber(d),    c);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
205	[BUG]  [BUGGY]  add( ": "  +  getSimpleNumber(c),  d);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  add( ": "  +  getSimpleNumber(c),  d);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	add( ": "  +  getSimpleNumber(c),  d);	  add(   ":   "    +    getSimpleNumber(d),    c);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
206	[BUG]  [BUGGY]  add( ": "  +  getSimpleNumber(d)+ ",  c);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  add( ": "  +  getSimpleNumber(d)+ ",  c);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	add( ": "  +  getSimpleNumber(d)+ ",  c);	  add(   ":   "    +    getSimpleNumber(d),    c);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
207	[BUG]  [BUGGY]  add( ": "  +  getSimpleNumber(n),  c);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  add( ": "  +  getSimpleNumber(n),  c);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	add( ": "  +  getSimpleNumber(n),  c);	  add(   ":   "    +    getSimpleNumber(d),    c);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
208	[BUG]  [BUGGY]  cc.add( ": "  +  key.getString());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "  +  key.getString());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "  +  key.getString());	  cc.add(   ":   "    +    c.getString());    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
209	[BUG]  [BUGGY]  cc.add( ": "  +  getSimpleNumber(body));  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "  +  getSimpleNumber(body));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "  +  getSimpleNumber(body));	  add(   ":   "    +    getSimpleNumber(body));    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
210	[BUG]  [BUGGY]  addExpr(c.getLastChild(),  2);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  addExpr(c.getLastChild(),  2);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	addExpr(c.getLastChild(),  2);	  addExpr(c.getLastChild(),    1);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
211	[BUG]  [BUGGY]  cc.addExpr(c.getLastChild(),  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addExpr(c.getLastChild(),  1);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addExpr(c.getLastChild(),  1);	  addExpr(c.getLastChild(),    1);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
212	[BUG]  [BUGGY]  addExpr(c.getLastChild(),  3);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  addExpr(c.getLastChild(),  3);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	addExpr(c.getLastChild(),  3);	  addExpr(c.getLastChild(),    1);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
213	[BUG]  [BUGGY]  addExpr(c.getLastChild(),  0);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  addExpr(c.getLastChild(),  0);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	addExpr(c.getLastChild(),  0);	  addExpr(c.getLastChild(),    1);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
214	[BUG]  [BUGGY]  cc.addValue( ": "  +  d);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addValue( ": "  +  d);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addValue( ": "  +  d);	  cc.addValue(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
215	[BUG]  [BUGGY]  cc.addValue( ": "  +  getSimpleNumber(key));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addValue( ": "  +  getSimpleNumber(key));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addValue( ": "  +  getSimpleNumber(key));	  cc.addValue(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
216	[BUG]  [BUGGY]  cc.addValue( ": "  +  getSimpleName());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addValue( ": "  +  getSimpleName());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addValue( ": "  +  getSimpleName());	  cc.addValue(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
217	[BUG]  [BUGGY]  cc.addValue( ": "  +  Double.toString(d));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addValue( ": "  +  Double.toString(d));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addValue( ": "  +  Double.toString(d));	  cc.addValue(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
218	[BUG]  [BUGGY]  cc.addValue( ": ".equals(key));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addValue( ": ".equals(key));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addValue( ": ".equals(key));	  cc.addValue(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
219	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  =  1);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Preconditions.checkState(childCount  ==  =  1);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Preconditions.checkState(childCount  ==  =  1);	  Preconditions.checkState(childCount    ==    =    0);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
220	[BUG]  [BUGGY]  add( ": "  +  getSimpleNumber(n),  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  add( ": "  +  getSimpleNumber(n),  1);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	add( ": "  +  getSimpleNumber(n),  1);	  add(   ":   "    +    getSimpleNumber(n));    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
221	[BUG]  [BUGGY]  add( ": "  +  getSimpleNumber(p));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  add( ": "  +  getSimpleNumber(p));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	add( ": "  +  getSimpleNumber(p));	  add(   ":   "    +    getSimpleNumber(n));    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
222	[BUG]  [BUGGY]  cc.addNumber( ": "  +  double  d);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addNumber( ": "  +  double  d);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addNumber( ": "  +  double  d);	  cc.addNumber(   ":   "    +    d);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
223	[BUG]  [BUGGY]  cc.addNumber(d  + ": "  +  d);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addNumber(d  + ": "  +  d);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addNumber(d  + ": "  +  d);	  cc.addNumber(   ":   "    +    d);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
224	[BUG]  [BUGGY]  cc.addNumber( ": "  +  Double.valueOf(d));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addNumber( ": "  +  Double.valueOf(d));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addNumber( ": "  +  Double.valueOf(d));	  cc.addNumber(   ":   "    +    d);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
225	[BUG]  [BUGGY]  cc.addNumber( ": "  +  Double.toString(d));  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addNumber( ": "  +  Double.toString(d));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addNumber( ": "  +  Double.toString(d));	  cc.addNumber(   ":   "    +    d);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
226	[BUG]  [BUGGY]  cc.addNumber( ": "  +  Math.abs(d));  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addNumber( ": "  +  Math.abs(d));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addNumber( ": "  +  Math.abs(d));	  cc.addNumber(   ":   "    +    d);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
227	[BUG]  [BUGGY]  n.replaceChild(c,  body);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.replaceChild(c,  body);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.replaceChild(c,  body);	  n.removeChild(c);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
228	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2  -  childCount);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Preconditions.checkState(childCount  ==  2  -  childCount);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Preconditions.checkState(childCount  ==  2  -  childCount);	  Preconditions.checkState(childCount    ==    2);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
229	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2  -  1);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Preconditions.checkState(childCount  ==  2  -  1);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Preconditions.checkState(childCount  ==  2  -  1);	  Preconditions.checkState(childCount    ==    2);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
230	[BUG]  [BUGGY]  Preconditions.checkState(childCount!=  2);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Preconditions.checkState(childCount!=  2);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Preconditions.checkState(childCount!=  2);	  Preconditions.checkState(childCount    ==    2);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
231	[BUG]  [BUGGY]  n.add( ": "  +  getSimpleNumber(b));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.add( ": "  +  getSimpleNumber(b));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.add( ": "  +  getSimpleNumber(b));	  n.add(   ":   "    +    getSimpleNumber(key));    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
232	[BUG]  [BUGGY]  cc.add( ": ").equals(d);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": ").equals(d);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": ").equals(d);	  cc.add(   ":   ".equals(d));    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
233	[BUG]  [BUGGY]  cc.add( ": "+d.equals(d));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "+d.equals(d));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "+d.equals(d));	  cc.add(   ":   ".equals(d));    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
234	[BUG]  [BUGGY]  cc.add( ": ".equals(key));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": ".equals(key));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": ".equals(key));	  cc.add(   ":   ".equals(d));    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
235	[BUG]  [BUGGY]  n.addChildToBack(body);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.addChildToBack(body);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.addChildToBack(body);	  n.addChildToBack(c);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
236	[BUG]  [BUGGY]  n.addChildToBack(p);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.addChildToBack(p);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.addChildToBack(p);	  n.addChildToBack(c);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
237	[BUG]  [BUGGY]  n.addChildToBack(c,  body);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.addChildToBack(c,  body);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.addChildToBack(c,  body);	  n.addChildToBack(c);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
238	[BUG]  [BUGGY]  n.replaceChild(c,  new  Double(d));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.replaceChild(c,  new  Double(d));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.replaceChild(c,  new  Double(d));	  n.replaceChild(c,    context);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
239	[BUG]  [BUGGY]  n.replaceChild(context,  body);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.replaceChild(context,  body);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.replaceChild(context,  body);	  n.replaceChild(c,    context);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
240	[BUG]  [BUGGY]  n.replaceChild(c,  this.context);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.replaceChild(c,  this.context);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.replaceChild(c,  this.context);	  n.replaceChild(c,    context);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
241	[BUG]  [BUGGY]  n.replaceChild(c,  new  Context(context));  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.replaceChild(c,  new  Context(context));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.replaceChild(c,  new  Context(context));	  n.replaceChild(c,    context);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
242	[BUG]  [BUGGY]  Context  c  =  context.createContext(n);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Context  c  =  context.createContext(n);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Context  c  =  context.createContext(n);	  Context    c    =    context.createContext(context);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
243	[BUG]  [BUGGY]  Context  c  =  context.createContext(n,  context);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Context  c  =  context.createContext(n,  context);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Context  c  =  context.createContext(n,  context);	  Context    c    =    context.createContext(context);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
244	[BUG]  [BUGGY]  Context  c  =  context.createContext(rhsContext);  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Context  c  =  context.createContext(rhsContext);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Context  c  =  context.createContext(rhsContext);	  Context    c    =    context.createContext(context);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
245	[BUG]  [BUGGY]  Context  c  =  context.createContext(fn);  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Context  c  =  context.createContext(fn);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Context  c  =  context.createContext(fn);	  Context    c    =    context.createContext(context);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
246	[BUG]  [BUGGY]  Context  c  =  context.createContext(context,  n);  [CE]  illegal  start  of  expression  [FE]                                          ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Context  c  =  context.createContext(context,  n);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Context  c  =  context.createContext(context,  n);	  Context    c    =    context.createContext(context);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
247	[BUG]  [BUGGY]  Context  c  =  context.createContext(false);  [CE]  illegal  start  of  expression  [FE]                                            ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Context  c  =  context.createContext(false);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Context  c  =  context.createContext(false);	  Context    c    =    context.createContext(context);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
248	[BUG]  [BUGGY]  n.addChildToFront(c,  body);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.addChildToFront(c,  body);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.addChildToFront(c,  body);	  n.addChildToFront(c);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
249	[BUG]  [BUGGY]  n.addChildAfter(c);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.addChildAfter(c);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.addChildAfter(c);	  n.addChildToFront(c);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
250	[BUG]  [BUGGY]  cc.add( ": ".equals(context.getCurrentChild()));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": ".equals(context.getCurrentChild()));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": ".equals(context.getCurrentChild()));	  cc.add(   ":   ".equals(context.getCurrentNode()));    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
251	[BUG]  [BUGGY]  cc.add( ": ".equals(context.getSimpleNode()));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": ".equals(context.getSimpleNode()));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": ".equals(context.getSimpleNode()));	  cc.add(   ":   ".equals(context.getCurrentNode()));    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
252	[BUG]  [BUGGY]  cc.add( ": ".equals(n.getCurrentNode()));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": ".equals(n.getCurrentNode()));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": ".equals(n.getCurrentNode()));	  cc.add(   ":   ".equals(context.getCurrentNode()));    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
253	[BUG]  [BUGGY]  cc.add( ": ".equals(context.getNext()));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": ".equals(context.getNext()));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": ".equals(context.getNext()));	  cc.add(   ":   ".equals(context.getCurrentNode()));    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
254	[BUG]  [BUGGY]  n.removeChild( ": ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.removeChild( ": ");  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.removeChild( ": ");	  n.remove(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
255	[BUG]  [BUGGY]  n.remove( ": "  +  c);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.remove( ": "  +  c);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.remove( ": "  +  c);	  n.remove(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
256	[BUG]  [BUGGY]  n.remove( "[ ");  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.remove( "[ ");  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.remove( "[ ");	  n.remove(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
257	[BUG]  [BUGGY]  n.remove( ": "  +  key);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.remove( ": "  +  key);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.remove( ": "  +  key);	  n.remove(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
258	[BUG]  [BUGGY]  add( ": "  +  c.getString(),  2);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  add( ": "  +  c.getString(),  2);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	add( ": "  +  c.getString(),  2);	  add(   ":   "    +    c.getString(),    1);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
259	[BUG]  [BUGGY]  add( ": "  +  c.getString(),  3);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  add( ": "  +  c.getString(),  3);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	add( ": "  +  c.getString(),  3);	  add(   ":   "    +    c.getString(),    1);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
260	[BUG]  [BUGGY]  add( ": "  +  c.getString(),  4);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  add( ": "  +  c.getString(),  4);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	add( ": "  +  c.getString(),  4);	  add(   ":   "    +    c.getString(),    1);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
261	[BUG]  [BUGGY]  add( ": "  +  c.getString(),  0);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  add( ": "  +  c.getString(),  0);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	add( ": "  +  c.getString(),  0);	  add(   ":   "    +    c.getString(),    1);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
262	[BUG]  [BUGGY]  add( ": "  +  c.getString(),  2,  1);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  add( ": "  +  c.getString(),  2,  1);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	add( ": "  +  c.getString(),  2,  1);	  add(   ":   "    +    c.getString(),    1);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
263	[BUG]  [BUGGY]  append( ": ").append(context  ==  Context.OTHER,  c);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  append( ": ").append(context  ==  Context.OTHER,  c);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	append( ": ").append(context  ==  Context.OTHER,  c);	  append(   ":   ").append(context    ==    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
264	[BUG]  [BUGGY]  append( ": ").append(context!=  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  append( ": ").append(context!=  Context.OTHER);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	append( ": ").append(context!=  Context.OTHER);	  append(   ":   ").append(context    ==    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
265	[BUG]  [BUGGY]  append( ": ").append(context  ==  Context.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  append( ": ").append(context  ==  Context.EXPR_RESULT);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	append( ": ").append(context  ==  Context.EXPR_RESULT);	  append(   ":   ").append(context    ==    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
266	[BUG]  [BUGGY]  append( ": ").append(context  ==  Context.OTHER,  2);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  append( ": ").append(context  ==  Context.OTHER,  2);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	append( ": ").append(context  ==  Context.OTHER,  2);	  append(   ":   ").append(context    ==    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
267	[BUG]  [BUGGY]  Preconditions.checkState(childCount  <=  1);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Preconditions.checkState(childCount  <=  1);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Preconditions.checkState(childCount  <=  1);	  Preconditions.checkState(childCount    <=    0);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
268	[BUG]  [BUGGY]  n.add(c.getLastChild());  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.add(c.getLastChild());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.add(c.getLastChild());	  n.add(   ":   "    +    c.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
269	[BUG]  [BUGGY]  n.add(':'  +  c.getLastChild());  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.add(':'  +  c.getLastChild());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.add(':'  +  c.getLastChild());	  n.add(   ":   "    +    c.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
270	[BUG]  [BUGGY]  cc.addExpr(d);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addExpr(d);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addExpr(d);	  cc.addNumber(d);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
271	[BUG]  [BUGGY]  cc.addNumber(d,  1);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addNumber(d,  1);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addNumber(d,  1);	  cc.addNumber(d);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
272	[BUG]  [BUGGY]  cc.add(d);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add(d);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add(d);	  cc.addNumber(d);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
273	[BUG]  [BUGGY]  cc.addChildToBack(d);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addChildToBack(d);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addChildToBack(d);	  cc.addNumber(d);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
274	[BUG]  [BUGGY]  n.replaceChild(first,  c);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.replaceChild(first,  c);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.replaceChild(first,  c);	  n.removeChild(first);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
275	[BUG]  [BUGGY]  n.removeChild(childCount);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.removeChild(childCount);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.removeChild(childCount);	  n.removeChild(first);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
276	[BUG]  [BUGGY]  Context  c  =  context.createContext(context,  cc);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Context  c  =  context.createContext(context,  cc);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Context  c  =  context.createContext(context,  cc);	  Context    c    =    context.createContext(context);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
277	[BUG]  [BUGGY]  addExpr( ": ",  n.getLastChild());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  addExpr( ": ",  n.getLastChild());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	addExpr( ": ",  n.getLastChild());	  addExpr(   ":   "    +    n.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
278	[BUG]  [BUGGY]  append( ": ").append(context  ==  Context.STATEMENT  &&!Double.isNaN(d));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  append( ": ").append(context  ==  Context.STATEMENT  &&!Double.isNaN(d));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	append( ": ").append(context  ==  Context.STATEMENT  &&!Double.isNaN(d));	  append(   ":   ").append(context    ==    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
279	[BUG]  [BUGGY]  append( ": ").append(context  ==  Context.STATEMENT)&&!Double.isNaN(d);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  append( ": ").append(context  ==  Context.STATEMENT)&&!Double.isNaN(d);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	append( ": ").append(context  ==  Context.STATEMENT)&&!Double.isNaN(d);	  append(   ":   ").append(context    ==    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
280	[BUG]  [BUGGY]  cc.addName( ": "  +  getSimpleNumber(key));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addName( ": "  +  getSimpleNumber(key));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addName( ": "  +  getSimpleNumber(key));	  cc.addName(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
281	[BUG]  [BUGGY]  cc.addName( ": "  +  name);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addName( ": "  +  name);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addName( ": "  +  name);	  cc.addName(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
282	[BUG]  [BUGGY]  add( "): "  +  c.getFirstChild());  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  add( "): "  +  c.getFirstChild());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	add( "): "  +  c.getFirstChild());	  add(   ":   "    +    n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
283	[BUG]  [BUGGY]  n.add( ": "  +  getSimpleNumber(body));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.add( ": "  +  getSimpleNumber(body));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.add( ": "  +  getSimpleNumber(body));	  n.add(   ":   "    +    getSimpleNumber(d));    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
284	[BUG]  [BUGGY]  n.add( ": "  +  getSimpleNumber(value));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.add( ": "  +  getSimpleNumber(value));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.add( ": "  +  getSimpleNumber(value));	  n.add(   ":   "    +    getSimpleNumber(d));    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
285	[BUG]  [BUGGY]  append(c.getLastChild(),  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  append(c.getLastChild(),  1);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	append(c.getLastChild(),  1);	  addExpr(c.getLastChild(),    1);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
286	[BUG]  [BUGGY]  cc.add( ": "  +  getSimpleName(key),  context);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "  +  getSimpleName(key),  context);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "  +  getSimpleName(key),  context);	  cc.add(   ":   "    +    getSimpleName(key));    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
287	[BUG]  [BUGGY]  cc.add( ": "  +  getSimpleName(body));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "  +  getSimpleName(body));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "  +  getSimpleName(body));	  cc.add(   ":   "    +    getSimpleName(key));    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
288	[BUG]  [BUGGY]  cc.add( ": "  +  getSimpleName(key)+  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "  +  getSimpleName(key)+  1);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "  +  getSimpleName(key)+  1);	  cc.add(   ":   "    +    getSimpleName(key));    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
289	[BUG]  [BUGGY]  addExpr(c.getFirstChild(),  0);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  addExpr(c.getFirstChild(),  0);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	addExpr(c.getFirstChild(),  0);	  addExpr(c.getFirstChild(),    1);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
290	[BUG]  [BUGGY]  add( ": "  +  getSimpleNumber(value)+  1);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  add( ": "  +  getSimpleNumber(value)+  1);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	add( ": "  +  getSimpleNumber(value)+  1);	  add(   ":   "    +    getSimpleNumber(value));    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
291	[BUG]  [BUGGY]  cc.addNumber(d  +  1);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addNumber(d  +  1);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addNumber(d  +  1);	  cc.addNumber(d);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
292	[BUG]  [BUGGY]  cc.addNumber( ": "  +  getSimpleNumber(body));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addNumber( ": "  +  getSimpleNumber(body));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addNumber( ": "  +  getSimpleNumber(body));	  cc.addNumber(   ":   "    +    getSimpleNumber(key));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
293	[BUG]  [BUGGY]  cc.add( ": "  +  d.getString());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "  +  d.getString());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "  +  d.getString());	  cc.add(   ":   "    +    c.getString());    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
294	[BUG]  [BUGGY]  cc.add( ": ".equals(value));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": ".equals(value));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": ".equals(value));	  cc.add(   ":   ".equals(d));    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
295	[BUG]  [BUGGY]  n.remove( ": "  +  getSimpleNumber(key));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.remove( ": "  +  getSimpleNumber(key));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.remove( ": "  +  getSimpleNumber(key));	  n.remove(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
296	[BUG]  [BUGGY]  n.remove( "- ");  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.remove( "- ");  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.remove( "- ");	  n.remove(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
297	[BUG]  [BUGGY]  n.remove( "] ");  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.remove( "] ");  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.remove( "] ");	  n.remove(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
298	[BUG]  [BUGGY]  n.add( ": "  +  getSimpleNumber(key)+  1);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.add( ": "  +  getSimpleNumber(key)+  1);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.add( ": "  +  getSimpleNumber(key)+  1);	  n.add(   ":   "    +    getSimpleNumber(key));    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
299	[BUG]  [BUGGY]  append( ": "  +  c.getText());  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  append( ": "  +  c.getText());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	append( ": "  +  c.getText());	  append(   ":   "    +    c.getString());    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
300	[BUG]  [BUGGY]  n.add( "[ "  +  c.getLastChild());  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.add( "[ "  +  c.getLastChild());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.add( "[ "  +  c.getLastChild());	  n.add(   ":   "    +    c.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
301	[BUG]  [BUGGY]  add( ": "  +  getSimpleNumber(b));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  add( ": "  +  getSimpleNumber(b));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	add( ": "  +  getSimpleNumber(b));	  add(   ":   "    +    getSimpleNumber(key));    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
302	[BUG]  [BUGGY]  cc.add( ": ").equals(getString()));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": ").equals(getString()));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": ").equals(getString()));	  cc.add(   ":   ".equals(getString()));    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
303	[BUG]  [BUGGY]  add( ": "  +  getSimpleNumber(body),  c);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  add( ": "  +  getSimpleNumber(body),  c);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	add( ": "  +  getSimpleNumber(body),  c);	  add(   ":   "    +    getSimpleNumber(d),    c);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
304	[BUG]  [BUGGY]  cc.addChildToFront(this);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addChildToFront(this);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addChildToFront(this);	  cc.addChildToFront(double);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
305	[BUG]  [BUGGY]  cc.addChildToFront(fn);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addChildToFront(fn);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addChildToFront(fn);	  cc.addChildToFront(double);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
306	[BUG]  [BUGGY]  add( ": "  +  getSimpleNumber(c)+ "n ");  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  add( ": "  +  getSimpleNumber(c)+ "n ");  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	add( ": "  +  getSimpleNumber(c)+ "n ");	  add(   ":   "    +    getSimpleNumber(c));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
307	[BUG]  [BUGGY]  cc.add( ": "  +  context.getCurrentName());  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "  +  context.getCurrentName());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "  +  context.getCurrentName());	  cc.add(   ":   ".equals(context.getCurrentName()));    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
308	[BUG]  [BUGGY]  add( ": "  +  getSimpleNumber(n)+  1);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  add( ": "  +  getSimpleNumber(n)+  1);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	add( ": "  +  getSimpleNumber(n)+  1);	  add(   ":   "    +    getSimpleNumber(d)+    1);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
309	[BUG]  [BUGGY]  cc.add( "[ "  +  c.getLastChild());  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( "[ "  +  c.getLastChild());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( "[ "  +  c.getLastChild());	  cc.add(   ":   "    +    c.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
310	[BUG]  [BUGGY]  append( ": ".equals(context.getLocalName()));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  append( ": ".equals(context.getLocalName()));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	append( ": ".equals(context.getLocalName()));	  append(   ":   ".equals(context.getCurrentName()));    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
311	[BUG]  [BUGGY]  cc.addChildToFront(first);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addChildToFront(first);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addChildToFront(first);	  cc.addChildToFront(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
312	[BUG]  [BUGGY]  cc.addChildToFront( ": "  +  getSimpleNumber(key));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addChildToFront( ": "  +  getSimpleNumber(key));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addChildToFront( ": "  +  getSimpleNumber(key));	  cc.addChildToFront(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
313	[BUG]  [BUGGY]  cc.addChildToFront(new  Double(n.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addChildToFront(new  Double(n.getLastChild()));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addChildToFront(new  Double(n.getLastChild()));	  cc.addChildToFront(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
314	[BUG]  [BUGGY]  append( ": "  +  d);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  append( ": "  +  d);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	append( ": "  +  d);	  append(   ":   ".equals(d));    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
315	[BUG]  [BUGGY]  Context  c  =  getContextForNoChild(n);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Context  c  =  getContextForNoChild(n);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Context  c  =  getContextForNoChild(n);	  Context    c    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
316	[BUG]  [BUGGY]  Context  c  =  getContextForNoInOperator(context);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Context  c  =  getContextForNoInOperator(context);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Context  c  =  getContextForNoInOperator(context);	  Context    c    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
317	[BUG]  [BUGGY]  Context  c  =  getContextIn();  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Context  c  =  getContextIn();  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Context  c  =  getContextIn();	  Context    c    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
318	[BUG]  [BUGGY]  Context  c  =  getContextForNoChild(context);  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Context  c  =  getContextForNoChild(context);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Context  c  =  getContextForNoChild(context);	  Context    c    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
319	[BUG]  [BUGGY]  Context  c  =  getContextForNode(context);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Context  c  =  getContextForNode(context);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Context  c  =  getContextForNode(context);	  Context    c    =    context.getContext();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
320	[BUG]  [BUGGY]  cc.addNumber( "- ".doubleValue());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addNumber( "- ".doubleValue());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addNumber( "- ".doubleValue());	  cc.addNumber(   ":   ".doubleValue());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
321	[BUG]  [BUGGY]  Node  body  =  n.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Node  body  =  n.removeFirstChild();  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Node  body  =  n.removeFirstChild();	  Node    body    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
322	[BUG]  [BUGGY]  cc.addValue( ": "  +  Double.isNaN(d));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addValue( ": "  +  Double.isNaN(d));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addValue( ": "  +  Double.isNaN(d));	  cc.addValue(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
323	[BUG]  [BUGGY]  cc.addValue( ": "  +  Double.valueOf(d));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addValue( ": "  +  Double.valueOf(d));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addValue( ": "  +  Double.valueOf(d));	  cc.addValue(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
324	[BUG]  [BUGGY]  cc.addValue( ": "  +  name);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addValue( ": "  +  name);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addValue( ": "  +  name);	  cc.addValue(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
325	[BUG]  [BUGGY]  add( ": "  +  getSimpleNumber(last));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  add( ": "  +  getSimpleNumber(last));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	add( ": "  +  getSimpleNumber(last));	  add(   ":   "    +    getSimpleNumber(n));    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
326	[BUG]  [BUGGY]  add( ": "  +  getSimpleNumber(n),  context);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  add( ": "  +  getSimpleNumber(n),  context);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	add( ": "  +  getSimpleNumber(n),  context);	  add(   ":   "    +    getSimpleNumber(n));    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
327	[BUG]  [BUGGY]  add( ": "  +  getSimpleNumber(body)+  1);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  add( ": "  +  getSimpleNumber(body)+  1);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	add( ": "  +  getSimpleNumber(body)+  1);	  add(   ":   "    +    getSimpleNumber(body));    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
328	[BUG]  [BUGGY]  cc.addNumber( ": "  +  double);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addNumber( ": "  +  double);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addNumber( ": "  +  double);	  cc.addNumber(   ":   "    +    d);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
329	[BUG]  [BUGGY]  cc.add( ": "  +  Double.POSITIVE_INFINITY);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "  +  Double.POSITIVE_INFINITY);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "  +  Double.POSITIVE_INFINITY);	  cc.add(   ":   "    +    d);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
330	[BUG]  [BUGGY]  Context  c  =  getCurrentContext().getCurrentStatement();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Context  c  =  getCurrentContext().getCurrentStatement();  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Context  c  =  getCurrentContext().getCurrentStatement();	  Context    c    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
331	[BUG]  [BUGGY]  Context  c  =  getCurrentStatementContext();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Context  c  =  getCurrentStatementContext();  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Context  c  =  getCurrentStatementContext();	  Context    c    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
332	[BUG]  [BUGGY]  Context  c  =  getCurrentContextIn();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Context  c  =  getCurrentContextIn();  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Context  c  =  getCurrentContextIn();	  Context    c    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
333	[BUG]  [BUGGY]  Context  c  =  getCurrentContext().getCurrentNode();  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Context  c  =  getCurrentContext().getCurrentNode();  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Context  c  =  getCurrentContext().getCurrentNode();	  Context    c    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
334	[BUG]  [BUGGY]  cc.add( ": "  +  getCurrentName());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "  +  getCurrentName());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "  +  getCurrentName());	  cc.add(   ":   "    +    getSimpleName());    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
335	[BUG]  [BUGGY]  n.replaceChild(body,  c);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.replaceChild(body,  c);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.replaceChild(body,  c);	  n.removeChild(c);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
336	[BUG]  [BUGGY]  n.addChildAfter(context,  c);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.addChildAfter(context,  c);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.addChildAfter(context,  c);	  n.addChildToFront(context);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
337	[BUG]  [BUGGY]  cc.addChildToBack(body);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addChildToBack(body);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addChildToBack(body);	  cc.addChildToFront(body);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
338	[BUG]  [BUGGY]  Context  c  =  context.getCurrentStatementContext();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Context  c  =  context.getCurrentStatementContext();  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Context  c  =  context.getCurrentStatementContext();	  Context    c    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
339	[BUG]  [BUGGY]  append( ": ").append(context  ==  Context.OTHER  ||  context  ==  BEFORE_DANGLING_ELSE);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  append( ": ").append(context  ==  Context.OTHER  ||  context  ==  BEFORE_DANGLING_ELSE);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	append( ": ").append(context  ==  Context.OTHER  ||  context  ==  BEFORE_DANGLING_ELSE);	  append(   ":   ").append(context    ==    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
340	[BUG]  [BUGGY]  append( ": ").append(context  ==  Context.OTHER)  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  append( ": ").append(context  ==  Context.OTHER)  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	append( ": ").append(context  ==  Context.OTHER)	  append(   ":   ").append(context    ==    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
341	[BUG]  [BUGGY]  append( ": ").append(context  ==  Context.BLOCK);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  append( ": ").append(context  ==  Context.BLOCK);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	append( ": ").append(context  ==  Context.BLOCK);	  append(   ":   ").append(context    ==    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
342	[BUG]  [BUGGY]  cc.add( ": "  +  getSimpleNumber(double));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "  +  getSimpleNumber(double));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "  +  getSimpleNumber(double));	  cc.add(   ":   "    +    getSimpleNumber(d));    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
343	[BUG]  [BUGGY]  n.replaceChild(last,  c);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.replaceChild(last,  c);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.replaceChild(last,  c);	  n.removeChild(last);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
344	[BUG]  [BUGGY]  n.removeChild(last  +  1);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.removeChild(last  +  1);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.removeChild(last  +  1);	  n.removeChild(last);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
345	[BUG]  [BUGGY]  n.replaceChild(c,  new  Node(Token.EMPTY));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.replaceChild(c,  new  Node(Token.EMPTY));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.replaceChild(c,  new  Node(Token.EMPTY));	  n.replaceChild(c,    context);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
346	[BUG]  [BUGGY]  n.add( ": "  +  getSimpleName(name));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.add( ": "  +  getSimpleName(name));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.add( ": "  +  getSimpleName(name));	  n.add(   ":   "    +    getSimpleName(key));    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
347	[BUG]  [BUGGY]  n.add( ": "  +  getSimpleName(body));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.add( ": "  +  getSimpleName(body));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.add( ": "  +  getSimpleName(body));	  n.add(   ":   "    +    getSimpleName(key));    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
348	[BUG]  [BUGGY]  add( ": "  +  getSimpleNumber(double)+  1);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  add( ": "  +  getSimpleNumber(double)+  1);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	add( ": "  +  getSimpleNumber(double)+  1);	  add(   ":   "    +    getSimpleNumber(double));    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
349	[BUG]  [BUGGY]  cc.addNumber('-');  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addNumber('-');  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addNumber('-');	  cc.addNumber(   "-   ");    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
350	[BUG]  [BUGGY]  n.removeChildToBack(context);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.removeChildToBack(context);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.removeChildToBack(context);	  n.addChildToBack(context);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
351	[BUG]  [BUGGY]  add( ": ",  n.getFirstChild());  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  add( ": ",  n.getFirstChild());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	add( ": ",  n.getFirstChild());	  add(   ":   ",    n.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
352	[BUG]  [BUGGY]  add( ": ".equals(n.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  add( ": ".equals(n.getLastChild()));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	add( ": ".equals(n.getLastChild()));	  add(   ":   ",    n.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
353	[BUG]  [BUGGY]  cc.addNumber( "node ");  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addNumber( "node ");  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addNumber( "node ");	  cc.addNumber(   "n   ");    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
354	[BUG]  [BUGGY]  cc.add( ": "  +  Double.toString(d)+  1);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "  +  Double.toString(d)+  1);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "  +  Double.toString(d)+  1);	  cc.add(   ":   "    +    Double.toString(d));    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
355	[BUG]  [BUGGY]  cc.add( ": "  +  Double.toString(value));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "  +  Double.toString(value));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "  +  Double.toString(value));	  cc.add(   ":   "    +    Double.toString(d));    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
356	[BUG]  [BUGGY]  cc.add( ": "  +  Double.toString(n));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "  +  Double.toString(n));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "  +  Double.toString(n));	  cc.add(   ":   "    +    Double.toString(d));    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
357	[BUG]  [BUGGY]  cc.add( ": "  +  Double.toString(d),  context);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "  +  Double.toString(d),  context);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "  +  Double.toString(d),  context);	  cc.add(   ":   "    +    Double.toString(d));    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
358	[BUG]  [BUGGY]  n.addChildToBack(fn);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.addChildToBack(fn);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.addChildToBack(fn);	  n.addChildToBack(c);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
359	[BUG]  [BUGGY]  add( ": "  +  getSimpleNumber(key),  cc);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  add( ": "  +  getSimpleNumber(key),  cc);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	add( ": "  +  getSimpleNumber(key),  cc);	  add(   ":   "    +    getSimpleNumber(key));    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
360	[BUG]  [BUGGY]  cc.add( "- "  +  c.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( "- "  +  c.getFirstChild());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( "- "  +  c.getFirstChild());	  cc.add(   ":   "    +    c.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
361	[BUG]  [BUGGY]  n.add( ": "  +  c.getNext());  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.add( ": "  +  c.getNext());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.add( ": "  +  c.getNext());	  n.add(   ":   "    +    c.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
362	[BUG]  [BUGGY]  cc.add( ": "  +  n.getString());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "  +  n.getString());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "  +  n.getString());	  cc.add(   ":   "    +    c.getString());    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
363	[BUG]  [BUGGY]  addExpr( ": "  +  c.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  addExpr( ": "  +  c.getFirstChild());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	addExpr( ": "  +  c.getFirstChild());	  addExpr(   ":   "    +    n.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
364	[BUG]  [BUGGY]  n.add( "0: "  +  getSimpleNumber(key));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.add( "0: "  +  getSimpleNumber(key));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.add( "0: "  +  getSimpleNumber(key));	  n.add(   ":   "    +    getSimpleNumber(d));    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
365	[BUG]  [BUGGY]  n.add( "- "  +  getSimpleNumber(d));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.add( "- "  +  getSimpleNumber(d));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.add( "- "  +  getSimpleNumber(d));	  n.add(   ":   "    +    getSimpleNumber(d));    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
366	[BUG]  [BUGGY]  cc.add( ": "  +  c.getNode());  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "  +  c.getNode());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "  +  c.getNode());	  cc.add(   ":   "    +    c.getLowerCase());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
367	[BUG]  [BUGGY]  add( ": "  +  getSimpleNumber(key)+ ",  c);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  add( ": "  +  getSimpleNumber(key)+ ",  c);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	add( ": "  +  getSimpleNumber(key)+ ",  c);	  add(   ":   "    +    getSimpleNumber(d),    c);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
368	[BUG]  [BUGGY]  cc.add( ": "  +  this.getSimpleName());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "  +  this.getSimpleName());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "  +  this.getSimpleName());	  cc.add(   ":   "    +    getSimpleName());    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
369	[BUG]  [BUGGY]  n.replaceChild(last,  cc);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.replaceChild(last,  cc);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.replaceChild(last,  cc);	  n.removeChild(last);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
370	[BUG]  [BUGGY]  append( ": ").equals(c));  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  append( ": ").equals(c));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	append( ": ").equals(c));	  append(   ":   ".equals(d));    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
371	[BUG]  [BUGGY]  append( ": ".equals(key));  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  append( ": ".equals(key));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	append( ": ".equals(key));	  append(   ":   ".equals(d));    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
372	[BUG]  [BUGGY]  cc.addValue( ": ".doubleValue());  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addValue( ": ".doubleValue());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addValue( ": ".doubleValue());	  cc.addValue(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
373	[BUG]  [BUGGY]  cc.addValue( ": "  +  getSimpleName(key));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addValue( ": "  +  getSimpleName(key));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addValue( ": "  +  getSimpleName(key));	  cc.addValue(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
374	[BUG]  [BUGGY]  cc.addValue( ": ",  d);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addValue( ": ",  d);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addValue( ": ",  d);	  cc.addValue(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
375	[BUG]  [BUGGY]  Preconditions.checkState(childCount  >=  2);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Preconditions.checkState(childCount  >=  2);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Preconditions.checkState(childCount  >=  2);	  Preconditions.checkState(childCount    >=    0);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
376	[BUG]  [BUGGY]  n.addChildToFront(context,  getSimpleNumber(key));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.addChildToFront(context,  getSimpleNumber(key));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.addChildToFront(context,  getSimpleNumber(key));	  n.addChildToFront(context);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
377	[BUG]  [BUGGY]  append( ": ").append(getSimpleNumber(value));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  append( ": ").append(getSimpleNumber(value));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	append( ": ").append(getSimpleNumber(value));	  append(   ":   ").append(getSimpleNumber(d));    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
378	[BUG]  [BUGGY]  cc.addChildToFront(context  ==  Context.STATEMENT);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addChildToFront(context  ==  Context.STATEMENT);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addChildToFront(context  ==  Context.STATEMENT);	  cc.addChildToFront(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
379	[BUG]  [BUGGY]  cc.addChildToFront(context!=  Context.STATEMENT);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addChildToFront(context!=  Context.STATEMENT);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addChildToFront(context!=  Context.STATEMENT);	  cc.addChildToFront(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
380	[BUG]  [BUGGY]  cc.add(':'  +  getSimpleNumber(key));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add(':'  +  getSimpleNumber(key));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add(':'  +  getSimpleNumber(key));	  cc.add(   ":   "    +    getSimpleNumber(d));    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
381	[BUG]  [BUGGY]  cc.add( "[ "  +  getSimpleNumber(key));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( "[ "  +  getSimpleNumber(key));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( "[ "  +  getSimpleNumber(key));	  cc.add(   ":   "    +    getSimpleNumber(d));    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
382	[BUG]  [BUGGY]  n.removeChild(ce);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.removeChild(ce);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.removeChild(ce);	  n.removeChild(c);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
383	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  4);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Preconditions.checkState(childCount  ==  4);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Preconditions.checkState(childCount  ==  4);	  Preconditions.checkState(childCount    ==    1);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
384	[BUG]  [BUGGY]  Preconditions.checkState(childCount  <  1);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Preconditions.checkState(childCount  <  1);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Preconditions.checkState(childCount  <  1);	  Preconditions.checkState(childCount    ==    1);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
385	[BUG]  [BUGGY]  cc.addNumber( ": "  +  Double.isNaN(d));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addNumber( ": "  +  Double.isNaN(d));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addNumber( ": "  +  Double.isNaN(d));	  cc.addNumber(   ":   "    +    d);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
386	[BUG]  [BUGGY]  cc.add( ": "  +  c.getFirstChild(),  1);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "  +  c.getFirstChild(),  1);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "  +  c.getFirstChild(),  1);	  add(   ":   "    +    c.getFirstChild(),    1);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
387	[BUG]  [BUGGY]  add( ": "  +  n.getString());  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  add( ": "  +  n.getString());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	add( ": "  +  n.getString());	  add(   ":   "    +    n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
388	[BUG]  [BUGGY]  cc.addNumber( "n "  +  getSimpleNumber(key));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addNumber( "n "  +  getSimpleNumber(key));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addNumber( "n "  +  getSimpleNumber(key));	  cc.addNumber(   ":   "    +    getSimpleNumber(key));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
389	[BUG]  [BUGGY]  append( ": ").append(context  ==  Context.STATEMENT,  cc);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  append( ": ").append(context  ==  Context.STATEMENT,  cc);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	append( ": ").append(context  ==  Context.STATEMENT,  cc);	  append(   ":   ").append(context    ==    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
390	[BUG]  [BUGGY]  cc.add( ",   "  +  n.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ",   "  +  n.getFirstChild());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ",   "  +  n.getFirstChild());	  cc.add(   ":   "    +    n.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
391	[BUG]  [BUGGY]  cc.addLastChild();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addLastChild();  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addLastChild();	  addExpr(c.getLastChild(),    1);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
392	[BUG]  [BUGGY]  add( ": "  +  getSimpleNumber(d)/  1);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  add( ": "  +  getSimpleNumber(d)/  1);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	add( ": "  +  getSimpleNumber(d)/  1);	  add(   ":   "    +    getSimpleNumber(d)+    1);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
393	[BUG]  [BUGGY]  add( ": "  +  getSimpleNumber(d)+  'n');  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  add( ": "  +  getSimpleNumber(d)+  'n');  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	add( ": "  +  getSimpleNumber(d)+  'n');	  add(   ":   "    +    getSimpleNumber(d)+    1);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
394	[BUG]  [BUGGY]  n.addChildToBack(context.getCurrentNode());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.addChildToBack(context.getCurrentNode());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.addChildToBack(context.getCurrentNode());	  n.addChildToBack(c);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
395	[BUG]  [BUGGY]  n.addChildToBack(context.getRootContext());  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.addChildToBack(context.getRootContext());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.addChildToBack(context.getRootContext());	  n.addChildToBack(c);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
396	[BUG]  [BUGGY]  cc.add( ": "  +  getSimpleName(key),  d);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "  +  getSimpleName(key),  d);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "  +  getSimpleName(key),  d);	  cc.add(   ":   "    +    getSimpleName(key));    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
397	[BUG]  [BUGGY]  cc.add( ": "  +  getSimpleName(name));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "  +  getSimpleName(name));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "  +  getSimpleName(name));	  cc.add(   ":   "    +    getSimpleName(key));    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
398	[BUG]  [BUGGY]  add( ": "  +  getSimpleNumber(n),  cc);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  add( ": "  +  getSimpleNumber(n),  cc);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	add( ": "  +  getSimpleNumber(n),  cc);	  add(   ":   "    +    getSimpleNumber(n));    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
399	[BUG]  [BUGGY]  n.addChildrenToFront(c);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.addChildrenToFront(c);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.addChildrenToFront(c);	  n.addChildToFront(c);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
400	[BUG]  [BUGGY]  cc.add( ": ".equals(getString()  + ") ");  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": ".equals(getString()  + ") ");  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": ".equals(getString()  + ") ");	  cc.add(   ":   ".equals(getString()));    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
401	[BUG]  [BUGGY]  cc.add( ": "  +  Double.toString(p));  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "  +  Double.toString(p));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "  +  Double.toString(p));	  cc.add(   ":   "    +    Double.toString(d));    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
402	[BUG]  [BUGGY]  cc.add( ": "  +  Double.toString(c));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "  +  Double.toString(c));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "  +  Double.toString(c));	  cc.add(   ":   "    +    Double.toString(d));    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
403	[BUG]  [BUGGY]  cc.add( "null ");  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( "null ");  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( "null ");	  cc.addNumber(   "n   ");    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
404	[BUG]  [BUGGY]  cc.addNumber( "1 ");  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addNumber( "1 ");  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addNumber( "1 ");	  cc.addNumber(   "n   ");    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
405	[BUG]  [BUGGY]  n.replaceChild(c,  getContextForNoInOperator(context));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.replaceChild(c,  getContextForNoInOperator(context));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.replaceChild(c,  getContextForNoInOperator(context));	  n.replaceChild(c,    context);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
406	[BUG]  [BUGGY]  Preconditions.checkState(childCount  <  3);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Preconditions.checkState(childCount  <  3);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Preconditions.checkState(childCount  <  3);	  Preconditions.checkState(childCount    ==    3);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
407	[BUG]  [BUGGY]  n.add( "- "  +  c.getLastChild());  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.add( "- "  +  c.getLastChild());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.add( "- "  +  c.getLastChild());	  n.add(   ":   "    +    c.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
408	[BUG]  [BUGGY]  Context  c  =  getContextForNoInOperator();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Context  c  =  getContextForNoInOperator();  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Context  c  =  getContextForNoInOperator();	  Context    c    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
409	[BUG]  [BUGGY]  n.removeChild(key);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.removeChild(key);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.removeChild(key);	  n.removeChild(body);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
410	[BUG]  [BUGGY]  Context  c  =(context  ==  null)?  context.getCurrentContext()  :  context.getRootContext();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Context  c  =(context  ==  null)?  context.getCurrentContext()  :  context.getRootContext();  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Context  c  =(context  ==  null)?  context.getCurrentContext()  :  context.getRootContext();	  Context    c    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
411	[BUG]  [BUGGY]  Context  c  =(context  ==  null)?  context.getCurrentContext()  :  context.getRawContext();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Context  c  =(context  ==  null)?  context.getCurrentContext()  :  context.getRawContext();  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Context  c  =(context  ==  null)?  context.getCurrentContext()  :  context.getRawContext();	  Context    c    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
412	[BUG]  [BUGGY]  cc.add( ": ".equals(context.getNumber()));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": ".equals(context.getNumber()));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": ".equals(context.getNumber()));	  cc.add(   ":   ".equals(context.getCurrentNode()));    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
413	[BUG]  [BUGGY]  n.add( ": "  +  getSimpleName(key),  cc);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.add( ": "  +  getSimpleName(key),  cc);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.add( ": "  +  getSimpleName(key),  cc);	  n.add(   ":   "    +    getSimpleName(key));    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
414	[BUG]  [BUGGY]  n.add( ": "  +  getSimpleName(key),  context);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.add( ": "  +  getSimpleName(key),  context);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.add( ": "  +  getSimpleName(key),  context);	  n.add(   ":   "    +    getSimpleName(key));    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
415	[BUG]  [BUGGY]  append( ": ").append(context  ==  Context.OTHER  ||  context  ==  Context.IN_FOR_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  append( ": ").append(context  ==  Context.OTHER  ||  context  ==  Context.IN_FOR_INIT_CLAUSE);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	append( ": ").append(context  ==  Context.OTHER  ||  context  ==  Context.IN_FOR_INIT_CLAUSE);	  append(   ":   ").append(context    ==    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
416	[BUG]  [BUGGY]  append( ": ").append(context  ==  Context.OTHER,  cc);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  append( ": ").append(context  ==  Context.OTHER,  cc);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	append( ": ").append(context  ==  Context.OTHER,  cc);	  append(   ":   ").append(context    ==    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
417	[BUG]  [BUGGY]  append( ": ").append(context  ==  Context.OTHER  ||  context  ==  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  append( ": ").append(context  ==  Context.OTHER  ||  context  ==  Context.START_OF_EXPR);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	append( ": ").append(context  ==  Context.OTHER  ||  context  ==  Context.START_OF_EXPR);	  append(   ":   ").append(context    ==    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
418	[BUG]  [BUGGY]  n.add( ": "  +  getSimpleNumber(key),  cc);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.add( ": "  +  getSimpleNumber(key),  cc);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.add( ": "  +  getSimpleNumber(key),  cc);	  n.add(   ":   "    +    getSimpleNumber(key));    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
419	[BUG]  [BUGGY]  n.add( ": "  +  getSimpleNumber(key),  c);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.add( ": "  +  getSimpleNumber(key),  c);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.add( ": "  +  getSimpleNumber(key),  c);	  n.add(   ":   "    +    getSimpleNumber(key));    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
420	[BUG]  [BUGGY]  cc.addDecimal(d);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addDecimal(d);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addDecimal(d);	  cc.addNumber(d);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
421	[BUG]  [BUGGY]  cc.addPosition(d);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addPosition(d);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addPosition(d);	  cc.addNumber(d);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
422	[BUG]  [BUGGY]  add( ": "  +  getSimpleNumber(value),  cc);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  add( ": "  +  getSimpleNumber(value),  cc);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	add( ": "  +  getSimpleNumber(value),  cc);	  add(   ":   "    +    getSimpleNumber(value));    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
423	[BUG]  [BUGGY]  n.addChildToBack(context,  cc);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.addChildToBack(context,  cc);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.addChildToBack(context,  cc);	  n.addChildToBack(context);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
424	[BUG]  [BUGGY]  Preconditions.checkState(childCount  <=  2);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Preconditions.checkState(childCount  <=  2);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Preconditions.checkState(childCount  <=  2);	  Preconditions.checkState(childCount    <=    0);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
425	[BUG]  [BUGGY]  add( ": "  +  getSimpleNumber(c),  cc);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  add( ": "  +  getSimpleNumber(c),  cc);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	add( ": "  +  getSimpleNumber(c),  cc);	  add(   ":   "    +    getSimpleNumber(c));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
426	[BUG]  [BUGGY]  cc.add( "n "  +  c.getLastChild());  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( "n "  +  c.getLastChild());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( "n "  +  c.getLastChild());	  cc.add(   ":   "    +    c.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
427	[BUG]  [BUGGY]  cc.add( "- "  +  c.getLastChild());  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( "- "  +  c.getLastChild());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( "- "  +  c.getLastChild());	  cc.add(   ":   "    +    c.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
428	[BUG]  [BUGGY]  cc.addChildToFront(context,  body);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.addChildToFront(context,  body);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.addChildToFront(context,  body);	  cc.addChildToFront(body);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
429	[BUG]  [BUGGY]  n.add( ": "  +  key.getString());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.add( ": "  +  key.getString());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.add( ": "  +  key.getString());	  n.add(   ":   "    +    c.getString());    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
430	[BUG]  [BUGGY]  n.add( "[ "  +  c.getString());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.add( "[ "  +  c.getString());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.add( "[ "  +  c.getString());	  n.add(   ":   "    +    c.getString());    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
431	[BUG]  [BUGGY]  n.add( ": "  +  c.getOwnerCase());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.add( ": "  +  c.getOwnerCase());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.add( ": "  +  c.getOwnerCase());	  n.add(   ":   "    +    c.getLowerCase());    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
432	[BUG]  [BUGGY]  add( ": ", "n.getFirstChild());  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  add( ": ", "n.getFirstChild());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	add( ": ", "n.getFirstChild());	  add(   ":   ",    n.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
433	[BUG]  [BUGGY]  append( ": ").equals(context.getCurrentName());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  append( ": ").equals(context.getCurrentName());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	append( ": ").equals(context.getCurrentName());	  append(   ":   ".equals(context.getCurrentName()));    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
434	[BUG]  [BUGGY]  Context  c  =  createCurrentContext();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Context  c  =  createCurrentContext();  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Context  c  =  createCurrentContext();	  Context    c    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
435	[BUG]  [BUGGY]  Context  c  =  getCurrentContextForNoChild(context);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Context  c  =  getCurrentContextForNoChild(context);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Context  c  =  getCurrentContextForNoChild(context);	  Context    c    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
436	[BUG]  [BUGGY]  n.remove( ": ").replaceChild(c,  body);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.remove( ": ").replaceChild(c,  body);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.remove( ": ").replaceChild(c,  body);	  n.remove(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
437	[BUG]  [BUGGY]  n.remove( ": "+context.getJSDocInfo());  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.remove( ": "+context.getJSDocInfo());  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.remove( ": "+context.getJSDocInfo());	  n.remove(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
438	[BUG]  [BUGGY]  n.remove( ": "  +  getSimpleName(key));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.remove( ": "  +  getSimpleName(key));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.remove( ": "  +  getSimpleName(key));	  n.remove(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
439	[BUG]  [BUGGY]  n.setString( ": ");  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  n.setString( ": ");  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	n.setString( ": ");	  n.remove(   ":   ");    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
440	[BUG]  [BUGGY]  cc.add( ": "  +  double);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "  +  double);  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "  +  double);	  cc.add(   ":   "    +    d);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
441	[BUG]  [BUGGY]  cc.add( ": "  +  Double.isNaN(d));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  cc.add( ": "  +  Double.isNaN(d));  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	cc.add( ": "  +  Double.isNaN(d));	  cc.add(   ":   "    +    d);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
442	[BUG]  [BUGGY]  Node  body  =  n.getNext();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }      [BUGGY]  Node  body  =  n.getNext();  [BUGGY]      addExpr(c.getFirstChild(),  1);  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	Node  body  =  n.getNext();	  Node    body    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
