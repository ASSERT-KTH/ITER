bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  rhsContext  =  context.getCurrentContext();	  Context    rhsContext    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
2	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContextForCodeGenerator();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContextForCodeGenerator();  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  rhsContext  =  Context.getCurrentContextForCodeGenerator();	  Context    rhsContext    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
3	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext(l);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext(l);  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  rhsContext  =  Context.getCurrentContext(l);	  Context    rhsContext    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
4	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext(context);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext(context);  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  rhsContext  =  Context.getCurrentContext(context);	  Context    rhsContext    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
5	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContextInstance();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContextInstance();  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  rhsContext  =  Context.getCurrentContextInstance();	  Context    rhsContext    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
6	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext(s);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext(s);  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  rhsContext  =  Context.getCurrentContext(s);	  Context    rhsContext    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
7	[BUG]  [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
8	[BUG]  [BUGGY]  if(l  <=  NodeUtil.MIN_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <=  NodeUtil.MIN_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <=  NodeUtil.MIN_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
9	[BUG]  [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  ==  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  ==  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  ==  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
10	[BUG]  [BUGGY]  long  l  =  Integer.parseInt(s);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  long  l  =  Integer.parseInt(s);  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	long  l  =  Integer.parseInt(s);	  long    l    =    Double.parseDouble(s);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
11	[BUG]  [BUGGY]  int  l  =  Double.parseDouble(s);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  int  l  =  Double.parseDouble(s);  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	int  l  =  Double.parseDouble(s);	  long    l    =    Double.parseDouble(s);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
12	[BUG]  [BUGGY]  long  l  =  Double.parseDouble(s)+  1;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  long  l  =  Double.parseDouble(s)+  1;  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	long  l  =  Double.parseDouble(s)+  1;	  long    l    =    Double.parseDouble(s);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
13	[BUG]  [BUGGY]  long  l  =  Double.parseDouble(s).longValue();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  long  l  =  Double.parseDouble(s).longValue();  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	long  l  =  Double.parseDouble(s).longValue();	  long    l    =    Double.parseDouble(s);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
14	[BUG]  [BUGGY]  long  l  =  Byte.parseDouble(s);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  long  l  =  Byte.parseDouble(s);  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	long  l  =  Byte.parseDouble(s);	  long    l    =    Double.parseDouble(s);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
15	[BUG]  [BUGGY]  Long  l  =  Long.parseLong(s)+  1;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Long  l  =  Long.parseLong(s)+  1;  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Long  l  =  Long.parseLong(s)+  1;	  Long    l    =    Long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
16	[BUG]  [BUGGY]  Long  l  =  Long.parseLong(s  +  1);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Long  l  =  Long.parseLong(s  +  1);  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Long  l  =  Long.parseLong(s  +  1);	  Long    l    =    Long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
17	[BUG]  [BUGGY]  Long  l  =  Long.parseLong(s).longValue();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Long  l  =  Long.parseLong(s).longValue();  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Long  l  =  Long.parseLong(s).longValue();	  Long    l    =    Long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
18	[BUG]  [BUGGY]  Integer  l  =  Long.parseInt(s);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Integer  l  =  Long.parseInt(s);  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Integer  l  =  Long.parseInt(s);	  Long    l    =    Long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
19	[BUG]  [BUGGY]  Context  cc  =  context.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Context  cc  =  context.getCurrentContext();  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  cc  =  context.getCurrentContext();	  Context    cc    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
20	[BUG]  [BUGGY]  Context  cc  =  Context.getCurrentContext(s);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Context  cc  =  Context.getCurrentContext(s);  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  cc  =  Context.getCurrentContext(s);	  Context    cc    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
21	[BUG]  [BUGGY]  Context  cc  =  Context.getCurrentContext(l);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Context  cc  =  Context.getCurrentContext(l);  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  cc  =  Context.getCurrentContext(l);	  Context    cc    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
22	[BUG]  [BUGGY]  Context  cc  =  Context.getCurrentContext(context);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Context  cc  =  Context.getCurrentContext(context);  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  cc  =  Context.getCurrentContext(context);	  Context    cc    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
23	[BUG]  [BUGGY]  Context  cc  =  Context.currentContext();  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Context  cc  =  Context.currentContext();  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  cc  =  Context.currentContext();	  Context    cc    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
24	[BUG]  [BUGGY]  Context  cc  =  Context.getCurrentContextInstance();  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Context  cc  =  Context.getCurrentContextInstance();  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  cc  =  Context.getCurrentContextInstance();	  Context    cc    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
25	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Context  cc  =  getCurrentContext().getCurrentContext();  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  cc  =  getCurrentContext().getCurrentContext();	  Context    cc    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
26	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext(s);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Context  cc  =  getCurrentContext(s);  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  cc  =  getCurrentContext(s);	  Context    cc    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
27	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextInstance();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Context  cc  =  getCurrentContextInstance();  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  cc  =  getCurrentContextInstance();	  Context    cc    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
28	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().getSimpleNumber();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Context  cc  =  getCurrentContext().getSimpleNumber();  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  cc  =  getCurrentContext().getSimpleNumber();	  Context    cc    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
29	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextInput();  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Context  cc  =  getCurrentContextInput();  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  cc  =  getCurrentContextInput();	  Context    cc    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
30	[BUG]  [BUGGY]  if(l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  ==  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  ==  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  ==  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    ==    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    ==    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
31	[BUG]  [BUGGY]  if(l!=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  ==  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l!=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  ==  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l!=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  ==  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    ==    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    ==    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
32	[BUG]  [BUGGY]  if(l  ==  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l!=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  ==  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l!=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  ==  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l!=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    ==    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    ==    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
33	[BUG]  [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_INT_NUMBER  ||  l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_INT_NUMBER  ||  l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <=  NodeUtil.MAX_POSITIVE_INT_NUMBER  ||  l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_INT_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
34	[BUG]  [BUGGY]  if(l  <=  NodeUtil.MIN_POSITIVE_INT_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <=  NodeUtil.MIN_POSITIVE_INT_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <=  NodeUtil.MIN_POSITIVE_INT_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_INT_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
35	[BUG]  [BUGGY]  if(l  >=  NodeUtil.MAX_POSITIVE_INT_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  >=  NodeUtil.MAX_POSITIVE_INT_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  >=  NodeUtil.MAX_POSITIVE_INT_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_INT_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
36	[BUG]  [BUGGY]  if(l  <  NodeUtil.MIN_POSITIVE_INT_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <  NodeUtil.MIN_POSITIVE_INT_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  NodeUtil.MIN_POSITIVE_INT_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_INT_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
37	[BUG]  [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_INIT_CLAUSE  ||  l  >  NodeUtil.MAX_POSITIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_INIT_CLAUSE  ||  l  >  NodeUtil.MAX_POSITIVE_INIT_CLAUSE)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <=  NodeUtil.MAX_POSITIVE_INIT_CLAUSE  ||  l  >  NodeUtil.MAX_POSITIVE_INIT_CLAUSE)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
38	[BUG]  [BUGGY]  if(l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INIT_CLAUSE)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INIT_CLAUSE)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
39	[BUG]  [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_INIT_CLAUSE  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_INIT_CLAUSE  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <=  NodeUtil.MAX_POSITIVE_INIT_CLAUSE  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
40	[BUG]  [BUGGY]  if(l  <  NodeUtil.MAX_POSITIVE_INIT_CLAUSE  ||  l  >  NodeUtil.MAX_POSITIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <  NodeUtil.MAX_POSITIVE_INIT_CLAUSE  ||  l  >  NodeUtil.MAX_POSITIVE_INIT_CLAUSE)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  NodeUtil.MAX_POSITIVE_INIT_CLAUSE  ||  l  >  NodeUtil.MAX_POSITIVE_INIT_CLAUSE)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
41	[BUG]  [BUGGY]  if(l  <  NodeUtil.MAX_POSITIVE_INIT_CLAUSE  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <  NodeUtil.MAX_POSITIVE_INIT_CLAUSE  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  NodeUtil.MAX_POSITIVE_INIT_CLAUSE  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
42	[BUG]  [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_INT_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_INT_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INIT_CLAUSE)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <=  NodeUtil.MAX_POSITIVE_INT_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INIT_CLAUSE)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
43	[BUG]  [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_LENGTH_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LENGTH_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_LENGTH_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LENGTH_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <=  NodeUtil.MAX_POSITIVE_LENGTH_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LENGTH_NUMBER)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_LENGTH_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
44	[BUG]  [BUGGY]  if(l  <  NodeUtil.MAX_POSITIVE_LENGTH_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LENGTH_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <  NodeUtil.MAX_POSITIVE_LENGTH_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LENGTH_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  NodeUtil.MAX_POSITIVE_LENGTH_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LENGTH_NUMBER)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_LENGTH_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
45	[BUG]  [BUGGY]  if(l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LENGTH_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LENGTH_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LENGTH_NUMBER)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_LENGTH_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
46	[BUG]  [BUGGY]  if(l  <=  NodeUtil.MIN_POSITIVE_LENGTH_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LENGTH_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <=  NodeUtil.MIN_POSITIVE_LENGTH_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LENGTH_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <=  NodeUtil.MIN_POSITIVE_LENGTH_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LENGTH_NUMBER)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_LENGTH_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
47	[BUG]  [BUGGY]  if(l  <=  NodeUtil.MAX_LENGTH_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LENGTH_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <=  NodeUtil.MAX_LENGTH_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LENGTH_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <=  NodeUtil.MAX_LENGTH_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LENGTH_NUMBER)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_LENGTH_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
48	[BUG]  [BUGGY]  if(l  <  NodeUtil.MIN_POSITIVE_LENGTH_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LENGTH_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <  NodeUtil.MIN_POSITIVE_LENGTH_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LENGTH_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  NodeUtil.MIN_POSITIVE_LENGTH_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LENGTH_NUMBER)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_LENGTH_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
49	[BUG]  [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l!=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l!=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l!=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    ==    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
50	[BUG]  [BUGGY]  if(l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    ==    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
51	[BUG]  [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >>  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >>  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >>  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    ==    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
52	[BUG]  [BUGGY]  if(l  <  NodeUtil.MAX_POSITIVE_INT_NUMBER  ||  l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <  NodeUtil.MAX_POSITIVE_INT_NUMBER  ||  l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  NodeUtil.MAX_POSITIVE_INT_NUMBER  ||  l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <    NodeUtil.MAX_POSITIVE_INT_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
53	[BUG]  [BUGGY]  if(l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <    NodeUtil.MAX_POSITIVE_INT_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
54	[BUG]  [BUGGY]  double  l  =  Long.parseLong(s)+  1;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  double  l  =  Long.parseLong(s)+  1;  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	double  l  =  Long.parseLong(s)+  1;	  double    l    =    Long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
55	[BUG]  [BUGGY]  double  l  =  Integer.parseInt(s);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  double  l  =  Integer.parseInt(s);  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	double  l  =  Integer.parseInt(s);	  double    l    =    Long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
56	[BUG]  [BUGGY]  int  l  =  Long.parseLong(s);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  int  l  =  Long.parseLong(s);  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	int  l  =  Long.parseLong(s);	  double    l    =    Long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
57	[BUG]  [BUGGY]  if(l  ==  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  ==  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  ==  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    >=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
58	[BUG]  [BUGGY]  if(l!=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l!=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l!=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    >=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
59	[BUG]  [BUGGY]  if(l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    >=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
60	[BUG]  [BUGGY]  if(l  <  NodeUtil.MIN_POSITIVE_INTEGER_NUMBER  ||  l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <  NodeUtil.MIN_POSITIVE_INTEGER_NUMBER  ||  l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  NodeUtil.MIN_POSITIVE_INTEGER_NUMBER  ||  l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <    NodeUtil.MIN_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
61	[BUG]  [BUGGY]  if(l  <  NodeUtil.MIN_POSITIVE_INTEGER_NUMBER  ||  l  ==  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <  NodeUtil.MIN_POSITIVE_INTEGER_NUMBER  ||  l  ==  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  NodeUtil.MIN_POSITIVE_INTEGER_NUMBER  ||  l  ==  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <    NodeUtil.MIN_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
62	[BUG]  [BUGGY]  if(l  >=  NodeUtil.MIN_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  >=  NodeUtil.MIN_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  >=  NodeUtil.MIN_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <    NodeUtil.MIN_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
63	[BUG]  [BUGGY]  if(l  >  NodeUtil.MIN_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  >  NodeUtil.MIN_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  >  NodeUtil.MIN_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <    NodeUtil.MIN_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
64	[BUG]  [BUGGY]  if(l  <  nodeUtil.MIN_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <  nodeUtil.MIN_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  nodeUtil.MIN_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <    NodeUtil.MIN_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
65	[BUG]  [BUGGY]  if(l  <  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_NUMBER)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
66	[BUG]  [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <=  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_NUMBER)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
67	[BUG]  [BUGGY]  if(l  <  NodeUtil.MAX_POSITIVE_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <  NodeUtil.MAX_POSITIVE_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  NodeUtil.MAX_POSITIVE_NUMBER)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
68	[BUG]  [BUGGY]  if(l  >=  NodeUtil.MAX_POSITIVE_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  >=  NodeUtil.MAX_POSITIVE_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  >=  NodeUtil.MAX_POSITIVE_NUMBER)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
69	[BUG]  [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >=  NodeUtil.MAX_POSITIVE_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >=  NodeUtil.MAX_POSITIVE_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <=  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >=  NodeUtil.MAX_POSITIVE_NUMBER)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
70	[BUG]  [BUGGY]  if(l  <  NodeUtil.MAX_POSITIVE_INT_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <  NodeUtil.MAX_POSITIVE_INT_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  NodeUtil.MAX_POSITIVE_INT_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {	  if(l    <    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INT_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
71	[BUG]  [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_INT_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_INT_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <=  NodeUtil.MAX_POSITIVE_INT_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {	  if(l    <    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INT_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
72	[BUG]  [BUGGY]  if(l  <  NodeUtil.MIN_POSITIVE_INT_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <  NodeUtil.MIN_POSITIVE_INT_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  NodeUtil.MIN_POSITIVE_INT_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {	  if(l    <    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INT_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
73	[BUG]  [BUGGY]  if(l  <  NodeUtil.MIN_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <  NodeUtil.MIN_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  NodeUtil.MIN_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {	  if(l    <    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INT_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
74	[BUG]  [BUGGY]  if(l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {	  if(l    <    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INT_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
75	[BUG]  [BUGGY]  if(l  >  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  >  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  >  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    >    NodeUtil.MAX_POSITIVE_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
76	[BUG]  [BUGGY]  if(l  ==  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  ==  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  ==  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    >    NodeUtil.MAX_POSITIVE_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
77	[BUG]  [BUGGY]  if(l!=  NodeUtil.MAX_POSITIVE_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l!=  NodeUtil.MAX_POSITIVE_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l!=  NodeUtil.MAX_POSITIVE_NUMBER)  {	  if(l    ==    NodeUtil.MAX_POSITIVE_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
78	[BUG]  [BUGGY]  if(l  >  NodeUtil.MAX_POSITIVE_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  >  NodeUtil.MAX_POSITIVE_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  >  NodeUtil.MAX_POSITIVE_NUMBER)  {	  if(l    ==    NodeUtil.MAX_POSITIVE_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
79	[BUG]  [BUGGY]  if(l  ==  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  ==  NodeUtil.MAX_POSITIVE_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  ==  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  ==  NodeUtil.MAX_POSITIVE_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  ==  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  ==  NodeUtil.MAX_POSITIVE_NUMBER)  {	  if(l    ==    NodeUtil.MAX_POSITIVE_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
80	[BUG]  [BUGGY]  if(l!=  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  ==  NodeUtil.MAX_POSITIVE_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l!=  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  ==  NodeUtil.MAX_POSITIVE_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l!=  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  ==  NodeUtil.MAX_POSITIVE_NUMBER)  {	  if(l    ==    NodeUtil.MAX_POSITIVE_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
81	[BUG]  [BUGGY]  Context  rhsContext  =  getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Context  rhsContext  =  getCurrentContext();  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  rhsContext  =  getCurrentContext();	  Context    rhsContext    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
82	[BUG]  [BUGGY]  Context  rhsContext  =  getRhsContext();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Context  rhsContext  =  getRhsContext();  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  rhsContext  =  getRhsContext();	  Context    rhsContext    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
83	[BUG]  [BUGGY]  Context  rhsContext  =  getStatementContext();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Context  rhsContext  =  getStatementContext();  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  rhsContext  =  getStatementContext();	  Context    rhsContext    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
84	[BUG]  [BUGGY]  Context  rhsContext  =  getScope();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Context  rhsContext  =  getScope();  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  rhsContext  =  getScope();	  Context    rhsContext    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
85	[BUG]  [BUGGY]  Context  rhsContext  =  getContextForCodeGenerator();  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Context  rhsContext  =  getContextForCodeGenerator();  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  rhsContext  =  getContextForCodeGenerator();	  Context    rhsContext    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
86	[BUG]  [BUGGY]  Context  rhsContext  =  getContextInput();  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Context  rhsContext  =  getContextInput();  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  rhsContext  =  getContextInput();	  Context    rhsContext    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
87	[BUG]  [BUGGY]  if(l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    >=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
88	[BUG]  [BUGGY]  Context  cc  =  getContext().getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Context  cc  =  getContext().getCurrentContext();  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  cc  =  getContext().getCurrentContext();	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
89	[BUG]  [BUGGY]  Context  cc  =  getContext().getCurrentStructure();  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Context  cc  =  getContext().getCurrentStructure();  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  cc  =  getContext().getCurrentStructure();	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
90	[BUG]  [BUGGY]  Context  cc  =  getContext().getCurrentToken();  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Context  cc  =  getContext().getCurrentToken();  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  cc  =  getContext().getCurrentToken();	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
91	[BUG]  [BUGGY]  Context  cc  =  getContext(context);  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Context  cc  =  getContext(context);  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  cc  =  getContext(context);	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
92	[BUG]  [BUGGY]  Context  cc  =  getContextInput();  [CE]  illegal  start  of  expression  [FE]                                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Context  cc  =  getContextInput();  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  cc  =  getContextInput();	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
93	[BUG]  [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <=  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <    NodeUtil.MAX_POSITIVE_NUMBER    ||    l    >=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
94	[BUG]  [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >>  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >>  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <=  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >>  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <    NodeUtil.MAX_POSITIVE_NUMBER    ||    l    >=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
95	[BUG]  [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_NUMBER  ||  l!=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_NUMBER  ||  l!=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <=  NodeUtil.MAX_POSITIVE_NUMBER  ||  l!=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <    NodeUtil.MAX_POSITIVE_NUMBER    ||    l    >=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
96	[BUG]  [BUGGY]  if(l  >=  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  >=  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  >=  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <    NodeUtil.MAX_POSITIVE_NUMBER    ||    l    >=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
97	[BUG]  [BUGGY]  l  =  Integer.parseInt(s);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  l  =  Integer.parseInt(s);  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	l  =  Integer.parseInt(s);	  l    =    long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
98	[BUG]  [BUGGY]  l  =  long.parseLong(s)+  1;  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  l  =  long.parseLong(s)+  1;  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	l  =  long.parseLong(s)+  1;	  l    =    long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
99	[BUG]  [BUGGY]  l  =  lang.parseLong(s);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  l  =  lang.parseLong(s);  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	l  =  lang.parseLong(s);	  l    =    long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
100	[BUG]  [BUGGY]  if(l  ==  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  ==  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  ==  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {	  if(l!=    NodeUtil.MAX_POSITIVE_INT_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
101	[BUG]  [BUGGY]  if(l  >=  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  >=  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  >=  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {	  if(l!=    NodeUtil.MAX_POSITIVE_INT_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
102	[BUG]  [BUGGY]  if(l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {	  if(l!=    NodeUtil.MAX_POSITIVE_INT_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
103	[BUG]  [BUGGY]  if(l  >>  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  >>  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  >>  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {	  if(l!=    NodeUtil.MAX_POSITIVE_INT_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
104	[BUG]  [BUGGY]  if(l  <  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {	  if(l!=    NodeUtil.MAX_POSITIVE_INT_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
105	[BUG]  [BUGGY]  if(l  <=  NodeUtil.MIN_POSITIVE_INT_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <=  NodeUtil.MIN_POSITIVE_INT_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <=  NodeUtil.MIN_POSITIVE_INT_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INT_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
106	[BUG]  [BUGGY]  if(l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INT_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
107	[BUG]  [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >=  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >=  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >=  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INT_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
108	[BUG]  [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_INT_NUMBER  ||  l  >=  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_INT_NUMBER  ||  l  >=  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <=  NodeUtil.MAX_POSITIVE_INT_NUMBER  ||  l  >=  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_INT_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
109	[BUG]  [BUGGY]  if(l  >=  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  >=  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  >=  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    >=    NodeUtil.MAX_POSITIVE_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
110	[BUG]  [BUGGY]  if(l!=  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l!=  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l!=  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    >=    NodeUtil.MAX_POSITIVE_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
111	[BUG]  [BUGGY]  if(l  <=  NodeUtil.MIN_VALUE  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <=  NodeUtil.MIN_VALUE  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <=  NodeUtil.MIN_VALUE  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <    NodeUtil.MIN_VALUE    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
112	[BUG]  [BUGGY]  if(l  <  NodeUtil.MIN_VALUE  ||  l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <  NodeUtil.MIN_VALUE  ||  l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  NodeUtil.MIN_VALUE  ||  l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <    NodeUtil.MIN_VALUE    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
113	[BUG]  [BUGGY]  if(l  >=  NodeUtil.MIN_VALUE  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  >=  NodeUtil.MIN_VALUE  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  >=  NodeUtil.MIN_VALUE  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <    NodeUtil.MIN_VALUE    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
114	[BUG]  [BUGGY]  if(l  <  NodeUtil.MIN_VALUE  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <  NodeUtil.MIN_VALUE  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  NodeUtil.MIN_VALUE  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {	  if(l    <    NodeUtil.MIN_VALUE    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
115	[BUG]  [BUGGY]  if(l  <  nodeUtil.MIN_VALUE  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <  nodeUtil.MIN_VALUE  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  nodeUtil.MIN_VALUE  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <    NodeUtil.MIN_VALUE    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
116	[BUG]  [BUGGY]  if(l  >  NodeUtil.MIN_VALUE  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  >  NodeUtil.MIN_VALUE  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  >  NodeUtil.MIN_VALUE  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <    NodeUtil.MIN_VALUE    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
117	[BUG]  [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <=  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {	  if(l    <    NodeUtil.MAX_POSITIVE_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INT_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
118	[BUG]  [BUGGY]  if(l  <  NodeUtil.MIN_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <  NodeUtil.MIN_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  NodeUtil.MIN_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {	  if(l    <    NodeUtil.MAX_POSITIVE_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INT_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
119	[BUG]  [BUGGY]  if(l  <  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >=  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >=  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >=  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {	  if(l    <    NodeUtil.MAX_POSITIVE_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INT_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
120	[BUG]  [BUGGY]  if(l  >  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  >  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  >  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {	  if(l    <    NodeUtil.MAX_POSITIVE_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INT_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
121	[BUG]  [BUGGY]  if(l  >=  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  >=  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  >=  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {	  if(l    <    NodeUtil.MAX_POSITIVE_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INT_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
122	[BUG]  [BUGGY]  if(l  <=  NodeUtil.MIN_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <=  NodeUtil.MIN_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <=  NodeUtil.MIN_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <    NodeUtil.MIN_POSITIVE_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
123	[BUG]  [BUGGY]  if(l  <  NodeUtil.MIN_POSITIVE_NUMBER  ||  l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <  NodeUtil.MIN_POSITIVE_NUMBER  ||  l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  NodeUtil.MIN_POSITIVE_NUMBER  ||  l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <    NodeUtil.MIN_POSITIVE_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
124	[BUG]  [BUGGY]  if(l  >=  NodeUtil.MIN_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  >=  NodeUtil.MIN_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  >=  NodeUtil.MIN_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <    NodeUtil.MIN_POSITIVE_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
125	[BUG]  [BUGGY]  if(l  <  NodeUtil.MIN_POSITIVE_NUMBER  ||  l  ==  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <  NodeUtil.MIN_POSITIVE_NUMBER  ||  l  ==  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  NodeUtil.MIN_POSITIVE_NUMBER  ||  l  ==  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <    NodeUtil.MIN_POSITIVE_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
126	[BUG]  [BUGGY]  if(l  >  NodeUtil.MIN_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  >  NodeUtil.MIN_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  >  NodeUtil.MIN_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <    NodeUtil.MIN_POSITIVE_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
127	[BUG]  [BUGGY]  if(l  <  nodeUtil.MIN_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <  nodeUtil.MIN_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  nodeUtil.MIN_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <    NodeUtil.MIN_POSITIVE_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
128	[BUG]  [BUGGY]  if(l  >=  NodeUtil.MAX_POSITIVE_INT_NUMBER  ||  l!=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  >=  NodeUtil.MAX_POSITIVE_INT_NUMBER  ||  l!=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  >=  NodeUtil.MAX_POSITIVE_INT_NUMBER  ||  l!=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l!=    NodeUtil.MAX_POSITIVE_INT_NUMBER    ||    l!=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
129	[BUG]  [BUGGY]  if(l  ==  NodeUtil.MAX_POSITIVE_INT_NUMBER  ||  l!=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  ==  NodeUtil.MAX_POSITIVE_INT_NUMBER  ||  l!=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  ==  NodeUtil.MAX_POSITIVE_INT_NUMBER  ||  l!=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l!=    NodeUtil.MAX_POSITIVE_INT_NUMBER    ||    l!=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
130	[BUG]  [BUGGY]  if(l!=  NodeUtil.MAX_POSITIVE_INT_NUMBER  ||  l  ==  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l!=  NodeUtil.MAX_POSITIVE_INT_NUMBER  ||  l  ==  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l!=  NodeUtil.MAX_POSITIVE_INT_NUMBER  ||  l  ==  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l!=    NodeUtil.MAX_POSITIVE_INT_NUMBER    ||    l!=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
131	[BUG]  [BUGGY]  if(l  >=  NodeUtil.MAX_POSITIVE_INT_NUMBER  ||  l  ==  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  >=  NodeUtil.MAX_POSITIVE_INT_NUMBER  ||  l  ==  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  >=  NodeUtil.MAX_POSITIVE_INT_NUMBER  ||  l  ==  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l!=    NodeUtil.MAX_POSITIVE_INT_NUMBER    ||    l!=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
132	[BUG]  [BUGGY]  if(l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l!=  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l!=  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l!=  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {	  if(l!=    NodeUtil.MAX_POSITIVE_INT_NUMBER    ||    l!=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
133	[BUG]  [BUGGY]  Long  l  =  Integer.parseInt(s);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Long  l  =  Integer.parseInt(s);  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Long  l  =  Integer.parseInt(s);	  int    l    =    Integer.parseInt(s);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
134	[BUG]  [BUGGY]  float  l  =  Integer.parseInt(s);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  float  l  =  Integer.parseInt(s);  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	float  l  =  Integer.parseInt(s);	  int    l    =    Integer.parseInt(s);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
135	[BUG]  [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  ==  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  ==  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <=  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  ==  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
136	[BUG]  [BUGGY]  if(l  <=  NodeUtil.MAX_LONG  ||  l  >  NodeUtil.MAX_LONG)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <=  NodeUtil.MAX_LONG  ||  l  >  NodeUtil.MAX_LONG)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <=  NodeUtil.MAX_LONG  ||  l  >  NodeUtil.MAX_LONG)  {	  if(l    <    NodeUtil.MAX_LONG    ||    l    >    NodeUtil.MAX_LONG)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
137	[BUG]  [BUGGY]  if(l  <  NodeUtil.MIN_LONG  ||  l  >  NodeUtil.MAX_LONG)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <  NodeUtil.MIN_LONG  ||  l  >  NodeUtil.MAX_LONG)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  NodeUtil.MIN_LONG  ||  l  >  NodeUtil.MAX_LONG)  {	  if(l    <    NodeUtil.MAX_LONG    ||    l    >    NodeUtil.MAX_LONG)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
138	[BUG]  [BUGGY]  if(l  <  NodeUtil.MAX_LONG  ||  l  >=  NodeUtil.MAX_LONG)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <  NodeUtil.MAX_LONG  ||  l  >=  NodeUtil.MAX_LONG)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  NodeUtil.MAX_LONG  ||  l  >=  NodeUtil.MAX_LONG)  {	  if(l    <    NodeUtil.MAX_LONG    ||    l    >    NodeUtil.MAX_LONG)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
139	[BUG]  [BUGGY]  if(l  >=  NodeUtil.MAX_LONG  ||  l  >  NodeUtil.MAX_LONG)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  >=  NodeUtil.MAX_LONG  ||  l  >  NodeUtil.MAX_LONG)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  >=  NodeUtil.MAX_LONG  ||  l  >  NodeUtil.MAX_LONG)  {	  if(l    <    NodeUtil.MAX_LONG    ||    l    >    NodeUtil.MAX_LONG)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
140	[BUG]  [BUGGY]  if(l  >  NodeUtil.MAX_LONG  ||  l  >  NodeUtil.MAX_LONG)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  >  NodeUtil.MAX_LONG  ||  l  >  NodeUtil.MAX_LONG)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  >  NodeUtil.MAX_LONG  ||  l  >  NodeUtil.MAX_LONG)  {	  if(l    <    NodeUtil.MAX_LONG    ||    l    >    NodeUtil.MAX_LONG)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
141	[BUG]  [BUGGY]  if(l  <  NodeUtil.MAX_LONG  ||  l  ==  NodeUtil.MAX_LONG)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <  NodeUtil.MAX_LONG  ||  l  ==  NodeUtil.MAX_LONG)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  NodeUtil.MAX_LONG  ||  l  ==  NodeUtil.MAX_LONG)  {	  if(l    <    NodeUtil.MAX_LONG    ||    l    >    NodeUtil.MAX_LONG)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
142	[BUG]  [BUGGY]  l  =  Long.parseLong(s)+  1;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  l  =  Long.parseLong(s)+  1;  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	l  =  Long.parseLong(s)+  1;	  l    =    Long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
143	[BUG]  [BUGGY]  l  =  Long.parseLong(s  +  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  l  =  Long.parseLong(s  +  1);  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	l  =  Long.parseLong(s  +  1);	  l    =    Long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
144	[BUG]  [BUGGY]  l  =  Long.parseLong(s).longValue();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  l  =  Long.parseLong(s).longValue();  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	l  =  Long.parseLong(s).longValue();	  l    =    Long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
145	[BUG]  [BUGGY]  if(l  <=  NodeUtil.MAX_PREFIX  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <=  NodeUtil.MAX_PREFIX  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <=  NodeUtil.MAX_PREFIX  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <    NodeUtil.MAX_PREFIX    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
146	[BUG]  [BUGGY]  if(l  <  NodeUtil.MIN_PREFIX  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <  NodeUtil.MIN_PREFIX  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  NodeUtil.MIN_PREFIX  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <    NodeUtil.MAX_PREFIX    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
147	[BUG]  [BUGGY]  if(l  <  NodeUtil.MAX_PREFIX  ||  l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <  NodeUtil.MAX_PREFIX  ||  l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  NodeUtil.MAX_PREFIX  ||  l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <    NodeUtil.MAX_PREFIX    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
148	[BUG]  [BUGGY]  if(l  >  NodeUtil.MAX_PREFIX  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  >  NodeUtil.MAX_PREFIX  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  >  NodeUtil.MAX_PREFIX  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <    NodeUtil.MAX_PREFIX    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
149	[BUG]  [BUGGY]  if(l  <  NodeUtil.MAX_PREFIX  ||  l  ==  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <  NodeUtil.MAX_PREFIX  ||  l  ==  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  NodeUtil.MAX_PREFIX  ||  l  ==  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <    NodeUtil.MAX_PREFIX    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
150	[BUG]  [BUGGY]  if(l  >=  NodeUtil.MAX_PREFIX  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  >=  NodeUtil.MAX_PREFIX  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  >=  NodeUtil.MAX_PREFIX  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <    NodeUtil.MAX_PREFIX    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
151	[BUG]  [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_LONG_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LONG_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_LONG_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LONG_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <=  NodeUtil.MAX_POSITIVE_LONG_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LONG_NUMBER)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_LONG_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
152	[BUG]  [BUGGY]  if(l  <  NodeUtil.MAX_POSITIVE_LONG_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LONG_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <  NodeUtil.MAX_POSITIVE_LONG_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LONG_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  NodeUtil.MAX_POSITIVE_LONG_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LONG_NUMBER)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_LONG_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
153	[BUG]  [BUGGY]  if(l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LONG_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LONG_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LONG_NUMBER)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_LONG_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
154	[BUG]  [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_LONG_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_LONG_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <=  NodeUtil.MAX_POSITIVE_LONG_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_LONG_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
155	[BUG]  [BUGGY]  if(l  <=  NodeUtil.MIN_POSITIVE_LONG_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LONG_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <=  NodeUtil.MIN_POSITIVE_LONG_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LONG_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <=  NodeUtil.MIN_POSITIVE_LONG_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LONG_NUMBER)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_LONG_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
156	[BUG]  [BUGGY]  if(l  <  NodeUtil.MIN_POSITIVE_LONG_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LONG_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <  NodeUtil.MIN_POSITIVE_LONG_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LONG_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  NodeUtil.MIN_POSITIVE_LONG_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LONG_NUMBER)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_LONG_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
157	[BUG]  [BUGGY]  l  =  Double.parseDouble(s).longValue();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  l  =  Double.parseDouble(s).longValue();  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	l  =  Double.parseDouble(s).longValue();	  l    =    Double.parseDouble(s);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
158	[BUG]  [BUGGY]  l  =  Double.parseDouble(s)+  1;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  l  =  Double.parseDouble(s)+  1;  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	l  =  Double.parseDouble(s)+  1;	  l    =    Double.parseDouble(s);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
159	[BUG]  [BUGGY]  long  l  =  Long.parseLong(s)+  1;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  long  l  =  Long.parseLong(s)+  1;  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	long  l  =  Long.parseLong(s)+  1;	  long    l    =    Long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
160	[BUG]  [BUGGY]  long  l  =  Long.parseLong(s  +  1);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  long  l  =  Long.parseLong(s  +  1);  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	long  l  =  Long.parseLong(s  +  1);	  long    l    =    Long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
161	[BUG]  [BUGGY]  long  l  =  Long.parseLong(s).longValue();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  long  l  =  Long.parseLong(s).longValue();  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	long  l  =  Long.parseLong(s).longValue();	  long    l    =    Long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
162	[BUG]  [BUGGY]  long  l  =  Long.parseLong(s)+  2;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  long  l  =  Long.parseLong(s)+  2;  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	long  l  =  Long.parseLong(s)+  2;	  long    l    =    Long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
163	[BUG]  [BUGGY]  long  l  =  Long.parseDouble(s);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  long  l  =  Long.parseDouble(s);  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	long  l  =  Long.parseDouble(s);	  long    l    =    Double.parseDouble(s);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
164	[BUG]  [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LONG_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LONG_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <=  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LONG_NUMBER)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_LONG_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
165	[BUG]  [BUGGY]  if(l  >=  NodeUtil.MAX_POSITIVE_LONG_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LONG_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  >=  NodeUtil.MAX_POSITIVE_LONG_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LONG_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  >=  NodeUtil.MAX_POSITIVE_LONG_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LONG_NUMBER)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_LONG_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
166	[BUG]  [BUGGY]  if(l!=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l!=  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l!=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l!=  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l!=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l!=  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {	  if(l!=    NodeUtil.MAX_POSITIVE_INT_NUMBER    ||    l!=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
167	[BUG]  [BUGGY]  long  l  =  Long.parseLong(s)-  1;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  long  l  =  Long.parseLong(s)-  1;  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	long  l  =  Long.parseLong(s)-  1;	  long    l    =    Long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
168	[BUG]  [BUGGY]  if(l  >=  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  ==  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  >=  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  ==  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  >=  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  ==  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    >=    NodeUtil.MAX_POSITIVE_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
169	[BUG]  [BUGGY]  if(l  <  NodeUtil.MIN_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTENT_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <  NodeUtil.MIN_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTENT_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  NodeUtil.MIN_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTENT_NUMBER)  {	  if(l    <    NodeUtil.MIN_POSITIVE_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
170	[BUG]  [BUGGY]  if(l  <  NodeUtil.MIN_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LONG_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <  NodeUtil.MIN_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LONG_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  NodeUtil.MIN_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LONG_NUMBER)  {	  if(l    <    NodeUtil.MIN_POSITIVE_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
171	[BUG]  [BUGGY]  l  =  long.parseDouble(s);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  l  =  long.parseDouble(s);  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	l  =  long.parseDouble(s);	  l    =    long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
172	[BUG]  [BUGGY]  l  =  Double.parseDouble(s)+  Long.parseLong(s);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  l  =  Double.parseDouble(s)+  Long.parseLong(s);  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	l  =  Double.parseDouble(s)+  Long.parseLong(s);	  l    =    Double.parseDouble(s);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
173	[BUG]  [BUGGY]  l  =  Double.parseDouble(s  +  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  l  =  Double.parseDouble(s  +  1);  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	l  =  Double.parseDouble(s  +  1);	  l    =    Double.parseDouble(s);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
174	[BUG]  [BUGGY]  if(l  <  NodeUtil.MIN_VALUE  ||  l  >  NodeUtil.MAX_POSITIVE_LONG_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <  NodeUtil.MIN_VALUE  ||  l  >  NodeUtil.MAX_POSITIVE_LONG_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  NodeUtil.MIN_VALUE  ||  l  >  NodeUtil.MAX_POSITIVE_LONG_NUMBER)  {	  if(l    <    NodeUtil.MIN_VALUE    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
175	[BUG]  [BUGGY]  if(l  <  NodeUtil.MIN_VALUE  ||  l  >  NodeUtil.MAX_POSITIVE_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <  NodeUtil.MIN_VALUE  ||  l  >  NodeUtil.MAX_POSITIVE_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  NodeUtil.MIN_VALUE  ||  l  >  NodeUtil.MAX_POSITIVE_NUMBER)  {	  if(l    <    NodeUtil.MIN_VALUE    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
176	[BUG]  [BUGGY]  if(l  <  NodeUtil.MIN_VALUE  ||  l  >  NodeUtil.MAX_POSITIVE_BLOCK)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <  NodeUtil.MIN_VALUE  ||  l  >  NodeUtil.MAX_POSITIVE_BLOCK)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  NodeUtil.MIN_VALUE  ||  l  >  NodeUtil.MAX_POSITIVE_BLOCK)  {	  if(l    <    NodeUtil.MIN_VALUE    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
177	[BUG]  [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_INIT_CLAUSE  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_INIT_CLAUSE  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <=  NodeUtil.MAX_POSITIVE_INIT_CLAUSE  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
178	[BUG]  [BUGGY]  if(l  <=  NodeUtil.MIN_POSITIVE_INIT_CLAUSE  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <=  NodeUtil.MIN_POSITIVE_INIT_CLAUSE  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <=  NodeUtil.MIN_POSITIVE_INIT_CLAUSE  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
179	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext(context);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Context  cc  =  getCurrentContext(context);  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  cc  =  getCurrentContext(context);	  Context    cc    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
180	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().getCurrentSegmentContext();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Context  cc  =  getCurrentContext().getCurrentSegmentContext();  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  cc  =  getCurrentContext().getCurrentSegmentContext();	  Context    cc    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
181	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().getCurrentScope();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Context  cc  =  getCurrentContext().getCurrentScope();  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  cc  =  getCurrentContext().getCurrentScope();	  Context    cc    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
182	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().getCurrentStatement();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Context  cc  =  getCurrentContext().getCurrentStatement();  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  cc  =  getCurrentContext().getCurrentStatement();	  Context    cc    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
183	[BUG]  [BUGGY]  if(l  ==  NodeUtil.MAX_LONG)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  ==  NodeUtil.MAX_LONG)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  ==  NodeUtil.MAX_LONG)  {	  if(l    ==    NodeUtil.MAX_POSITIVE_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
184	[BUG]  [BUGGY]  if(l!=  NodeUtil.MAX_LONG)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l!=  NodeUtil.MAX_LONG)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l!=  NodeUtil.MAX_LONG)  {	  if(l    ==    NodeUtil.MAX_POSITIVE_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
185	[BUG]  [BUGGY]  Context  cc  =  Context.getCurrentContextForCodeInsertion(s);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Context  cc  =  Context.getCurrentContextForCodeInsertion(s);  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  cc  =  Context.getCurrentContextForCodeInsertion(s);	  Context    cc    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
186	[BUG]  [BUGGY]  Context  cc  =  Context.getCurrentContext(null);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Context  cc  =  Context.getCurrentContext(null);  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  cc  =  Context.getCurrentContext(null);	  Context    cc    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
187	[BUG]  [BUGGY]  if(l  <=  NodeUtil.MIN_LONG  ||  l  >  NodeUtil.MAX_LONG)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <=  NodeUtil.MIN_LONG  ||  l  >  NodeUtil.MAX_LONG)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <=  NodeUtil.MIN_LONG  ||  l  >  NodeUtil.MAX_LONG)  {	  if(l    <    NodeUtil.MAX_LONG    ||    l    >    NodeUtil.MAX_LONG)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
188	[BUG]  [BUGGY]  Context  cc  =  getContextForCodeInsertion(s);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Context  cc  =  getContextForCodeInsertion(s);  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  cc  =  getContextForCodeInsertion(s);	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
189	[BUG]  [BUGGY]  Context  cc  =  getContextForCodeGenerator();  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Context  cc  =  getContextForCodeGenerator();  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  cc  =  getContextForCodeGenerator();	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
190	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContextForCodeInsertion(s);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContextForCodeInsertion(s);  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  rhsContext  =  Context.getCurrentContextForCodeInsertion(s);	  Context    rhsContext    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
191	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext(null);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext(null);  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  rhsContext  =  Context.getCurrentContext(null);	  Context    rhsContext    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
192	[BUG]  [BUGGY]  if(l!=  NodeUtil.MAX_POSITIVE_IN_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l!=  NodeUtil.MAX_POSITIVE_IN_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l!=  NodeUtil.MAX_POSITIVE_IN_NUMBER)  {	  if(l!=    NodeUtil.MAX_POSITIVE_INT_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
193	[BUG]  [BUGGY]  if(l  <  NodeUtil.MIN_POSITIVE_LENGTH  ||  l  >  NodeUtil.MAX_POSITIVE_LENGTH)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <  NodeUtil.MIN_POSITIVE_LENGTH  ||  l  >  NodeUtil.MAX_POSITIVE_LENGTH)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  NodeUtil.MIN_POSITIVE_LENGTH  ||  l  >  NodeUtil.MAX_POSITIVE_LENGTH)  {	  if(l    <    NodeUtil.MIN_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
194	[BUG]  [BUGGY]  Context  rhsContext  =  getContext(context);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Context  rhsContext  =  getContext(context);  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  rhsContext  =  getContext(context);	  Context    rhsContext    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
195	[BUG]  [BUGGY]  Context  rhsContext  =  getContext(true);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Context  rhsContext  =  getContext(true);  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  rhsContext  =  getContext(true);	  Context    rhsContext    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
196	[BUG]  [BUGGY]  Context  rhsContext  =  getContextForCodeGen();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Context  rhsContext  =  getContextForCodeGen();  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  rhsContext  =  getContextForCodeGen();	  Context    rhsContext    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
197	[BUG]  [BUGGY]  if(l  ==  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  ==  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  ==  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  ==  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  ==  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  ==  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    >    NodeUtil.MAX_POSITIVE_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
198	[BUG]  [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LENGTH_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LENGTH_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <=  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LENGTH_NUMBER)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_LENGTH_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
199	[BUG]  [BUGGY]  if(l  >=  NodeUtil.MAX_POSITIVE_LENGTH_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LENGTH_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  >=  NodeUtil.MAX_POSITIVE_LENGTH_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LENGTH_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  >=  NodeUtil.MAX_POSITIVE_LENGTH_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LENGTH_NUMBER)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_LENGTH_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
200	[BUG]  [BUGGY]  if(l  <  NodeUtil.MAX_INT_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <  NodeUtil.MAX_INT_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  NodeUtil.MAX_INT_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_NUMBER)  {	  if(l    <    NodeUtil.MAX_POSITIVE_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INT_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
201	[BUG]  [BUGGY]  if(l  <  NodeUtil.MAX_PREFIX  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <  NodeUtil.MAX_PREFIX  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  NodeUtil.MAX_PREFIX  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {	  if(l    <    NodeUtil.MAX_POSITIVE_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INT_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
202	[BUG]  [BUGGY]  if(l  <  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_IN_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_IN_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_IN_NUMBER)  {	  if(l    <    NodeUtil.MAX_POSITIVE_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INT_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
203	[BUG]  [BUGGY]  if(l  >  NodeUtil.MAX_LONG  ||  l  <  NodeUtil.MAX_LONG)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  >  NodeUtil.MAX_LONG  ||  l  <  NodeUtil.MAX_LONG)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  >  NodeUtil.MAX_LONG  ||  l  <  NodeUtil.MAX_LONG)  {	  if(l    <    NodeUtil.MAX_LONG    ||    l    >    NodeUtil.MAX_LONG)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
204	[BUG]  [BUGGY]  if(l  ==  NodeUtil.MAX_LONG  ||  l  >  NodeUtil.MAX_LONG)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  ==  NodeUtil.MAX_LONG  ||  l  >  NodeUtil.MAX_LONG)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  ==  NodeUtil.MAX_LONG  ||  l  >  NodeUtil.MAX_LONG)  {	  if(l    <    NodeUtil.MAX_LONG    ||    l    >    NodeUtil.MAX_LONG)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
205	[BUG]  [BUGGY]  if(l  ==  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  ==  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  ==  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    >=    NodeUtil.MAX_POSITIVE_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
206	[BUG]  [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_LONG_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_LONG_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <=  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_LONG_NUMBER)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
207	[BUG]  [BUGGY]  if(l  <=  NodeUtil.MAX_LONG)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <=  NodeUtil.MAX_LONG)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <=  NodeUtil.MAX_LONG)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
208	[BUG]  [BUGGY]  l  =  s.parseLong(s);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  l  =  s.parseLong(s);  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	l  =  s.parseLong(s);	  l    =    long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
209	[BUG]  [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_INT_CLAUSE  ||  l  >  NodeUtil.MAX_POSITIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_INT_CLAUSE  ||  l  >  NodeUtil.MAX_POSITIVE_INIT_CLAUSE)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <=  NodeUtil.MAX_POSITIVE_INT_CLAUSE  ||  l  >  NodeUtil.MAX_POSITIVE_INIT_CLAUSE)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
210	[BUG]  [BUGGY]  Context  cc  =  createCurrentContext();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Context  cc  =  createCurrentContext();  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  cc  =  createCurrentContext();	  Context    cc    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
211	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextForCodeInsertion(s);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Context  cc  =  getCurrentContextForCodeInsertion(s);  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  cc  =  getCurrentContextForCodeInsertion(s);	  Context    cc    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
212	[BUG]  [BUGGY]  if(l  ==  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l!=  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  ==  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l!=  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  ==  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l!=  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {	  if(l!=    NodeUtil.MAX_POSITIVE_INT_NUMBER    ||    l!=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
213	[BUG]  [BUGGY]  if(l  ==  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  ==  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  ==  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    >=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
214	[BUG]  [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_INT_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_IN_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_INT_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_IN_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <=  NodeUtil.MAX_POSITIVE_INT_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_IN_NUMBER)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_INT_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
215	[BUG]  [BUGGY]  if(l  <  NodeUtil.MIN_VALUE  ||  l  >  NodeUtil.MAX_POSITIVE_LENGTH_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <  NodeUtil.MIN_VALUE  ||  l  >  NodeUtil.MAX_POSITIVE_LENGTH_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  NodeUtil.MIN_VALUE  ||  l  >  NodeUtil.MAX_POSITIVE_LENGTH_NUMBER)  {	  if(l    <    NodeUtil.MIN_VALUE    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
216	[BUG]  [BUGGY]  Context  cc  =  Context.currentTimeMillis();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Context  cc  =  Context.currentTimeMillis();  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  cc  =  Context.currentTimeMillis();	  Context    cc    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
217	[BUG]  [BUGGY]  if(l  >=  NodeUtil.MAX_POSITIVE_INT_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  >=  NodeUtil.MAX_POSITIVE_INT_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  >=  NodeUtil.MAX_POSITIVE_INT_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INT_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
218	[BUG]  [BUGGY]  Context  rhsContext  =  getContextForCodeInsertion(s);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Context  rhsContext  =  getContextForCodeInsertion(s);  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  rhsContext  =  getContextForCodeInsertion(s);	  Context    rhsContext    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
219	[BUG]  [BUGGY]  Context  rhsContext  =  getContext().getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Context  rhsContext  =  getContext().getCurrentContext();  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  rhsContext  =  getContext().getCurrentContext();	  Context    rhsContext    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
220	[BUG]  [BUGGY]  Context  rhsContext  =  getContextForCodeGenerator(s);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Context  rhsContext  =  getContextForCodeGenerator(s);  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  rhsContext  =  getContextForCodeGenerator(s);	  Context    rhsContext    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
221	[BUG]  [BUGGY]  if(l  ==  NodeUtil.MIN_VALUE  ||  l  ==  NodeUtil.MAX_POSITIVE_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  ==  NodeUtil.MIN_VALUE  ||  l  ==  NodeUtil.MAX_POSITIVE_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  ==  NodeUtil.MIN_VALUE  ||  l  ==  NodeUtil.MAX_POSITIVE_NUMBER)  {	  if(l    ==    NodeUtil.MAX_POSITIVE_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
222	[BUG]  [BUGGY]  Context  cc  =  getContext().getCurrentSegmentContext();  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Context  cc  =  getContext().getCurrentSegmentContext();  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  cc  =  getContext().getCurrentSegmentContext();	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
223	[BUG]  [BUGGY]  Context  cc  =  createContext();  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Context  cc  =  createContext();  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  cc  =  createContext();	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
224	[BUG]  [BUGGY]  if(l  <  NodeUtil.MIN_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <  NodeUtil.MIN_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INIT_CLAUSE)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  NodeUtil.MIN_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INIT_CLAUSE)  {	  if(l    <    NodeUtil.MIN_POSITIVE_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
225	[BUG]  [BUGGY]  if(l  <  NodeUtil.MIN_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LENGTH_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <  NodeUtil.MIN_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LENGTH_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  NodeUtil.MIN_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LENGTH_NUMBER)  {	  if(l    <    NodeUtil.MIN_POSITIVE_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
226	[BUG]  [BUGGY]  if(l  ==  NodeUtil.MAX_POSITIVE_LENGTH_NUMBER  ||  l  <=  NodeUtil.MAX_POSITIVE_LENGTH_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  ==  NodeUtil.MAX_POSITIVE_LENGTH_NUMBER  ||  l  <=  NodeUtil.MAX_POSITIVE_LENGTH_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  ==  NodeUtil.MAX_POSITIVE_LENGTH_NUMBER  ||  l  <=  NodeUtil.MAX_POSITIVE_LENGTH_NUMBER)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_LENGTH_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
227	[BUG]  [BUGGY]  if(l  ==  NodeUtil.MAX_POSITIVE_LENGTH_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LENGTH_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  ==  NodeUtil.MAX_POSITIVE_LENGTH_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LENGTH_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  ==  NodeUtil.MAX_POSITIVE_LENGTH_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LENGTH_NUMBER)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_LENGTH_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
228	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContextUTC();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContextUTC();  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  rhsContext  =  Context.getCurrentContextUTC();	  Context    rhsContext    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
229	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContextForCodeGenerator(s);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContextForCodeGenerator(s);  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  rhsContext  =  Context.getCurrentContextForCodeGenerator(s);	  Context    rhsContext    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
230	[BUG]  [BUGGY]  if(l  <=  NodeUtil.MAX_LONG_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LONG_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <=  NodeUtil.MAX_LONG_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LONG_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <=  NodeUtil.MAX_LONG_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LONG_NUMBER)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_LONG_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
231	[BUG]  [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_LONG_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_LONG_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <=  NodeUtil.MAX_POSITIVE_LONG_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_LONG_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
232	[BUG]  [BUGGY]  Integer  l  =  Long.parseLong(s);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  Integer  l  =  Long.parseLong(s);  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Integer  l  =  Long.parseLong(s);	  Long    l    =    Long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
233	[BUG]  [BUGGY]  long  l  =  Double.parseLong(s);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);      [BUGGY]  long  l  =  Double.parseLong(s);  [BUGGY]      return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	long  l  =  Double.parseLong(s);	  long    l    =    Double.parseDouble(s);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
