bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);    [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]    return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
2	[BUG]  [BUGGY]  if(l  ==  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  ==  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);    [BUGGY]  if(l  ==  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  ==  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]    return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  ==  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  ==  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    ==    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
3	[BUG]  [BUGGY]  if(l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);    [BUGGY]  if(l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]    return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
4	[BUG]  [BUGGY]  if(l  <  NodeUtil.MIN_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);    [BUGGY]  if(l  <  NodeUtil.MIN_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]    return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  NodeUtil.MIN_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
5	[BUG]  [BUGGY]  if(l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);    [BUGGY]  if(l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]    return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
6	[BUG]  [BUGGY]  if(l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);    [BUGGY]  if(l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]    return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
7	[BUG]  [BUGGY]  if(l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  ==  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);    [BUGGY]  if(l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  ==  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]    return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  ==  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
8	[BUG]  [BUGGY]  if(l  >>  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);    [BUGGY]  if(l  >>  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]    return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  >>  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l!=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
9	[BUG]  [BUGGY]  long  l  =  Long.parseLong(s);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);    [BUGGY]  long  l  =  Long.parseLong(s);  [BUGGY]    return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	long  l  =  Long.parseLong(s);	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
10	[BUG]  [BUGGY]  l  =  Long.parseLong(s);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);    [BUGGY]  l  =  Long.parseLong(s);  [BUGGY]    return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	l  =  Long.parseLong(s);	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
11	[BUG]  [BUGGY]  Long  l  =  Long.parseLong(s);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);    [BUGGY]  Long  l  =  Long.parseLong(s);  [BUGGY]    return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Long  l  =  Long.parseLong(s);	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
12	[BUG]  [BUGGY]  int  l  =  Integer.parseInt(s);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);    [BUGGY]  int  l  =  Integer.parseInt(s);  [BUGGY]    return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	int  l  =  Integer.parseInt(s);	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
13	[BUG]  [BUGGY]  Context  cc  =  Context.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);    [BUGGY]  Context  cc  =  Context.getCurrentContext();  [BUGGY]    return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  cc  =  Context.getCurrentContext();	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
14	[BUG]  [BUGGY]  l  =  long.parseLong(s);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);    [BUGGY]  l  =  long.parseLong(s);  [BUGGY]    return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	l  =  long.parseLong(s);	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
15	[BUG]  [BUGGY]  Context  cc  =  getContext();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);    [BUGGY]  Context  cc  =  getContext();  [BUGGY]    return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  cc  =  getContext();	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
16	[BUG]  [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);    [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]    return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <=  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <    NodeUtil.MAX_POSITIVE_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
17	[BUG]  [BUGGY]  if(l  <  NodeUtil.MIN_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);    [BUGGY]  if(l  <  NodeUtil.MIN_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]    return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  NodeUtil.MIN_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <    NodeUtil.MAX_POSITIVE_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
18	[BUG]  [BUGGY]  if(l  <  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);    [BUGGY]  if(l  <  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]    return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <    NodeUtil.MAX_POSITIVE_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
19	[BUG]  [BUGGY]  if(l  >  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);    [BUGGY]  if(l  >  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]    return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  >  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <    NodeUtil.MAX_POSITIVE_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
20	[BUG]  [BUGGY]  if(l  <  NodeUtil.MIN_VALUE  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);    [BUGGY]  if(l  <  NodeUtil.MIN_VALUE  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]    return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  NodeUtil.MIN_VALUE  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <    NodeUtil.MAX_POSITIVE_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
21	[BUG]  [BUGGY]  if(l  >=  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);    [BUGGY]  if(l  >=  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]    return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  >=  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <    NodeUtil.MAX_POSITIVE_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
22	[BUG]  [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);    [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_NUMBER)  {  [BUGGY]    return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <=  NodeUtil.MAX_POSITIVE_NUMBER)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
23	[BUG]  [BUGGY]  if(l  <  NodeUtil.MAX_PREFIX  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);    [BUGGY]  if(l  <  NodeUtil.MAX_PREFIX  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]    return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  NodeUtil.MAX_PREFIX  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <    NodeUtil.MAX_POSITIVE_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
24	[BUG]  [BUGGY]  if(l  <  NodeUtil.MAX_LONG  ||  l  >  NodeUtil.MAX_LONG)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);    [BUGGY]  if(l  <  NodeUtil.MAX_LONG  ||  l  >  NodeUtil.MAX_LONG)  {  [BUGGY]    return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  NodeUtil.MAX_LONG  ||  l  >  NodeUtil.MAX_LONG)  {	  if(l    <    NodeUtil.MAX_POSITIVE_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
25	[BUG]  [BUGGY]  if(l  ==  NodeUtil.MAX_POSITIVE_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);    [BUGGY]  if(l  ==  NodeUtil.MAX_POSITIVE_NUMBER)  {  [BUGGY]    return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  ==  NodeUtil.MAX_POSITIVE_NUMBER)  {	  if(l    ==    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
26	[BUG]  [BUGGY]  double  l  =  Long.parseLong(s);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);    [BUGGY]  double  l  =  Long.parseLong(s);  [BUGGY]    return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	double  l  =  Long.parseLong(s);	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
27	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);    [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  [BUGGY]    return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  rhsContext  =  Context.getCurrentContext();	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
28	[BUG]  [BUGGY]  Context  rhsContext  =  getContext();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);    [BUGGY]  Context  rhsContext  =  getContext();  [BUGGY]    return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  rhsContext  =  getContext();	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
29	[BUG]  [BUGGY]  long  l  =  Double.parseDouble(s);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);    [BUGGY]  long  l  =  Double.parseDouble(s);  [BUGGY]    return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	long  l  =  Double.parseDouble(s);	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
30	[BUG]  [BUGGY]  l  =  Double.parseDouble(s);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);    [BUGGY]  l  =  Double.parseDouble(s);  [BUGGY]    return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	l  =  Double.parseDouble(s);	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
31	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);    [BUGGY]  Context  cc  =  getCurrentContext();  [BUGGY]    return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	Context  cc  =  getCurrentContext();	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
32	[BUG]  [BUGGY]  if(l!=  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);    [BUGGY]  if(l!=  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [BUGGY]    return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l!=  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {	  if(l!=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
33	[BUG]  [BUGGY]  if(l!=  NodeUtil.MAX_POSITIVE_INT_NUMBER  ||  l!=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);    [BUGGY]  if(l!=  NodeUtil.MAX_POSITIVE_INT_NUMBER  ||  l!=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]    return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l!=  NodeUtil.MAX_POSITIVE_INT_NUMBER  ||  l!=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l!=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
34	[BUG]  [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);    [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [BUGGY]    return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <=  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {	  if(l    ==    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
35	[BUG]  [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);    [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INIT_CLAUSE)  {  [BUGGY]    return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INIT_CLAUSE)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
36	[BUG]  [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);    [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [BUGGY]    return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
37	[BUG]  [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LENGTH_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);    [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LENGTH_NUMBER)  {  [BUGGY]    return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LENGTH_NUMBER)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
38	[BUG]  [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LONG_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);    [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LONG_NUMBER)  {  [BUGGY]    return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_LONG_NUMBER)  {	  if(l    <=    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
39	[BUG]  [BUGGY]  if(l  <  NodeUtil.MAX_POSITIVE_INT_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);    [BUGGY]  if(l  <  NodeUtil.MAX_POSITIVE_INT_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]    return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  NodeUtil.MAX_POSITIVE_INT_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
40	[BUG]  [BUGGY]  if(l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);    [BUGGY]  if(l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [BUGGY]    return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {	  if(l    <    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
41	[BUG]  [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_INT_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);    [BUGGY]  if(l  <=  NodeUtil.MAX_POSITIVE_INT_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  [BUGGY]    return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <=  NodeUtil.MAX_POSITIVE_INT_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {	  if(l    <    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
42	[BUG]  [BUGGY]  if(l  <  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);    [BUGGY]  if(l  <  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {  [BUGGY]    return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	if(l  <  NodeUtil.MAX_POSITIVE_NUMBER  ||  l  >  NodeUtil.MAX_POSITIVE_INT_NUMBER)  {	  if(l    <    NodeUtil.MAX_POSITIVE_NUMBER    ||    l    >    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
