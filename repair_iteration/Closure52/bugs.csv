bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] cc.addNumber(d); [FE] ComparisonFailure [CONTEXT] !TokenStream.isKeyword(key) && TokenStream.isJSIdentifier(key) &&   NodeUtil.isLatin(key)) { add(key); } else {  double d = getSimpleNumber(key); if (!Double.isNaN(d)) { [BUGGY] cc.addNumber(d); [BUGGY] } else { addExpr(c, 1); } } add(":"); addExpr(c.getFirstChild(), 1); } [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preserveBlock double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String key name o opstr regexp Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	replace	
2	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] !TokenStream.isKeyword(key) && TokenStream.isJSIdentifier(key) &&   NodeUtil.isLatin(key)) { add(key); } else {  double d = getSimpleNumber(key); if (!Double.isNaN(d)) { [BUGGY] [BUGGY] cc.addNumber(d); } else { addExpr(c, 1); } } add(":"); addExpr(c.getFirstChild(), 1); } [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preserveBlock double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String key name o opstr regexp Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	676	676	1	add	
3	[BUG] [BUGGY] double d = getSimpleNumber(key); [FE] ComparisonFailure [CONTEXT]  if (!c.isQuotedString() && !TokenStream.isKeyword(key) && TokenStream.isJSIdentifier(key) &&   NodeUtil.isLatin(key)) { add(key); } else {  [BUGGY] double d = getSimpleNumber(key); [BUGGY] if (!Double.isNaN(d)) { cc.addNumber(d); } else { addExpr(c, 1); } } add(":"); addExpr(c.getFirstChild(), 1); } [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preserveBlock double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String key name o opstr regexp Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	674	674	1	replace	
4	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT]  if (!c.isQuotedString() && !TokenStream.isKeyword(key) && TokenStream.isJSIdentifier(key) &&   NodeUtil.isLatin(key)) { add(key); } else {  [BUGGY] [BUGGY] double d = getSimpleNumber(key); if (!Double.isNaN(d)) { cc.addNumber(d); } else { addExpr(c, 1); } } add(":"); addExpr(c.getFirstChild(), 1); } [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preserveBlock double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String key name o opstr regexp Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	674	674	1	add	
5	[BUG] [BUGGY] if (!Double.isNaN(d)) { [FE] ComparisonFailure [CONTEXT] if (!c.isQuotedString() && !TokenStream.isKeyword(key) && TokenStream.isJSIdentifier(key) &&   NodeUtil.isLatin(key)) { add(key); } else {  double d = getSimpleNumber(key); [BUGGY] if (!Double.isNaN(d)) { [BUGGY] cc.addNumber(d); } else { addExpr(c, 1); } } add(":"); addExpr(c.getFirstChild(), 1); } [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preserveBlock double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String key name o opstr regexp Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	replace	
6	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] if (!c.isQuotedString() && !TokenStream.isKeyword(key) && TokenStream.isJSIdentifier(key) &&   NodeUtil.isLatin(key)) { add(key); } else {  double d = getSimpleNumber(key); [BUGGY] [BUGGY] if (!Double.isNaN(d)) { cc.addNumber(d); } else { addExpr(c, 1); } } add(":"); addExpr(c.getFirstChild(), 1); } [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preserveBlock double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String key name o opstr regexp Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	675	675	1	add	
7	[BUG] [BUGGY] if (l < NodeUtil.MAX_POSITIVE_INTEGER_NUMBER) { [FE] ComparisonFailure [CONTEXT] static double getSimpleNumber(String s) { if (isSimpleNumber(s)) { try { long l = Long.parseLong(s); [BUGGY] if (l < NodeUtil.MAX_POSITIVE_INTEGER_NUMBER) { [BUGGY] return l; } } catch (NumberFormatException e) {  } } return Double.NaN; } [CLASS] CodeGenerator Context [METHOD] getSimpleNumber [RETURN_TYPE] double  String s [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean CodeConsumer cc consumer NumberFormatException e String s Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder long l char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	replace	
8	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] static double getSimpleNumber(String s) { if (isSimpleNumber(s)) { try { long l = Long.parseLong(s); [BUGGY] [BUGGY] if (l < NodeUtil.MAX_POSITIVE_INTEGER_NUMBER) { return l; } } catch (NumberFormatException e) {  } } return Double.NaN; } [CLASS] CodeGenerator Context [METHOD] getSimpleNumber [RETURN_TYPE] double  String s [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean CodeConsumer cc consumer NumberFormatException e String s Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder long l char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	752	752	1	add	
9	[BUG] [BUGGY] return l; [FE] ComparisonFailure [CONTEXT] static double getSimpleNumber(String s) { if (isSimpleNumber(s)) { try { long l = Long.parseLong(s); if (l < NodeUtil.MAX_POSITIVE_INTEGER_NUMBER) { [BUGGY] return l; [BUGGY] } } catch (NumberFormatException e) {  } } return Double.NaN; } [CLASS] CodeGenerator Context [METHOD] getSimpleNumber [RETURN_TYPE] double  String s [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean CodeConsumer cc consumer NumberFormatException e String s Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder long l char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	
10	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] static double getSimpleNumber(String s) { if (isSimpleNumber(s)) { try { long l = Long.parseLong(s); if (l < NodeUtil.MAX_POSITIVE_INTEGER_NUMBER) { [BUGGY] [BUGGY] return l; } } catch (NumberFormatException e) {  } } return Double.NaN; } [CLASS] CodeGenerator Context [METHOD] getSimpleNumber [RETURN_TYPE] double  String s [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean CodeConsumer cc consumer NumberFormatException e String s Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder long l char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	add	
11	[BUG] [BUGGY] Preconditions.checkState(c.getType() == Token.STRING); [FE] ComparisonFailure [CONTEXT] if (c.getType() == Token.GET || c.getType() == Token.SET) { add(c); } else { [BUGGY] Preconditions.checkState(c.getType() == Token.STRING); [BUGGY] String key = c.getString();   if (!c.isQuotedString() && !TokenStream.isKeyword(key) && TokenStream.isJSIdentifier(key) &&   NodeUtil.isLatin(key)) { add(key); [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preserveBlock double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String key name o opstr regexp Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	661	661	1	replace	
12	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] if (c.getType() == Token.GET || c.getType() == Token.SET) { add(c); } else { [BUGGY] [BUGGY] Preconditions.checkState(c.getType() == Token.STRING); String key = c.getString();   if (!c.isQuotedString() && !TokenStream.isKeyword(key) && TokenStream.isJSIdentifier(key) &&   NodeUtil.isLatin(key)) { add(key); [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preserveBlock double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String key name o opstr regexp Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	661	661	1	add	
13	[BUG] [BUGGY] String key = c.getString(); [FE] ComparisonFailure [CONTEXT] if (c.getType() == Token.GET || c.getType() == Token.SET) { add(c); } else { Preconditions.checkState(c.getType() == Token.STRING); [BUGGY] String key = c.getString(); [BUGGY]   if (!c.isQuotedString() && !TokenStream.isKeyword(key) && TokenStream.isJSIdentifier(key) &&   NodeUtil.isLatin(key)) { add(key); } else { [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preserveBlock double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String key name o opstr regexp Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	
14	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] if (c.getType() == Token.GET || c.getType() == Token.SET) { add(c); } else { Preconditions.checkState(c.getType() == Token.STRING); [BUGGY] [BUGGY] String key = c.getString();   if (!c.isQuotedString() && !TokenStream.isKeyword(key) && TokenStream.isJSIdentifier(key) &&   NodeUtil.isLatin(key)) { add(key); } else { [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preserveBlock double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String key name o opstr regexp Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	add	
15	[BUG] [BUGGY] if (!c.isQuotedString() && !TokenStream.isKeyword(key) &&  TokenStream.isJSIdentifier(key) && [FE] ComparisonFailure [CONTEXT] if (c.getType() == Token.GET || c.getType() == Token.SET) { add(c); } else { Preconditions.checkState(c.getType() == Token.STRING); String key = c.getString();   [BUGGY] if (!c.isQuotedString() &&    !TokenStream.isKeyword(key) &&        TokenStream.isJSIdentifier(key) && [BUGGY] !TokenStream.isKeyword(key) && TokenStream.isJSIdentifier(key) &&   NodeUtil.isLatin(key)) { add(key); } else {  double d = getSimpleNumber(key); if (!Double.isNaN(d)) { [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preserveBlock double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String key name o opstr regexp Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	
16	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] if (c.getType() == Token.GET || c.getType() == Token.SET) { add(c); } else { Preconditions.checkState(c.getType() == Token.STRING); String key = c.getString();   [BUGGY] [BUGGY] if (!c.isQuotedString() &&    !TokenStream.isKeyword(key) &&        TokenStream.isJSIdentifier(key) && !TokenStream.isKeyword(key) && TokenStream.isJSIdentifier(key) &&   NodeUtil.isLatin(key)) { add(key); } else {  double d = getSimpleNumber(key); if (!Double.isNaN(d)) { [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preserveBlock double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String key name o opstr regexp Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	add	
17	[BUG] [BUGGY] add(":"); [FE] ComparisonFailure [CONTEXT] add(key); } else {  double d = getSimpleNumber(key); if (!Double.isNaN(d)) { cc.addNumber(d); } else { addExpr(c, 1); } } [BUGGY] add(":"); [BUGGY] addExpr(c.getFirstChild(), 1); } [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preserveBlock double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String key name o opstr regexp Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	replace	
18	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] add(key); } else {  double d = getSimpleNumber(key); if (!Double.isNaN(d)) { cc.addNumber(d); } else { addExpr(c, 1); } } [BUGGY] [BUGGY] add(":"); addExpr(c.getFirstChild(), 1); } [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preserveBlock double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String key name o opstr regexp Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	681	681	1	add	
19	[BUG] [BUGGY] addExpr(c.getFirstChild(), 1); [FE] ComparisonFailure [CONTEXT] } else {  double d = getSimpleNumber(key); if (!Double.isNaN(d)) { cc.addNumber(d); } else { addExpr(c, 1); } } add(":"); [BUGGY] addExpr(c.getFirstChild(), 1); [BUGGY] } [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preserveBlock double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String key name o opstr regexp Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	682	682	1	replace	
20	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] } else {  double d = getSimpleNumber(key); if (!Double.isNaN(d)) { cc.addNumber(d); } else { addExpr(c, 1); } } add(":"); [BUGGY] [BUGGY] addExpr(c.getFirstChild(), 1); } [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preserveBlock double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String key name o opstr regexp Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	682	682	1	add	
21	[BUG] [BUGGY] return len > 0; [FE] ComparisonFailure [CONTEXT] static boolean isSimpleNumber(String s) { int len = s.length(); for (int index = 0; index < len; index++) { char c = s.charAt(index); if (c < '0' || c > '9') { return false; } } [BUGGY] return len > 0; [BUGGY] } [CLASS] CodeGenerator Context [METHOD] isSimpleNumber [RETURN_TYPE] boolean  String s [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean char c CodeConsumer cc consumer String s Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int index len char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	745	745	1	replace	
22	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] static boolean isSimpleNumber(String s) { int len = s.length(); for (int index = 0; index < len; index++) { char c = s.charAt(index); if (c < '0' || c > '9') { return false; } } [BUGGY] [BUGGY] return len > 0; } [CLASS] CodeGenerator Context [METHOD] isSimpleNumber [RETURN_TYPE] boolean  String s [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean char c CodeConsumer cc consumer String s Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int index len char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	745	745	1	add	
23	[BUG] [BUGGY] long l = Long.parseLong(s); [FE] ComparisonFailure [CONTEXT] static double getSimpleNumber(String s) { if (isSimpleNumber(s)) { try { [BUGGY] long l = Long.parseLong(s); [BUGGY] if (l < NodeUtil.MAX_POSITIVE_INTEGER_NUMBER) { return l; } } catch (NumberFormatException e) {  } } return Double.NaN; } [CLASS] CodeGenerator Context [METHOD] getSimpleNumber [RETURN_TYPE] double  String s [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean CodeConsumer cc consumer NumberFormatException e String s Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder long l char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	replace	
24	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] static double getSimpleNumber(String s) { if (isSimpleNumber(s)) { try { [BUGGY] [BUGGY] long l = Long.parseLong(s); if (l < NodeUtil.MAX_POSITIVE_INTEGER_NUMBER) { return l; } } catch (NumberFormatException e) {  } } return Double.NaN; } [CLASS] CodeGenerator Context [METHOD] getSimpleNumber [RETURN_TYPE] double  String s [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean CodeConsumer cc consumer NumberFormatException e String s Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder long l char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	751	751	1	add	
25	[BUG] [BUGGY] int len = s.length(); [FE] ComparisonFailure [CONTEXT] static boolean isSimpleNumber(String s) { [BUGGY] int len = s.length(); [BUGGY] for (int index = 0; index < len; index++) { char c = s.charAt(index); if (c < '0' || c > '9') { return false; } } return len > 0; } [CLASS] CodeGenerator Context [METHOD] isSimpleNumber [RETURN_TYPE] boolean  String s [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean char c CodeConsumer cc consumer String s Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int index len char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	738	738	1	replace	
26	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] static boolean isSimpleNumber(String s) { [BUGGY] [BUGGY] int len = s.length(); for (int index = 0; index < len; index++) { char c = s.charAt(index); if (c < '0' || c > '9') { return false; } } return len > 0; } [CLASS] CodeGenerator Context [METHOD] isSimpleNumber [RETURN_TYPE] boolean  String s [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean char c CodeConsumer cc consumer String s Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int index len char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	738	738	1	add	
27	[BUG] [BUGGY] for (int index = 0; index < len; index++) { [FE] ComparisonFailure [CONTEXT] static boolean isSimpleNumber(String s) { int len = s.length(); [BUGGY] for (int index = 0; index < len; index++) { [BUGGY] char c = s.charAt(index); if (c < '0' || c > '9') { return false; } } return len > 0; } [CLASS] CodeGenerator Context [METHOD] isSimpleNumber [RETURN_TYPE] boolean  String s [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean char c CodeConsumer cc consumer String s Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int index len char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	739	739	1	replace	
28	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] static boolean isSimpleNumber(String s) { int len = s.length(); [BUGGY] [BUGGY] for (int index = 0; index < len; index++) { char c = s.charAt(index); if (c < '0' || c > '9') { return false; } } return len > 0; } [CLASS] CodeGenerator Context [METHOD] isSimpleNumber [RETURN_TYPE] boolean  String s [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean char c CodeConsumer cc consumer String s Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int index len char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	739	739	1	add	
29	[BUG] [BUGGY] char c = s.charAt(index); [FE] ComparisonFailure [CONTEXT] static boolean isSimpleNumber(String s) { int len = s.length(); for (int index = 0; index < len; index++) { [BUGGY] char c = s.charAt(index); [BUGGY] if (c < '0' || c > '9') { return false; } } return len > 0; } [CLASS] CodeGenerator Context [METHOD] isSimpleNumber [RETURN_TYPE] boolean  String s [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean char c CodeConsumer cc consumer String s Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int index len char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	740	740	1	replace	
30	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] static boolean isSimpleNumber(String s) { int len = s.length(); for (int index = 0; index < len; index++) { [BUGGY] [BUGGY] char c = s.charAt(index); if (c < '0' || c > '9') { return false; } } return len > 0; } [CLASS] CodeGenerator Context [METHOD] isSimpleNumber [RETURN_TYPE] boolean  String s [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean char c CodeConsumer cc consumer String s Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int index len char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	740	740	1	add	
31	[BUG] [BUGGY] if (c < '0' || c > '9') { [FE] ComparisonFailure [CONTEXT] static boolean isSimpleNumber(String s) { int len = s.length(); for (int index = 0; index < len; index++) { char c = s.charAt(index); [BUGGY] if (c < '0' || c > '9') { [BUGGY] return false; } } return len > 0; } [CLASS] CodeGenerator Context [METHOD] isSimpleNumber [RETURN_TYPE] boolean  String s [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean char c CodeConsumer cc consumer String s Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int index len char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	741	741	1	replace	
32	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] static boolean isSimpleNumber(String s) { int len = s.length(); for (int index = 0; index < len; index++) { char c = s.charAt(index); [BUGGY] [BUGGY] if (c < '0' || c > '9') { return false; } } return len > 0; } [CLASS] CodeGenerator Context [METHOD] isSimpleNumber [RETURN_TYPE] boolean  String s [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean char c CodeConsumer cc consumer String s Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int index len char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	741	741	1	add	
33	[BUG] [BUGGY] if (isSimpleNumber(s)) { [FE] ComparisonFailure [CONTEXT] static double getSimpleNumber(String s) { [BUGGY] if (isSimpleNumber(s)) { [BUGGY] try { long l = Long.parseLong(s); if (l < NodeUtil.MAX_POSITIVE_INTEGER_NUMBER) { return l; } } catch (NumberFormatException e) {  } } return Double.NaN; [CLASS] CodeGenerator Context [METHOD] getSimpleNumber [RETURN_TYPE] double  String s [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean CodeConsumer cc consumer NumberFormatException e String s Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder long l char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	
34	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] static double getSimpleNumber(String s) { [BUGGY] [BUGGY] if (isSimpleNumber(s)) { try { long l = Long.parseLong(s); if (l < NodeUtil.MAX_POSITIVE_INTEGER_NUMBER) { return l; } } catch (NumberFormatException e) {  } } return Double.NaN; [CLASS] CodeGenerator Context [METHOD] getSimpleNumber [RETURN_TYPE] double  String s [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean CodeConsumer cc consumer NumberFormatException e String s Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder long l char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	add	
35	[BUG] [BUGGY] if (c != first) { [FE] ComparisonFailure [CONTEXT] add(first); break; case Token.OBJECTLIT: { boolean needsParens = (context == Context.START_OF_EXPR); if (needsParens) { add("("); } add("{"); for (Node c = first; c != null; c = c.getNext()) { [BUGGY] if (c != first) { [BUGGY] cc.listSeparator(); } if (c.getType() == Token.GET || c.getType() == Token.SET) { add(c); } else { Preconditions.checkState(c.getType() == Token.STRING); String key = c.getString();   [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preserveBlock double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String key name o opstr regexp Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	
36	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] add(first); break; case Token.OBJECTLIT: { boolean needsParens = (context == Context.START_OF_EXPR); if (needsParens) { add("("); } add("{"); for (Node c = first; c != null; c = c.getNext()) { [BUGGY] [BUGGY] if (c != first) { cc.listSeparator(); } if (c.getType() == Token.GET || c.getType() == Token.SET) { add(c); } else { Preconditions.checkState(c.getType() == Token.STRING); String key = c.getString();   [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preserveBlock double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String key name o opstr regexp Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	add	
37	[BUG] [BUGGY] if (c.getType() == Token.GET || c.getType() == Token.SET) { [FE] ComparisonFailure [CONTEXT] boolean needsParens = (context == Context.START_OF_EXPR); if (needsParens) { add("("); } add("{"); for (Node c = first; c != null; c = c.getNext()) { if (c != first) { cc.listSeparator(); } [BUGGY] if (c.getType() == Token.GET || c.getType() == Token.SET) { [BUGGY] add(c); } else { Preconditions.checkState(c.getType() == Token.STRING); String key = c.getString();   if (!c.isQuotedString() && !TokenStream.isKeyword(key) && TokenStream.isJSIdentifier(key) &&  [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preserveBlock double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String key name o opstr regexp Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	
38	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] boolean needsParens = (context == Context.START_OF_EXPR); if (needsParens) { add("("); } add("{"); for (Node c = first; c != null; c = c.getNext()) { if (c != first) { cc.listSeparator(); } [BUGGY] [BUGGY] if (c.getType() == Token.GET || c.getType() == Token.SET) { add(c); } else { Preconditions.checkState(c.getType() == Token.STRING); String key = c.getString();   if (!c.isQuotedString() && !TokenStream.isKeyword(key) && TokenStream.isJSIdentifier(key) &&  [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preserveBlock double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String key name o opstr regexp Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	add	
39	[BUG] [BUGGY] addExpr(n, minPrecedence, Context.OTHER); [FE] ComparisonFailure [CONTEXT] void addExpr(Node n, int minPrecedence) { [BUGGY] addExpr(n, minPrecedence, Context.OTHER); [BUGGY] } [CLASS] CodeGenerator Context [METHOD] addExpr [RETURN_TYPE] void  Node n int minPrecedence [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean Node n CodeConsumer cc consumer Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int minPrecedence char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	875	875	1	replace	
40	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] void addExpr(Node n, int minPrecedence) { [BUGGY] [BUGGY] addExpr(n, minPrecedence, Context.OTHER); } [CLASS] CodeGenerator Context [METHOD] addExpr [RETURN_TYPE] void  Node n int minPrecedence [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean Node n CodeConsumer cc consumer Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int minPrecedence char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	875	875	1	add	
41	[BUG] [BUGGY] } [FE] ComparisonFailure [CONTEXT] void addExpr(Node n, int minPrecedence) { addExpr(n, minPrecedence, Context.OTHER); [BUGGY] } [BUGGY]  [CLASS] CodeGenerator Context [METHOD] addExpr [RETURN_TYPE] void  Node n int minPrecedence [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean Node n CodeConsumer cc consumer Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int minPrecedence char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	
42	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] void addExpr(Node n, int minPrecedence) { addExpr(n, minPrecedence, Context.OTHER); [BUGGY] [BUGGY] } [CLASS] CodeGenerator Context [METHOD] addExpr [RETURN_TYPE] void  Node n int minPrecedence [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean Node n CodeConsumer cc consumer Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int minPrecedence char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	add	
43	[BUG] [BUGGY] boolean needsParens = (context == Context.START_OF_EXPR); [FE] ComparisonFailure [CONTEXT] addJsString(n.getString()); break; case Token.DELPROP: Preconditions.checkState(childCount == 1); add("delete "); add(first); break; case Token.OBJECTLIT: { [BUGGY] boolean needsParens = (context == Context.START_OF_EXPR); [BUGGY] if (needsParens) { add("("); } add("{"); for (Node c = first; c != null; c = c.getNext()) { if (c != first) { cc.listSeparator(); } if (c.getType() == Token.GET || c.getType() == Token.SET) { [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preserveBlock double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String key name o opstr regexp Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	648	648	1	replace	
44	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] addJsString(n.getString()); break; case Token.DELPROP: Preconditions.checkState(childCount == 1); add("delete "); add(first); break; case Token.OBJECTLIT: { [BUGGY] [BUGGY] boolean needsParens = (context == Context.START_OF_EXPR); if (needsParens) { add("("); } add("{"); for (Node c = first; c != null; c = c.getNext()) { if (c != first) { cc.listSeparator(); } if (c.getType() == Token.GET || c.getType() == Token.SET) { [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preserveBlock double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String key name o opstr regexp Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	648	648	1	add	
45	[BUG] [BUGGY] if (needsParens) { [FE] ComparisonFailure [CONTEXT] break; case Token.DELPROP: Preconditions.checkState(childCount == 1); add("delete "); add(first); break; case Token.OBJECTLIT: { boolean needsParens = (context == Context.START_OF_EXPR); [BUGGY] if (needsParens) { [BUGGY] add("("); } add("{"); for (Node c = first; c != null; c = c.getNext()) { if (c != first) { cc.listSeparator(); } if (c.getType() == Token.GET || c.getType() == Token.SET) { add(c); [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preserveBlock double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String key name o opstr regexp Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	649	649	1	replace	
46	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] break; case Token.DELPROP: Preconditions.checkState(childCount == 1); add("delete "); add(first); break; case Token.OBJECTLIT: { boolean needsParens = (context == Context.START_OF_EXPR); [BUGGY] [BUGGY] if (needsParens) { add("("); } add("{"); for (Node c = first; c != null; c = c.getNext()) { if (c != first) { cc.listSeparator(); } if (c.getType() == Token.GET || c.getType() == Token.SET) { add(c); [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preserveBlock double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String key name o opstr regexp Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	649	649	1	add	
47	[BUG] [BUGGY] add("{"); [FE] ComparisonFailure [CONTEXT] Preconditions.checkState(childCount == 1); add("delete "); add(first); break; case Token.OBJECTLIT: { boolean needsParens = (context == Context.START_OF_EXPR); if (needsParens) { add("("); } [BUGGY] add("{"); [BUGGY] for (Node c = first; c != null; c = c.getNext()) { if (c != first) { cc.listSeparator(); } if (c.getType() == Token.GET || c.getType() == Token.SET) { add(c); } else { Preconditions.checkState(c.getType() == Token.STRING); String key = c.getString(); [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preserveBlock double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String key name o opstr regexp Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	
48	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] Preconditions.checkState(childCount == 1); add("delete "); add(first); break; case Token.OBJECTLIT: { boolean needsParens = (context == Context.START_OF_EXPR); if (needsParens) { add("("); } [BUGGY] [BUGGY] add("{"); for (Node c = first; c != null; c = c.getNext()) { if (c != first) { cc.listSeparator(); } if (c.getType() == Token.GET || c.getType() == Token.SET) { add(c); } else { Preconditions.checkState(c.getType() == Token.STRING); String key = c.getString(); [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preserveBlock double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String key name o opstr regexp Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	add	
49	[BUG] [BUGGY] for (Node c = first; c != null; c = c.getNext()) { [FE] ComparisonFailure [CONTEXT] add("delete "); add(first); break; case Token.OBJECTLIT: { boolean needsParens = (context == Context.START_OF_EXPR); if (needsParens) { add("("); } add("{"); [BUGGY] for (Node c = first; c != null; c = c.getNext()) { [BUGGY] if (c != first) { cc.listSeparator(); } if (c.getType() == Token.GET || c.getType() == Token.SET) { add(c); } else { Preconditions.checkState(c.getType() == Token.STRING); String key = c.getString();  [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preserveBlock double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String key name o opstr regexp Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	
50	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] add("delete "); add(first); break; case Token.OBJECTLIT: { boolean needsParens = (context == Context.START_OF_EXPR); if (needsParens) { add("("); } add("{"); [BUGGY] [BUGGY] for (Node c = first; c != null; c = c.getNext()) { if (c != first) { cc.listSeparator(); } if (c.getType() == Token.GET || c.getType() == Token.SET) { add(c); } else { Preconditions.checkState(c.getType() == Token.STRING); String key = c.getString();  [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preserveBlock double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String key name o opstr regexp Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	add	
51	[BUG] [BUGGY] add("}"); [FE] ComparisonFailure [CONTEXT] if (!Double.isNaN(d)) { cc.addNumber(d); } else { addExpr(c, 1); } } add(":"); addExpr(c.getFirstChild(), 1); } } [BUGGY] add("}"); [BUGGY] if (needsParens) { add(")"); } break; } case Token.SWITCH: add("switch("); add(first); add(")"); [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preserveBlock double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String key name o opstr regexp Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	
52	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] if (!Double.isNaN(d)) { cc.addNumber(d); } else { addExpr(c, 1); } } add(":"); addExpr(c.getFirstChild(), 1); } } [BUGGY] [BUGGY] add("}"); if (needsParens) { add(")"); } break; } case Token.SWITCH: add("switch("); add(first); add(")"); [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preserveBlock double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String key name o opstr regexp Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	add	
53	[BUG] [BUGGY] if (needsParens) { [FE] ComparisonFailure [CONTEXT] cc.addNumber(d); } else { addExpr(c, 1); } } add(":"); addExpr(c.getFirstChild(), 1); } } add("}"); [BUGGY] if (needsParens) { [BUGGY] add(")"); } break; } case Token.SWITCH: add("switch("); add(first); add(")"); cc.beginBlock(); [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preserveBlock double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String key name o opstr regexp Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	
54	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] cc.addNumber(d); } else { addExpr(c, 1); } } add(":"); addExpr(c.getFirstChild(), 1); } } add("}"); [BUGGY] [BUGGY] if (needsParens) { add(")"); } break; } case Token.SWITCH: add("switch("); add(first); add(")"); cc.beginBlock(); [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preserveBlock double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String key name o opstr regexp Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	add	
55	[BUG] [BUGGY] Preconditions.checkState(childCount == 0); [FE] ComparisonFailure [CONTEXT] addList(first); add(")"); break; case Token.COMMA: Preconditions.checkState(childCount == 2); addList(first, false, context); break; case Token.NUMBER: [BUGGY] Preconditions.checkState(childCount == 0); [BUGGY] cc.addNumber(n.getDouble()); break; case Token.TYPEOF: case Token.VOID: case Token.NOT: case Token.BITNOT: case Token.POS: {  Preconditions.checkState(childCount == 1); [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preserveBlock double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String key name o opstr regexp Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	
56	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] addList(first); add(")"); break; case Token.COMMA: Preconditions.checkState(childCount == 2); addList(first, false, context); break; case Token.NUMBER: [BUGGY] [BUGGY] Preconditions.checkState(childCount == 0); cc.addNumber(n.getDouble()); break; case Token.TYPEOF: case Token.VOID: case Token.NOT: case Token.BITNOT: case Token.POS: {  Preconditions.checkState(childCount == 1); [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preserveBlock double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String key name o opstr regexp Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	add	
57	[BUG] [BUGGY] cc.addNumber(n.getDouble()); [FE] ComparisonFailure [CONTEXT] add(")"); break; case Token.COMMA: Preconditions.checkState(childCount == 2); addList(first, false, context); break; case Token.NUMBER: Preconditions.checkState(childCount == 0); [BUGGY] cc.addNumber(n.getDouble()); [BUGGY] break; case Token.TYPEOF: case Token.VOID: case Token.NOT: case Token.BITNOT: case Token.POS: {  Preconditions.checkState(childCount == 1); cc.addOp(NodeUtil.opToStrNoFail(type), false); [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preserveBlock double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String key name o opstr regexp Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	227	227	1	replace	
58	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] add(")"); break; case Token.COMMA: Preconditions.checkState(childCount == 2); addList(first, false, context); break; case Token.NUMBER: Preconditions.checkState(childCount == 0); [BUGGY] [BUGGY] cc.addNumber(n.getDouble()); break; case Token.TYPEOF: case Token.VOID: case Token.NOT: case Token.BITNOT: case Token.POS: {  Preconditions.checkState(childCount == 1); cc.addOp(NodeUtil.opToStrNoFail(type), false); [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preserveBlock double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String key name o opstr regexp Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	227	227	1	add	
59	[BUG] [BUGGY] break; [FE] ComparisonFailure [CONTEXT] break; case Token.COMMA: Preconditions.checkState(childCount == 2); addList(first, false, context); break; case Token.NUMBER: Preconditions.checkState(childCount == 0); cc.addNumber(n.getDouble()); [BUGGY] break; [BUGGY]  case Token.TYPEOF: case Token.VOID: case Token.NOT: case Token.BITNOT: case Token.POS: {  Preconditions.checkState(childCount == 1); cc.addOp(NodeUtil.opToStrNoFail(type), false); addExpr(first, NodeUtil.precedence(type)); [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preserveBlock double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String key name o opstr regexp Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	
60	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] break; case Token.COMMA: Preconditions.checkState(childCount == 2); addList(first, false, context); break; case Token.NUMBER: Preconditions.checkState(childCount == 0); cc.addNumber(n.getDouble()); [BUGGY] [BUGGY] break; case Token.TYPEOF: case Token.VOID: case Token.NOT: case Token.BITNOT: case Token.POS: {  Preconditions.checkState(childCount == 1); cc.addOp(NodeUtil.opToStrNoFail(type), false); addExpr(first, NodeUtil.precedence(type)); [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preserveBlock double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String key name o opstr regexp Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	add	
