bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if((  c.getType()  ==  Token.GET  &&  c.getType()  ==  Token.SET)||(c.getType()  ==  Token.SET))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if((  c.getType()  ==  Token.GET  &&  c.getType()  ==  Token.SET)||(c.getType()  ==  Token.SET))  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if((  c.getType()  ==  Token.GET  &&  c.getType()  ==  Token.SET)||(c.getType()  ==  Token.SET))  {	  if    ((    c.getType()    ==    Token.GET    ||    c.getType()    ==    Token.SET))    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
2	[BUG]  [BUGGY]  if((  c.getType()  ==  Token.GET  &&  c.getType()  ==  Token.SET))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if((  c.getType()  ==  Token.GET  &&  c.getType()  ==  Token.SET))  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if((  c.getType()  ==  Token.GET  &&  c.getType()  ==  Token.SET))  {	  if    ((    c.getType()    ==    Token.GET    ||    c.getType()    ==    Token.SET))    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
3	[BUG]  [BUGGY]  if((  c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)&&!needsParens)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if((  c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)&&!needsParens)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if((  c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)&&!needsParens)  {	  if    ((    c.getType()    ==    Token.GET    ||    c.getType()    ==    Token.SET))    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
4	[BUG]  [BUGGY]  if((  c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)&&  NodeUtil.isFunctionAnonymous(c))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if((  c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)&&  NodeUtil.isFunctionAnonymous(c))  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if((  c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)&&  NodeUtil.isFunctionAnonymous(c))  {	  if    ((    c.getType()    ==    Token.GET    ||    c.getType()    ==    Token.SET))    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
5	[BUG]  [BUGGY]  Node  body  =  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Node  body  =  n.getLastChild();  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Node  body  =  n.getLastChild();	  Node    body    =    c.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
6	[BUG]  [BUGGY]  Node  body  =  c.getNext();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Node  body  =  c.getNext();  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Node  body  =  c.getNext();	  Node    body    =    c.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
7	[BUG]  [BUGGY]  Node  body  =  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Node  body  =  n.getFirstChild();  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Node  body  =  n.getFirstChild();	  Node    body    =    c.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
8	[BUG]  [BUGGY]  Node  body  =  first.getLastChild();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Node  body  =  first.getLastChild();  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Node  body  =  first.getLastChild();	  Node    body    =    c.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
9	[BUG]  [BUGGY]  Node  body  =  c.next();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Node  body  =  c.next();  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Node  body  =  c.next();	  Node    body    =    c.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
10	[BUG]  [BUGGY]  Context  c  =  cc.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Context  c  =  cc.getCurrentContext();  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Context  c  =  cc.getCurrentContext();	  Context    c    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
11	[BUG]  [BUGGY]  Context  c  =  c.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Context  c  =  c.getCurrentContext();  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Context  c  =  c.getCurrentContext();	  Context    c    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
12	[BUG]  [BUGGY]  Context  c  =  n.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Context  c  =  n.getCurrentContext();  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Context  c  =  n.getCurrentContext();	  Context    c    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
13	[BUG]  [BUGGY]  Context  c  =  getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Context  c  =  getCurrentContext();  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Context  c  =  getCurrentContext();	  Context    c    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
14	[BUG]  [BUGGY]  Context  c  =  context.getCurrentContext(n);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Context  c  =  context.getCurrentContext(n);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Context  c  =  context.getCurrentContext(n);	  Context    c    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
15	[BUG]  [BUGGY]  Context  c  =  context.getCurrentContextForNode(c);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Context  c  =  context.getCurrentContextForNode(c);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Context  c  =  context.getCurrentContextForNode(c);	  Context    c    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
16	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.GET  &&  c.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if  (c.getType()  ==  Token.GET  &&  c.getType()  ==  Token.STRING)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if  (c.getType()  ==  Token.GET  &&  c.getType()  ==  Token.STRING)  {	  if    (c.getType()    ==    Token.GET    ||    c.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
17	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.GET  ||  c.getType()!=  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if  (c.getType()  ==  Token.GET  ||  c.getType()!=  Token.STRING)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if  (c.getType()  ==  Token.GET  ||  c.getType()!=  Token.STRING)  {	  if    (c.getType()    ==    Token.GET    ||    c.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
18	[BUG]  [BUGGY]  if(c.getType()  ==  Token.STRING  &&  c.getType()!=  Token.GET)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.STRING  &&  c.getType()!=  Token.GET)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.STRING  &&  c.getType()!=  Token.GET)  {	  if    (c.getType()    ==    Token.STRING    &&    c.getType()    ==    Token.GET)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
19	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()!=  Token.STRING);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Preconditions.checkState(c.getType()!=  Token.STRING);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Preconditions.checkState(c.getType()!=  Token.STRING);	  Preconditions.checkState(c.getType()    ==    Token.STRING);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
20	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING,  c.getString());  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING,  c.getString());  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Preconditions.checkState(c.getType()  ==  Token.STRING,  c.getString());	  Preconditions.checkState(c.getType()    ==    Token.STRING);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
21	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.FUNCTION);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(c.getType()    ==    Token.STRING);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
22	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.NAME);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.NAME);	  Preconditions.checkState(c.getType()    ==    Token.STRING);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
23	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.GETPROP);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.GETPROP);	  Preconditions.checkState(c.getType()    ==    Token.STRING);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
24	[BUG]  [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.STRING);  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.STRING);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Preconditions.checkState(first.getType()  ==  Token.STRING);	  Preconditions.checkState(c.getType()    ==    Token.STRING);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
25	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()!=  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Preconditions.checkState(c.getType()!=  Token.FUNCTION);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Preconditions.checkState(c.getType()!=  Token.FUNCTION);	  Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
26	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.GETPROP);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.GETPROP);	  Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
27	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
28	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.NAME);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.NAME);	  Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
29	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.EXPR);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.EXPR);	  Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
30	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.CATCH);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.CATCH);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.CATCH);	  Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
31	[BUG]  [BUGGY]  if(!(c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.GET))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(!(c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.GET))  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(!(c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.GET))  {	  if(!(c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.GET))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
32	[BUG]  [BUGGY]  if(!(c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.STRING))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(!(c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.STRING))  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(!(c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.STRING))  {	  if(!(c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.GET))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
33	[BUG]  [BUGGY]  if(!c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.GET)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(!c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.GET)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(!c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.GET)  {	  if(!(c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.GET))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
34	[BUG]  [BUGGY]  if(!(c.getType()  ==  Token.STRING  ||  c.getType()!=  Token.GET))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(!(c.getType()  ==  Token.STRING  ||  c.getType()!=  Token.GET))  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(!(c.getType()  ==  Token.STRING  ||  c.getType()!=  Token.GET))  {	  if(!(c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.GET))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
35	[BUG]  [BUGGY]  int  childCount  =  c.getLastChild().getIndex();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  int  childCount  =  c.getLastChild().getIndex();  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	int  childCount  =  c.getLastChild().getIndex();	  int    childCount    =    c.getFirstChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
36	[BUG]  [BUGGY]  int  childCount  =  c.getFirstChild().getIndex()  +  1;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  int  childCount  =  c.getFirstChild().getIndex()  +  1;  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	int  childCount  =  c.getFirstChild().getIndex()  +  1;	  int    childCount    =    c.getFirstChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
37	[BUG]  [BUGGY]  int  childCount  =  c.getFirstChild().getIndex()  -  1;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  int  childCount  =  c.getFirstChild().getIndex()  -  1;  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	int  childCount  =  c.getFirstChild().getIndex()  -  1;	  int    childCount    =    c.getFirstChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
38	[BUG]  [BUGGY]  int  childCount  =  c.getFirstChild().getIndex()  *  2;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  int  childCount  =  c.getFirstChild().getIndex()  *  2;  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	int  childCount  =  c.getFirstChild().getIndex()  *  2;	  int    childCount    =    c.getFirstChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
39	[BUG]  [BUGGY]  int  childCount  =  c.getFirstChild().getIndex(context);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  int  childCount  =  c.getFirstChild().getIndex(context);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	int  childCount  =  c.getFirstChild().getIndex(context);	  int    childCount    =    c.getFirstChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
40	[BUG]  [BUGGY]  int  childCount  =  c.getChildCount().getIndex();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  int  childCount  =  c.getChildCount().getIndex();  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	int  childCount  =  c.getChildCount().getIndex();	  int    childCount    =    c.getFirstChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
41	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()!=  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Preconditions.checkState(c.getType()!=  Token.NAME);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Preconditions.checkState(c.getType()!=  Token.NAME);	  Preconditions.checkState(c.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
42	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.NAME,  c.getString());  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.NAME,  c.getString());  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Preconditions.checkState(c.getType()  ==  Token.NAME,  c.getString());	  Preconditions.checkState(c.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
43	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.GETPROP);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Preconditions.checkState(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.GETPROP);	  Preconditions.checkState(c.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
44	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.FUNCTION);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Preconditions.checkState(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(c.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
45	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.NAME,  c.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.NAME,  c.getFirstChild());  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Preconditions.checkState(c.getType()  ==  Token.NAME,  c.getFirstChild());	  Preconditions.checkState(c.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
46	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.BLOCK);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Preconditions.checkState(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.BLOCK);	  Preconditions.checkState(c.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
47	[BUG]  [BUGGY]  if(c.getType()  ==  Token.CATCH  &&  c.getType()  ==  Token.SET)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.CATCH  &&  c.getType()  ==  Token.SET)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.CATCH  &&  c.getType()  ==  Token.SET)  {	  if(c.getType()    ==    Token.CATCH    ||    c.getType()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
48	[BUG]  [BUGGY]  if(c.getType()  ==  Token.CATCH  ||  c.getType()!=  Token.SET)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.CATCH  ||  c.getType()!=  Token.SET)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.CATCH  ||  c.getType()!=  Token.SET)  {	  if(c.getType()    ==    Token.CATCH    ||    c.getType()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
49	[BUG]  [BUGGY]  if(c.getType()!=  Token.CATCH  ||  c.getType()  ==  Token.SET)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()!=  Token.CATCH  ||  c.getType()  ==  Token.SET)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()!=  Token.CATCH  ||  c.getType()  ==  Token.SET)  {	  if(c.getType()    ==    Token.CATCH    ||    c.getType()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
50	[BUG]  [BUGGY]  if(c.getType()  ==  Token.SET  ||  c.getType()  ==  Token.CATCH)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.SET  ||  c.getType()  ==  Token.CATCH)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.SET  ||  c.getType()  ==  Token.CATCH)  {	  if(c.getType()    ==    Token.CATCH    ||    c.getType()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
51	[BUG]  [BUGGY]  if(c.getType()  ==  Token.GETPROP  ||  c.getType()  ==  Token.SETPROP)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.GETPROP  ||  c.getType()  ==  Token.SETPROP)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.GETPROP  ||  c.getType()  ==  Token.SETPROP)  {	  if(c.getType()    ==    Token.CATCH    ||    c.getType()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
52	[BUG]  [BUGGY]  Context  cc  =  getContextForNoInOperator(c);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Context  cc  =  getContextForNoInOperator(c);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Context  cc  =  getContextForNoInOperator(c);	  Context    cc    =    getContextForNoInOperator(context);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
53	[BUG]  [BUGGY]  Context  cc  =  getContextForNoInOperator(context,  c);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Context  cc  =  getContextForNoInOperator(context,  c);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Context  cc  =  getContextForNoInOperator(context,  c);	  Context    cc    =    getContextForNoInOperator(context);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
54	[BUG]  [BUGGY]  Context  cc  =  getContextForNoInOperator(context,  n);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Context  cc  =  getContextForNoInOperator(context,  n);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Context  cc  =  getContextForNoInOperator(context,  n);	  Context    cc    =    getContextForNoInOperator(context);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
55	[BUG]  [BUGGY]  Context  cc  =  getContextForNoInOperator(n);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Context  cc  =  getContextForNoInOperator(n);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Context  cc  =  getContextForNoInOperator(n);	  Context    cc    =    getContextForNoInOperator(context);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
56	[BUG]  [BUGGY]  Context  cc  =  getContextForNonOperator(context);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Context  cc  =  getContextForNonOperator(context);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Context  cc  =  getContextForNonOperator(context);	  Context    cc    =    getContextForNoInOperator(context);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
57	[BUG]  [BUGGY]  Context  cc  =  getContextForNonInoperator(context);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Context  cc  =  getContextForNonInoperator(context);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Context  cc  =  getContextForNonInoperator(context);	  Context    cc    =    getContextForNoInOperator(context);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
58	[BUG]  [BUGGY]  Node  c  =  c.getNext();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Node  c  =  c.getNext();  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Node  c  =  c.getNext();	  Node    c    =    first.getNext();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
59	[BUG]  [BUGGY]  Node  c  =  n.getNext();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Node  c  =  n.getNext();  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Node  c  =  n.getNext();	  Node    c    =    first.getNext();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
60	[BUG]  [BUGGY]  Node  c  =  cc.getNext();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Node  c  =  cc.getNext();  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Node  c  =  cc.getNext();	  Node    c    =    first.getNext();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
61	[BUG]  [BUGGY]  Node  c  =  first.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Node  c  =  first.getFirstChild();  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Node  c  =  first.getFirstChild();	  Node    c    =    first.getNext();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
62	[BUG]  [BUGGY]  Node  c  =  body.getNext();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Node  c  =  body.getNext();  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Node  c  =  body.getNext();	  Node    c    =    first.getNext();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
63	[BUG]  [BUGGY]  Node  c  =  first;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Node  c  =  first;  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Node  c  =  first;	  Node    c    =    first.getNext();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
64	[BUG]  [BUGGY]  if(c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.SET)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.SET)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.SET)  {	  if(c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
65	[BUG]  [BUGGY]  if(c.getType()!=  Token.STRING  &&  c.getType()  ==  Token.SET)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()!=  Token.STRING  &&  c.getType()  ==  Token.SET)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()!=  Token.STRING  &&  c.getType()  ==  Token.SET)  {	  if(c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
66	[BUG]  [BUGGY]  if(c.getType()  ==  Token.STRING  ||  c.getType()!=  Token.SET)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.STRING  ||  c.getType()!=  Token.SET)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.STRING  ||  c.getType()!=  Token.SET)  {	  if(c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
67	[BUG]  [BUGGY]  if(c.getType()!=  Token.STRING  ||  c.getType()  ==  Token.SET)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()!=  Token.STRING  ||  c.getType()  ==  Token.SET)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()!=  Token.STRING  ||  c.getType()  ==  Token.SET)  {	  if(c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
68	[BUG]  [BUGGY]  if(c.getType()  ==  Token.STRING  &&  c.getType()!=  Token.SET)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.STRING  &&  c.getType()!=  Token.SET)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.STRING  &&  c.getType()!=  Token.SET)  {	  if(c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
69	[BUG]  [BUGGY]  if(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.STRING)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.STRING)  {	  if(c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
70	[BUG]  [BUGGY]  if(c.getType()  ==  Token.NAME  &&  c.getType()  ==  Token.BLOCK  ||  c.getType()  ==  Token.SET)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.NAME  &&  c.getType()  ==  Token.BLOCK  ||  c.getType()  ==  Token.SET)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.NAME  &&  c.getType()  ==  Token.BLOCK  ||  c.getType()  ==  Token.SET)  {	  if(c.getType()    ==    Token.NAME    ||    c.getType()    ==    Token.BLOCK    ||    c.getType()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
71	[BUG]  [BUGGY]  if(c.getType()  ==  Token.NAME  ||  c.getType()!=  Token.BLOCK  ||  c.getType()  ==  Token.SET)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.NAME  ||  c.getType()!=  Token.BLOCK  ||  c.getType()  ==  Token.SET)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.NAME  ||  c.getType()!=  Token.BLOCK  ||  c.getType()  ==  Token.SET)  {	  if(c.getType()    ==    Token.NAME    ||    c.getType()    ==    Token.BLOCK    ||    c.getType()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
72	[BUG]  [BUGGY]  if(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.BLOCK  ||  c.getType()!=  Token.SET)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.BLOCK  ||  c.getType()!=  Token.SET)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.BLOCK  ||  c.getType()!=  Token.SET)  {	  if(c.getType()    ==    Token.NAME    ||    c.getType()    ==    Token.BLOCK    ||    c.getType()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
73	[BUG]  [BUGGY]  if(c.getType()!=  Token.NAME  ||  c.getType()  ==  Token.BLOCK  ||  c.getType()  ==  Token.SET)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()!=  Token.NAME  ||  c.getType()  ==  Token.BLOCK  ||  c.getType()  ==  Token.SET)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()!=  Token.NAME  ||  c.getType()  ==  Token.BLOCK  ||  c.getType()  ==  Token.SET)  {	  if(c.getType()    ==    Token.NAME    ||    c.getType()    ==    Token.BLOCK    ||    c.getType()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
74	[BUG]  [BUGGY]  if(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.BLOCK  ||  c.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.BLOCK  ||  c.getType()  ==  Token.STRING)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.BLOCK  ||  c.getType()  ==  Token.STRING)  {	  if(c.getType()    ==    Token.NAME    ||    c.getType()    ==    Token.BLOCK    ||    c.getType()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
75	[BUG]  [BUGGY]  if(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.BLOCK  ||  c.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.BLOCK  ||  c.getType()  ==  Token.GETPROP)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.BLOCK  ||  c.getType()  ==  Token.GETPROP)  {	  if(c.getType()    ==    Token.NAME    ||    c.getType()    ==    Token.BLOCK    ||    c.getType()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
76	[BUG]  [BUGGY]  if(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.GET  &&  c.getType()  ==  Token.SET)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.GET  &&  c.getType()  ==  Token.SET)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.GET  &&  c.getType()  ==  Token.SET)  {	  if(c.getType()    ==    Token.STRING    &&    c.getType()    ==    Token.GET    &&    c.getType()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
77	[BUG]  [BUGGY]  if(c.getType()  ==  Token.STRING  &&  c.getType()!=  Token.GET  ||  c.getType()  ==  Token.SET)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.STRING  &&  c.getType()!=  Token.GET  ||  c.getType()  ==  Token.SET)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.STRING  &&  c.getType()!=  Token.GET  ||  c.getType()  ==  Token.SET)  {	  if(c.getType()    ==    Token.STRING    &&    c.getType()    ==    Token.GET    &&    c.getType()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
78	[BUG]  [BUGGY]  if(c.getType()  ==  Token.STRING  &&  c.getType()!=  Token.GET  &&  c.getType()  ==  Token.SET)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.STRING  &&  c.getType()!=  Token.GET  &&  c.getType()  ==  Token.SET)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.STRING  &&  c.getType()!=  Token.GET  &&  c.getType()  ==  Token.SET)  {	  if(c.getType()    ==    Token.STRING    &&    c.getType()    ==    Token.GET    &&    c.getType()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
79	[BUG]  [BUGGY]  if(c.getType()!=  Token.STRING  &&  c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()!=  Token.STRING  &&  c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()!=  Token.STRING  &&  c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {	  if(c.getType()    ==    Token.STRING    &&    c.getType()    ==    Token.GET    &&    c.getType()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
80	[BUG]  [BUGGY]  if(c.getType()!=  Token.STRING  &&  c.getType()  ==  Token.GET  &&  c.getType()  ==  Token.SET)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()!=  Token.STRING  &&  c.getType()  ==  Token.GET  &&  c.getType()  ==  Token.SET)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()!=  Token.STRING  &&  c.getType()  ==  Token.GET  &&  c.getType()  ==  Token.SET)  {	  if(c.getType()    ==    Token.STRING    &&    c.getType()    ==    Token.GET    &&    c.getType()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
81	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.SET  &&  c.getType()!=  Token.GET)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if  (c.getType()  ==  Token.SET  &&  c.getType()!=  Token.GET)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if  (c.getType()  ==  Token.SET  &&  c.getType()!=  Token.GET)  {	  if    (c.getType()    ==    Token.SET    ||    c.getType()!=    Token.GET)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
82	[BUG]  [BUGGY]  if(c.getType()!=  Token.BLOCK  &&  c.getType()  ==  Token.SET)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()!=  Token.BLOCK  &&  c.getType()  ==  Token.SET)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()!=  Token.BLOCK  &&  c.getType()  ==  Token.SET)  {	  if(c.getType()!=    Token.BLOCK    ||    c.getType()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
83	[BUG]  [BUGGY]  if(c.getType()  ==  Token.GET  &&  c.getType()  ==  Token.SET  ||  c.getType()  ==  Token.SET)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.GET  &&  c.getType()  ==  Token.SET  ||  c.getType()  ==  Token.SET)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.GET  &&  c.getType()  ==  Token.SET  ||  c.getType()  ==  Token.SET)  {	  if(c.getType()!=    Token.GET    &&    c.getType()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
84	[BUG]  [BUGGY]  if  (c.getType()!=  Token.STRING  &&  c.getType()!=  Token.GET)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if  (c.getType()!=  Token.STRING  &&  c.getType()!=  Token.GET)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if  (c.getType()!=  Token.STRING  &&  c.getType()!=  Token.GET)  {	  if    (c.getType()    ==    Token.STRING    ||    c.getType()!=    Token.GET)    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
85	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()!=  Token.CATCH);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Preconditions.checkState(c.getType()!=  Token.CATCH);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Preconditions.checkState(c.getType()!=  Token.CATCH);	  Preconditions.checkState(c.getType()    ==    Token.CATCH);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
86	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.GETPROP);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Preconditions.checkState(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.GETPROP);	  Preconditions.checkState(c.getType()    ==    Token.CATCH);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
87	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.NAME);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Preconditions.checkState(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.NAME);	  Preconditions.checkState(c.getType()    ==    Token.CATCH);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
88	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.FUNCTION);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Preconditions.checkState(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(c.getType()    ==    Token.CATCH);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
89	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.BLOCK);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Preconditions.checkState(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.BLOCK);	  Preconditions.checkState(c.getType()    ==    Token.CATCH);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
90	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.CATCH);  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.CATCH);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Preconditions.checkState(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.CATCH);	  Preconditions.checkState(c.getType()    ==    Token.CATCH);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
91	[BUG]  [BUGGY]  if(c.getType()!=  Token.SET  &&  c.getType()  ==  Token.GET)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()!=  Token.SET  &&  c.getType()  ==  Token.GET)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()!=  Token.SET  &&  c.getType()  ==  Token.GET)  {	  if(c.getType()!=    Token.SET    ||    c.getType()    ==    Token.GET)    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
92	[BUG]  [BUGGY]  if(c.getType()  ==  Token.BLOCK  &&  c.getType()!=  Token.SET)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.BLOCK  &&  c.getType()!=  Token.SET)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.BLOCK  &&  c.getType()!=  Token.SET)  {	  if(c.getType()    ==    Token.BLOCK    ||    c.getType()!=    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
93	[BUG]  [BUGGY]  if(c.getType()  ==  Token.STRING  ||  c.getType()!=  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.STRING  ||  c.getType()!=  Token.BLOCK)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.STRING  ||  c.getType()!=  Token.BLOCK)  {	  if(c.getType()    ==    Token.BLOCK    ||    c.getType()!=    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
94	[BUG]  [BUGGY]  if(c.getType()!=  Token.BLOCK  &&  c.getType()!=  Token.SET)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()!=  Token.BLOCK  &&  c.getType()!=  Token.SET)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()!=  Token.BLOCK  &&  c.getType()!=  Token.SET)  {	  if(c.getType()    ==    Token.BLOCK    ||    c.getType()!=    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
95	[BUG]  [BUGGY]  if(c.getType()!=  Token.BLOCK  ||  c.getType()!=  Token.SET)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()!=  Token.BLOCK  ||  c.getType()!=  Token.SET)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()!=  Token.BLOCK  ||  c.getType()!=  Token.SET)  {	  if(c.getType()    ==    Token.BLOCK    ||    c.getType()!=    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
96	[BUG]  [BUGGY]  if(c.getType()  ==  Token.GET  ||  c.getFirstChild()  ==  Token.SET)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.GET  ||  c.getFirstChild()  ==  Token.SET)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.GET  ||  c.getFirstChild()  ==  Token.SET)  {	  if(c.getType()    ==    Token.GET    &&    c.getFirstChild()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
97	[BUG]  [BUGGY]  if(c.getType()  ==  Token.GET  &&  c.getLastChild()  ==  Token.SET)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.GET  &&  c.getLastChild()  ==  Token.SET)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.GET  &&  c.getLastChild()  ==  Token.SET)  {	  if(c.getType()    ==    Token.GET    &&    c.getFirstChild()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
98	[BUG]  [BUGGY]  if(c.getType()  ==  Token.GET  &&  c.getFirstChild()!=  Token.SET)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.GET  &&  c.getFirstChild()!=  Token.SET)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.GET  &&  c.getFirstChild()!=  Token.SET)  {	  if(c.getType()    ==    Token.GET    &&    c.getFirstChild()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
99	[BUG]  [BUGGY]  if(c.getType()!=  Token.GET  &&  c.getFirstChild()  ==  Token.SET)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()!=  Token.GET  &&  c.getFirstChild()  ==  Token.SET)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()!=  Token.GET  &&  c.getFirstChild()  ==  Token.SET)  {	  if(c.getType()    ==    Token.GET    &&    c.getFirstChild()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
100	[BUG]  [BUGGY]  if(c.getType()  ==  Token.SET  &&  c.getFirstChild()  ==  Token.GET)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.SET  &&  c.getFirstChild()  ==  Token.GET)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.SET  &&  c.getFirstChild()  ==  Token.GET)  {	  if(c.getType()    ==    Token.GET    &&    c.getFirstChild()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
101	[BUG]  [BUGGY]  if(c.getType()!=  Token.GET  ||  c.getFirstChild()  ==  Token.SET)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()!=  Token.GET  ||  c.getFirstChild()  ==  Token.SET)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()!=  Token.GET  ||  c.getFirstChild()  ==  Token.SET)  {	  if(c.getType()    ==    Token.GET    &&    c.getFirstChild()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
102	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()!=  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Preconditions.checkState(c.getType()!=  Token.EXPR_RESULT);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Preconditions.checkState(c.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(c.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
103	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.EXPR_RESULT  ||  c.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.EXPR_RESULT  ||  c.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Preconditions.checkState(c.getType()  ==  Token.EXPR_RESULT  ||  c.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(c.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
104	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.EXPR);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Preconditions.checkState(c.getType()  ==  Token.EXPR);	  Preconditions.checkState(c.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
105	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.EXPR_RESULT  ||  c.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.EXPR_RESULT  ||  c.getType()  ==  Token.FUNCTION);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Preconditions.checkState(c.getType()  ==  Token.EXPR_RESULT  ||  c.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(c.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
106	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.EXPR_RESULT,  needsParens);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.EXPR_RESULT,  needsParens);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Preconditions.checkState(c.getType()  ==  Token.EXPR_RESULT,  needsParens);	  Preconditions.checkState(c.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
107	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.EXPR_RESULT  ||  c.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.EXPR_RESULT  ||  c.getType()  ==  Token.BLOCK);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Preconditions.checkState(c.getType()  ==  Token.EXPR_RESULT  ||  c.getType()  ==  Token.BLOCK);	  Preconditions.checkState(c.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
108	[BUG]  [BUGGY]  if(c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.BLOCK)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.BLOCK)  {	  if(c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
109	[BUG]  [BUGGY]  if(c.getType()!=  Token.STRING  &&  c.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()!=  Token.STRING  &&  c.getType()  ==  Token.BLOCK)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()!=  Token.STRING  &&  c.getType()  ==  Token.BLOCK)  {	  if(c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
110	[BUG]  [BUGGY]  if(c.getType()!=  Token.STRING  ||  c.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()!=  Token.STRING  ||  c.getType()  ==  Token.BLOCK)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()!=  Token.STRING  ||  c.getType()  ==  Token.BLOCK)  {	  if(c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
111	[BUG]  [BUGGY]  if(c.getType()  ==  Token.STRING  &&  c.getType()!=  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.STRING  &&  c.getType()!=  Token.BLOCK)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.STRING  &&  c.getType()!=  Token.BLOCK)  {	  if(c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
112	[BUG]  [BUGGY]  Node  body  =  first.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Node  body  =  first.getFirstChild();  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Node  body  =  first.getFirstChild();	  Node    body    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
113	[BUG]  [BUGGY]  Node  body  =  context.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Node  body  =  context.getFirstChild();  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Node  body  =  context.getFirstChild();	  Node    body    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
114	[BUG]  [BUGGY]  if(c.getType()  ==  Token.BLOCK  &&  c.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.BLOCK  &&  c.getType()  ==  Token.GETPROP)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.BLOCK  &&  c.getType()  ==  Token.GETPROP)  {	  if(c.getType()    ==    Token.BLOCK    ||    c.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
115	[BUG]  [BUGGY]  if(c.getType()  ==  Token.GETPROP  ||  c.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.GETPROP  ||  c.getType()  ==  Token.BLOCK)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.GETPROP  ||  c.getType()  ==  Token.BLOCK)  {	  if(c.getType()    ==    Token.BLOCK    ||    c.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
116	[BUG]  [BUGGY]  if(c.getType()  ==  Token.BLOCK  ||  c.getType()!=  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.BLOCK  ||  c.getType()!=  Token.GETPROP)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.BLOCK  ||  c.getType()!=  Token.GETPROP)  {	  if(c.getType()    ==    Token.BLOCK    ||    c.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
117	[BUG]  [BUGGY]  if(c.getType()!=  Token.BLOCK  ||  c.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()!=  Token.BLOCK  ||  c.getType()  ==  Token.GETPROP)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()!=  Token.BLOCK  ||  c.getType()  ==  Token.GETPROP)  {	  if(c.getType()    ==    Token.BLOCK    ||    c.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
118	[BUG]  [BUGGY]  if(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.GETPROP)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.GETPROP)  {	  if(c.getType()    ==    Token.BLOCK    ||    c.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
119	[BUG]  [BUGGY]  if(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.GETPROP)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.GETPROP)  {	  if(c.getType()    ==    Token.BLOCK    ||    c.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
120	[BUG]  [BUGGY]  if(c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.BLOCK  &&  c.getType()  ==  Token.SET)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.BLOCK  &&  c.getType()  ==  Token.SET)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.BLOCK  &&  c.getType()  ==  Token.SET)  {	  if(c.getType()    ==    Token.BLOCK    &&    c.getType()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
121	[BUG]  [BUGGY]  if(c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.BLOCK  ||  c.getType()  ==  Token.SET)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.BLOCK  ||  c.getType()  ==  Token.SET)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.BLOCK  ||  c.getType()  ==  Token.SET)  {	  if(c.getType()    ==    Token.BLOCK    &&    c.getType()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
122	[BUG]  [BUGGY]  if(c.getType()  ==  Token.GETPROP  &&  c.getType()  ==  Token.BLOCK  &&  c.getType()  ==  Token.SETPROP)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.GETPROP  &&  c.getType()  ==  Token.BLOCK  &&  c.getType()  ==  Token.SETPROP)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.GETPROP  &&  c.getType()  ==  Token.BLOCK  &&  c.getType()  ==  Token.SETPROP)  {	  if(c.getType()    ==    Token.BLOCK    &&    c.getType()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
123	[BUG]  [BUGGY]  if(c.getType()  ==  Token.BLOCK  &&  c.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.BLOCK  &&  c.getType()  ==  Token.STRING)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.BLOCK  &&  c.getType()  ==  Token.STRING)  {	  if(c.getType()    ==    Token.BLOCK    ||    c.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
124	[BUG]  [BUGGY]  if(c.getType()  ==  Token.BLOCK  ||  c.getType()!=  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.BLOCK  ||  c.getType()!=  Token.STRING)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.BLOCK  ||  c.getType()!=  Token.STRING)  {	  if(c.getType()    ==    Token.BLOCK    ||    c.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
125	[BUG]  [BUGGY]  if(c.getType()!=  Token.BLOCK  ||  c.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()!=  Token.BLOCK  ||  c.getType()  ==  Token.STRING)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()!=  Token.BLOCK  ||  c.getType()  ==  Token.STRING)  {	  if(c.getType()    ==    Token.BLOCK    ||    c.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
126	[BUG]  [BUGGY]  if(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.STRING)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.STRING)  {	  if(c.getType()    ==    Token.BLOCK    ||    c.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
127	[BUG]  [BUGGY]  if(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.STRING)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.STRING)  {	  if(c.getType()    ==    Token.BLOCK    ||    c.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
128	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if  (c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if  (c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {	  if    (c.getType()    ==    Token.STRING    &&    c.getType()    ==    Token.GET    ||    c.getType()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
129	[BUG]  [BUGGY]  if(c.getType()!=  Token.STRING  ||  c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()!=  Token.STRING  ||  c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()!=  Token.STRING  ||  c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {	  if    (c.getType()    ==    Token.STRING    &&    c.getType()    ==    Token.GET    ||    c.getType()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
130	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.NAME,  c);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.NAME,  c);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Preconditions.checkState(c.getType()  ==  Token.NAME,  c);	  Preconditions.checkState(c.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
131	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.NAME,  cc.getString());  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.NAME,  cc.getString());  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Preconditions.checkState(c.getType()  ==  Token.NAME,  cc.getString());	  Preconditions.checkState(c.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
132	[BUG]  [BUGGY]  Preconditions.checkArgument(c.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Preconditions.checkArgument(c.getType()  ==  Token.NAME);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Preconditions.checkArgument(c.getType()  ==  Token.NAME);	  Preconditions.checkState(c.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
133	[BUG]  [BUGGY]  if(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.BLOCK  ||  c.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.BLOCK  ||  c.getType()  ==  Token.GETPROP)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.BLOCK  ||  c.getType()  ==  Token.GETPROP)  {	  if(c.getType()    ==    Token.BLOCK    ||    c.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
134	[BUG]  [BUGGY]  if(c.getType()  ==  Token.BLOCK  ||  c.getType()  ==  Token.GETELEM)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.BLOCK  ||  c.getType()  ==  Token.GETELEM)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.BLOCK  ||  c.getType()  ==  Token.GETELEM)  {	  if(c.getType()    ==    Token.BLOCK    ||    c.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
135	[BUG]  [BUGGY]  int  childCount  =  c.getFirstChild().getLength();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  int  childCount  =  c.getFirstChild().getLength();  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	int  childCount  =  c.getFirstChild().getLength();	  int    childCount    =    c.getFirstChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
136	[BUG]  [BUGGY]  int  childCount  =  c.getFirstChild().getColumnCount();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  int  childCount  =  c.getFirstChild().getColumnCount();  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	int  childCount  =  c.getFirstChild().getColumnCount();	  int    childCount    =    c.getFirstChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
137	[BUG]  [BUGGY]  int  childCount  =  c.getFirstChild().getStartIndex();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  int  childCount  =  c.getFirstChild().getStartIndex();  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	int  childCount  =  c.getFirstChild().getStartIndex();	  int    childCount    =    c.getFirstChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
138	[BUG]  [BUGGY]  if(c.getType()  >=  Token.BLOCK  ||  c.getType()  ==  Token.SET)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  >=  Token.BLOCK  ||  c.getType()  ==  Token.SET)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  >=  Token.BLOCK  ||  c.getType()  ==  Token.SET)  {	  if(c.getType()!=    Token.BLOCK    ||    c.getType()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
139	[BUG]  [BUGGY]  if(c.getType()  ==  Token.BLACK  ||  c.getType()  ==  Token.SET)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.BLACK  ||  c.getType()  ==  Token.SET)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.BLACK  ||  c.getType()  ==  Token.SET)  {	  if(c.getType()!=    Token.BLOCK    ||    c.getType()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
140	[BUG]  [BUGGY]  if(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.SETS)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.SETS)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.SETS)  {	  if(c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
141	[BUG]  [BUGGY]  if(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.SETLIST)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.SETLIST)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.SETLIST)  {	  if(c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
142	[BUG]  [BUGGY]  if(c.getType()  ==  Token.NAME  ||  c.getType()!=  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.NAME  ||  c.getType()!=  Token.BLOCK)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.NAME  ||  c.getType()!=  Token.BLOCK)  {	  if(c.getType()    ==    Token.BLOCK    ||    c.getType()!=    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
143	[BUG]  [BUGGY]  if  (c.getType()!=  Token.GET  &&  c.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if  (c.getType()!=  Token.GET  &&  c.getType()  ==  Token.STRING)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if  (c.getType()!=  Token.GET  &&  c.getType()  ==  Token.STRING)  {	  if    (c.getType()    ==    Token.GET    ||    c.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
144	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.CATCH  ||  c.isQuotedString());  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.CATCH  ||  c.isQuotedString());  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Preconditions.checkState(c.getType()  ==  Token.CATCH  ||  c.isQuotedString());	  Preconditions.checkState(c.getType()    ==    Token.CATCH);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
145	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.CATCH  ||  c.hasChildren());  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.CATCH  ||  c.hasChildren());  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Preconditions.checkState(c.getType()  ==  Token.CATCH  ||  c.hasChildren());	  Preconditions.checkState(c.getType()    ==    Token.CATCH);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
146	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.isQuotedString());  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.isQuotedString());  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.isQuotedString());	  Preconditions.checkState(c.getType()    ==    Token.STRING);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
147	[BUG]  [BUGGY]  Preconditions.checkArgument(c.getType()  ==  Token.STRING);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Preconditions.checkArgument(c.getType()  ==  Token.STRING);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Preconditions.checkArgument(c.getType()  ==  Token.STRING);	  Preconditions.checkState(c.getType()    ==    Token.STRING);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
148	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING,  c.isQuotedString());  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING,  c.isQuotedString());  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Preconditions.checkState(c.getType()  ==  Token.STRING,  c.isQuotedString());	  Preconditions.checkState(c.getType()    ==    Token.STRING);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
149	[BUG]  [BUGGY]  if(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.BLOCK)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.BLOCK)  {	  if(c.getType()    ==    Token.BLOCK    ||    c.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
150	[BUG]  [BUGGY]  if(c.getType()  >=  Token.GET  ||  c.getType()!=  Token.SET)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  >=  Token.GET  ||  c.getType()!=  Token.SET)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  >=  Token.GET  ||  c.getType()!=  Token.SET)  {	  if(c.getType()!=    Token.GET    ||    c.getType()!=    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
151	[BUG]  [BUGGY]  if(c.getType()  ==  Token.GET  ||  c.getType()  >>  Token.SET)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.GET  ||  c.getType()  >>  Token.SET)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.GET  ||  c.getType()  >>  Token.SET)  {	  if(c.getType()!=    Token.GET    ||    c.getType()!=    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
152	[BUG]  [BUGGY]  if(c.getType()  ==  Token.GET  ||  c.getType()  >=  Token.SET)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.GET  ||  c.getType()  >=  Token.SET)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.GET  ||  c.getType()  >=  Token.SET)  {	  if(c.getType()!=    Token.GET    ||    c.getType()!=    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
153	[BUG]  [BUGGY]  Node  c  =  first.getLastChild();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Node  c  =  first.getLastChild();  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Node  c  =  first.getLastChild();	  Node    c    =    first.getNext();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
154	[BUG]  [BUGGY]  if(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.BLOCK)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.BLOCK)  {	  if(c.getType()    ==    Token.NAME    ||    c.getType()    ==    Token.BLOCK    ||    c.getType()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
155	[BUG]  [BUGGY]  Context  cc  =  getContextForNonEmptyContext(context);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Context  cc  =  getContextForNonEmptyContext(context);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Context  cc  =  getContextForNonEmptyContext(context);	  Context    cc    =    getContextForNoInOperator(context);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
156	[BUG]  [BUGGY]  Context  cc  =  getContextForNoInOperator(context,  false);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Context  cc  =  getContextForNoInOperator(context,  false);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Context  cc  =  getContextForNoInOperator(context,  false);	  Context    cc    =    getContextForNoInOperator(context);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
157	[BUG]  [BUGGY]  Context  cc  =  getContextForNoInOperator(context,  node);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Context  cc  =  getContextForNoInOperator(context,  node);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Context  cc  =  getContextForNoInOperator(context,  node);	  Context    cc    =    getContextForNoInOperator(context);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
158	[BUG]  [BUGGY]  Context  c  =  this.context.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Context  c  =  this.context.getCurrentContext();  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Context  c  =  this.context.getCurrentContext();	  Context    c    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
159	[BUG]  [BUGGY]  Context  c  =  context.getCurrentContext(c);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Context  c  =  context.getCurrentContext(c);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Context  c  =  context.getCurrentContext(c);	  Context    c    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
160	[BUG]  [BUGGY]  if((  c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)&&  NodeUtil.isFunction(first))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if((  c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)&&  NodeUtil.isFunction(first))  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if((  c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)&&  NodeUtil.isFunction(first))  {	  if    ((    c.getType()    ==    Token.GET    ||    c.getType()    ==    Token.SET))    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
161	[BUG]  [BUGGY]  if((  c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)&&  NodeUtil.isAssignmentOp(n))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if((  c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)&&  NodeUtil.isAssignmentOp(n))  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if((  c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)&&  NodeUtil.isAssignmentOp(n))  {	  if    ((    c.getType()    ==    Token.GET    ||    c.getType()    ==    Token.SET))    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
162	[BUG]  [BUGGY]  if(c.getType()  ==  Token.STRING  ||  c.getString()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.STRING  ||  c.getString()  ==  Token.BLOCK)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.STRING  ||  c.getString()  ==  Token.BLOCK)  {	  if(c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
163	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.STRING  &&  c.getFirstChild()  ==  Token.GET)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if  (c.getType()  ==  Token.STRING  &&  c.getFirstChild()  ==  Token.GET)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if  (c.getType()  ==  Token.STRING  &&  c.getFirstChild()  ==  Token.GET)  {	  if    (c.getType()    ==    Token.STRING    &&    c.getType()    ==    Token.GET)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
164	[BUG]  [BUGGY]  if(c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.GET)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.GET)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.GET)  {	  if    (c.getType()    ==    Token.STRING    &&    c.getType()    ==    Token.GET)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
165	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.STRING  &&  c.getChildCount()  ==  2)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if  (c.getType()  ==  Token.STRING  &&  c.getChildCount()  ==  2)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if  (c.getType()  ==  Token.STRING  &&  c.getChildCount()  ==  2)  {	  if    (c.getType()    ==    Token.STRING    &&    c.getType()    ==    Token.GET)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
166	[BUG]  [BUGGY]  if(!(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.GETPROP))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(!(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.GETPROP))  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(!(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.GETPROP))  {	  if(!(c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.GET))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
167	[BUG]  [BUGGY]  if(!(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.GETELEM))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(!(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.GETELEM))  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(!(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.GETELEM))  {	  if(!(c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.GET))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
168	[BUG]  [BUGGY]  if(c.getType()  ==  Token.FOR  &&  c.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.FOR  &&  c.getType()  ==  Token.BLOCK)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.FOR  &&  c.getType()  ==  Token.BLOCK)  {	  if(c.getType()    ==    Token.BLOCK    &&    c.getType()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
169	[BUG]  [BUGGY]  Node  body  =  c.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Node  body  =  c.removeFirstChild();  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Node  body  =  c.removeFirstChild();	  Node    body    =    c.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
170	[BUG]  [BUGGY]  if(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.CATCH)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.CATCH)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.CATCH)  {	  if(c.getType()    ==    Token.CATCH    ||    c.getType()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
171	[BUG]  [BUGGY]  if(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.CATCH)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.CATCH)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.CATCH)  {	  if(c.getType()    ==    Token.CATCH    ||    c.getType()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
172	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.hasChildren());  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.hasChildren());  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.hasChildren());	  Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
173	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.isQuotedString());  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.isQuotedString());  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.isQuotedString());	  Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
174	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getFirstChild()!=  first);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getFirstChild()!=  first);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getFirstChild()!=  first);	  Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
175	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getFirstChild()  ==  first);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getFirstChild()  ==  first);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getFirstChild()  ==  first);	  Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
176	[BUG]  [BUGGY]  if(c.getType()  ==  Token.GET  &&  c.getType()  ==  Token.SET  ||  c.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.GET  &&  c.getType()  ==  Token.SET  ||  c.getType()  ==  Token.STRING)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.GET  &&  c.getType()  ==  Token.SET  ||  c.getType()  ==  Token.STRING)  {	  if(c.getType()!=    Token.GET    &&    c.getType()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
177	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.EXPR_RESULT  ||  c.isQuotedString());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.EXPR_RESULT  ||  c.isQuotedString());  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Preconditions.checkState(c.getType()  ==  Token.EXPR_RESULT  ||  c.isQuotedString());	  Preconditions.checkState(c.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
178	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.EXPR_RESULT  ||  c.getType()  ==  Token.CATCH);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.EXPR_RESULT  ||  c.getType()  ==  Token.CATCH);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Preconditions.checkState(c.getType()  ==  Token.EXPR_RESULT  ||  c.getType()  ==  Token.CATCH);	  Preconditions.checkState(c.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
179	[BUG]  [BUGGY]  if(c.getType()  >=  Token.SET  ||  c.getType()  ==  Token.GET)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  >=  Token.SET  ||  c.getType()  ==  Token.GET)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  >=  Token.SET  ||  c.getType()  ==  Token.GET)  {	  if(c.getType()!=    Token.SET    ||    c.getType()    ==    Token.GET)    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
180	[BUG]  [BUGGY]  if(c.getType()  ==  Token.GET  &&  c.getFirstChild()  ==  Token.SET  ||  c.getFirstChild()  ==  first)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.GET  &&  c.getFirstChild()  ==  Token.SET  ||  c.getFirstChild()  ==  first)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.GET  &&  c.getFirstChild()  ==  Token.SET  ||  c.getFirstChild()  ==  first)  {	  if(c.getType()    ==    Token.GET    &&    c.getFirstChild()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
181	[BUG]  [BUGGY]  if(c.getType()  ==  Token.STRING  &&  c.getFirstChild()  ==  Token.SET)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.STRING  &&  c.getFirstChild()  ==  Token.SET)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.STRING  &&  c.getFirstChild()  ==  Token.SET)  {	  if(c.getType()    ==    Token.GET    &&    c.getFirstChild()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
182	[BUG]  [BUGGY]  if(c.getType()  >=  Token.STRING  ||  c.getType()  ==  Token.GET)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  >=  Token.STRING  ||  c.getType()  ==  Token.GET)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  >=  Token.STRING  ||  c.getType()  ==  Token.GET)  {	  if(c.getType()!=    Token.STRING    ||    c.getType()    ==    Token.GET)    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
183	[BUG]  [BUGGY]  if(c.getType()!=  Token.GET  ||  c.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()!=  Token.GET  ||  c.getType()  ==  Token.STRING)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()!=  Token.GET  ||  c.getType()  ==  Token.STRING)  {	  if    (c.getType()    ==    Token.GET    ||    c.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
184	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.STRING);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.STRING);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Preconditions.checkState(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.STRING);	  Preconditions.checkState(c.getType()    ==    Token.CATCH);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
185	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.VAR);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Preconditions.checkState(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.VAR);	  Preconditions.checkState(c.getType()    ==    Token.CATCH);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
186	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.SCRIPT);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.SCRIPT);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Preconditions.checkState(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.SCRIPT);	  Preconditions.checkState(c.getType()    ==    Token.CATCH);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
187	[BUG]  [BUGGY]  if(!(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.BLOCK))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(!(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.BLOCK))  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(!(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.BLOCK))  {	  if(c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
188	[BUG]  [BUGGY]  if(c.getType()  ==  Token.STRING  ||  c.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.STRING  ||  c.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.STRING  ||  c.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
189	[BUG]  [BUGGY]  if(!(c.getType()  ==  Token.SET  ||  c.getType()  ==  Token.GET))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(!(c.getType()  ==  Token.SET  ||  c.getType()  ==  Token.GET))  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(!(c.getType()  ==  Token.SET  ||  c.getType()  ==  Token.GET))  {	  if(c.getType()!=    Token.SET    ||    c.getType()    ==    Token.GET)    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
190	[BUG]  [BUGGY]  if(c.getType()  ==  Token.SCRIPT  ||  c.getType()  ==  Token.SET)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.SCRIPT  ||  c.getType()  ==  Token.SET)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.SCRIPT  ||  c.getType()  ==  Token.SET)  {	  if(c.getType()    ==    Token.CATCH    ||    c.getType()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
191	[BUG]  [BUGGY]  if(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.SET)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.SET)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.SET)  {	  if(c.getType()    ==    Token.CATCH    ||    c.getType()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
192	[BUG]  [BUGGY]  if(!(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(!(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET))  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(!(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET))  {	  if    (c.getType()    ==    Token.STRING    &&    c.getType()    ==    Token.GET    ||    c.getType()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
193	[BUG]  [BUGGY]  if(c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.GET  &&  c.getFirstChild()  ==  Token.SET)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.GET  &&  c.getFirstChild()  ==  Token.SET)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.GET  &&  c.getFirstChild()  ==  Token.SET)  {	  if(c.getType()    ==    Token.STRING    &&    c.getType()    ==    Token.GET    &&    c.getType()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
194	[BUG]  [BUGGY]  if(c.getType()  ==  Token.STRING  &&  c.getString().equals( "GET "))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.STRING  &&  c.getString().equals( "GET "))  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.STRING  &&  c.getString().equals( "GET "))  {	  if    (c.getType()    ==    Token.STRING    &&    c.getType()    ==    Token.GET)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
195	[BUG]  [BUGGY]  if(c.getType()  ==  Token.STRING  &&  c.getNext()  ==  Token.GET)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.STRING  &&  c.getNext()  ==  Token.GET)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.STRING  &&  c.getNext()  ==  Token.GET)  {	  if    (c.getType()    ==    Token.STRING    &&    c.getType()    ==    Token.GET)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
196	[BUG]  [BUGGY]  if((  c.getType()  ==  Token.SET  ||  c.getType()  ==  Token.GET))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if((  c.getType()  ==  Token.SET  ||  c.getType()  ==  Token.GET))  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if((  c.getType()  ==  Token.SET  ||  c.getType()  ==  Token.GET))  {	  if    ((    c.getType()    ==    Token.GET    ||    c.getType()    ==    Token.SET))    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
197	[BUG]  [BUGGY]  if(c.getType()!=  Token.SET  ||  c.getType()!=  Token.GET)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()!=  Token.SET  ||  c.getType()!=  Token.GET)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()!=  Token.SET  ||  c.getType()!=  Token.GET)  {	  if    (c.getType()    ==    Token.SET    ||    c.getType()!=    Token.GET)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
198	[BUG]  [BUGGY]  Context  cc  =  getContextForNoInOperator(context,  STATEMENT);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Context  cc  =  getContextForNoInOperator(context,  STATEMENT);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Context  cc  =  getContextForNoInOperator(context,  STATEMENT);	  Context    cc    =    getContextForNoInOperator(context);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
199	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.EXPR_RESULT  ||  c.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.EXPR_RESULT  ||  c.getType()  ==  Token.VAR);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Preconditions.checkState(c.getType()  ==  Token.EXPR_RESULT  ||  c.getType()  ==  Token.VAR);	  Preconditions.checkState(c.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
200	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.EXPR_RESULT  ||  c.getType()  ==  Token.STRING);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.EXPR_RESULT  ||  c.getType()  ==  Token.STRING);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Preconditions.checkState(c.getType()  ==  Token.EXPR_RESULT  ||  c.getType()  ==  Token.STRING);	  Preconditions.checkState(c.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
201	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.CATCH);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.CATCH);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.CATCH);	  Preconditions.checkState(c.getType()    ==    Token.STRING);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
202	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.SCRIPT);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.SCRIPT);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.SCRIPT);	  Preconditions.checkState(c.getType()    ==    Token.STRING);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
203	[BUG]  [BUGGY]  if(!(c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(!(c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET))  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(!(c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET))  {	  if(c.getType()!=    Token.GET    &&    c.getType()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
204	[BUG]  [BUGGY]  if(!(c.getType()  ==  Token.BLOCK  ||  c.getType()  ==  Token.SET))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(!(c.getType()  ==  Token.BLOCK  ||  c.getType()  ==  Token.SET))  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(!(c.getType()  ==  Token.BLOCK  ||  c.getType()  ==  Token.SET))  {	  if(c.getType()!=    Token.BLOCK    ||    c.getType()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
205	[BUG]  [BUGGY]  if(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.BLOCK)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.BLOCK)  {	  if(c.getType()!=    Token.BLOCK    ||    c.getType()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
206	[BUG]  [BUGGY]  if(c.getType()  ==  Token.CATCH  &&  c.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.CATCH  &&  c.getType()  ==  Token.BLOCK)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.CATCH  &&  c.getType()  ==  Token.BLOCK)  {	  if(c.getType()    ==    Token.BLOCK    &&    c.getType()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
207	[BUG]  [BUGGY]  if(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.SETLENGTH)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.SETLENGTH)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.SETLENGTH)  {	  if(c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
208	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.NAME,  cc.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.NAME,  cc.getFirstChild());  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Preconditions.checkState(c.getType()  ==  Token.NAME,  cc.getFirstChild());	  Preconditions.checkState(c.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
209	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.CATCH);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.CATCH);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Preconditions.checkState(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.CATCH);	  Preconditions.checkState(c.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
210	[BUG]  [BUGGY]  Context  c  =(context  ==  Context.STATEMENT)?  context.getCurrentContext()  :  context;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Context  c  =(context  ==  Context.STATEMENT)?  context.getCurrentContext()  :  context;  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Context  c  =(context  ==  Context.STATEMENT)?  context.getCurrentContext()  :  context;	  Context    c    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
211	[BUG]  [BUGGY]  Context  c  =(context  ==  Context.STATEMENT)?  context.getCurrentContext()  :  context.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Context  c  =(context  ==  Context.STATEMENT)?  context.getCurrentContext()  :  context.getCurrentContext();  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Context  c  =(context  ==  Context.STATEMENT)?  context.getCurrentContext()  :  context.getCurrentContext();	  Context    c    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
212	[BUG]  [BUGGY]  Node  c  =  context.getCurrentNode();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Node  c  =  context.getCurrentNode();  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Node  c  =  context.getCurrentNode();	  Node    c    =    first.getNext();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
213	[BUG]  [BUGGY]  Node  c  =  first.getParent();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Node  c  =  first.getParent();  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Node  c  =  first.getParent();	  Node    c    =    first.getNext();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
214	[BUG]  [BUGGY]  Preconditions.checkArgument(c.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  Preconditions.checkArgument(c.getType()  ==  Token.FUNCTION);  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	Preconditions.checkArgument(c.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
215	[BUG]  [BUGGY]  if(!(c.getType()  ==  Token.GET  ||  c.getType()!=  Token.SET))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(!(c.getType()  ==  Token.GET  ||  c.getType()!=  Token.SET))  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(!(c.getType()  ==  Token.GET  ||  c.getType()!=  Token.SET))  {	  if(c.getType()!=    Token.GET    ||    c.getType()!=    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
216	[BUG]  [BUGGY]  if(c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.SET  &&  c.getType()  ==  Token.GET)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.SET  &&  c.getType()  ==  Token.GET)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.SET  &&  c.getType()  ==  Token.GET)  {	  if    (c.getType()    ==    Token.SET    &&    c.getType()    ==    Token.GET)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
217	[BUG]  [BUGGY]  if(c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.SET  ||  c.getType()  ==  Token.GET)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }      [BUGGY]  if(c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.SET  ||  c.getType()  ==  Token.GET)  {  [BUGGY]      add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	658	658	1	replace	if(c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.SET  ||  c.getType()  ==  Token.GET)  {	  if    (c.getType()    ==    Token.SET    &&    c.getType()    ==    Token.GET)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
