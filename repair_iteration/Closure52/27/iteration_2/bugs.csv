bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(ambiguousElseClause  ||  needsParens)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(ambiguousElseClause  ||  needsParens)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  ||  needsParens)  {	  if(needsParens    ||    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
2	[BUG]  [BUGGY]  if(first  ||  needsParens  ||  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(first  ||  needsParens  ||  hasElseClause)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  needsParens  ||  hasElseClause)  {	  if(needsParens    ||    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
3	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  needsParens  ||  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(!ambiguousElseClause  &&  needsParens  ||  hasElseClause)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  needsParens  ||  hasElseClause)  {	  if(needsParens    ||    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
4	[BUG]  [BUGGY]  if(!ambiguousElseClause  ||  needsParens)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(!ambiguousElseClause  ||  needsParens)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  ||  needsParens)  {	  if(needsParens    ||    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
5	[BUG]  [BUGGY]  if(last  ||  needsParens  ||  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(last  ||  needsParens  ||  hasElseClause)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(last  ||  needsParens  ||  hasElseClause)  {	  if(needsParens    ||    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
6	[BUG]  [BUGGY]  if(usesParens  ||  needsElseClause)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(usesParens  ||  needsElseClause)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(usesParens  ||  needsElseClause)  {	  if(needsParens    ||    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
7	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  first!=  null)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(!ambiguousElseClause  &&  first!=  null)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  first!=  null)  {	  if(!ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
8	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  first  ==  null)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(!ambiguousElseClause  &&  first  ==  null)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  first  ==  null)  {	  if(!ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
9	[BUG]  [BUGGY]  if(first  ==  null  ||!ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(first  ==  null  ||!ambiguousElseClause)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ==  null  ||!ambiguousElseClause)  {	  if(!ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
10	[BUG]  [BUGGY]  if(first!=  null  ||!ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(first!=  null  ||!ambiguousElseClause)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first!=  null  ||!ambiguousElseClause)  {	  if(!ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
11	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  first  >=  null)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(!ambiguousElseClause  &&  first  >=  null)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  first  >=  null)  {	  if(!ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
12	[BUG]  [BUGGY]  if(!funcNeedsParens)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(!funcNeedsParens)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!funcNeedsParens)  {	  if(!ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
13	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  first.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(!ambiguousElseClause  &&  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  first.getType()  ==  Token.FUNCTION)  {	  if(!ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
14	[BUG]  [BUGGY]  if(hasParens)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(hasParens)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasParens)  {	  if(hasElse)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
15	[BUG]  [BUGGY]  if(hasElseClause  &&  first!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(hasElseClause  &&  first!=  null)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseClause  &&  first!=  null)  {	  if(hasElse)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
16	[BUG]  [BUGGY]  if(ambiguousElseClause  ||  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(ambiguousElseClause  ||  hasElseClause)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  ||  hasElseClause)  {	  if(hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
17	[BUG]  [BUGGY]  if(ambiguousElseClause  &&  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(ambiguousElseClause  &&  hasElseClause)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  &&  hasElseClause)  {	  if(hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
18	[BUG]  [BUGGY]  if(ambiguousElseClause  &&  first!=  null)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(ambiguousElseClause  &&  first!=  null)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  &&  first!=  null)  {	  if(hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
19	[BUG]  [BUGGY]  if(ambiguousElseClause  ||  first  ==  null)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(ambiguousElseClause  ||  first  ==  null)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  ||  first  ==  null)  {	  if(hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
20	[BUG]  [BUGGY]  if(ambiguousElseClause  ||  first!=  null)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(ambiguousElseClause  ||  first!=  null)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  ||  first!=  null)  {	  if(hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
21	[BUG]  [BUGGY]  if(ambiguousElseClause  &&  needsParens)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(ambiguousElseClause  &&  needsParens)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  &&  needsParens)  {	  if(hasElseClause    ||    needsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
22	[BUG]  [BUGGY]  if(hasElseClause  &&  needsParens)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(hasElseClause  &&  needsParens)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseClause  &&  needsParens)  {	  if(hasElseClause    ||    needsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
23	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  needsParens)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(!ambiguousElseClause  &&  needsParens)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  needsParens)  {	  if(hasElseClause    ||    needsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
24	[BUG]  [BUGGY]  if(usesElseClause  ||  needsParens)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(usesElseClause  ||  needsParens)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(usesElseClause  ||  needsParens)  {	  if(hasElseClause    ||    needsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
25	[BUG]  [BUGGY]  if(hasElseClause  ||  needsParens  ||  first)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(hasElseClause  ||  needsParens  ||  first)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseClause  ||  needsParens  ||  first)  {	  if(hasElseClause    ||    needsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
26	[BUG]  [BUGGY]  if(first  ||  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(first  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  first.getType()  ==  Token.STRING)  {	  if(first)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
27	[BUG]  [BUGGY]  if(first  ||  first.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(first  ||  first.getType()  ==  Token.NAME)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  first.getType()  ==  Token.NAME)  {	  if(first)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
28	[BUG]  [BUGGY]  if(first  ||  first.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(first  ||  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  first.getType()  ==  Token.FUNCTION)  {	  if(first)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
29	[BUG]  [BUGGY]  if(first  ||  first)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(first  ||  first)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  first)  {	  if(first)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
30	[BUG]  [BUGGY]  if(context  ==  Context.EXPR_RESULT)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(context  ==  Context.EXPR_RESULT)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(context  ==  Context.EXPR_RESULT)  {	  if(first)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
31	[BUG]  [BUGGY]  if(hasElseClause  &&  first  ==  null)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(hasElseClause  &&  first  ==  null)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseClause  &&  first  ==  null)  {	  if(needsParens    &&    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
32	[BUG]  [BUGGY]  if(isSwitch(first)&&  needsParens!=  null)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(isSwitch(first)&&  needsParens!=  null)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(isSwitch(first)&&  needsParens!=  null)  {	  if(needsParens    &&    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
33	[BUG]  [BUGGY]  if(needsParens  ||  first!=  null)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(needsParens  ||  first!=  null)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(needsParens  ||  first!=  null)  {	  if(needsParens    &&    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
34	[BUG]  [BUGGY]  if(isSwitch(first)&&  needsParens!=  false)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(isSwitch(first)&&  needsParens!=  false)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(isSwitch(first)&&  needsParens!=  false)  {	  if(needsParens    &&    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
35	[BUG]  [BUGGY]  cc.endBlock(context  ==  Context.STATEMENT);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  cc.endBlock(context  ==  Context.STATEMENT);  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.endBlock(context  ==  Context.STATEMENT);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
36	[BUG]  [BUGGY]  cc.beginBlock();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  cc.beginBlock();  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.beginBlock();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
37	[BUG]  [BUGGY]  cc.addNumber(d);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  cc.addNumber(d);  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.addNumber(d);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
38	[BUG]  [BUGGY]  cc.endBlock(context  ==  Context.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  cc.endBlock(context  ==  Context.EXPR_RESULT);  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.endBlock(context  ==  Context.EXPR_RESULT);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
39	[BUG]  [BUGGY]  add(first);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  add(first);  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	add(first);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
40	[BUG]  [BUGGY]  int  first  =  c.getLastChild();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  int  first  =  c.getLastChild();  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	int  first  =  c.getLastChild();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
41	[BUG]  [BUGGY]  int  first  =  c.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  int  first  =  c.getFirstChild();  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	int  first  =  c.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
42	[BUG]  [BUGGY]  if(first  ||  needsParens  &&  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(first  ||  needsParens  &&  hasElseClause)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  needsParens  &&  hasElseClause)  {	  if(needsParens    &&    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
43	[BUG]  [BUGGY]  if(usesParens  &&  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(usesParens  &&  hasElseClause)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(usesParens  &&  hasElseClause)  {	  if(needsParens    &&    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
44	[BUG]  [BUGGY]  if(first  ||  needsParens  ==  null)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(first  ||  needsParens  ==  null)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  needsParens  ==  null)  {	  if(needsParens    &&    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
45	[BUG]  [BUGGY]  if(needsParens  ||  first  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(needsParens  ||  first  ==  null)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(needsParens  ||  first  ==  null)  {	  if(needsParens    &&    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
46	[BUG]  [BUGGY]  if(isSwitch(first)&&  needsParens  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(isSwitch(first)&&  needsParens  ==  null)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(isSwitch(first)&&  needsParens  ==  null)  {	  if(needsParens    &&    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
47	[BUG]  [BUGGY]  if(funcNeedsParens)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(funcNeedsParens)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(funcNeedsParens)  {	  if(ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
48	[BUG]  [BUGGY]  if(fn.hasChildren()  ||  ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(fn.hasChildren()  ||  ambiguousElseClause)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(fn.hasChildren()  ||  ambiguousElseClause)  {	  if(ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
49	[BUG]  [BUGGY]  if(fn.getType()  ==  Token.FUNCTION  ||  ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(fn.getType()  ==  Token.FUNCTION  ||  ambiguousElseClause)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(fn.getType()  ==  Token.FUNCTION  ||  ambiguousElseClause)  {	  if(ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
50	[BUG]  [BUGGY]  if(last)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(last)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(last)  {	  if(ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
51	[BUG]  [BUGGY]  if(fn.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(fn.hasChildren())  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(fn.hasChildren())  {	  if(ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
52	[BUG]  [BUGGY]  if(first  ||  first!=  null)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(first  ||  first!=  null)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  first!=  null)  {	  if(first)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
53	[BUG]  [BUGGY]  if(first  ||  first  ==  null)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(first  ||  first  ==  null)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  first  ==  null)  {	  if(first)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
54	[BUG]  [BUGGY]  if(first!=  null  &&!ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(first!=  null  &&!ambiguousElseClause)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first!=  null  &&!ambiguousElseClause)  {	  if(!ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
55	[BUG]  [BUGGY]  if(first!=  null)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(first!=  null)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first!=  null)  {	  if(!ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
56	[BUG]  [BUGGY]  if(funcNeedsParens  &&  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(funcNeedsParens  &&  hasElseClause)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(funcNeedsParens  &&  hasElseClause)  {	  if(needsParens    &&    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
57	[BUG]  [BUGGY]  if(funcNeedsParens  &&  needsElseClause)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(funcNeedsParens  &&  needsElseClause)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(funcNeedsParens  &&  needsElseClause)  {	  if(needsParens    &&    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
58	[BUG]  [BUGGY]  if(ambiguousElseClause  &&  requiresParens)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(ambiguousElseClause  &&  requiresParens)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  &&  requiresParens)  {	  if(needsParens    &&    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
59	[BUG]  [BUGGY]  if(ambiguousElseClause  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(ambiguousElseClause  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
60	[BUG]  [BUGGY]  if(ambiguousElseClause  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(ambiguousElseClause  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {	  if(hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
61	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  needsParens  ==  null)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(!ambiguousElseClause  &&  needsParens  ==  null)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  needsParens  ==  null)  {	  if(needsParens    &&    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
62	[BUG]  [BUGGY]  if(hasElseParens  &&  first  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(hasElseParens  &&  first  ==  null)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseParens  &&  first  ==  null)  {	  if(needsParens    &&    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
63	[BUG]  [BUGGY]  if(funcNeedsParens  ||  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(funcNeedsParens  ||  hasElseClause)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(funcNeedsParens  ||  hasElseClause)  {	  if(hasElseClause    ||    needsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
64	[BUG]  [BUGGY]  if(ambiguousElseClause  &&  needParens)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(ambiguousElseClause  &&  needParens)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  &&  needParens)  {	  if(hasElseClause    ||    needsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
65	[BUG]  [BUGGY]  if(hasElse  &&  first!=  null)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(hasElse  &&  first!=  null)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElse  &&  first!=  null)  {	  if(hasElse)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
66	[BUG]  [BUGGY]  if(ambiguousElseClause  ||  hasElse)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(ambiguousElseClause  ||  hasElse)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  ||  hasElse)  {	  if(hasElse)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
67	[BUG]  [BUGGY]  if(hasElse  ||  first!=  null)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(hasElse  ||  first!=  null)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElse  ||  first!=  null)  {	  if(hasElse)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
68	[BUG]  [BUGGY]  if(hasElse  ||  first  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(hasElse  ||  first  ==  null)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElse  ||  first  ==  null)  {	  if(hasElse)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
69	[BUG]  [BUGGY]  if(ambiguousElseClause  &&  first  ==  null)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(ambiguousElseClause  &&  first  ==  null)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  &&  first  ==  null)  {	  if(ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
70	[BUG]  [BUGGY]  if(ambiguousElseClause  &&  first  >=  null)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(ambiguousElseClause  &&  first  >=  null)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  &&  first  >=  null)  {	  if(ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
71	[BUG]  [BUGGY]  if(useLineBreaks  &&  first!=  null)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(useLineBreaks  &&  first!=  null)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(useLineBreaks  &&  first!=  null)  {	  if(needsParens    &&    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
72	[BUG]  [BUGGY]  if(hasElseParens  &&  first!=  null)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(hasElseParens  &&  first!=  null)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseParens  &&  first!=  null)  {	  if(needsParens    &&    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
73	[BUG]  [BUGGY]  if(funcNeedsParens  ||  needsElseClause)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(funcNeedsParens  ||  needsElseClause)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(funcNeedsParens  ||  needsElseClause)  {	  if(needsParens    ||    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
74	[BUG]  [BUGGY]  cc.endBlock(context  ==  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  cc.endBlock(context  ==  Context.START_OF_EXPR);  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.endBlock(context  ==  Context.START_OF_EXPR);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
75	[BUG]  [BUGGY]  cc.endBlock(context!=  Context.STATEMENT);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  cc.endBlock(context!=  Context.STATEMENT);  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.endBlock(context!=  Context.STATEMENT);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
76	[BUG]  [BUGGY]  if(first  ==  Context.OTHER  ||!ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(first  ==  Context.OTHER  ||!ambiguousElseClause)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ==  Context.OTHER  ||!ambiguousElseClause)  {	  if(!ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
77	[BUG]  [BUGGY]  if(first!=  Context.STATEMENT)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(first!=  Context.STATEMENT)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first!=  Context.STATEMENT)  {	  if(!ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
78	[BUG]  [BUGGY]  if(first  ==  Context.STATEMENT)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(first  ==  Context.STATEMENT)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ==  Context.STATEMENT)  {	  if(!ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
79	[BUG]  [BUGGY]  if(needsParens  ||  needsElseClause)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(needsParens  ||  needsElseClause)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(needsParens  ||  needsElseClause)  {	  if(needsParens    &&    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
80	[BUG]  [BUGGY]  if(functionsParens  &&  needsElseClause)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(functionsParens  &&  needsElseClause)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(functionsParens  &&  needsElseClause)  {	  if(needsParens    &&    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
81	[BUG]  [BUGGY]  if(functionNeedsParens  &&  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(functionNeedsParens  &&  hasElseClause)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(functionNeedsParens  &&  hasElseClause)  {	  if(needsParens    &&    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
82	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  needsParens  ||  first  ==  null)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(!ambiguousElseClause  &&  needsParens  ||  first  ==  null)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  needsParens  ||  first  ==  null)  {	  if(needsParens    &&    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
83	[BUG]  [BUGGY]  if(isSwitch(first)&&  needsParens  ==  false)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(isSwitch(first)&&  needsParens  ==  false)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(isSwitch(first)&&  needsParens  ==  false)  {	  if(needsParens    &&    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
84	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  needsParens  ==  first)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(!ambiguousElseClause  &&  needsParens  ==  first)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  needsParens  ==  first)  {	  if(needsParens    &&    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
85	[BUG]  [BUGGY]  if(functionNeedsParens  ||  needsElseClause)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(functionNeedsParens  ||  needsElseClause)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(functionNeedsParens  ||  needsElseClause)  {	  if(needsParens    ||    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
86	[BUG]  [BUGGY]  if(functionsParens  ||  needsElseClause)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(functionsParens  ||  needsElseClause)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(functionsParens  ||  needsElseClause)  {	  if(needsParens    ||    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
87	[BUG]  [BUGGY]  if(ambiguousElseClause  ||  funcNeedsParens)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(ambiguousElseClause  ||  funcNeedsParens)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  ||  funcNeedsParens)  {	  if(ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
88	[BUG]  [BUGGY]  if(FirstChild.isLetterOrDigit(first)||  ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(FirstChild.isLetterOrDigit(first)||  ambiguousElseClause)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(FirstChild.isLetterOrDigit(first)||  ambiguousElseClause)  {	  if(ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
89	[BUG]  [BUGGY]  if(ambiguousElseClause  ||  c.getFirstChild()  ==  n)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(ambiguousElseClause  ||  c.getFirstChild()  ==  n)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  ||  c.getFirstChild()  ==  n)  {	  if(ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
90	[BUG]  [BUGGY]  cc.addChildToFront(first);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  cc.addChildToFront(first);  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.addChildToFront(first);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
91	[BUG]  [BUGGY]  cc.addChildToFront(d);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  cc.addChildToFront(d);  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.addChildToFront(d);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
92	[BUG]  [BUGGY]  cc.addChildToFront(context.getCurrentNode());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  cc.addChildToFront(context.getCurrentNode());  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.addChildToFront(context.getCurrentNode());	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
93	[BUG]  [BUGGY]  cc.endBlock(context  ==  Context.STATEMENT);  add(first);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  cc.endBlock(context  ==  Context.STATEMENT);  add(first);  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.endBlock(context  ==  Context.STATEMENT);  add(first);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
94	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  needsParens!=  null)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(!ambiguousElseClause  &&  needsParens!=  null)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  needsParens!=  null)  {	  if(needsParens    &&    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
95	[BUG]  [BUGGY]  if(needsParens  &&  first!=  null  &&  hasElse)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(needsParens  &&  first!=  null  &&  hasElse)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(needsParens  &&  first!=  null  &&  hasElse)  {	  if(needsParens    &&    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
96	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  needsParens  >>  null)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(!ambiguousElseClause  &&  needsParens  >>  null)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  needsParens  >>  null)  {	  if(needsParens    &&    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
97	[BUG]  [BUGGY]  if(needsParens  &&  body!=  null)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(needsParens  &&  body!=  null)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(needsParens  &&  body!=  null)  {	  if(needsParens    &&    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
98	[BUG]  [BUGGY]  if(dependsOn(context,  hasElseClause)||  needsParens)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(dependsOn(context,  hasElseClause)||  needsParens)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(dependsOn(context,  hasElseClause)||  needsParens)  {	  if(hasElseClause    ||    needsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
99	[BUG]  [BUGGY]  if(hasElseClause  ||  needsParens  &&  c.getLastChild().getString().endsWith( "- "))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(hasElseClause  ||  needsParens  &&  c.getLastChild().getString().endsWith( "- "))  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseClause  ||  needsParens  &&  c.getLastChild().getString().endsWith( "- "))  {	  if(hasElseClause    ||    needsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
100	[BUG]  [BUGGY]  if(hasElseClause  ||  needsParens  &&  c.getLastChild().getString().endsWith( "__ "))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(hasElseClause  ||  needsParens  &&  c.getLastChild().getString().endsWith( "__ "))  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseClause  ||  needsParens  &&  c.getLastChild().getString().endsWith( "__ "))  {	  if(hasElseClause    ||    needsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
101	[BUG]  [BUGGY]  if(first  ||  first.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(first  ||  first.getType()  ==  Token.BLOCK)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  first.getType()  ==  Token.BLOCK)  {	  if(first)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
102	[BUG]  [BUGGY]  if(context  ==  Context.STATEMENT)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }  add(   "}   ");    [BUGGY]  if(context  ==  Context.STATEMENT)  {  [BUGGY]    add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(context  ==  Context.STATEMENT)  {	  if(first)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
