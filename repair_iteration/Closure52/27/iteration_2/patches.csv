bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(hasElseClause  ||  first!=  null)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseClause  ||  first!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseClause  ||  first!=  null)  {	  if(hasElse    ||    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
2	[BUG]  [BUGGY]  if(hasElseClause  ||  first  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseClause  ||  first  ==  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseClause  ||  first  ==  null)  {	  if(hasElse    ||    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
3	[BUG]  [BUGGY]  if(hasElseclause  ||  first!=  null)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseclause  ||  first!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseclause  ||  first!=  null)  {	  if(hasElse    ||    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
4	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  hasElseParens!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  hasElseParens!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  hasElseParens!=  null)  {	  if(!ambiguousElseClause    &&    needsParens    >>    null)    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
5	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  hasElseParens  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  hasElseParens  ==  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  hasElseParens  ==  null)  {	  if(!ambiguousElseClause    &&    needsParens    >>    null)    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
6	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  hasElseParens  >=  null)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  hasElseParens  >=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  hasElseParens  >=  null)  {	  if(!ambiguousElseClause    &&    needsParens    >>    null)    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
7	[BUG]  [BUGGY]  if(!ambiguousElseClause  ||  needsParens!=  null)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  ||  needsParens!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  ||  needsParens!=  null)  {	  if(!ambiguousElseClause    &&    needsParens    >>    null)    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
8	[BUG]  [BUGGY]  if(!funcNeedsParens  &&  needsParens!=  null)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!funcNeedsParens  &&  needsParens!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!funcNeedsParens  &&  needsParens!=  null)  {	  if(!ambiguousElseClause    &&    needsParens    >>    null)    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
9	[BUG]  [BUGGY]  if(hasElseClause  &&  body!=  null)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseClause  &&  body!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseClause  &&  body!=  null)  {	  if(needsParens    &&    body!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
10	[BUG]  [BUGGY]  if(first  ||  needsParens!=  null)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ||  needsParens!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  needsParens!=  null)  {	  if(needsParens    &&    body!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
11	[BUG]  [BUGGY]  if(hasElseClause  &&  body  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseClause  &&  body  ==  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseClause  &&  body  ==  null)  {	  if(needsParens    &&    body!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
12	[BUG]  [BUGGY]  if(needsParens  ||  body!=  null)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(needsParens  ||  body!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(needsParens  ||  body!=  null)  {	  if(needsParens    &&    body!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
13	[BUG]  [BUGGY]  if(first  ||  needsParens  >>  null)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ||  needsParens  >>  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  needsParens  >>  null)  {	  if(needsParens    &&    body!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
14	[BUG]  [BUGGY]  if(first  ||  c.getFirstChild()  ==  n)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ||  c.getFirstChild()  ==  n)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  c.getFirstChild()  ==  n)  {	  if(ambiguousElseClause    ||    c.getFirstChild()    ==    n)    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
15	[BUG]  [BUGGY]  if(ambiguousElseClause  &&  c.getFirstChild()  ==  n)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(ambiguousElseClause  &&  c.getFirstChild()  ==  n)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  &&  c.getFirstChild()  ==  n)  {	  if(ambiguousElseClause    ||    c.getFirstChild()    ==    n)    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
16	[BUG]  [BUGGY]  if(n  ||  c.getFirstChild()  ==  ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(n  ||  c.getFirstChild()  ==  ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(n  ||  c.getFirstChild()  ==  ambiguousElseClause)  {	  if(ambiguousElseClause    ||    c.getFirstChild()    ==    n)    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
17	[BUG]  [BUGGY]  if(c.getFirstChild()  ==  ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(c.getFirstChild()  ==  ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(c.getFirstChild()  ==  ambiguousElseClause)  {	  if(ambiguousElseClause    ||    c.getFirstChild()    ==    n)    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
18	[BUG]  [BUGGY]  if(c.getFirstChild()  ==  ambiguousElseClause  ||  c.getFirstChild()  ==  n)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(c.getFirstChild()  ==  ambiguousElseClause  ||  c.getFirstChild()  ==  n)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(c.getFirstChild()  ==  ambiguousElseClause  ||  c.getFirstChild()  ==  n)  {	  if(ambiguousElseClause    ||    c.getFirstChild()    ==    n)    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
19	[BUG]  [BUGGY]  if(last  ||  c.getFirstChild()  ==  n)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(last  ||  c.getFirstChild()  ==  n)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(last  ||  c.getFirstChild()  ==  n)  {	  if(ambiguousElseClause    ||    c.getFirstChild()    ==    n)    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
20	[BUG]  [BUGGY]  if(ambiguousElseClause  ||  c.getLastChild()  ==  n)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(ambiguousElseClause  ||  c.getLastChild()  ==  n)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  ||  c.getLastChild()  ==  n)  {	  if(ambiguousElseClause    ||    c.getFirstChild()    ==    n)    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
21	[BUG]  [BUGGY]  if(!ambiguousElseClause  ||  first!=  null)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  ||  first!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  ||  first!=  null)  {	  if(!ambiguousElseClause    &&    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
22	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  body!=  null)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  body!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  body!=  null)  {	  if(!ambiguousElseClause    &&    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
23	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  last!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  last!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  last!=  null)  {	  if(!ambiguousElseClause    &&    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
24	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  first!=  null  &&  first.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  first!=  null  &&  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  first!=  null  &&  first.getType()  ==  Token.FUNCTION)  {	  if(!ambiguousElseClause    &&    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
25	[BUG]  [BUGGY]  if(preserveBlock  &&  first!=  null)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(preserveBlock  &&  first!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(preserveBlock  &&  first!=  null)  {	  if(useLineBreaks    &&    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
26	[BUG]  [BUGGY]  if(useLineBreaks  ||  first!=  null)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(useLineBreaks  ||  first!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(useLineBreaks  ||  first!=  null)  {	  if(useLineBreaks    &&    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
27	[BUG]  [BUGGY]  if(consumeBlock  &&  first!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(consumeBlock  &&  first!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(consumeBlock  &&  first!=  null)  {	  if(useLineBreaks    &&    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
28	[BUG]  [BUGGY]  if(useLineBreaks  &&  first  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(useLineBreaks  &&  first  ==  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(useLineBreaks  &&  first  ==  null)  {	  if(useLineBreaks    &&    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
29	[BUG]  [BUGGY]  if(useSideBreaks  &&  first!=  null)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(useSideBreaks  &&  first!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(useSideBreaks  &&  first!=  null)  {	  if(useLineBreaks    &&    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
30	[BUG]  [BUGGY]  if(last  ||  first!=  null)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(last  ||  first!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(last  ||  first!=  null)  {	  if(first    ||    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
31	[BUG]  [BUGGY]  if(first  ||  first!=  null  ||  first.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ||  first!=  null  ||  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  first!=  null  ||  first.getType()  ==  Token.FUNCTION)  {	  if(first    ||    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
32	[BUG]  [BUGGY]  if(first  ||  second!=  null)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ||  second!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  second!=  null)  {	  if(first    ||    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
33	[BUG]  [BUGGY]  if(first  ||  first!=  null  ||  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ||  first!=  null  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  first!=  null  ||  first.getType()  ==  Token.STRING)  {	  if(first    ||    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
34	[BUG]  [BUGGY]  if(first  ||  first  >=  null)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ||  first  >=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  first  >=  null)  {	  if(first    ||    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
35	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  hasElseParens)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  hasElseParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  hasElseParens)  {	  if(!ambiguousElseClause    &&    needsParens    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
36	[BUG]  [BUGGY]  if(!ambiguousElseClause  ||  needsParens  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  ||  needsParens  ==  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  ||  needsParens  ==  null)  {	  if(!ambiguousElseClause    &&    needsParens    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
37	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  preferencesParens  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  preferencesParens  ==  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  preferencesParens  ==  null)  {	  if(!ambiguousElseClause    &&    needsParens    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
38	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  addExpr  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  addExpr  ==  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  addExpr  ==  null)  {	  if(!ambiguousElseClause    &&    needsParens    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
39	[BUG]  [BUGGY]  if(first.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first.getType()  ==  Token.FUNCTION)  {	  if(first    ||    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
40	[BUG]  [BUGGY]  if(first  ==  null  ||  first.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ==  null  ||  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ==  null  ||  first.getType()  ==  Token.FUNCTION)  {	  if(first    ||    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
41	[BUG]  [BUGGY]  if(first!=  null  ||  first.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first!=  null  ||  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first!=  null  ||  first.getType()  ==  Token.FUNCTION)  {	  if(first    ||    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
42	[BUG]  [BUGGY]  if(first.getType()  ==  Token.FUNCTION  ||  first.getType()  ==  Token.EXPR_RESULT)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first.getType()  ==  Token.FUNCTION  ||  first.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first.getType()  ==  Token.FUNCTION  ||  first.getType()  ==  Token.EXPR_RESULT)  {	  if(first    ||    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
43	[BUG]  [BUGGY]  if(first.getType()  ==  Token.FUNCTION  ||  first.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first.getType()  ==  Token.FUNCTION  ||  first.getType()  ==  Token.NAME)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first.getType()  ==  Token.FUNCTION  ||  first.getType()  ==  Token.NAME)  {	  if(first    ||    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
44	[BUG]  [BUGGY]  if(first.getType()  ==  Token.FUNCTION  ||  first.getType()  ==  Token.CATCH)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first.getType()  ==  Token.FUNCTION  ||  first.getType()  ==  Token.CATCH)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first.getType()  ==  Token.FUNCTION  ||  first.getType()  ==  Token.CATCH)  {	  if(first    ||    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
45	[BUG]  [BUGGY]  if(ambiguousElseClause  ||  needsElseClause)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(ambiguousElseClause  ||  needsElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  ||  needsElseClause)  {	  if(functionsParens    ||    needsElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
46	[BUG]  [BUGGY]  if(hasElseClause  ||  functionsParens)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseClause  ||  functionsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseClause  ||  functionsParens)  {	  if(functionsParens    ||    needsElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
47	[BUG]  [BUGGY]  if(functionsParens  ||  needsElseClause  ||  first)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(functionsParens  ||  needsElseClause  ||  first)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(functionsParens  ||  needsElseClause  ||  first)  {	  if(functionsParens    ||    needsElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
48	[BUG]  [BUGGY]  if(functionsParens  ||  needsParens)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(functionsParens  ||  needsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(functionsParens  ||  needsParens)  {	  if(functionsParens    ||    needsElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
49	[BUG]  [BUGGY]  if(funcNeedsParens  ||  ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(funcNeedsParens  ||  ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(funcNeedsParens  ||  ambiguousElseClause)  {	  if(ambiguousElseClause    ||    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
50	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  hasElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  hasElseClause)  {	  if(ambiguousElseClause    ||    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
51	[BUG]  [BUGGY]  if(first  ||  ambiguousElseClause  ||  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ||  ambiguousElseClause  ||  hasElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  ambiguousElseClause  ||  hasElseClause)  {	  if(ambiguousElseClause    ||    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
52	[BUG]  [BUGGY]  if(last  ||  ambiguousElseClause  ||  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(last  ||  ambiguousElseClause  ||  hasElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(last  ||  ambiguousElseClause  ||  hasElseClause)  {	  if(ambiguousElseClause    ||    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
53	[BUG]  [BUGGY]  if(last  ||  ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(last  ||  ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(last  ||  ambiguousElseClause)  {	  if(ambiguousElseClause    ||    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
54	[BUG]  [BUGGY]  if(hasElseClause  ||  first)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseClause  ||  first)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseClause  ||  first)  {	  if(ambiguousElseClause    ||    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
55	[BUG]  [BUGGY]  if(function  ||  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(function  ||  hasElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(function  ||  hasElseClause)  {	  if(ambiguousElseClause    ||    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
56	[BUG]  [BUGGY]  if(ambiguousElseClause  &&  hasElseParens)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(ambiguousElseClause  &&  hasElseParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  &&  hasElseParens)  {	  if(hasElseClause    &&    needsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
57	[BUG]  [BUGGY]  if(hasElseParens  ||  first!=  null)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseParens  ||  first!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseParens  ||  first!=  null)  {	  if(hasElseParens    &&    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
58	[BUG]  [BUGGY]  if(hasElseParens  &&  body!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseParens  &&  body!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseParens  &&  body!=  null)  {	  if(hasElseParens    &&    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
59	[BUG]  [BUGGY]  if(c  ==  null  ||!ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(c  ==  null  ||!ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(c  ==  null  ||!ambiguousElseClause)  {	  if(first    ==    null    ||!ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
60	[BUG]  [BUGGY]  if(last  ==  null  ||!ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(last  ==  null  ||!ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(last  ==  null  ||!ambiguousElseClause)  {	  if(first    ==    null    ||!ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
61	[BUG]  [BUGGY]  if(d  ==  null  ||!ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(d  ==  null  ||!ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(d  ==  null  ||!ambiguousElseClause)  {	  if(first    ==    null    ||!ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
62	[BUG]  [BUGGY]  if(first  ==  null  ||!ambiguousElseClause  &&  first.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ==  null  ||!ambiguousElseClause  &&  first.hasChildren())  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ==  null  ||!ambiguousElseClause  &&  first.hasChildren())  {	  if(first    ==    null    ||!ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
63	[BUG]  [BUGGY]  if(n  ==  null  ||!ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(n  ==  null  ||!ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(n  ==  null  ||!ambiguousElseClause)  {	  if(first    ==    null    ||!ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
64	[BUG]  [BUGGY]  if(hasElseClause  &&  first)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseClause  &&  first)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseClause  &&  first)  {	  if(ambiguousElseClause    &&    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
65	[BUG]  [BUGGY]  if(hasElseClause  &&  context.isFunctionDeclaration())  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseClause  &&  context.isFunctionDeclaration())  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseClause  &&  context.isFunctionDeclaration())  {	  if(ambiguousElseClause    &&    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
66	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  first)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  first)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  first)  {	  if(ambiguousElseClause    &&    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
67	[BUG]  [BUGGY]  if(first  &&  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  &&  hasElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  &&  hasElseClause)  {	  if(ambiguousElseClause    &&    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
68	[BUG]  [BUGGY]  if(hasElseClause  &&  context.isSyntheticBlock())  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseClause  &&  context.isSyntheticBlock())  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseClause  &&  context.isSyntheticBlock())  {	  if(ambiguousElseClause    &&    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
69	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  first.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  first.hasChildren())  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  first.hasChildren())  {	  if(ambiguousElseClause    &&    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
70	[BUG]  [BUGGY]  if(first.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first.getType()  ==  Token.BLOCK)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first.getType()  ==  Token.BLOCK)  {	  if(first    ||    first.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
71	[BUG]  [BUGGY]  if(first  ==  null  ||  first.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ==  null  ||  first.getType()  ==  Token.BLOCK)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ==  null  ||  first.getType()  ==  Token.BLOCK)  {	  if(first    ||    first.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
72	[BUG]  [BUGGY]  if(first!=  null  ||  first.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first!=  null  ||  first.getType()  ==  Token.BLOCK)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first!=  null  ||  first.getType()  ==  Token.BLOCK)  {	  if(first    ||    first.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
73	[BUG]  [BUGGY]  if(first.getType()  ==  Token.BLOCK  ||  first.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first.getType()  ==  Token.BLOCK  ||  first.getType()  ==  Token.BLOCK)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first.getType()  ==  Token.BLOCK  ||  first.getType()  ==  Token.BLOCK)  {	  if(first    ||    first.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
74	[BUG]  [BUGGY]  if(first.getType()  ==  Token.BLOCK  ||  first.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first.getType()  ==  Token.BLOCK  ||  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first.getType()  ==  Token.BLOCK  ||  first.getType()  ==  Token.FUNCTION)  {	  if(first    ||    first.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
75	[BUG]  [BUGGY]  if(first.getType()  ==  Token.BLOCK  ||  first.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first.getType()  ==  Token.BLOCK  ||  first.getType()  ==  Token.NAME)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first.getType()  ==  Token.BLOCK  ||  first.getType()  ==  Token.NAME)  {	  if(first    ||    first.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
76	[BUG]  [BUGGY]  if(first  ||  needsElseClause)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ||  needsElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  needsElseClause)  {	  if(needsParens    ||    needsElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
77	[BUG]  [BUGGY]  if(!ambiguousElseClause  ||  needsElseClause)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  ||  needsElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  ||  needsElseClause)  {	  if(needsParens    ||    needsElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
78	[BUG]  [BUGGY]  if(ambiguousElseClause  &&  needsElseClause)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(ambiguousElseClause  &&  needsElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  &&  needsElseClause)  {	  if(funcNeedsParens    &&    needsElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
79	[BUG]  [BUGGY]  if(hasElseClause  &&  funcNeedsParens)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseClause  &&  funcNeedsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseClause  &&  funcNeedsParens)  {	  if(funcNeedsParens    &&    needsElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
80	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  needsElseClause)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  needsElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  needsElseClause)  {	  if(funcNeedsParens    &&    needsElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
81	[BUG]  [BUGGY]  if(usesElseClause  &&  funcNeedsParens)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(usesElseClause  &&  funcNeedsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(usesElseClause  &&  funcNeedsParens)  {	  if(funcNeedsParens    &&    needsElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
82	[BUG]  [BUGGY]  if(hasElseClause  ||  needsParens  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseClause  ||  needsParens  ==  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseClause  ||  needsParens  ==  null)  {	  if(first    ||    needsParens    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
83	[BUG]  [BUGGY]  if(first  ||  hasElseClause  ||  needsParens  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ||  hasElseClause  ||  needsParens  ==  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  hasElseClause  ||  needsParens  ==  null)  {	  if(first    ||    needsParens    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
84	[BUG]  [BUGGY]  if(first  ||  hasElseClause  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ||  hasElseClause  ==  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  hasElseClause  ==  null)  {	  if(first    ||    needsParens    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
85	[BUG]  [BUGGY]  if(first  ||  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ||  hasElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  hasElseClause)  {	  if(first    ||    needsParens    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
86	[BUG]  [BUGGY]  if(dependsOn(context,  hasElseClause)&&  needsParens)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(dependsOn(context,  hasElseClause)&&  needsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(dependsOn(context,  hasElseClause)&&  needsParens)  {	  if(dependsOn(context,    hasElseClause)||    needsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
87	[BUG]  [BUGGY]  if(dependsOn(context,  ambiguousElseClause)&&  needsParens)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(dependsOn(context,  ambiguousElseClause)&&  needsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(dependsOn(context,  ambiguousElseClause)&&  needsParens)  {	  if(dependsOn(context,    hasElseClause)||    needsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
88	[BUG]  [BUGGY]  if(dependsOn(context,  ambiguousElseClause)||  needsParens)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(dependsOn(context,  ambiguousElseClause)||  needsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(dependsOn(context,  ambiguousElseClause)||  needsParens)  {	  if(dependsOn(context,    hasElseClause)||    needsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
89	[BUG]  [BUGGY]  if(dependsOn(c,  hasElseClause)||  needsParens)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(dependsOn(c,  hasElseClause)||  needsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(dependsOn(c,  hasElseClause)||  needsParens)  {	  if(dependsOn(context,    hasElseClause)||    needsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
90	[BUG]  [BUGGY]  if(dependsOn(context,  n)||  needsParens)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(dependsOn(context,  n)||  needsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(dependsOn(context,  n)||  needsParens)  {	  if(dependsOn(context,    hasElseClause)||    needsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
91	[BUG]  [BUGGY]  if(hasElse  &&  first!=  null  &&  needsParens)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElse  &&  first!=  null  &&  needsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElse  &&  first!=  null  &&  needsParens)  {	  if(needsParens    &&    first!=    null    &&    hasElse)    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
92	[BUG]  [BUGGY]  if(first!=  null  &&  needsParens)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first!=  null  &&  needsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first!=  null  &&  needsParens)  {	  if(needsParens    &&    first!=    null    &&    hasElse)    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
93	[BUG]  [BUGGY]  if(useLineBreaks  &&  first!=  null  &&  hasElse)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(useLineBreaks  &&  first!=  null  &&  hasElse)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(useLineBreaks  &&  first!=  null  &&  hasElse)  {	  if(needsParens    &&    first!=    null    &&    hasElse)    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
94	[BUG]  [BUGGY]  if(hasParens  &&  first!=  null  &&  needsParens)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasParens  &&  first!=  null  &&  needsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasParens  &&  first!=  null  &&  needsParens)  {	  if(needsParens    &&    first!=    null    &&    hasElse)    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
95	[BUG]  [BUGGY]  if(needsParens  ||  first!=  null  &&  hasElse)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(needsParens  ||  first!=  null  &&  hasElse)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(needsParens  ||  first!=  null  &&  hasElse)  {	  if(needsParens    &&    first!=    null    &&    hasElse)    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
96	[BUG]  [BUGGY]  if(hasElseParens  ||  first  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseParens  ||  first  ==  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseParens  ||  first  ==  null)  {	  if(hasElseParens    &&    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
97	[BUG]  [BUGGY]  cc.endBlock();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.endBlock();  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.endBlock();	  cc.beginBlock();    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
98	[BUG]  [BUGGY]  cc.endBlock(context  ==  Context.BEFORE_DANGLING_ELSE);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.endBlock(context  ==  Context.BEFORE_DANGLING_ELSE);  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.endBlock(context  ==  Context.BEFORE_DANGLING_ELSE);	  cc.beginBlock();    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
99	[BUG]  [BUGGY]  cc.addNumber(first);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.addNumber(first);  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.addNumber(first);	  cc.beginBlock();    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
100	[BUG]  [BUGGY]  if(first  ||  ambiguousElseClause  ==  null)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ||  ambiguousElseClause  ==  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  ambiguousElseClause  ==  null)  {	  if(ambiguousElseClause    &&    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
101	[BUG]  [BUGGY]  if(last  ==  null  ||  ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(last  ==  null  ||  ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(last  ==  null  ||  ambiguousElseClause)  {	  if(ambiguousElseClause    &&    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
102	[BUG]  [BUGGY]  if(context  ==  Context.STATEMENT)  {  cc.endBlock(context  ==  Context.STATEMENT);  add(first);  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(context  ==  Context.STATEMENT)  {  cc.endBlock(context  ==  Context.STATEMENT);  add(first);  }  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(context  ==  Context.STATEMENT)  {  cc.endBlock(context  ==  Context.STATEMENT);  add(first);  }	  cc.endBlock(context    ==    Context.STATEMENT);    add(first);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
103	[BUG]  [BUGGY]  if(context!=  Context.STATEMENT)  {  cc.endBlock(context  ==  Context.STATEMENT);  add(first);  }  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(context!=  Context.STATEMENT)  {  cc.endBlock(context  ==  Context.STATEMENT);  add(first);  }  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(context!=  Context.STATEMENT)  {  cc.endBlock(context  ==  Context.STATEMENT);  add(first);  }	  cc.endBlock(context    ==    Context.STATEMENT);    add(first);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
104	[BUG]  [BUGGY]  if(first!=  null)  {  cc.endBlock(context  ==  Context.STATEMENT);  add(first);  }  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first!=  null)  {  cc.endBlock(context  ==  Context.STATEMENT);  add(first);  }  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first!=  null)  {  cc.endBlock(context  ==  Context.STATEMENT);  add(first);  }	  cc.endBlock(context    ==    Context.STATEMENT);    add(first);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
105	[BUG]  [BUGGY]  cc.endBlock(context  ==  Context.STATEMENT);  addExpr(first);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.endBlock(context  ==  Context.STATEMENT);  addExpr(first);  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.endBlock(context  ==  Context.STATEMENT);  addExpr(first);	  cc.endBlock(context    ==    Context.STATEMENT);    add(first);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
106	[BUG]  [BUGGY]  if(context  ==  Context.STATEMENT)  {  cc.endBlock(context  ==  Context.STATEMENT);  add(first);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(context  ==  Context.STATEMENT)  {  cc.endBlock(context  ==  Context.STATEMENT);  add(first);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(context  ==  Context.STATEMENT)  {  cc.endBlock(context  ==  Context.STATEMENT);  add(first);  }  else  {  throw  new  IllegalStateException( " ");  }	  cc.endBlock(context    ==    Context.STATEMENT);    add(first);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
107	[BUG]  [BUGGY]  if(usesParens  ||  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(usesParens  ||  hasElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(usesParens  ||  hasElseClause)  {	  if(usesParens    &&    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
108	[BUG]  [BUGGY]  if(usesParens  &&  hasElseClause  &&  first)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(usesParens  &&  hasElseClause  &&  first)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(usesParens  &&  hasElseClause  &&  first)  {	  if(usesParens    &&    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
109	[BUG]  [BUGGY]  if(first  ==  null  &&!ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ==  null  &&!ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ==  null  &&!ambiguousElseClause)  {	  if(first!=    null    &&!ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
110	[BUG]  [BUGGY]  if(last!=  null  &&!ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(last!=  null  &&!ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(last!=  null  &&!ambiguousElseClause)  {	  if(first!=    null    &&!ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
111	[BUG]  [BUGGY]  if(c!=  null  &&!ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(c!=  null  &&!ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(c!=  null  &&!ambiguousElseClause)  {	  if(first!=    null    &&!ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
112	[BUG]  [BUGGY]  if(c  ==  null  &&!ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(c  ==  null  &&!ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(c  ==  null  &&!ambiguousElseClause)  {	  if(first!=    null    &&!ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
113	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  first.getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  first.getType()!=  Token.FUNCTION)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  first.getType()!=  Token.FUNCTION)  {	  if(!ambiguousElseClause    &&    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
114	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  first.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  first.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  first.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(!ambiguousElseClause    &&    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
115	[BUG]  [BUGGY]  if(first!=  null  ||!ambiguousElseClause  &&  first.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first!=  null  ||!ambiguousElseClause  &&  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first!=  null  ||!ambiguousElseClause  &&  first.getType()  ==  Token.FUNCTION)  {	  if(!ambiguousElseClause    &&    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
116	[BUG]  [BUGGY]  if(!ambiguousElseClause  ||  first.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  ||  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  ||  first.getType()  ==  Token.FUNCTION)  {	  if(!ambiguousElseClause    &&    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
117	[BUG]  [BUGGY]  if(first  ==  null  ||!ambiguousElseClause  &&  first.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ==  null  ||!ambiguousElseClause  &&  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ==  null  ||!ambiguousElseClause  &&  first.getType()  ==  Token.FUNCTION)  {	  if(!ambiguousElseClause    &&    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
118	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  first!=  null  ||  first.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  first!=  null  ||  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  first!=  null  ||  first.getType()  ==  Token.FUNCTION)  {	  if(!ambiguousElseClause    &&    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
119	[BUG]  [BUGGY]  if(context!=  Context.STATEMENT)  {  cc.endBlock(context!=  Context.STATEMENT);  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(context!=  Context.STATEMENT)  {  cc.endBlock(context!=  Context.STATEMENT);  }  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(context!=  Context.STATEMENT)  {  cc.endBlock(context!=  Context.STATEMENT);  }	  cc.endBlock(context!=    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
120	[BUG]  [BUGGY]  cc.endBlock(context  ==  Context.STATEMENT  ||  context!=  Context.STATEMENT);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.endBlock(context  ==  Context.STATEMENT  ||  context!=  Context.STATEMENT);  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.endBlock(context  ==  Context.STATEMENT  ||  context!=  Context.STATEMENT);	  cc.endBlock(context!=    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
121	[BUG]  [BUGGY]  if(context!=  Context.STATEMENT)  {  cc.endBlock(context  ==  Context.STATEMENT);  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(context!=  Context.STATEMENT)  {  cc.endBlock(context  ==  Context.STATEMENT);  }  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(context!=  Context.STATEMENT)  {  cc.endBlock(context  ==  Context.STATEMENT);  }	  cc.endBlock(context!=    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
122	[BUG]  [BUGGY]  cc.endBlock(context  >=  Context.STATEMENT);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.endBlock(context  >=  Context.STATEMENT);  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.endBlock(context  >=  Context.STATEMENT);	  cc.endBlock(context!=    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
123	[BUG]  [BUGGY]  if(context!=  Context.STATEMENT)  {  cc.endBlock(context!=  Context.STATEMENT);  }  else  {  addExpr(c,  1);  }  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(context!=  Context.STATEMENT)  {  cc.endBlock(context!=  Context.STATEMENT);  }  else  {  addExpr(c,  1);  }  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(context!=  Context.STATEMENT)  {  cc.endBlock(context!=  Context.STATEMENT);  }  else  {  addExpr(c,  1);  }	  cc.endBlock(context!=    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
124	[BUG]  [BUGGY]  if(first  ||  ambiguousElseClause!=  null)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ||  ambiguousElseClause!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  ambiguousElseClause!=  null)  {	  if(ambiguousElseClause    ||    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
125	[BUG]  [BUGGY]  if(first  ||  ambiguousElseClause  >>  null)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ||  ambiguousElseClause  >>  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  ambiguousElseClause  >>  null)  {	  if(ambiguousElseClause    ||    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
126	[BUG]  [BUGGY]  if(first  ||  ambiguousElseClause  >=  null)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ||  ambiguousElseClause  >=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  ambiguousElseClause  >=  null)  {	  if(ambiguousElseClause    ||    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
127	[BUG]  [BUGGY]  if(first  ==  Context.STATEMENT  ||  first  ==  Context.STATEMENT)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ==  Context.STATEMENT  ||  first  ==  Context.STATEMENT)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ==  Context.STATEMENT  ||  first  ==  Context.STATEMENT)  {	  if(first    ==    Context.STATEMENT)    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
128	[BUG]  [BUGGY]  if(first!=  Context.STATEMENT  ||  first  ==  Context.STATEMENT)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first!=  Context.STATEMENT  ||  first  ==  Context.STATEMENT)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first!=  Context.STATEMENT  ||  first  ==  Context.STATEMENT)  {	  if(first    ==    Context.STATEMENT)    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
129	[BUG]  [BUGGY]  if(first  ==  Context.STATEMENT  ||  first!=  Context.STATEMENT)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ==  Context.STATEMENT  ||  first!=  Context.STATEMENT)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ==  Context.STATEMENT  ||  first!=  Context.STATEMENT)  {	  if(first    ==    Context.STATEMENT)    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
130	[BUG]  [BUGGY]  if(first  ==  Context.STATEMENT  ||  first  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ==  Context.STATEMENT  ||  first  ==  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ==  Context.STATEMENT  ||  first  ==  null)  {	  if(first    ==    Context.STATEMENT)    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
131	[BUG]  [BUGGY]  cc.endBlock(context  ==  Context.END_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.endBlock(context  ==  Context.END_OF_EXPR);  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.endBlock(context  ==  Context.END_OF_EXPR);	  cc.endBlock(context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
132	[BUG]  [BUGGY]  cc.endBlock(context!=  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.endBlock(context!=  Context.START_OF_EXPR);  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.endBlock(context!=  Context.START_OF_EXPR);	  cc.endBlock(context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
133	[BUG]  [BUGGY]  cc.endBlock(context  ==  Context.START_OF_EXPR,  n);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.endBlock(context  ==  Context.START_OF_EXPR,  n);  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.endBlock(context  ==  Context.START_OF_EXPR,  n);	  cc.endBlock(context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
134	[BUG]  [BUGGY]  cc.endBlock(context  ==  Context.START_OF_EXPR,  1);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.endBlock(context  ==  Context.START_OF_EXPR,  1);  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.endBlock(context  ==  Context.START_OF_EXPR,  1);	  cc.endBlock(context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
135	[BUG]  [BUGGY]  cc.endBlock(context  ==  Context.EXPR_START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.endBlock(context  ==  Context.EXPR_START_OF_EXPR);  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.endBlock(context  ==  Context.EXPR_START_OF_EXPR);	  cc.endBlock(context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
136	[BUG]  [BUGGY]  if(hasElseClause  &&  needsParens  &&  c.getLastChild().getString().endsWith( "__ "))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseClause  &&  needsParens  &&  c.getLastChild().getString().endsWith( "__ "))  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseClause  &&  needsParens  &&  c.getLastChild().getString().endsWith( "__ "))  {	  if(hasElseClause    ||    needsParens    &&    c.getLastChild().getString().endsWith(   "__   "))    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
137	[BUG]  [BUGGY]  if(ambiguousElseClause  &&  needsParens  &&  c.getLastChild().getString().endsWith( "__ "))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(ambiguousElseClause  &&  needsParens  &&  c.getLastChild().getString().endsWith( "__ "))  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  &&  needsParens  &&  c.getLastChild().getString().endsWith( "__ "))  {	  if(hasElseClause    ||    needsParens    &&    c.getLastChild().getString().endsWith(   "__   "))    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
138	[BUG]  [BUGGY]  if(ambiguousElseClause  ||  needsParens  &&  c.getLastChild().getString().endsWith( "__ "))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(ambiguousElseClause  ||  needsParens  &&  c.getLastChild().getString().endsWith( "__ "))  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  ||  needsParens  &&  c.getLastChild().getString().endsWith( "__ "))  {	  if(hasElseClause    ||    needsParens    &&    c.getLastChild().getString().endsWith(   "__   "))    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
139	[BUG]  [BUGGY]  if(hasElseClause  &&  needsParens  &&  c.getFirstChild().getString().endsWith( "__ "))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseClause  &&  needsParens  &&  c.getFirstChild().getString().endsWith( "__ "))  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseClause  &&  needsParens  &&  c.getFirstChild().getString().endsWith( "__ "))  {	  if(hasElseClause    ||    needsParens    &&    c.getLastChild().getString().endsWith(   "__   "))    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
140	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  needsParens  &&  c.getLastChild().getString().endsWith( "__ "))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  needsParens  &&  c.getLastChild().getString().endsWith( "__ "))  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  needsParens  &&  c.getLastChild().getString().endsWith( "__ "))  {	  if(hasElseClause    ||    needsParens    &&    c.getLastChild().getString().endsWith(   "__   "))    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
141	[BUG]  [BUGGY]  if(hasElseClause  ||  needsParens  &&  c.getFirstChild().getString().endsWith( "__ "))  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseClause  ||  needsParens  &&  c.getFirstChild().getString().endsWith( "__ "))  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseClause  ||  needsParens  &&  c.getFirstChild().getString().endsWith( "__ "))  {	  if(hasElseClause    ||    needsParens    &&    c.getLastChild().getString().endsWith(   "__   "))    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
142	[BUG]  [BUGGY]  cc.addChildToFront(context);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.addChildToFront(context);  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.addChildToFront(context);	  cc.addChildToFront(first);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
143	[BUG]  [BUGGY]  cc.addChildToFront(last);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.addChildToFront(last);  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.addChildToFront(last);	  cc.addChildToFront(first);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
144	[BUG]  [BUGGY]  cc.addChildToFront(n);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.addChildToFront(n);  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.addChildToFront(n);	  cc.addChildToFront(first);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
145	[BUG]  [BUGGY]  cc.addChildToFront(body);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.addChildToFront(body);  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.addChildToFront(body);	  cc.addChildToFront(first);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
146	[BUG]  [BUGGY]  double  first  =  c.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  double  first  =  c.getFirstChild();  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	double  first  =  c.getFirstChild();	  int    first    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
147	[BUG]  [BUGGY]  int  first  =  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  int  first  =  n.getFirstChild();  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	int  first  =  n.getFirstChild();	  int    first    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
148	[BUG]  [BUGGY]  char  first  =  c.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  char  first  =  c.getFirstChild();  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	char  first  =  c.getFirstChild();	  int    first    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
149	[BUG]  [BUGGY]  Integer  first  =  c.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  Integer  first  =  c.getFirstChild();  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	Integer  first  =  c.getFirstChild();	  int    first    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
150	[BUG]  [BUGGY]  int  first  =  c.getFirstChild().getNext();  [CE]  illegal  start  of  expression  [FE]                                            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  int  first  =  c.getFirstChild().getNext();  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	int  first  =  c.getFirstChild().getNext();	  int    first    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
151	[BUG]  [BUGGY]  if(first  ||  first.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ||  first.getType()  ==  Token.GETPROP)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  first.getType()  ==  Token.GETPROP)  {	  if(first    ||    first)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
152	[BUG]  [BUGGY]  if(first  ||  first.getType()  ==  Token.CATCH)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ||  first.getType()  ==  Token.CATCH)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  first.getType()  ==  Token.CATCH)  {	  if(first    ||    first)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
153	[BUG]  [BUGGY]  if(ambiguousElseClause  ||  needsParens  ||  first)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(ambiguousElseClause  ||  needsParens  ||  first)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  ||  needsParens  ||  first)  {	  if(hasElseClause    ||    needsParens    ||    first)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
154	[BUG]  [BUGGY]  if(hasElseClause  &&  needsParens  ||  first)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseClause  &&  needsParens  ||  first)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseClause  &&  needsParens  ||  first)  {	  if(hasElseClause    ||    needsParens    ||    first)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
155	[BUG]  [BUGGY]  if(hasElseClause  ||  needsParens  &&  first)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseClause  ||  needsParens  &&  first)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseClause  ||  needsParens  &&  first)  {	  if(hasElseClause    ||    needsParens    ||    first)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
156	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  needsParens  ||  first)  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  needsParens  ||  first)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  needsParens  ||  first)  {	  if(hasElseClause    ||    needsParens    ||    first)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
157	[BUG]  [BUGGY]  if(!ambiguousElseClause  ||  needsParens  ||  first)  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  ||  needsParens  ||  first)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  ||  needsParens  ||  first)  {	  if(hasElseClause    ||    needsParens    ||    first)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
158	[BUG]  [BUGGY]  if(usesElseClause  ||  needsParens  ||  first)  {  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(usesElseClause  ||  needsParens  ||  first)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(usesElseClause  ||  needsParens  ||  first)  {	  if(hasElseClause    ||    needsParens    ||    first)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
159	[BUG]  [BUGGY]  if(isSwitch(first)&&  hasElseClause  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(isSwitch(first)&&  hasElseClause  ==  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(isSwitch(first)&&  hasElseClause  ==  null)  {	  if(isSwitch(first)&&    needsParens    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
160	[BUG]  [BUGGY]  if(isSwitch(first)||  needsParens  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(isSwitch(first)||  needsParens  ==  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(isSwitch(first)||  needsParens  ==  null)  {	  if(isSwitch(first)&&    needsParens    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
161	[BUG]  [BUGGY]  if(isSwitch(first)&&  hasElseParens  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(isSwitch(first)&&  hasElseParens  ==  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(isSwitch(first)&&  hasElseParens  ==  null)  {	  if(isSwitch(first)&&    needsParens    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
162	[BUG]  [BUGGY]  if(hasElseClause  &&  isSwitch(first)&&  needsParens  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseClause  &&  isSwitch(first)&&  needsParens  ==  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseClause  &&  isSwitch(first)&&  needsParens  ==  null)  {	  if(isSwitch(first)&&    needsParens    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
163	[BUG]  [BUGGY]  if(isSwitch(first)&&  hasElseClause!=  null)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(isSwitch(first)&&  hasElseClause!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(isSwitch(first)&&  hasElseClause!=  null)  {	  if(isSwitch(first)&&    needsParens    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
164	[BUG]  [BUGGY]  if(isSwitch(first)&&  hasElseClause  >=  null)  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(isSwitch(first)&&  hasElseClause  >=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(isSwitch(first)&&  hasElseClause  >=  null)  {	  if(isSwitch(first)&&    needsParens    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
165	[BUG]  [BUGGY]  cc.endBlock(context  ==  Context.STATEMENT  ||  context  ==  Context.STATEMENT);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.endBlock(context  ==  Context.STATEMENT  ||  context  ==  Context.STATEMENT);  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.endBlock(context  ==  Context.STATEMENT  ||  context  ==  Context.STATEMENT);	  cc.endBlock(context    ==    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
166	[BUG]  [BUGGY]  if(context  ==  Context.STATEMENT)  {  cc.endBlock(context  ==  Context.STATEMENT);  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(context  ==  Context.STATEMENT)  {  cc.endBlock(context  ==  Context.STATEMENT);  }  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(context  ==  Context.STATEMENT)  {  cc.endBlock(context  ==  Context.STATEMENT);  }	  cc.endBlock(context    ==    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
167	[BUG]  [BUGGY]  cc.endBlock(context  ==  Context.STATEMENT,  1);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.endBlock(context  ==  Context.STATEMENT,  1);  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.endBlock(context  ==  Context.STATEMENT,  1);	  cc.endBlock(context    ==    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
168	[BUG]  [BUGGY]  cc.endBlock(context  ==  Context.STATEMENT,  n);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.endBlock(context  ==  Context.STATEMENT,  n);  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.endBlock(context  ==  Context.STATEMENT,  n);	  cc.endBlock(context    ==    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
169	[BUG]  [BUGGY]  if(hasElseClause  &&  functionsParens)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseClause  &&  functionsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseClause  &&  functionsParens)  {	  if(functionsParens    &&    needsElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
170	[BUG]  [BUGGY]  if(functionsParens  &&  needsElseClause  &&  first)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(functionsParens  &&  needsElseClause  &&  first)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(functionsParens  &&  needsElseClause  &&  first)  {	  if(functionsParens    &&    needsElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
171	[BUG]  [BUGGY]  if(hasParens  &&  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasParens  &&  hasElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasParens  &&  hasElseClause)  {	  if(hasParens)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
172	[BUG]  [BUGGY]  if(hasParens  &&  first!=  null)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasParens  &&  first!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasParens  &&  first!=  null)  {	  if(hasParens)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
173	[BUG]  [BUGGY]  if(hasElseParens)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseParens)  {	  if(hasParens)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
174	[BUG]  [BUGGY]  if(!ambiguousElseClause  ||  first  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  ||  first  ==  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  ||  first  ==  null)  {	  if(!ambiguousElseClause    &&    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
175	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  last  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  last  ==  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  last  ==  null)  {	  if(!ambiguousElseClause    &&    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
176	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  body  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  body  ==  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  body  ==  null)  {	  if(!ambiguousElseClause    &&    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
177	[BUG]  [BUGGY]  if(last  ||  first  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(last  ||  first  ==  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(last  ||  first  ==  null)  {	  if(ambiguousElseClause    ||    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
178	[BUG]  [BUGGY]  if(isSwitch(first)||  needsParens  ||  first  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(isSwitch(first)||  needsParens  ||  first  ==  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(isSwitch(first)||  needsParens  ||  first  ==  null)  {	  if(needsParens    ||    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
179	[BUG]  [BUGGY]  if(isSwitch(first)&&  hasElseClause!=  false)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(isSwitch(first)&&  hasElseClause!=  false)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(isSwitch(first)&&  hasElseClause!=  false)  {	  if(isSwitch(first)&&    needsParens!=    false)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
180	[BUG]  [BUGGY]  if(isSwitch(first)||  needsParens!=  false)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(isSwitch(first)||  needsParens!=  false)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(isSwitch(first)||  needsParens!=  false)  {	  if(isSwitch(first)&&    needsParens!=    false)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
181	[BUG]  [BUGGY]  if(isSwitch(first)&&  hasElseClause  ==  false)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(isSwitch(first)&&  hasElseClause  ==  false)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(isSwitch(first)&&  hasElseClause  ==  false)  {	  if(isSwitch(first)&&    needsParens!=    false)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
182	[BUG]  [BUGGY]  if(isSwitch(first)&&  hasElseParens!=  false)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(isSwitch(first)&&  hasElseParens!=  false)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(isSwitch(first)&&  hasElseParens!=  false)  {	  if(isSwitch(first)&&    needsParens!=    false)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
183	[BUG]  [BUGGY]  if(hasElseClause  &&  isSwitch(first)&&  needsParens!=  false)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseClause  &&  isSwitch(first)&&  needsParens!=  false)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseClause  &&  isSwitch(first)&&  needsParens!=  false)  {	  if(isSwitch(first)&&    needsParens!=    false)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
184	[BUG]  [BUGGY]  if(isSwitch(first)&&  needsElseClause!=  false)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(isSwitch(first)&&  needsElseClause!=  false)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(isSwitch(first)&&  needsElseClause!=  false)  {	  if(isSwitch(first)&&    needsParens!=    false)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
185	[BUG]  [BUGGY]  cc.addChildToFront(fn);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.addChildToFront(fn);  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.addChildToFront(fn);	  cc.addChildToFront(d);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
186	[BUG]  [BUGGY]  if(usesParens  &&  needsElseClause)  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(usesParens  &&  needsElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(usesParens  &&  needsElseClause)  {	  if(usesParens    ||    needsElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
187	[BUG]  [BUGGY]  if(hasElseClause  ||  usesParens)  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseClause  ||  usesParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseClause  ||  usesParens)  {	  if(usesParens    ||    needsElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
188	[BUG]  [BUGGY]  if(usesParens  ||  needsElseClause  ||  first)  {  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(usesParens  ||  needsElseClause  ||  first)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(usesParens  ||  needsElseClause  ||  first)  {	  if(usesParens    ||    needsElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
189	[BUG]  [BUGGY]  if(context  ==  Context.EXPR_RESULT)  {  cc.endBlock(context  ==  Context.EXPR_RESULT);  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(context  ==  Context.EXPR_RESULT)  {  cc.endBlock(context  ==  Context.EXPR_RESULT);  }  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(context  ==  Context.EXPR_RESULT)  {  cc.endBlock(context  ==  Context.EXPR_RESULT);  }	  cc.endBlock(context    ==    Context.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
190	[BUG]  [BUGGY]  cc.endBlock(context!=  Context.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.endBlock(context!=  Context.EXPR_RESULT);  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.endBlock(context!=  Context.EXPR_RESULT);	  cc.endBlock(context    ==    Context.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
191	[BUG]  [BUGGY]  cc.endBlock(context  ==  Context.EXPR_RESULT  ||  context  ==  Context.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.endBlock(context  ==  Context.EXPR_RESULT  ||  context  ==  Context.EXPR_RESULT);  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.endBlock(context  ==  Context.EXPR_RESULT  ||  context  ==  Context.EXPR_RESULT);	  cc.endBlock(context    ==    Context.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
192	[BUG]  [BUGGY]  cc.endBlock(context  ==  Context.EXPR_RESULT,  1);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.endBlock(context  ==  Context.EXPR_RESULT,  1);  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.endBlock(context  ==  Context.EXPR_RESULT,  1);	  cc.endBlock(context    ==    Context.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
193	[BUG]  [BUGGY]  if(context  ==  Context.EXPR_RESULT)  {  cc.endBlock(context  ==  Context.EXPR_RESULT);  }  else  {  addExpr(c,  1);  }  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(context  ==  Context.EXPR_RESULT)  {  cc.endBlock(context  ==  Context.EXPR_RESULT);  }  else  {  addExpr(c,  1);  }  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(context  ==  Context.EXPR_RESULT)  {  cc.endBlock(context  ==  Context.EXPR_RESULT);  }  else  {  addExpr(c,  1);  }	  cc.endBlock(context    ==    Context.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
194	[BUG]  [BUGGY]  cc.endBlock(context  ==  Context.EXPR_RESULT,  n);  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.endBlock(context  ==  Context.EXPR_RESULT,  n);  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.endBlock(context  ==  Context.EXPR_RESULT,  n);	  cc.endBlock(context    ==    Context.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
195	[BUG]  [BUGGY]  if(first.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first.getType()  ==  Token.NAME)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first.getType()  ==  Token.NAME)  {	  if(first    ||    first.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
196	[BUG]  [BUGGY]  if(first  ==  null  ||  first.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ==  null  ||  first.getType()  ==  Token.NAME)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ==  null  ||  first.getType()  ==  Token.NAME)  {	  if(first    ||    first.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
197	[BUG]  [BUGGY]  if(first!=  null  ||  first.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first!=  null  ||  first.getType()  ==  Token.NAME)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first!=  null  ||  first.getType()  ==  Token.NAME)  {	  if(first    ||    first.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
198	[BUG]  [BUGGY]  if(first.getType()  ==  Token.NAME  ||  first.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first.getType()  ==  Token.NAME  ||  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first.getType()  ==  Token.NAME  ||  first.getType()  ==  Token.FUNCTION)  {	  if(first    ||    first.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
199	[BUG]  [BUGGY]  if(first.getType()  ==  Token.NAME  ||  first.getType()  ==  Token.EXPR_RESULT)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first.getType()  ==  Token.NAME  ||  first.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first.getType()  ==  Token.NAME  ||  first.getType()  ==  Token.EXPR_RESULT)  {	  if(first    ||    first.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
200	[BUG]  [BUGGY]  if(first.getType()  ==  Token.NAME  ||  first.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first.getType()  ==  Token.NAME  ||  first.getType()  ==  Token.GETPROP)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first.getType()  ==  Token.NAME  ||  first.getType()  ==  Token.GETPROP)  {	  if(first    ||    first.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
201	[BUG]  [BUGGY]  if(funcNeedsParens  &&  ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(funcNeedsParens  &&  ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(funcNeedsParens  &&  ambiguousElseClause)  {	  if(ambiguousElseClause    &&    needsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
202	[BUG]  [BUGGY]  if(first  &&  ambiguousElseClause  &&  needsParens)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  &&  ambiguousElseClause  &&  needsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  &&  ambiguousElseClause  &&  needsParens)  {	  if(ambiguousElseClause    &&    needsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
203	[BUG]  [BUGGY]  if(usesParens  &&  ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(usesParens  &&  ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(usesParens  &&  ambiguousElseClause)  {	  if(ambiguousElseClause    &&    needsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
204	[BUG]  [BUGGY]  if(funcNeedsParens  &&  first)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(funcNeedsParens  &&  first)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(funcNeedsParens  &&  first)  {	  if(ambiguousElseClause    &&    needsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
205	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  needParens)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  needParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  needParens)  {	  if(ambiguousElseClause    &&    needParens)    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
206	[BUG]  [BUGGY]  if(hasElseClause  &&  needParens)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseClause  &&  needParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseClause  &&  needParens)  {	  if(ambiguousElseClause    &&    needParens)    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
207	[BUG]  [BUGGY]  if(ambiguousElseClause  ||  needParens)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(ambiguousElseClause  ||  needParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  ||  needParens)  {	  if(ambiguousElseClause    &&    needParens)    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
208	[BUG]  [BUGGY]  if(funcNeedsParens  &&  needParens)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(funcNeedsParens  &&  needParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(funcNeedsParens  &&  needParens)  {	  if(ambiguousElseClause    &&    needParens)    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
209	[BUG]  [BUGGY]  if(functionNeedsParens  ||  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(functionNeedsParens  ||  hasElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(functionNeedsParens  ||  hasElseClause)  {	  if(functionNeedsParens    &&    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
210	[BUG]  [BUGGY]  if(hasElseClause  &&  functionNeedsParens)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseClause  &&  functionNeedsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseClause  &&  functionNeedsParens)  {	  if(functionNeedsParens    &&    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
211	[BUG]  [BUGGY]  if(ambiguousElseClause  &&  functionNeedsParens)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(ambiguousElseClause  &&  functionNeedsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  &&  functionNeedsParens)  {	  if(functionNeedsParens    &&    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
212	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  functionNeedsParens)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  functionNeedsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  functionNeedsParens)  {	  if(functionNeedsParens    &&    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
213	[BUG]  [BUGGY]  if(first  ||  first  ==  null  ||  first.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ||  first  ==  null  ||  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  first  ==  null  ||  first.getType()  ==  Token.FUNCTION)  {	  if(first    ||    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
214	[BUG]  [BUGGY]  if(first  ||  first  ==  null  ||  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ||  first  ==  null  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  first  ==  null  ||  first.getType()  ==  Token.STRING)  {	  if(first    ||    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
215	[BUG]  [BUGGY]  if(first  ||  first  ==  null  ||  first.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ||  first  ==  null  ||  first.getType()  ==  Token.NAME)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  first  ==  null  ||  first.getType()  ==  Token.NAME)  {	  if(first    ||    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
216	[BUG]  [BUGGY]  if(first  ||  first  ==  null  ||  first.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ||  first  ==  null  ||  first.getType()  ==  Token.BLOCK)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  first  ==  null  ||  first.getType()  ==  Token.BLOCK)  {	  if(first    ||    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
217	[BUG]  [BUGGY]  if(first  ||  first  ==  null  ||  first.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ||  first  ==  null  ||  first.getType()  ==  Token.GETPROP)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  first  ==  null  ||  first.getType()  ==  Token.GETPROP)  {	  if(first    ||    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
218	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  hasElse)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  hasElse)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  hasElse)  {	  if(!ambiguousElseClause    &&    needsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
219	[BUG]  [BUGGY]  if(!funcNeedsParens  &&  ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!funcNeedsParens  &&  ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!funcNeedsParens  &&  ambiguousElseClause)  {	  if(!ambiguousElseClause    &&    needsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
220	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  requiresParens)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  requiresParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  requiresParens)  {	  if(!ambiguousElseClause    &&    needsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
221	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  needsParens  &&  first!=  null)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  needsParens  &&  first!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  needsParens  &&  first!=  null)  {	  if(!ambiguousElseClause    &&    needsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
222	[BUG]  [BUGGY]  if(!hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!hasElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!hasElseClause)  {	  if(!funcNeedsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
223	[BUG]  [BUGGY]  if(hasElseClause  ||!funcNeedsParens)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseClause  ||!funcNeedsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseClause  ||!funcNeedsParens)  {	  if(!funcNeedsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
224	[BUG]  [BUGGY]  if(hasElseClause  &&!funcNeedsParens)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseClause  &&!funcNeedsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseClause  &&!funcNeedsParens)  {	  if(!funcNeedsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
225	[BUG]  [BUGGY]  if(!hasElseClause  ||!funcNeedsParens)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!hasElseClause  ||!funcNeedsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!hasElseClause  ||!funcNeedsParens)  {	  if(!funcNeedsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
226	[BUG]  [BUGGY]  if(!ambiguousElseClause  ||!funcNeedsParens)  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  ||!funcNeedsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  ||!funcNeedsParens)  {	  if(!funcNeedsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
227	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  funcNeedsParens)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  funcNeedsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  funcNeedsParens)  {	  if(ambiguousElseClause    ||    funcNeedsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
228	[BUG]  [BUGGY]  if(hasElseClause  ||  funcNeedsParens)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseClause  ||  funcNeedsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseClause  ||  funcNeedsParens)  {	  if(ambiguousElseClause    ||    funcNeedsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
229	[BUG]  [BUGGY]  if(functions  ||  ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(functions  ||  ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(functions  ||  ambiguousElseClause)  {	  if(ambiguousElseClause    ||    funcNeedsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
230	[BUG]  [BUGGY]  if(last  ||  ambiguousElseClause  ||  funcNeedsParens)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(last  ||  ambiguousElseClause  ||  funcNeedsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(last  ||  ambiguousElseClause  ||  funcNeedsParens)  {	  if(ambiguousElseClause    ||    funcNeedsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
231	[BUG]  [BUGGY]  if(fn  ||  ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(fn  ||  ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(fn  ||  ambiguousElseClause)  {	  if(ambiguousElseClause    ||    funcNeedsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
232	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  hasElseParens  ||  first  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  hasElseParens  ||  first  ==  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  hasElseParens  ||  first  ==  null)  {	  if(!ambiguousElseClause    &&    needsParens    ||    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
233	[BUG]  [BUGGY]  if(!ambiguousElseClause  ||  needsParens  ||  first  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  ||  needsParens  ||  first  ==  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  ||  needsParens  ||  first  ==  null)  {	  if(!ambiguousElseClause    &&    needsParens    ||    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
234	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  hasElseParens  ||  first!=  null)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  hasElseParens  ||  first!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  hasElseParens  ||  first!=  null)  {	  if(!ambiguousElseClause    &&    needsParens    ||    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
235	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  needsParens  &&  first  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  needsParens  &&  first  ==  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  needsParens  &&  first  ==  null)  {	  if(!ambiguousElseClause    &&    needsParens    ||    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
236	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  needsParens  ||  first!=  null)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  needsParens  ||  first!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  needsParens  ||  first!=  null)  {	  if(!ambiguousElseClause    &&    needsParens    ||    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
237	[BUG]  [BUGGY]  if(first  ||  ambiguousElseClause  ||  hasElse)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ||  ambiguousElseClause  ||  hasElse)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  ambiguousElseClause  ||  hasElse)  {	  if(ambiguousElseClause    ||    hasElse)    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
238	[BUG]  [BUGGY]  if(hasElseClause  ||  ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseClause  ||  ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseClause  ||  ambiguousElseClause)  {	  if(ambiguousElseClause    ||    hasElse)    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
239	[BUG]  [BUGGY]  if(ambiguousElseClause  &&  hasElse)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(ambiguousElseClause  &&  hasElse)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  &&  hasElse)  {	  if(ambiguousElseClause    ||    hasElse)    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
240	[BUG]  [BUGGY]  if(!ambiguousElseClause  ||  hasElse)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  ||  hasElse)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  ||  hasElse)  {	  if(ambiguousElseClause    ||    hasElse)    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
241	[BUG]  [BUGGY]  if(FirstChild.isLetterOrDigit(first)&&  ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(FirstChild.isLetterOrDigit(first)&&  ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(FirstChild.isLetterOrDigit(first)&&  ambiguousElseClause)  {	  if(FirstChild.isLetterOrDigit(first)||    ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
242	[BUG]  [BUGGY]  if(FirstChild.isLetterOrDigit(first)||  funcNeedsParens)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(FirstChild.isLetterOrDigit(first)||  funcNeedsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(FirstChild.isLetterOrDigit(first)||  funcNeedsParens)  {	  if(FirstChild.isLetterOrDigit(first)||    ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
243	[BUG]  [BUGGY]  if(first.isLetterOrDigit(c)||  ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first.isLetterOrDigit(c)||  ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first.isLetterOrDigit(c)||  ambiguousElseClause)  {	  if(FirstChild.isLetterOrDigit(first)||    ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
244	[BUG]  [BUGGY]  if(!FirstChild.isLetterOrDigit(first)&&  ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!FirstChild.isLetterOrDigit(first)&&  ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!FirstChild.isLetterOrDigit(first)&&  ambiguousElseClause)  {	  if(FirstChild.isLetterOrDigit(first)||    ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
245	[BUG]  [BUGGY]  if(!FirstChild.isLetterOrDigit(first)||  ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!FirstChild.isLetterOrDigit(first)||  ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!FirstChild.isLetterOrDigit(first)||  ambiguousElseClause)  {	  if(FirstChild.isLetterOrDigit(first)||    ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
246	[BUG]  [BUGGY]  if(FirstChild.isLetterOrDigit(first)||  c.isLetterOrDigit(ambiguousElseClause))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(FirstChild.isLetterOrDigit(first)||  c.isLetterOrDigit(ambiguousElseClause))  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(FirstChild.isLetterOrDigit(first)||  c.isLetterOrDigit(ambiguousElseClause))  {	  if(FirstChild.isLetterOrDigit(first)||    ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
247	[BUG]  [BUGGY]  if(ambiguousElseClause  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(ambiguousElseClause  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(ambiguousElseClause    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
248	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(ambiguousElseClause    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
249	[BUG]  [BUGGY]  if(first  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(ambiguousElseClause    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
250	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  ambiguousElseClause)  {	  if(ambiguousElseClause    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
251	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  ambiguousElseClause  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  ambiguousElseClause  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  ambiguousElseClause  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(ambiguousElseClause    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
252	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(ambiguousElseClause    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
253	[BUG]  [BUGGY]  if(last  ||  first)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(last  ||  first)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(last  ||  first)  {	  if(last)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
254	[BUG]  [BUGGY]  if(first  ||  last)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ||  last)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  last)  {	  if(last)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
255	[BUG]  [BUGGY]  if(last  ||  last)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(last  ||  last)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(last  ||  last)  {	  if(last)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
256	[BUG]  [BUGGY]  if(usesElseClause  &&  needsParens)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(usesElseClause  &&  needsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(usesElseClause  &&  needsParens)  {	  if(usesElseClause    ||    needsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
257	[BUG]  [BUGGY]  cc.addChildToFront(context.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.addChildToFront(context.getFirstChild());  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.addChildToFront(context.getFirstChild());	  cc.addChildToFront(context.getCurrentNode());    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
258	[BUG]  [BUGGY]  cc.addChildToFront(context.getCurrentNode(),  n);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.addChildToFront(context.getCurrentNode(),  n);  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.addChildToFront(context.getCurrentNode(),  n);	  cc.addChildToFront(context.getCurrentNode());    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
259	[BUG]  [BUGGY]  cc.addChildToFront(context.nextNode());  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.addChildToFront(context.nextNode());  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.addChildToFront(context.nextNode());	  cc.addChildToFront(context.getCurrentNode());    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
260	[BUG]  [BUGGY]  cc.addChildToFront(context.getCurrentNode(),  1);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.addChildToFront(context.getCurrentNode(),  1);  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.addChildToFront(context.getCurrentNode(),  1);	  cc.addChildToFront(context.getCurrentNode());    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
261	[BUG]  [BUGGY]  cc.addChildToFront(context.getNext());  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.addChildToFront(context.getNext());  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.addChildToFront(context.getNext());	  cc.addChildToFront(context.getCurrentNode());    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
262	[BUG]  [BUGGY]  cc.addChildToFront(context.getCurrentNode(),  c);  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.addChildToFront(context.getCurrentNode(),  c);  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.addChildToFront(context.getCurrentNode(),  c);	  cc.addChildToFront(context.getCurrentNode());    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
263	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  hasElseParens  >  first)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  hasElseParens  >  first)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  hasElseParens  >  first)  {	  if(!ambiguousElseClause    &&    needsParens    ==    first)    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
264	[BUG]  [BUGGY]  if(!ambiguousElseClause  ||  needsParens  ==  first)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  ||  needsParens  ==  first)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  ||  needsParens  ==  first)  {	  if(!ambiguousElseClause    &&    needsParens    ==    first)    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
265	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  hasElseParens  <  first)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  hasElseParens  <  first)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  hasElseParens  <  first)  {	  if(!ambiguousElseClause    &&    needsParens    ==    first)    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
266	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  hasElseParens  {  first)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  hasElseParens  {  first)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  hasElseParens  {  first)  {	  if(!ambiguousElseClause    &&    needsParens    ==    first)    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
267	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  needsParens  ==  last)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  needsParens  ==  last)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  needsParens  ==  last)  {	  if(!ambiguousElseClause    &&    needsParens    ==    first)    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
268	[BUG]  [BUGGY]  if(hasElseClause  ||  needsParens  ||  last)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseClause  ||  needsParens  ||  last)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseClause  ||  needsParens  ||  last)  {	  if(last    ||    needsParens    ||    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
269	[BUG]  [BUGGY]  if(last  ||  needsParens  ||  ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(last  ||  needsParens  ||  ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(last  ||  needsParens  ||  ambiguousElseClause)  {	  if(last    ||    needsParens    ||    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
270	[BUG]  [BUGGY]  if(last  ||  needsParens  ||  hasElseClause  ||  first)  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(last  ||  needsParens  ||  hasElseClause  ||  first)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(last  ||  needsParens  ||  hasElseClause  ||  first)  {	  if(last    ||    needsParens    ||    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
271	[BUG]  [BUGGY]  if(context!=  Context.STATEMENT)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(context!=  Context.STATEMENT)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(context!=  Context.STATEMENT)  {	  if(first!=    Context.STATEMENT)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
272	[BUG]  [BUGGY]  if(first!=  Context.STATEMENT  ||  first!=  Context.STATEMENT)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first!=  Context.STATEMENT  ||  first!=  Context.STATEMENT)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first!=  Context.STATEMENT  ||  first!=  Context.STATEMENT)  {	  if(first!=    Context.STATEMENT)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
273	[BUG]  [BUGGY]  if(first  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ==  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ==  null)  {	  if(first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
274	[BUG]  [BUGGY]  if(first!=  null  ||  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first!=  null  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first!=  null  ||  first.getType()  ==  Token.STRING)  {	  if(first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
275	[BUG]  [BUGGY]  if(first  ==  null  ||  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ==  null  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ==  null  ||  first.getType()  ==  Token.STRING)  {	  if(first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
276	[BUG]  [BUGGY]  if(c.hasChildren()  ||  ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(c.hasChildren()  ||  ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(c.hasChildren()  ||  ambiguousElseClause)  {	  if(fn.hasChildren()    ||    ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
277	[BUG]  [BUGGY]  if(fn.hasChildren()  &&  ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(fn.hasChildren()  &&  ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(fn.hasChildren()  &&  ambiguousElseClause)  {	  if(fn.hasChildren()    ||    ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
278	[BUG]  [BUGGY]  if(first.hasChildren()  ||  ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first.hasChildren()  ||  ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first.hasChildren()  ||  ambiguousElseClause)  {	  if(fn.hasChildren()    ||    ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
279	[BUG]  [BUGGY]  if(context.hasChildren()  ||  ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(context.hasChildren()  ||  ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(context.hasChildren()  ||  ambiguousElseClause)  {	  if(fn.hasChildren()    ||    ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
280	[BUG]  [BUGGY]  if(n.hasChildren()  ||  ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(n.hasChildren()  ||  ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(n.hasChildren()  ||  ambiguousElseClause)  {	  if(fn.hasChildren()    ||    ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
281	[BUG]  [BUGGY]  if(fn.hasChildren()  ||  ambiguousElseClause  &&  first)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(fn.hasChildren()  ||  ambiguousElseClause  &&  first)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(fn.hasChildren()  ||  ambiguousElseClause  &&  first)  {	  if(fn.hasChildren()    ||    ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
282	[BUG]  [BUGGY]  if(hasElse  &&  first  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElse  &&  first  ==  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElse  &&  first  ==  null)  {	  if(hasElse    ||    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
283	[BUG]  [BUGGY]  if(hasElseClause  &&  requiresParens)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseClause  &&  requiresParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseClause  &&  requiresParens)  {	  if(ambiguousElseClause    &&    requiresParens)    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
284	[BUG]  [BUGGY]  if(ambiguousElseClause  ||  requiresParens)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(ambiguousElseClause  ||  requiresParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  ||  requiresParens)  {	  if(ambiguousElseClause    &&    requiresParens)    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
285	[BUG]  [BUGGY]  if(funcNeedsParens  &&  requiresParens)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(funcNeedsParens  &&  requiresParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(funcNeedsParens  &&  requiresParens)  {	  if(ambiguousElseClause    &&    requiresParens)    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
286	[BUG]  [BUGGY]  cc.addExpr(d);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.addExpr(d);  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.addExpr(d);	  cc.addNumber(d);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
287	[BUG]  [BUGGY]  cc.removeNumber(d);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.removeNumber(d);  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.removeNumber(d);	  cc.addNumber(d);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
288	[BUG]  [BUGGY]  cc.add(d);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.add(d);  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.add(d);	  cc.addNumber(d);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
289	[BUG]  [BUGGY]  if(ambiguousElseClause  ||  needsParens  &&  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(ambiguousElseClause  ||  needsParens  &&  hasElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  ||  needsParens  &&  hasElseClause)  {	  if(first    ||    needsParens    &&    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
290	[BUG]  [BUGGY]  if(hasElseClause  ||  first  ||  needsParens  &&  first)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseClause  ||  first  ||  needsParens  &&  first)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseClause  ||  first  ||  needsParens  &&  first)  {	  if(first    ||    needsParens    &&    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
291	[BUG]  [BUGGY]  if(useLineBreaks  &&  first  ||  needsParens  &&  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(useLineBreaks  &&  first  ||  needsParens  &&  hasElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(useLineBreaks  &&  first  ||  needsParens  &&  hasElseClause)  {	  if(first    ||    needsParens    &&    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
292	[BUG]  [BUGGY]  if(usesParens  ||  first  ||  needsParens  &&  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(usesParens  ||  first  ||  needsParens  &&  hasElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(usesParens  ||  first  ||  needsParens  &&  hasElseClause)  {	  if(first    ||    needsParens    &&    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
293	[BUG]  [BUGGY]  if(ambiguousElseClause  ||  needsParens  &&  first)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(ambiguousElseClause  ||  needsParens  &&  first)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  ||  needsParens  &&  first)  {	  if(first    ||    needsParens    &&    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
294	[BUG]  [BUGGY]  if(hasElseClause  ||  first  ||  needsParens  &&  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseClause  ||  first  ||  needsParens  &&  hasElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseClause  ||  first  ||  needsParens  &&  hasElseClause)  {	  if(first    ||    needsParens    &&    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
295	[BUG]  [BUGGY]  if(ambiguousElseClause  &&  funcNeedsParens)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(ambiguousElseClause  &&  funcNeedsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  &&  funcNeedsParens)  {	  if(funcNeedsParens    &&    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
296	[BUG]  [BUGGY]  if(ambiguousElseClause  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(ambiguousElseClause  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {	  if(ambiguousElseClause    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
297	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {	  if(ambiguousElseClause    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
298	[BUG]  [BUGGY]  if(first  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {	  if(ambiguousElseClause    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
299	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  ambiguousElseClause)  {	  if(ambiguousElseClause    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
300	[BUG]  [BUGGY]  if(c.isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  ambiguousElseClause  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(c.isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  ambiguousElseClause  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(c.isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  ambiguousElseClause  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {	  if(ambiguousElseClause    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
301	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {	  if(ambiguousElseClause    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
302	[BUG]  [BUGGY]  if(!ambiguousElseClause  ||  needsParens  ||  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  ||  needsParens  ||  hasElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  ||  needsParens  ||  hasElseClause)  {	  if(!ambiguousElseClause    &&    needsParens    ||    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
303	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  funcNeedsParens  ||  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  funcNeedsParens  ||  hasElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  funcNeedsParens  ||  hasElseClause)  {	  if(!ambiguousElseClause    &&    needsParens    ||    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
304	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  needLineBreaks  ||  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  needLineBreaks  ||  hasElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  needLineBreaks  ||  hasElseClause)  {	  if(!ambiguousElseClause    &&    needsParens    ||    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
305	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  needsParens  ||  hasEmptyClause)  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  needsParens  ||  hasEmptyClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  needsParens  ||  hasEmptyClause)  {	  if(!ambiguousElseClause    &&    needsParens    ||    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
306	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  needsParens  ||  context.isFunctionDeclaration())  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  needsParens  ||  context.isFunctionDeclaration())  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  needsParens  ||  context.isFunctionDeclaration())  {	  if(!ambiguousElseClause    &&    needsParens    ||    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
307	[BUG]  [BUGGY]  add(first,  c.getLastChild());  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  add(first,  c.getLastChild());  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	add(first,  c.getLastChild());	  add(first);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
308	[BUG]  [BUGGY]  if(first!=  null)  {  add(first);  }  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first!=  null)  {  add(first);  }  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first!=  null)  {  add(first);  }	  add(first);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
309	[BUG]  [BUGGY]  if(last!=  null  ||  ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(last!=  null  ||  ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(last!=  null  ||  ambiguousElseClause)  {	  if(ambiguousElseClause    &&    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
310	[BUG]  [BUGGY]  if(context  ==  Context.STATEMENT  ||  context  ==  Context.STATEMENT)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(context  ==  Context.STATEMENT  ||  context  ==  Context.STATEMENT)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(context  ==  Context.STATEMENT  ||  context  ==  Context.STATEMENT)  {	  if(context    ==    Context.STATEMENT)    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
311	[BUG]  [BUGGY]  if(context  ==  Context.STATEMENT  ||  context  ==  Context.IN_FOR_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(context  ==  Context.STATEMENT  ||  context  ==  Context.IN_FOR_INIT_CLAUSE)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(context  ==  Context.STATEMENT  ||  context  ==  Context.IN_FOR_INIT_CLAUSE)  {	  if(context    ==    Context.STATEMENT)    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
312	[BUG]  [BUGGY]  if(context  ==  Context.STATEMENT  ||  context  ==  Context.EXPR_RESULT)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(context  ==  Context.STATEMENT  ||  context  ==  Context.EXPR_RESULT)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(context  ==  Context.STATEMENT  ||  context  ==  Context.EXPR_RESULT)  {	  if(context    ==    Context.STATEMENT)    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
313	[BUG]  [BUGGY]  if(context  ==  Context.STATEMENT  ||  context  ==  Context.EMPTY)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(context  ==  Context.STATEMENT  ||  context  ==  Context.EMPTY)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(context  ==  Context.STATEMENT  ||  context  ==  Context.EMPTY)  {	  if(context    ==    Context.STATEMENT)    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
314	[BUG]  [BUGGY]  double  first  =  c.getLastChild();  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  double  first  =  c.getLastChild();  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	double  first  =  c.getLastChild();	  int    first    =    c.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
315	[BUG]  [BUGGY]  int  first  =  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  int  first  =  n.getLastChild();  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	int  first  =  n.getLastChild();	  int    first    =    c.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
316	[BUG]  [BUGGY]  int  first  =  c.getLastChild()  +  1;  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  int  first  =  c.getLastChild()  +  1;  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	int  first  =  c.getLastChild()  +  1;	  int    first    =    c.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
317	[BUG]  [BUGGY]  char  first  =  c.getLastChild();  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  char  first  =  c.getLastChild();  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	char  first  =  c.getLastChild();	  int    first    =    c.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
318	[BUG]  [BUGGY]  Integer  first  =  c.getLastChild();  [CE]  illegal  start  of  expression  [FE]                                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  Integer  first  =  c.getLastChild();  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	Integer  first  =  c.getLastChild();	  int    first    =    c.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
319	[BUG]  [BUGGY]  if(!funcNeedsParens  ||  ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!funcNeedsParens  ||  ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!funcNeedsParens  ||  ambiguousElseClause)  {	  if(!ambiguousElseClause    ||    needsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
320	[BUG]  [BUGGY]  if(!ambiguousElseClause  ||  hasElseParens)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  ||  hasElseParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  ||  hasElseParens)  {	  if(!ambiguousElseClause    ||    needsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
321	[BUG]  [BUGGY]  if(usesParens)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(usesParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(usesParens)  {	  if(funcNeedsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
322	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(n.getType()  ==  Token.NAME)  {	  if(funcNeedsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
323	[BUG]  [BUGGY]  if(usesElseClause  ||  funcNeedsParens)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(usesElseClause  ||  funcNeedsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(usesElseClause  ||  funcNeedsParens)  {	  if(funcNeedsParens    ||    needsElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
324	[BUG]  [BUGGY]  if(functions  ||  needsElseClause)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(functions  ||  needsElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(functions  ||  needsElseClause)  {	  if(funcNeedsParens    ||    needsElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
325	[BUG]  [BUGGY]  if(isSwitch(first)||  needsParens!=  null)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(isSwitch(first)||  needsParens!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(isSwitch(first)||  needsParens!=  null)  {	  if(isSwitch(first)&&    needsParens!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
326	[BUG]  [BUGGY]  if(isSwitch(first)&&  hasElseParens!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(isSwitch(first)&&  hasElseParens!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(isSwitch(first)&&  hasElseParens!=  null)  {	  if(isSwitch(first)&&    needsParens!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
327	[BUG]  [BUGGY]  if(isSwitch(first)&&  hasElseClause  >>  null)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(isSwitch(first)&&  hasElseClause  >>  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(isSwitch(first)&&  hasElseClause  >>  null)  {	  if(isSwitch(first)&&    needsParens!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
328	[BUG]  [BUGGY]  if(usesParens  ||  ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(usesParens  ||  ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(usesParens  ||  ambiguousElseClause)  {	  if(ambiguousElseClause    ||    needsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
329	[BUG]  [BUGGY]  if(functions  ||  needsParens)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(functions  ||  needsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(functions  ||  needsParens)  {	  if(ambiguousElseClause    ||    needsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
330	[BUG]  [BUGGY]  if(c!=  null  ||!ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(c!=  null  ||!ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(c!=  null  ||!ambiguousElseClause)  {	  if(first!=    null    ||!ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
331	[BUG]  [BUGGY]  if(last!=  null  ||!ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(last!=  null  ||!ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(last!=  null  ||!ambiguousElseClause)  {	  if(first!=    null    ||!ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
332	[BUG]  [BUGGY]  if(isSwitch(first)||  needsParens  ==  false)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(isSwitch(first)||  needsParens  ==  false)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(isSwitch(first)||  needsParens  ==  false)  {	  if(isSwitch(first)&&    needsParens    ==    false)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
333	[BUG]  [BUGGY]  if(isSwitch(first)&&  hasElseParens  ==  false)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(isSwitch(first)&&  hasElseParens  ==  false)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(isSwitch(first)&&  hasElseParens  ==  false)  {	  if(isSwitch(first)&&    needsParens    ==    false)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
334	[BUG]  [BUGGY]  if(hasElseClause  &&  isSwitch(first)&&  needsParens  ==  false)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseClause  &&  isSwitch(first)&&  needsParens  ==  false)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseClause  &&  isSwitch(first)&&  needsParens  ==  false)  {	  if(isSwitch(first)&&    needsParens    ==    false)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
335	[BUG]  [BUGGY]  if(isSwitch(first)&&  needsElseClause  ==  false)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(isSwitch(first)&&  needsElseClause  ==  false)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(isSwitch(first)&&  needsElseClause  ==  false)  {	  if(isSwitch(first)&&    needsParens    ==    false)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
336	[BUG]  [BUGGY]  if(isSwitch(c)&&  needsParens  ==  false)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(isSwitch(c)&&  needsParens  ==  false)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(isSwitch(c)&&  needsParens  ==  false)  {	  if(isSwitch(first)&&    needsParens    ==    false)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
337	[BUG]  [BUGGY]  if(functionNeedsParens  &&  needsElseClause)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(functionNeedsParens  &&  needsElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(functionNeedsParens  &&  needsElseClause)  {	  if(functionNeedsParens    ||    needsElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
338	[BUG]  [BUGGY]  if(hasElseClause  ||  functionNeedsParens)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseClause  ||  functionNeedsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseClause  ||  functionNeedsParens)  {	  if(functionNeedsParens    ||    needsElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
339	[BUG]  [BUGGY]  if(conditionNeedsParens  ||  needsElseClause)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(conditionNeedsParens  ||  needsElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(conditionNeedsParens  ||  needsElseClause)  {	  if(functionNeedsParens    ||    needsElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
340	[BUG]  [BUGGY]  if(functionNeedsParens  ||  needsParens)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(functionNeedsParens  ||  needsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(functionNeedsParens  ||  needsParens)  {	  if(functionNeedsParens    ||    needsElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
341	[BUG]  [BUGGY]  if(functionNeedsParens  ||  needsElseClause  ||  needLineBreaks)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(functionNeedsParens  ||  needsElseClause  ||  needLineBreaks)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(functionNeedsParens  ||  needsElseClause  ||  needLineBreaks)  {	  if(functionNeedsParens    ||    needsElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
342	[BUG]  [BUGGY]  if(first.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first.hasChildren())  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first.hasChildren())  {	  if(fn.hasChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
343	[BUG]  [BUGGY]  if(first.hasChildren()  ||  fn.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first.hasChildren()  ||  fn.hasChildren())  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first.hasChildren()  ||  fn.hasChildren())  {	  if(fn.hasChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
344	[BUG]  [BUGGY]  if(first.hasChild())  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first.hasChild())  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first.hasChild())  {	  if(fn.hasChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
345	[BUG]  [BUGGY]  if(c.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(c.hasChildren())  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(c.hasChildren())  {	  if(fn.hasChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
346	[BUG]  [BUGGY]  if(fn.hasChildren()  ||  first.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(fn.hasChildren()  ||  first.hasChildren())  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(fn.hasChildren()  ||  first.hasChildren())  {	  if(fn.hasChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
347	[BUG]  [BUGGY]  if(fn.hasChildren()  ||  c.hasNext())  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(fn.hasChildren()  ||  c.hasNext())  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(fn.hasChildren()  ||  c.hasNext())  {	  if(fn.hasChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
348	[BUG]  [BUGGY]  if(context.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(context.hasChildren())  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(context.hasChildren())  {	  if(fn.hasChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
349	[BUG]  [BUGGY]  if(functions  ||  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(functions  ||  hasElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(functions  ||  hasElseClause)  {	  if(funcNeedsParens    ||    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
350	[BUG]  [BUGGY]  if(funcNeedsParens  ||  needsParens)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(funcNeedsParens  ||  needsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(funcNeedsParens  ||  needsParens)  {	  if(funcNeedsParens    ||    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
351	[BUG]  [BUGGY]  if(ambiguousElseClause  &&  needsParens  &&  c.getLastChild().getString().endsWith( "- "))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(ambiguousElseClause  &&  needsParens  &&  c.getLastChild().getString().endsWith( "- "))  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  &&  needsParens  &&  c.getLastChild().getString().endsWith( "- "))  {	  if(hasElseClause    ||    needsParens    &&    c.getLastChild().getString().endsWith(   "-   "))    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
352	[BUG]  [BUGGY]  if(hasElseClause  &&  needsParens  &&  c.getLastChild().getString().endsWith( "- "))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseClause  &&  needsParens  &&  c.getLastChild().getString().endsWith( "- "))  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseClause  &&  needsParens  &&  c.getLastChild().getString().endsWith( "- "))  {	  if(hasElseClause    ||    needsParens    &&    c.getLastChild().getString().endsWith(   "-   "))    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
353	[BUG]  [BUGGY]  if(ambiguousElseClause  ||  needsParens  &&  c.getLastChild().getString().endsWith( "- "))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(ambiguousElseClause  ||  needsParens  &&  c.getLastChild().getString().endsWith( "- "))  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  ||  needsParens  &&  c.getLastChild().getString().endsWith( "- "))  {	  if(hasElseClause    ||    needsParens    &&    c.getLastChild().getString().endsWith(   "-   "))    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
354	[BUG]  [BUGGY]  if(hasElseClause  &&  needsParens  &&  c.getFirstChild().getString().endsWith( "- "))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseClause  &&  needsParens  &&  c.getFirstChild().getString().endsWith( "- "))  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseClause  &&  needsParens  &&  c.getFirstChild().getString().endsWith( "- "))  {	  if(hasElseClause    ||    needsParens    &&    c.getLastChild().getString().endsWith(   "-   "))    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
355	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  needsParens  &&  c.getLastChild().getString().endsWith( "- "))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  needsParens  &&  c.getLastChild().getString().endsWith( "- "))  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  needsParens  &&  c.getLastChild().getString().endsWith( "- "))  {	  if(hasElseClause    ||    needsParens    &&    c.getLastChild().getString().endsWith(   "-   "))    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
356	[BUG]  [BUGGY]  if(hasElseClause  ||  needsParens  &&  c.getFirstChild().getString().endsWith( "- "))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseClause  ||  needsParens  &&  c.getFirstChild().getString().endsWith( "- "))  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseClause  ||  needsParens  &&  c.getFirstChild().getString().endsWith( "- "))  {	  if(hasElseClause    ||    needsParens    &&    c.getLastChild().getString().endsWith(   "-   "))    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
357	[BUG]  [BUGGY]  if(ambiguousElseClause  ||  needsParens  &&  c.getFirstChild().getString().endsWith( "- "))  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(ambiguousElseClause  ||  needsParens  &&  c.getFirstChild().getString().endsWith( "- "))  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  ||  needsParens  &&  c.getFirstChild().getString().endsWith( "- "))  {	  if(hasElseClause    ||    needsParens    &&    c.getLastChild().getString().endsWith(   "-   "))    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
358	[BUG]  [BUGGY]  if(context  ==  Context.OTHER  ||!ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(context  ==  Context.OTHER  ||!ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(context  ==  Context.OTHER  ||!ambiguousElseClause)  {	  if(first    ==    Context.OTHER    ||!ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
359	[BUG]  [BUGGY]  if(first  ==  Context.OTHER  ||  ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ==  Context.OTHER  ||  ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ==  Context.OTHER  ||  ambiguousElseClause)  {	  if(first    ==    Context.OTHER    ||!ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
360	[BUG]  [BUGGY]  if(context  ==  Context.OTHER  ||  ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(context  ==  Context.OTHER  ||  ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(context  ==  Context.OTHER  ||  ambiguousElseClause)  {	  if(first    ==    Context.OTHER    ||!ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
361	[BUG]  [BUGGY]  if(first!=  Context.OTHER  ||!ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first!=  Context.OTHER  ||!ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first!=  Context.OTHER  ||!ambiguousElseClause)  {	  if(first    ==    Context.OTHER    ||!ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
362	[BUG]  [BUGGY]  if(n  ==  Context.OTHER  ||!ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(n  ==  Context.OTHER  ||!ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(n  ==  Context.OTHER  ||!ambiguousElseClause)  {	  if(first    ==    Context.OTHER    ||!ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
363	[BUG]  [BUGGY]  if(ambiguousElseClause  ||  needsParens  ||  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(ambiguousElseClause  ||  needsParens  ||  hasElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  ||  needsParens  ||  hasElseClause)  {	  if(first    ||    needsParens    ||    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
364	[BUG]  [BUGGY]  if(ambiguousElseClause  ||  first  ||  needsParens  ||  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(ambiguousElseClause  ||  first  ||  needsParens  ||  hasElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  ||  first  ||  needsParens  ||  hasElseClause)  {	  if(first    ||    needsParens    ||    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
365	[BUG]  [BUGGY]  if(hasElseClause  ||  first  ||  needsParens)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseClause  ||  first  ||  needsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseClause  ||  first  ||  needsParens)  {	  if(first    ||    needsParens    ||    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
366	[BUG]  [BUGGY]  if(function  ||  needsParens  ||  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(function  ||  needsParens  ||  hasElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(function  ||  needsParens  ||  hasElseClause)  {	  if(first    ||    needsParens    ||    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
367	[BUG]  [BUGGY]  if(first  ||  needsParens  ||  ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ||  needsParens  ||  ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  needsParens  ||  ambiguousElseClause)  {	  if(first    ||    needsParens    ||    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
368	[BUG]  [BUGGY]  if(hasElseClause  ||  first  ||  needsParens  ||  first)  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseClause  ||  first  ||  needsParens  ||  first)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseClause  ||  first  ||  needsParens  ||  first)  {	  if(first    ||    needsParens    ||    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
369	[BUG]  [BUGGY]  if(usesParens  ||  first  ||  needsElseClause)  {  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(usesParens  ||  first  ||  needsElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(usesParens  ||  first  ||  needsElseClause)  {	  if(first    ||    needsParens    ||    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
370	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first.getType()  ==  Token.STRING)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first.getType()  ==  Token.STRING)  {	  if(first    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
371	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.FUNCTION)  {	  if(first    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
372	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.EXPR_RESULT)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.EXPR_RESULT)  {	  if(first    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
373	[BUG]  [BUGGY]  if(first  instanceof  String  ||  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  instanceof  String  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  instanceof  String  ||  first.getType()  ==  Token.STRING)  {	  if(first    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
374	[BUG]  [BUGGY]  if(context!=  Context.EXPR_RESULT)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(context!=  Context.EXPR_RESULT)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(context!=  Context.EXPR_RESULT)  {	  if(context    ==    Context.EXPR_RESULT)    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
375	[BUG]  [BUGGY]  if(context  ==  Context.EXPR_RESULT  ||  context  ==  Context.STATEMENT)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(context  ==  Context.EXPR_RESULT  ||  context  ==  Context.STATEMENT)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(context  ==  Context.EXPR_RESULT  ||  context  ==  Context.STATEMENT)  {	  if(context    ==    Context.EXPR_RESULT)    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
376	[BUG]  [BUGGY]  if(first  ==  Context.EXPR_RESULT)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ==  Context.EXPR_RESULT)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ==  Context.EXPR_RESULT)  {	  if(context    ==    Context.EXPR_RESULT)    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
377	[BUG]  [BUGGY]  if(context  ==  Context.EXPR_RESULT  ||  context  ==  Context.NEGATIVE_FOR_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(context  ==  Context.EXPR_RESULT  ||  context  ==  Context.NEGATIVE_FOR_INIT_CLAUSE)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(context  ==  Context.EXPR_RESULT  ||  context  ==  Context.NEGATIVE_FOR_INIT_CLAUSE)  {	  if(context    ==    Context.EXPR_RESULT)    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
378	[BUG]  [BUGGY]  if(context  ==  Context.EXPR_RESULT  ||  context  ==  Context.ERROR)  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(context  ==  Context.EXPR_RESULT  ||  context  ==  Context.ERROR)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(context  ==  Context.EXPR_RESULT  ||  context  ==  Context.ERROR)  {	  if(context    ==    Context.EXPR_RESULT)    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
379	[BUG]  [BUGGY]  if(context  ==  Context.EXPR_RESULT  ||  context  ==  Context.EMPTY_STRING)  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(context  ==  Context.EXPR_RESULT  ||  context  ==  Context.EMPTY_STRING)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(context  ==  Context.EXPR_RESULT  ||  context  ==  Context.EMPTY_STRING)  {	  if(context    ==    Context.EXPR_RESULT)    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
380	[BUG]  [BUGGY]  if(first.getType()  ==  Token.FUNCTION  ||  ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first.getType()  ==  Token.FUNCTION  ||  ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first.getType()  ==  Token.FUNCTION  ||  ambiguousElseClause)  {	  if(fn.getType()    ==    Token.FUNCTION    ||    ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
381	[BUG]  [BUGGY]  if(c.getType()  ==  Token.FUNCTION  ||  ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(c.getType()  ==  Token.FUNCTION  ||  ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(c.getType()  ==  Token.FUNCTION  ||  ambiguousElseClause)  {	  if(fn.getType()    ==    Token.FUNCTION    ||    ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
382	[BUG]  [BUGGY]  if(context.getType()  ==  Token.FUNCTION  ||  ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(context.getType()  ==  Token.FUNCTION  ||  ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(context.getType()  ==  Token.FUNCTION  ||  ambiguousElseClause)  {	  if(fn.getType()    ==    Token.FUNCTION    ||    ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
383	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  ambiguousElseClause)  {	  if(fn.getType()    ==    Token.FUNCTION    ||    ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
384	[BUG]  [BUGGY]  if(fn.getType()  ==  Token.FUNCTION  &&  ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(fn.getType()  ==  Token.FUNCTION  &&  ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(fn.getType()  ==  Token.FUNCTION  &&  ambiguousElseClause)  {	  if(fn.getType()    ==    Token.FUNCTION    ||    ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
385	[BUG]  [BUGGY]  if(d.getType()  ==  Token.FUNCTION  ||  ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(d.getType()  ==  Token.FUNCTION  ||  ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(d.getType()  ==  Token.FUNCTION  ||  ambiguousElseClause)  {	  if(fn.getType()    ==    Token.FUNCTION    ||    ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
386	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  needsParens  &&  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  needsParens  &&  hasElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  needsParens  &&  hasElseClause)  {	  if(!ambiguousElseClause    &&    needsParens    ||    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
387	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  needsParens  ||  funcNeedsParens)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  needsParens  ||  funcNeedsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  needsParens  ||  funcNeedsParens)  {	  if(!ambiguousElseClause    &&    needsParens    ||    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
388	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  needsParens  ||  preserveBlock)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  needsParens  ||  preserveBlock)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  needsParens  ||  preserveBlock)  {	  if(!ambiguousElseClause    &&    needsParens    ||    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
389	[BUG]  [BUGGY]  if(funcNeedsParens  &&  needsParens)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(funcNeedsParens  &&  needsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(funcNeedsParens  &&  needsParens)  {	  if(ambiguousElseClause    &&    requiresParens)    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
390	[BUG]  [BUGGY]  if(last  ||  needsParens  &&  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(last  ||  needsParens  &&  hasElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(last  ||  needsParens  &&  hasElseClause)  {	  if(last    ||    needsParens    ||    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
391	[BUG]  [BUGGY]  if(functions  ||  needsParens  ||  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(functions  ||  needsParens  ||  hasElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(functions  ||  needsParens  ||  hasElseClause)  {	  if(last    ||    needsParens    ||    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
392	[BUG]  [BUGGY]  if(functionsParens  ||  needsParens  ||  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(functionsParens  ||  needsParens  ||  hasElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(functionsParens  ||  needsParens  ||  hasElseClause)  {	  if(last    ||    needsParens    ||    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
393	[BUG]  [BUGGY]  if(funcNeedsParens  ||  needsParens  ||  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(funcNeedsParens  ||  needsParens  ||  hasElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(funcNeedsParens  ||  needsParens  ||  hasElseClause)  {	  if(last    ||    needsParens    ||    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
394	[BUG]  [BUGGY]  if(hasElseParens  &&  body  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseParens  &&  body  ==  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseParens  &&  body  ==  null)  {	  if(hasElseParens    &&    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
395	[BUG]  [BUGGY]  if(funcNeedsParens  ||  needsElseClause  ||  first)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(funcNeedsParens  ||  needsElseClause  ||  first)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(funcNeedsParens  ||  needsElseClause  ||  first)  {	  if(funcNeedsParens    ||    needsElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
396	[BUG]  [BUGGY]  if(firstChild.isLetterOrDigit(first)||  funcNeedsParens)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(firstChild.isLetterOrDigit(first)||  funcNeedsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(firstChild.isLetterOrDigit(first)||  funcNeedsParens)  {	  if(FirstChild.isLetterOrDigit(first)||    ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
397	[BUG]  [BUGGY]  if(firstChild.isLetterOrDigit(first)&&  ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(firstChild.isLetterOrDigit(first)&&  ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(firstChild.isLetterOrDigit(first)&&  ambiguousElseClause)  {	  if(FirstChild.isLetterOrDigit(first)||    ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
398	[BUG]  [BUGGY]  if(firstChild.isLetterOrDigit(c)||  ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(firstChild.isLetterOrDigit(c)||  ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(firstChild.isLetterOrDigit(c)||  ambiguousElseClause)  {	  if(FirstChild.isLetterOrDigit(first)||    ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
399	[BUG]  [BUGGY]  if(firstChild.isLetterOrDigit(n)||  ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(firstChild.isLetterOrDigit(n)||  ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(firstChild.isLetterOrDigit(n)||  ambiguousElseClause)  {	  if(FirstChild.isLetterOrDigit(first)||    ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
400	[BUG]  [BUGGY]  if(ambiguousElseClause  &&  functionsParens)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(ambiguousElseClause  &&  functionsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  &&  functionsParens)  {	  if(functionsParens    &&    needsElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
401	[BUG]  [BUGGY]  if(functionsParens  &&  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(functionsParens  &&  hasElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(functionsParens  &&  hasElseClause)  {	  if(functionsParens    &&    needsElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
402	[BUG]  [BUGGY]  if(functionsParens  &&  needsElseClause  &&  first!=  null)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(functionsParens  &&  needsElseClause  &&  first!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(functionsParens  &&  needsElseClause  &&  first!=  null)  {	  if(functionsParens    &&    needsElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
403	[BUG]  [BUGGY]  if(funcNeedsParens  &&  needsElseClause  &&  first)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(funcNeedsParens  &&  needsElseClause  &&  first)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(funcNeedsParens  &&  needsElseClause  &&  first)  {	  if(funcNeedsParens    &&    needsElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
404	[BUG]  [BUGGY]  if(funcNeedsParens  &&  ambiguousElseClause  ||  hasElse)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(funcNeedsParens  &&  ambiguousElseClause  ||  hasElse)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(funcNeedsParens  &&  ambiguousElseClause  ||  hasElse)  {	  if(ambiguousElseClause    ||    hasElse)    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
405	[BUG]  [BUGGY]  if(funcNeedsParens  ||  hasElse)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(funcNeedsParens  ||  hasElse)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(funcNeedsParens  ||  hasElse)  {	  if(ambiguousElseClause    ||    hasElse)    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
406	[BUG]  [BUGGY]  if(functionsElseClause  ||  needsParens)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(functionsElseClause  ||  needsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(functionsElseClause  ||  needsParens)  {	  if(usesElseClause    ||    needsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
407	[BUG]  [BUGGY]  if(funcNeedsParens  &&  first!=  null)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(funcNeedsParens  &&  first!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(funcNeedsParens  &&  first!=  null)  {	  if(ambiguousElseClause    ||    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
408	[BUG]  [BUGGY]  if(funcNeedsParens  ||  first!=  null)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(funcNeedsParens  ||  first!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(funcNeedsParens  ||  first!=  null)  {	  if(ambiguousElseClause    ||    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
409	[BUG]  [BUGGY]  if(functions  ||  first!=  null)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(functions  ||  first!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(functions  ||  first!=  null)  {	  if(ambiguousElseClause    ||    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
410	[BUG]  [BUGGY]  if(functionsParens  ||  needsElseClause  &&  first)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(functionsParens  ||  needsElseClause  &&  first)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(functionsParens  ||  needsElseClause  &&  first)  {	  if(functionsParens    ||    needsElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
411	[BUG]  [BUGGY]  if(functionsParens  ||  needsElseClause  ||  preserveBlock)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(functionsParens  ||  needsElseClause  ||  preserveBlock)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(functionsParens  ||  needsElseClause  ||  preserveBlock)  {	  if(functionsParens    ||    needsElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
412	[BUG]  [BUGGY]  if(functionsParens  ||  needLineBreaks)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(functionsParens  ||  needLineBreaks)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(functionsParens  ||  needLineBreaks)  {	  if(functionsParens    ||    needsElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
413	[BUG]  [BUGGY]  if(first  ==  Context.OTHER  ||  first  ==  Context.STATEMENT)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ==  Context.OTHER  ||  first  ==  Context.STATEMENT)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ==  Context.OTHER  ||  first  ==  Context.STATEMENT)  {	  if(first    ==    Context.STATEMENT)    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
414	[BUG]  [BUGGY]  if(first  ==  Context.STATEMENT  ||  first!=  null)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ==  Context.STATEMENT  ||  first!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ==  Context.STATEMENT  ||  first!=  null)  {	  if(first    ==    Context.STATEMENT)    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
415	[BUG]  [BUGGY]  if(funcNeedsParens  ||  needParens)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(funcNeedsParens  ||  needParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(funcNeedsParens  ||  needParens)  {	  if(ambiguousElseClause    ||    needsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
416	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  isSwitch(first)&&  needsParens  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  isSwitch(first)&&  needsParens  ==  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  isSwitch(first)&&  needsParens  ==  null)  {	  if(isSwitch(first)&&    needsParens    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
417	[BUG]  [BUGGY]  if(!funcNeedsParens  &&!ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!funcNeedsParens  &&!ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!funcNeedsParens  &&!ambiguousElseClause)  {	  if(!ambiguousElseClause    &&    needsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
418	[BUG]  [BUGGY]  if(fn.hasChildren()  &&  first!=  null)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(fn.hasChildren()  &&  first!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(fn.hasChildren()  &&  first!=  null)  {	  if(fn.hasChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
419	[BUG]  [BUGGY]  if(fn.hasChildren()  ||  first!=  null)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(fn.hasChildren()  ||  first!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(fn.hasChildren()  ||  first!=  null)  {	  if(fn.hasChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
420	[BUG]  [BUGGY]  if(first  ==  null  ||  fn.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ==  null  ||  fn.hasChildren())  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ==  null  ||  fn.hasChildren())  {	  if(fn.hasChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
421	[BUG]  [BUGGY]  if(functionsParens  ||  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(functionsParens  ||  hasElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(functionsParens  ||  hasElseClause)  {	  if(funcNeedsParens    ||    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
422	[BUG]  [BUGGY]  if(functionNeedsParens  &&  hasElseClause  &&  first)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(functionNeedsParens  &&  hasElseClause  &&  first)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(functionNeedsParens  &&  hasElseClause  &&  first)  {	  if(functionNeedsParens    &&    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
423	[BUG]  [BUGGY]  if(!funcNeedsParens  &&  first!=  null)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!funcNeedsParens  &&  first!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!funcNeedsParens  &&  first!=  null)  {	  if(!ambiguousElseClause    &&    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
424	[BUG]  [BUGGY]  if(funcNeedsParens  &&  ambiguousElseClause  ||  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(funcNeedsParens  &&  ambiguousElseClause  ||  hasElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(funcNeedsParens  &&  ambiguousElseClause  ||  hasElseClause)  {	  if(ambiguousElseClause    ||    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
425	[BUG]  [BUGGY]  if(last  ==  null  &&!ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(last  ==  null  &&!ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(last  ==  null  &&!ambiguousElseClause)  {	  if(first!=    null    &&!ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
426	[BUG]  [BUGGY]  if(dependsOn(context,  funcNeedsParens)||  needsParens)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(dependsOn(context,  funcNeedsParens)||  needsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(dependsOn(context,  funcNeedsParens)||  needsParens)  {	  if(dependsOn(context,    hasElseClause)||    needsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
427	[BUG]  [BUGGY]  if(dependsOn(context,  c)||  needsParens)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(dependsOn(context,  c)||  needsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(dependsOn(context,  c)||  needsParens)  {	  if(dependsOn(context,    hasElseClause)||    needsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
428	[BUG]  [BUGGY]  if(dependsOn(context,  funcNeedsParens)&&  needsParens)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(dependsOn(context,  funcNeedsParens)&&  needsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(dependsOn(context,  funcNeedsParens)&&  needsParens)  {	  if(dependsOn(context,    hasElseClause)||    needsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
429	[BUG]  [BUGGY]  if(first!=  Context.EXPR_RESULT)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first!=  Context.EXPR_RESULT)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first!=  Context.EXPR_RESULT)  {	  if(first!=    Context.STATEMENT)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
430	[BUG]  [BUGGY]  if(first!=  Context.STATEMENT  ||  first!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first!=  Context.STATEMENT  ||  first!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first!=  Context.STATEMENT  ||  first!=  null)  {	  if(first!=    Context.STATEMENT)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
431	[BUG]  [BUGGY]  if(first  >=  Context.STATEMENT)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  >=  Context.STATEMENT)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  >=  Context.STATEMENT)  {	  if(first!=    Context.STATEMENT)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
432	[BUG]  [BUGGY]  if(first!=  Context.EMPTY)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first!=  Context.EMPTY)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first!=  Context.EMPTY)  {	  if(first!=    Context.STATEMENT)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
433	[BUG]  [BUGGY]  if(ambiguousElseClause  &&  last!=  null)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(ambiguousElseClause  &&  last!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  &&  last!=  null)  {	  if(hasElseClause    &&    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
434	[BUG]  [BUGGY]  if(ambiguousElseClause  &&  body!=  null)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(ambiguousElseClause  &&  body!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  &&  body!=  null)  {	  if(hasElseClause    &&    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
435	[BUG]  [BUGGY]  cc.endBlock(context  ==  Context.START_OF_EXPR)  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.endBlock(context  ==  Context.START_OF_EXPR)  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.endBlock(context  ==  Context.START_OF_EXPR)	  cc.endBlock(context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
436	[BUG]  [BUGGY]  if(context  ==  Context.EXPR_RESULT  ||  context  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(context  ==  Context.EXPR_RESULT  ||  context  ==  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(context  ==  Context.EXPR_RESULT  ||  context  ==  null)  {	  if(context    ==    Context.EXPR_RESULT)    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
437	[BUG]  [BUGGY]  if(context!=  Context.EXPR_RESULT  ||  context  ==  Context.STATEMENT)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(context!=  Context.EXPR_RESULT  ||  context  ==  Context.STATEMENT)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(context!=  Context.EXPR_RESULT  ||  context  ==  Context.STATEMENT)  {	  if(context    ==    Context.EXPR_RESULT)    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
438	[BUG]  [BUGGY]  if(context  ==  Context.EMPTY  ||  context  ==  Context.EXPR_RESULT)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(context  ==  Context.EMPTY  ||  context  ==  Context.EXPR_RESULT)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(context  ==  Context.EMPTY  ||  context  ==  Context.EXPR_RESULT)  {	  if(context    ==    Context.EXPR_RESULT)    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
439	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  isSwitch(first)&&  needsParens  ==  false)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  isSwitch(first)&&  needsParens  ==  false)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  isSwitch(first)&&  needsParens  ==  false)  {	  if(isSwitch(first)&&    needsParens    ==    false)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
440	[BUG]  [BUGGY]  cc.addNumber(last);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.addNumber(last);  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.addNumber(last);	  cc.addNumber(d);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
441	[BUG]  [BUGGY]  cc.add(first);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.add(first);  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.add(first);	  cc.addNumber(d);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
442	[BUG]  [BUGGY]  cc.addDecimal(d);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.addDecimal(d);  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.addDecimal(d);	  cc.addNumber(d);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
443	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  funcNeedsParens!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  funcNeedsParens!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  funcNeedsParens!=  null)  {	  if(!ambiguousElseClause    &&    needsParens    >>    null)    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
444	[BUG]  [BUGGY]  if(!funcNeedsParens  &&  ambiguousElseClause!=  null)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!funcNeedsParens  &&  ambiguousElseClause!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!funcNeedsParens  &&  ambiguousElseClause!=  null)  {	  if(!ambiguousElseClause    &&    needsParens    >>    null)    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
445	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  hasElseParens!=  false)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  hasElseParens!=  false)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  hasElseParens!=  false)  {	  if(!ambiguousElseClause    &&    needsParens    >>    null)    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
446	[BUG]  [BUGGY]  if(first  ||  first.getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ||  first.getType()!=  Token.FUNCTION)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  first.getType()!=  Token.FUNCTION)  {	  if(first    ||    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
447	[BUG]  [BUGGY]  if(ambiguousElseClause.hasChildren()  ||  fn.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(ambiguousElseClause.hasChildren()  ||  fn.hasChildren())  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause.hasChildren()  ||  fn.hasChildren())  {	  if(fn.hasChildren()    ||    ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
448	[BUG]  [BUGGY]  if(first.hasChild()  ||  ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first.hasChild()  ||  ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first.hasChild()  ||  ambiguousElseClause)  {	  if(fn.hasChildren()    ||    ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
449	[BUG]  [BUGGY]  if(first  ==  null  ||!funcNeedsParens)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ==  null  ||!funcNeedsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ==  null  ||!funcNeedsParens)  {	  if(!funcNeedsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
450	[BUG]  [BUGGY]  if(first!=  null  &&!funcNeedsParens)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first!=  null  &&!funcNeedsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first!=  null  &&!funcNeedsParens)  {	  if(!funcNeedsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
451	[BUG]  [BUGGY]  if(ambiguousElseClause  &&  needsParens  &&  c.getFirstChild().getString().endsWith( "__ "))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(ambiguousElseClause  &&  needsParens  &&  c.getFirstChild().getString().endsWith( "__ "))  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  &&  needsParens  &&  c.getFirstChild().getString().endsWith( "__ "))  {	  if(hasElseClause    ||    needsParens    &&    c.getLastChild().getString().endsWith(   "__   "))    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
452	[BUG]  [BUGGY]  if(usesElseClause  &&  needsParens  &&  c.getLastChild().getString().endsWith( "__ "))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(usesElseClause  &&  needsParens  &&  c.getLastChild().getString().endsWith( "__ "))  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(usesElseClause  &&  needsParens  &&  c.getLastChild().getString().endsWith( "__ "))  {	  if(hasElseClause    ||    needsParens    &&    c.getLastChild().getString().endsWith(   "__   "))    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
453	[BUG]  [BUGGY]  if(useLineBreaks  ||  needsParens  ||  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(useLineBreaks  ||  needsParens  ||  hasElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(useLineBreaks  ||  needsParens  ||  hasElseClause)  {	  if(first    ||    needsParens    ||    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
454	[BUG]  [BUGGY]  if(first  ||  funcNeedsParens  ||  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ||  funcNeedsParens  ||  hasElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  funcNeedsParens  ||  hasElseClause)  {	  if(first    ||    needsParens    ||    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
455	[BUG]  [BUGGY]  if(first  ||  last!=  null)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ||  last!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  last!=  null)  {	  if(first    ||    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
456	[BUG]  [BUGGY]  if(first  ||  body!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ||  body!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  body!=  null)  {	  if(first    ||    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
457	[BUG]  [BUGGY]  cc.endBlock(context  ==  Context.EXPR_RESULT)  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.endBlock(context  ==  Context.EXPR_RESULT)  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.endBlock(context  ==  Context.EXPR_RESULT)	  cc.endBlock(context    ==    Context.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
458	[BUG]  [BUGGY]  cc.endBlock(context  ==  Context.EXPR_RESULT)+  1;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.endBlock(context  ==  Context.EXPR_RESULT)+  1;  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.endBlock(context  ==  Context.EXPR_RESULT)+  1;	  cc.endBlock(context    ==    Context.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
459	[BUG]  [BUGGY]  cc.endBlock(context  ==  Context.EXPR_RESULT,  -1);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.endBlock(context  ==  Context.EXPR_RESULT,  -1);  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.endBlock(context  ==  Context.EXPR_RESULT,  -1);	  cc.endBlock(context    ==    Context.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
460	[BUG]  [BUGGY]  if(ambiguousElseClause  &&  hasElseClause  &&  first)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(ambiguousElseClause  &&  hasElseClause  &&  first)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  &&  hasElseClause  &&  first)  {	  if(ambiguousElseClause    &&    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
461	[BUG]  [BUGGY]  if(ambiguousElseClause  &&  first)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(ambiguousElseClause  &&  first)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  &&  first)  {	  if(ambiguousElseClause    &&    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
462	[BUG]  [BUGGY]  if(first!=  null  ||!funcNeedsParens)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first!=  null  ||!funcNeedsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first!=  null  ||!funcNeedsParens)  {	  if(first    ==    null    ||!ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
463	[BUG]  [BUGGY]  if(first  ==  null  ||  funcNeedsParens)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ==  null  ||  funcNeedsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ==  null  ||  funcNeedsParens)  {	  if(first    ==    null    ||!ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
464	[BUG]  [BUGGY]  if(funcNeedsParens  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(funcNeedsParens  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(funcNeedsParens  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(ambiguousElseClause    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
465	[BUG]  [BUGGY]  cc.addChildToFront(context.getLastChild());  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.addChildToFront(context.getLastChild());  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.addChildToFront(context.getLastChild());	  cc.addChildToFront(context.getCurrentNode());    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
466	[BUG]  [BUGGY]  cc.addChildToFront(context.getCurrentSecond());  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.addChildToFront(context.getCurrentSecond());  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.addChildToFront(context.getCurrentSecond());	  cc.addChildToFront(context.getCurrentNode());    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
467	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  hasElseParens  ==  first)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  hasElseParens  ==  first)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  hasElseParens  ==  first)  {	  if(!ambiguousElseClause    &&    needsParens    ==    first)    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
468	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  needsParens  >  1)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  needsParens  >  1)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  needsParens  >  1)  {	  if(!ambiguousElseClause    &&    needsParens    ==    first)    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
469	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  needsParens  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  needsParens  ==  0)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  needsParens  ==  0)  {	  if(!ambiguousElseClause    &&    needsParens    ==    first)    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
470	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  funcNeedsParens  ==  first)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  funcNeedsParens  ==  first)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  funcNeedsParens  ==  first)  {	  if(!ambiguousElseClause    &&    needsParens    ==    first)    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
471	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  hasElseParens  >=  first)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  hasElseParens  >=  first)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  hasElseParens  >=  first)  {	  if(!ambiguousElseClause    &&    needsParens    ==    first)    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
472	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  needsParens  >  first)  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  needsParens  >  first)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  needsParens  >  first)  {	  if(!ambiguousElseClause    &&    needsParens    ==    first)    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
473	[BUG]  [BUGGY]  if(useLineBreaks  &&  preserveBlock!=  null)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(useLineBreaks  &&  preserveBlock!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(useLineBreaks  &&  preserveBlock!=  null)  {	  if(useLineBreaks    &&    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
474	[BUG]  [BUGGY]  if(funcNeedsParens  &&  first!=  null  &&  hasElse)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(funcNeedsParens  &&  first!=  null  &&  hasElse)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(funcNeedsParens  &&  first!=  null  &&  hasElse)  {	  if(needsParens    &&    first!=    null    &&    hasElse)    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
475	[BUG]  [BUGGY]  if(functionsParens  &&  first!=  null  &&  hasElse)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(functionsParens  &&  first!=  null  &&  hasElse)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(functionsParens  &&  first!=  null  &&  hasElse)  {	  if(needsParens    &&    first!=    null    &&    hasElse)    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
476	[BUG]  [BUGGY]  if(needsParens  &&  first  ==  null  &&  hasElse)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(needsParens  &&  first  ==  null  &&  hasElse)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(needsParens  &&  first  ==  null  &&  hasElse)  {	  if(needsParens    &&    first!=    null    &&    hasElse)    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
477	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  isSwitch(first)&&  needsParens!=  false)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  isSwitch(first)&&  needsParens!=  false)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  isSwitch(first)&&  needsParens!=  false)  {	  if(isSwitch(first)&&    needsParens!=    false)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
478	[BUG]  [BUGGY]  if(funcNeedsParens  ||!ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(funcNeedsParens  ||!ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(funcNeedsParens  ||!ambiguousElseClause)  {	  if(!ambiguousElseClause    ||    needsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
479	[BUG]  [BUGGY]  if(ambiguousElseClause  &&  last  ==  null)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(ambiguousElseClause  &&  last  ==  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  &&  last  ==  null)  {	  if(hasElseClause    &&    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
480	[BUG]  [BUGGY]  if(context  ==  Context.STATEMENT)  {  cc.endBlock(context  ==  Context.STATEMENT);  add(first);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(context  ==  Context.STATEMENT)  {  cc.endBlock(context  ==  Context.STATEMENT);  add(first);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(context  ==  Context.STATEMENT)  {  cc.endBlock(context  ==  Context.STATEMENT);  add(first);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  cc.endBlock(context    ==    Context.STATEMENT);    add(first);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
481	[BUG]  [BUGGY]  if(ambiguousElseClause  &&  needsParens  &&  c.getFirstChild().getString().endsWith( "- "))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(ambiguousElseClause  &&  needsParens  &&  c.getFirstChild().getString().endsWith( "- "))  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  &&  needsParens  &&  c.getFirstChild().getString().endsWith( "- "))  {	  if(hasElseClause    ||    needsParens    &&    c.getLastChild().getString().endsWith(   "-   "))    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
482	[BUG]  [BUGGY]  if(usesElseClause  &&  needsParens  &&  c.getLastChild().getString().endsWith( "- "))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(usesElseClause  &&  needsParens  &&  c.getLastChild().getString().endsWith( "- "))  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(usesElseClause  &&  needsParens  &&  c.getLastChild().getString().endsWith( "- "))  {	  if(hasElseClause    ||    needsParens    &&    c.getLastChild().getString().endsWith(   "-   "))    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
483	[BUG]  [BUGGY]  if(last.getType()  ==  Token.FUNCTION  ||  ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(last.getType()  ==  Token.FUNCTION  ||  ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(last.getType()  ==  Token.FUNCTION  ||  ambiguousElseClause)  {	  if(fn.getType()    ==    Token.FUNCTION    ||    ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
484	[BUG]  [BUGGY]  if(needsParens  &&  needsElseClause)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(needsParens  &&  needsElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(needsParens  &&  needsElseClause)  {	  if(needsParens    ||    needsElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
485	[BUG]  [BUGGY]  if(ambiguousElseClause  &&  usesParens)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(ambiguousElseClause  &&  usesParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  &&  usesParens)  {	  if(usesParens    &&    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
486	[BUG]  [BUGGY]  if(first!=  null  ||  first.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first!=  null  ||  first.getType()  ==  Token.GETPROP)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first!=  null  ||  first.getType()  ==  Token.GETPROP)  {	  if(first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
487	[BUG]  [BUGGY]  if(funcNeedsParens  &&  first  ==  null)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(funcNeedsParens  &&  first  ==  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(funcNeedsParens  &&  first  ==  null)  {	  if(ambiguousElseClause    &&    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
488	[BUG]  [BUGGY]  if(ambiguousElseClause  &&  isFunctionDeclaration)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(ambiguousElseClause  &&  isFunctionDeclaration)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  &&  isFunctionDeclaration)  {	  if(funcNeedsParens    &&    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
489	[BUG]  [BUGGY]  if(hasElseClause  &&  isSwitch(first)&&  needsParens!=  null)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseClause  &&  isSwitch(first)&&  needsParens!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseClause  &&  isSwitch(first)&&  needsParens!=  null)  {	  if(isSwitch(first)&&    needsParens!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
490	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  isSwitch(first)&&  needsParens!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  isSwitch(first)&&  needsParens!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  isSwitch(first)&&  needsParens!=  null)  {	  if(isSwitch(first)&&    needsParens!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
491	[BUG]  [BUGGY]  if(isSwitch(first)&&  hasElseParens  >>  null)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(isSwitch(first)&&  hasElseParens  >>  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(isSwitch(first)&&  hasElseParens  >>  null)  {	  if(isSwitch(first)&&    needsParens!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
492	[BUG]  [BUGGY]  if(isSwitch(first)&&  hasElseParens  >=  null)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(isSwitch(first)&&  hasElseParens  >=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(isSwitch(first)&&  hasElseParens  >=  null)  {	  if(isSwitch(first)&&    needsParens!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
493	[BUG]  [BUGGY]  if(first  ||  last  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ||  last  ==  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  last  ==  null)  {	  if(first    ||    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
494	[BUG]  [BUGGY]  if(first  ||  second  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ||  second  ==  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  second  ==  null)  {	  if(first    ||    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
495	[BUG]  [BUGGY]  if(first  ||  first  ==  null  ||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ||  first  ==  null  ||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  first  ==  null  ||  parent.getType()  ==  Token.FUNCTION)  {	  if(first    ||    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
496	[BUG]  [BUGGY]  if(funcNeedsParens  &&  first  >=  null)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(funcNeedsParens  &&  first  >=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(funcNeedsParens  &&  first  >=  null)  {	  if(ambiguousElseClause    &&    first    >=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
497	[BUG]  [BUGGY]  if(context!=  Context.STATEMENT)  {  cc.endBlock(context!=  Context.STATEMENT);  }  else  {  addExpr(first);  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(context!=  Context.STATEMENT)  {  cc.endBlock(context!=  Context.STATEMENT);  }  else  {  addExpr(first);  }  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(context!=  Context.STATEMENT)  {  cc.endBlock(context!=  Context.STATEMENT);  }  else  {  addExpr(first);  }	  cc.endBlock(context!=    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
498	[BUG]  [BUGGY]  if(context!=  Context.STATEMENT)  {  cc.endBlock(context!=  Context.STATEMENT);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(context!=  Context.STATEMENT)  {  cc.endBlock(context!=  Context.STATEMENT);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(context!=  Context.STATEMENT)  {  cc.endBlock(context!=  Context.STATEMENT);  }  else  {  throw  new  IllegalStateException( " ");  }	  cc.endBlock(context!=    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
499	[BUG]  [BUGGY]  if(ambiguousElseClause  &&  needsParens  ||  first)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(ambiguousElseClause  &&  needsParens  ||  first)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  &&  needsParens  ||  first)  {	  if(hasElseClause    ||    needsParens    ||    first)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
500	[BUG]  [BUGGY]  if(funcNeedsParens  ||  hasElseClause  ||  needsParens)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(funcNeedsParens  ||  hasElseClause  ||  needsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(funcNeedsParens  ||  hasElseClause  ||  needsParens)  {	  if(hasElseClause    ||    needsParens    ||    first)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
501	[BUG]  [BUGGY]  if(funcNeedsParens  ||  hasElseClause  ||  first)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(funcNeedsParens  ||  hasElseClause  ||  first)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(funcNeedsParens  ||  hasElseClause  ||  first)  {	  if(hasElseClause    ||    needsParens    ||    first)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
502	[BUG]  [BUGGY]  if(useLineBreaks)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(useLineBreaks)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(useLineBreaks)  {	  if(funcNeedsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
503	[BUG]  [BUGGY]  if(first  ||  first.getType()!=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ||  first.getType()!=  Token.NAME)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  first.getType()!=  Token.NAME)  {	  if(first    ||    first.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
504	[BUG]  [BUGGY]  if(first  <  n  ||  first.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  <  n  ||  first.getType()  ==  Token.NAME)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  <  n  ||  first.getType()  ==  Token.NAME)  {	  if(first    ||    first.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
505	[BUG]  [BUGGY]  if(first  >=  null  ||  first.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  >=  null  ||  first.getType()  ==  Token.NAME)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  >=  null  ||  first.getType()  ==  Token.NAME)  {	  if(first    ||    first.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
506	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  funcNeedsParens  ||  first  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  funcNeedsParens  ||  first  ==  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  funcNeedsParens  ||  first  ==  null)  {	  if(!ambiguousElseClause    &&    needsParens    ||    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
507	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  hasElseParens  &&  first  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  hasElseParens  &&  first  ==  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  hasElseParens  &&  first  ==  null)  {	  if(!ambiguousElseClause    &&    needsParens    ||    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
508	[BUG]  [BUGGY]  if(ambiguousElseClause  &&  first  ||  needsParens  &&  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(ambiguousElseClause  &&  first  ||  needsParens  &&  hasElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  &&  first  ||  needsParens  &&  hasElseClause)  {	  if(first    ||    needsParens    &&    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
509	[BUG]  [BUGGY]  if(functions  ||  needsParens  &&  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(functions  ||  needsParens  &&  hasElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(functions  ||  needsParens  &&  hasElseClause)  {	  if(first    ||    needsParens    &&    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
510	[BUG]  [BUGGY]  if(first  ||  funcNeedsParens  &&  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ||  funcNeedsParens  &&  hasElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  funcNeedsParens  &&  hasElseClause)  {	  if(first    ||    needsParens    &&    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
511	[BUG]  [BUGGY]  if(ambiguousElseClause  &&  c!=  null)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(ambiguousElseClause  &&  c!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  &&  c!=  null)  {	  if(ambiguousElseClause    &&    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
512	[BUG]  [BUGGY]  cc.endBlock(context  ==  Context.STATEMENT)  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.endBlock(context  ==  Context.STATEMENT)  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.endBlock(context  ==  Context.STATEMENT)	  cc.endBlock(context    ==    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
513	[BUG]  [BUGGY]  cc.endBlock(context  ==  Context.STATEMENT  +  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.endBlock(context  ==  Context.STATEMENT  +  1);  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.endBlock(context  ==  Context.STATEMENT  +  1);	  cc.endBlock(context    ==    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
514	[BUG]  [BUGGY]  cc.endBlock(context  ==  Context.STATEMENT)+  1;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.endBlock(context  ==  Context.STATEMENT)+  1;  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.endBlock(context  ==  Context.STATEMENT)+  1;	  cc.endBlock(context    ==    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
515	[BUG]  [BUGGY]  cc.addChildToBack(d);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.addChildToBack(d);  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.addChildToBack(d);	  cc.addChildToFront(d);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
516	[BUG]  [BUGGY]  if(funcNeedsParens  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(funcNeedsParens  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(funcNeedsParens  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {	  if(ambiguousElseClause    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
517	[BUG]  [BUGGY]  if(functions  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(functions  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(functions  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {	  if(ambiguousElseClause    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
518	[BUG]  [BUGGY]  if(context  ==  Context.OTHER)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(context  ==  Context.OTHER)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(context  ==  Context.OTHER)  {	  if(context    ==    Context.STATEMENT)    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
519	[BUG]  [BUGGY]  if(context  ==  Context.TEXT)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(context  ==  Context.TEXT)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(context  ==  Context.TEXT)  {	  if(context    ==    Context.STATEMENT)    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
520	[BUG]  [BUGGY]  if(context  ==  Context.STATEMENT  ||  context  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(context  ==  Context.STATEMENT  ||  context  ==  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(context  ==  Context.STATEMENT  ||  context  ==  null)  {	  if(context    ==    Context.STATEMENT)    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
521	[BUG]  [BUGGY]  if(context  ==  Context.EMPTY)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(context  ==  Context.EMPTY)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(context  ==  Context.EMPTY)  {	  if(context    ==    Context.STATEMENT)    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
522	[BUG]  [BUGGY]  if(!funcNeedsParens  &&  first  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!funcNeedsParens  &&  first  ==  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!funcNeedsParens  &&  first  ==  null)  {	  if(!ambiguousElseClause    &&    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
523	[BUG]  [BUGGY]  if(first  ==  Context.OTHER  ||  funcNeedsParens)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ==  Context.OTHER  ||  funcNeedsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ==  Context.OTHER  ||  funcNeedsParens)  {	  if(first    ==    Context.OTHER    ||!ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
524	[BUG]  [BUGGY]  if(first  ==  Context.OTHER  ||!funcNeedsParens)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ==  Context.OTHER  ||!funcNeedsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ==  Context.OTHER  ||!funcNeedsParens)  {	  if(first    ==    Context.OTHER    ||!ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
525	[BUG]  [BUGGY]  if(c  ==  Context.OTHER  ||!ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(c  ==  Context.OTHER  ||!ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(c  ==  Context.OTHER  ||!ambiguousElseClause)  {	  if(first    ==    Context.OTHER    ||!ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
526	[BUG]  [BUGGY]  if(funcNeedsParens  ||  first  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(funcNeedsParens  ||  first  ==  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(funcNeedsParens  ||  first  ==  null)  {	  if(ambiguousElseClause    ||    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
527	[BUG]  [BUGGY]  int  first  =  c.getFirstChild().getLastChild();  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  int  first  =  c.getFirstChild().getLastChild();  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	int  first  =  c.getFirstChild().getLastChild();	  int    first    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
528	[BUG]  [BUGGY]  if(first  ||  first.getType()!=  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ||  first.getType()!=  Token.STRING)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  first.getType()!=  Token.STRING)  {	  if(first    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
529	[BUG]  [BUGGY]  if(first  >=  null  ||  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  >=  null  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  >=  null  ||  first.getType()  ==  Token.STRING)  {	  if(first    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
530	[BUG]  [BUGGY]  if(first  <  0  ||  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  <  0  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  <  0  ||  first.getType()  ==  Token.STRING)  {	  if(first    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
531	[BUG]  [BUGGY]  if(functionNeedsParens  ||  needsElseClause  ||  first)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(functionNeedsParens  ||  needsElseClause  ||  first)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(functionNeedsParens  ||  needsElseClause  ||  first)  {	  if(functionNeedsParens    ||    needsElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
532	[BUG]  [BUGGY]  if(functionNeedsParens  ||  needsElseClause  ||  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(functionNeedsParens  ||  needsElseClause  ||  hasElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(functionNeedsParens  ||  needsElseClause  ||  hasElseClause)  {	  if(functionNeedsParens    ||    needsElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
533	[BUG]  [BUGGY]  if(ambiguousElseClause  ||  functionNeedsParens)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(ambiguousElseClause  ||  functionNeedsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  ||  functionNeedsParens)  {	  if(functionNeedsParens    ||    needsElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
534	[BUG]  [BUGGY]  if(functionNeedsParens  ||  needLineBreaks)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(functionNeedsParens  ||  needLineBreaks)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(functionNeedsParens  ||  needLineBreaks)  {	  if(functionNeedsParens    ||    needsElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
535	[BUG]  [BUGGY]  if(functions  ||  funcNeedsParens)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(functions  ||  funcNeedsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(functions  ||  funcNeedsParens)  {	  if(ambiguousElseClause    ||    funcNeedsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
536	[BUG]  [BUGGY]  if(funcNeedsParens  ||  first)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(funcNeedsParens  ||  first)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(funcNeedsParens  ||  first)  {	  if(ambiguousElseClause    ||    funcNeedsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
537	[BUG]  [BUGGY]  if(last  >  0)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(last  >  0)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(last  >  0)  {	  if(last)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
538	[BUG]  [BUGGY]  if(childCount  ==  1)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(childCount  ==  1)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(childCount  ==  1)  {	  if(last)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
539	[BUG]  [BUGGY]  if(last  ||  second)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(last  ||  second)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(last  ||  second)  {	  if(last)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
540	[BUG]  [BUGGY]  if(useLineBreaks  &&  hasElseClause!=  false)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(useLineBreaks  &&  hasElseClause!=  false)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(useLineBreaks  &&  hasElseClause!=  false)  {	  if(needsParens    &&    body!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
541	[BUG]  [BUGGY]  if(needsParens  &&  body  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(needsParens  &&  body  ==  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(needsParens  &&  body  ==  null)  {	  if(needsParens    &&    body!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
542	[BUG]  [BUGGY]  if(first  ||  first.getType()!=  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ||  first.getType()!=  Token.BLOCK)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  first.getType()!=  Token.BLOCK)  {	  if(first    ||    first.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
543	[BUG]  [BUGGY]  if(first  ||  first!=  null  ||  first.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ||  first!=  null  ||  first.getType()  ==  Token.BLOCK)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  first!=  null  ||  first.getType()  ==  Token.BLOCK)  {	  if(first    ||    first.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
544	[BUG]  [BUGGY]  if(first  ||  first  <=  Context.STATEMENT)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ||  first  <=  Context.STATEMENT)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  first  <=  Context.STATEMENT)  {	  if(first    ||    first)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
545	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  c.getFirstChild()  ==  n)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  c.getFirstChild()  ==  n)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  c.getFirstChild()  ==  n)  {	  if(ambiguousElseClause    ||    c.getFirstChild()    ==    n)    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
546	[BUG]  [BUGGY]  if(c.getFirstChild()  ==  first)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(c.getFirstChild()  ==  first)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(c.getFirstChild()  ==  first)  {	  if(ambiguousElseClause    ||    c.getFirstChild()    ==    n)    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
547	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  funcNeedsParens  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  funcNeedsParens  ==  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  funcNeedsParens  ==  null)  {	  if(!ambiguousElseClause    &&    needsParens    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
548	[BUG]  [BUGGY]  if(!funcNeedsParens  &&  hasElseClause  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!funcNeedsParens  &&  hasElseClause  ==  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!funcNeedsParens  &&  hasElseClause  ==  null)  {	  if(!ambiguousElseClause    &&    needsParens    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
549	[BUG]  [BUGGY]  if(!funcNeedsParens  &&  needsParens  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!funcNeedsParens  &&  needsParens  ==  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!funcNeedsParens  &&  needsParens  ==  null)  {	  if(!ambiguousElseClause    &&    needsParens    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
550	[BUG]  [BUGGY]  if(hadElseClause  &&  needsParens  &&  c.getLastChild().getString().endsWith( "- "))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hadElseClause  &&  needsParens  &&  c.getLastChild().getString().endsWith( "- "))  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hadElseClause  &&  needsParens  &&  c.getLastChild().getString().endsWith( "- "))  {	  if(hasElseClause    ||    needsParens    &&    c.getLastChild().getString().endsWith(   "-   "))    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
551	[BUG]  [BUGGY]  if(funcNeedsParens  &&  hasElseClause  &&  first)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(funcNeedsParens  &&  hasElseClause  &&  first)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(funcNeedsParens  &&  hasElseClause  &&  first)  {	  if(funcNeedsParens    &&    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
552	[BUG]  [BUGGY]  if(first!=  null  &&!ambiguousElseClause  &&  first.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first!=  null  &&!ambiguousElseClause  &&  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first!=  null  &&!ambiguousElseClause  &&  first.getType()  ==  Token.FUNCTION)  {	  if(!ambiguousElseClause    &&    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
553	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  c.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  c.getType()  ==  Token.FUNCTION)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  c.getType()  ==  Token.FUNCTION)  {	  if(!ambiguousElseClause    &&    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
554	[BUG]  [BUGGY]  if(first  ||  preserveBlock)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ||  preserveBlock)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  preserveBlock)  {	  if(first    ||    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
555	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  first  ||  needsParens  ||  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  first  ||  needsParens  ||  hasElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  first  ||  needsParens  ||  hasElseClause)  {	  if(first    ||    needsParens    ||    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
556	[BUG]  [BUGGY]  if(functionNeedsParens  ||  needsParens  ||  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(functionNeedsParens  ||  needsParens  ||  hasElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(functionNeedsParens  ||  needsParens  ||  hasElseClause)  {	  if(first    ||    needsParens    ||    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
557	[BUG]  [BUGGY]  if(needsParens  ||  first  ||  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(needsParens  ||  first  ||  hasElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(needsParens  ||  first  ||  hasElseClause)  {	  if(first    ||    needsParens    ||    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
558	[BUG]  [BUGGY]  if(usesParens  &&  needsParens)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(usesParens  &&  needsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(usesParens  &&  needsParens)  {	  if(usesParens    &&    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
559	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  first!=  null  &&  first.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  first!=  null  &&  first.getType()  ==  Token.BLOCK)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  first!=  null  &&  first.getType()  ==  Token.BLOCK)  {	  if(!ambiguousElseClause    &&    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
560	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  first!=  null  &&  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  first!=  null  &&  first.getType()  ==  Token.STRING)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  first!=  null  &&  first.getType()  ==  Token.STRING)  {	  if(!ambiguousElseClause    &&    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
561	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  first  ==  null  &&  first.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  first  ==  null  &&  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  first  ==  null  &&  first.getType()  ==  Token.FUNCTION)  {	  if(!ambiguousElseClause    &&    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
562	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  first  ==  null  &&  first.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  first  ==  null  &&  first.getType()  ==  Token.BLOCK)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  first  ==  null  &&  first.getType()  ==  Token.BLOCK)  {	  if(!ambiguousElseClause    &&    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
563	[BUG]  [BUGGY]  if(needsParens  &&  body!=  null  &&  hasElse)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(needsParens  &&  body!=  null  &&  hasElse)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(needsParens  &&  body!=  null  &&  hasElse)  {	  if(needsParens    &&    first!=    null    &&    hasElse)    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
564	[BUG]  [BUGGY]  if(hasParens  &&  first!=  null  &&  hasElse)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasParens  &&  first!=  null  &&  hasElse)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasParens  &&  first!=  null  &&  hasElse)  {	  if(needsParens    &&    first!=    null    &&    hasElse)    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
565	[BUG]  [BUGGY]  if(first!=  null  &&!ambiguousElseClause  &&  needsParens!=  null)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first!=  null  &&!ambiguousElseClause  &&  needsParens!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first!=  null  &&!ambiguousElseClause  &&  needsParens!=  null)  {	  if(!ambiguousElseClause    &&    needsParens!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
566	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  needsParens!=  null  &&  hasElse)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  needsParens!=  null  &&  hasElse)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  needsParens!=  null  &&  hasElse)  {	  if(!ambiguousElseClause    &&    needsParens!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
567	[BUG]  [BUGGY]  if(hasParens  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasParens  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasParens  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(hasParens)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
568	[BUG]  [BUGGY]  if(hasParens  &&  isEnabled(Feature.AUTO_CLOSE_PREFIX))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasParens  &&  isEnabled(Feature.AUTO_CLOSE_PREFIX))  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasParens  &&  isEnabled(Feature.AUTO_CLOSE_PREFIX))  {	  if(hasParens)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
569	[BUG]  [BUGGY]  if(funcNeedsParens  ||  needsElseClause  ||  context.isSyntheticBlock())  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(funcNeedsParens  ||  needsElseClause  ||  context.isSyntheticBlock())  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(funcNeedsParens  ||  needsElseClause  ||  context.isSyntheticBlock())  {	  if(funcNeedsParens    ||    needsElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
570	[BUG]  [BUGGY]  if(hasElseClause  &&  needsParens  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseClause  &&  needsParens  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseClause  &&  needsParens  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(hasElseClause    &&    needsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
571	[BUG]  [BUGGY]  if(functionNeedsParens  &&  needsParens)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(functionNeedsParens  &&  needsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(functionNeedsParens  &&  needsParens)  {	  if(functionNeedsParens    &&    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
572	[BUG]  [BUGGY]  if(functionNeedsParens  &&  hasElseClause  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(functionNeedsParens  &&  hasElseClause  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(functionNeedsParens  &&  hasElseClause  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(functionNeedsParens    &&    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
573	[BUG]  [BUGGY]  if(functionNeedsParens  &&  hasElseClause  &&  c.getLastChild().getString().endsWith( "- "))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(functionNeedsParens  &&  hasElseClause  &&  c.getLastChild().getString().endsWith( "- "))  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(functionNeedsParens  &&  hasElseClause  &&  c.getLastChild().getString().endsWith( "- "))  {	  if(functionNeedsParens    &&    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
574	[BUG]  [BUGGY]  if(functionNeedsParens  &&  hasElseClause  &&  context.isSyntheticBlock())  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(functionNeedsParens  &&  hasElseClause  &&  context.isSyntheticBlock())  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(functionNeedsParens  &&  hasElseClause  &&  context.isSyntheticBlock())  {	  if(functionNeedsParens    &&    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
575	[BUG]  [BUGGY]  if(first  ||  needsParens  ||  body!=  null)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ||  needsParens  ||  body!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  needsParens  ||  body!=  null)  {	  if(needsParens    &&    body!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
576	[BUG]  [BUGGY]  if(first  >  0)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  >  0)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  >  0)  {	  if(needsParens    &&    body!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
577	[BUG]  [BUGGY]  if(first!=  null  &&!dependOnNeedsParens)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first!=  null  &&!dependOnNeedsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first!=  null  &&!dependOnNeedsParens)  {	  if(first!=    null    &&!ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
578	[BUG]  [BUGGY]  if(first!=  null  &&!ambiguousElseClause  &&  first.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first!=  null  &&!ambiguousElseClause  &&  first.getType()  ==  Token.BLOCK)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first!=  null  &&!ambiguousElseClause  &&  first.getType()  ==  Token.BLOCK)  {	  if(first!=    null    &&!ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
579	[BUG]  [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first!=  null  &&  first.getType()  ==  Token.STRING)  {	  if(first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
580	[BUG]  [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.BLOCK)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first!=  null  &&  first.getType()  ==  Token.BLOCK)  {	  if(first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
581	[BUG]  [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first!=  null  &&  first.getType()  ==  Token.FUNCTION)  {	  if(first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
582	[BUG]  [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.NAME)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first!=  null  &&  first.getType()  ==  Token.NAME)  {	  if(first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
583	[BUG]  [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.CATCH)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.CATCH)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first!=  null  &&  first.getType()  ==  Token.CATCH)  {	  if(first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
584	[BUG]  [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.VAR)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first!=  null  &&  first.getType()  ==  Token.VAR)  {	  if(first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
585	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  c!=  null)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  c!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  c!=  null)  {	  if(!ambiguousElseClause    &&    first    >=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
586	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  c  <  first)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  c  <  first)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  c  <  first)  {	  if(!ambiguousElseClause    &&    first    >=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
587	[BUG]  [BUGGY]  if(last  >  0  ||  needsParens  ||  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(last  >  0  ||  needsParens  ||  hasElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(last  >  0  ||  needsParens  ||  hasElseClause)  {	  if(last    ||    needsParens    ||    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
588	[BUG]  [BUGGY]  if(last  <  0  ||  needsParens  ||  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(last  <  0  ||  needsParens  ||  hasElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(last  <  0  ||  needsParens  ||  hasElseClause)  {	  if(last    ||    needsParens    ||    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
589	[BUG]  [BUGGY]  if(last  ==  null  ||  needsParens  ||  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(last  ==  null  ||  needsParens  ||  hasElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(last  ==  null  ||  needsParens  ||  hasElseClause)  {	  if(last    ||    needsParens    ||    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
590	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  needsParens  ==  in_FOR_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  needsParens  ==  in_FOR_INIT_CLAUSE)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  needsParens  ==  in_FOR_INIT_CLAUSE)  {	  if(!ambiguousElseClause    &&    needsParens    ==    first)    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
591	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  needsParens!=  first)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  needsParens!=  first)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  needsParens!=  first)  {	  if(!ambiguousElseClause    &&    needsParens    ==    first)    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
592	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  needsParens  ==  in_fOR_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  needsParens  ==  in_fOR_INIT_CLAUSE)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  needsParens  ==  in_fOR_INIT_CLAUSE)  {	  if(!ambiguousElseClause    &&    needsParens    ==    first)    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
593	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  needsParens  >=  first)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  needsParens  >=  first)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  needsParens  >=  first)  {	  if(!ambiguousElseClause    &&    needsParens    ==    first)    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
594	[BUG]  [BUGGY]  if(declaration  ==  null  ||  ambiguousElseClause  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(declaration  ==  null  ||  ambiguousElseClause  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(declaration  ==  null  ||  ambiguousElseClause  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {	  if(ambiguousElseClause    ||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
595	[BUG]  [BUGGY]  if(hasElseClause  &&  first  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseClause  &&  first  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseClause  &&  first  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(hasElseClause    &&    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
596	[BUG]  [BUGGY]  if(context  ==  Context.STATEMENT  ||  context  ==  Context.OTHER)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(context  ==  Context.STATEMENT  ||  context  ==  Context.OTHER)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(context  ==  Context.STATEMENT  ||  context  ==  Context.OTHER)  {	  if(context    ==    Context.STATEMENT)    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
597	[BUG]  [BUGGY]  if(context  ==  Context.STATEMENT  ||  context  ==  Context.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(context  ==  Context.STATEMENT  ||  context  ==  Context.BLOCK)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(context  ==  Context.STATEMENT  ||  context  ==  Context.BLOCK)  {	  if(context    ==    Context.STATEMENT)    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
598	[BUG]  [BUGGY]  if(context  ==  Context.OTHER  ||  context  ==  Context.STATEMENT)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(context  ==  Context.OTHER  ||  context  ==  Context.STATEMENT)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(context  ==  Context.OTHER  ||  context  ==  Context.STATEMENT)  {	  if(context    ==    Context.STATEMENT)    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
599	[BUG]  [BUGGY]  if(hasElseParens  &&  first!=  null  &&  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseParens  &&  first!=  null  &&  hasElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseParens  &&  first!=  null  &&  hasElseClause)  {	  if(hasElseParens    &&    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
600	[BUG]  [BUGGY]  if(hasElseParens  &&  first!=  null  &&  first.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseParens  &&  first!=  null  &&  first.getType()  ==  Token.BLOCK)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseParens  &&  first!=  null  &&  first.getType()  ==  Token.BLOCK)  {	  if(hasElseParens    &&    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
601	[BUG]  [BUGGY]  if(hasElseParens  &&  first!=  null  &&  first.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseParens  &&  first!=  null  &&  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseParens  &&  first!=  null  &&  first.getType()  ==  Token.FUNCTION)  {	  if(hasElseParens    &&    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
602	[BUG]  [BUGGY]  cc.endBlock(context  ==  Context.TEXT_BLOCK);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.endBlock(context  ==  Context.TEXT_BLOCK);  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.endBlock(context  ==  Context.TEXT_BLOCK);	  cc.beginBlock();    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
603	[BUG]  [BUGGY]  if(hasElseClause  &&  first!=  null  &&  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseClause  &&  first!=  null  &&  hasElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseClause  &&  first!=  null  &&  hasElseClause)  {	  if(hasElseClause    &&    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
604	[BUG]  [BUGGY]  if(hasElseClause  &&  c!=  null)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseClause  &&  c!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseClause  &&  c!=  null)  {	  if(hasElseClause    &&    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
605	[BUG]  [BUGGY]  if(hasElse  ||  first  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElse  ||  first  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElse  ||  first  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(hasElse    ||    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
606	[BUG]  [BUGGY]  if(hasElse  ||  first  ==  null  ||  isEnabled(Feature.FLUSH_PASSED_TO_STRING))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElse  ||  first  ==  null  ||  isEnabled(Feature.FLUSH_PASSED_TO_STRING))  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElse  ||  first  ==  null  ||  isEnabled(Feature.FLUSH_PASSED_TO_STRING))  {	  if(hasElse    ||    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
607	[BUG]  [BUGGY]  if(hasElse  ||  first  ==  null  ||  childCount  >  1)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElse  ||  first  ==  null  ||  childCount  >  1)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElse  ||  first  ==  null  ||  childCount  >  1)  {	  if(hasElse    ||    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
608	[BUG]  [BUGGY]  if(childCount  >  1  &&  first!=  null  &&  first.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(childCount  >  1  &&  first!=  null  &&  first.getType()  ==  Token.BLOCK)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(childCount  >  1  &&  first!=  null  &&  first.getType()  ==  Token.BLOCK)  {	  if(last)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
609	[BUG]  [BUGGY]  if(childCount  >  1  &&  first!=  null  &&  first.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(childCount  >  1  &&  first!=  null  &&  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(childCount  >  1  &&  first!=  null  &&  first.getType()  ==  Token.FUNCTION)  {	  if(last)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
610	[BUG]  [BUGGY]  if(childCount  >  1  &&  first!=  null  &&  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(childCount  >  1  &&  first!=  null  &&  first.getType()  ==  Token.STRING)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(childCount  >  1  &&  first!=  null  &&  first.getType()  ==  Token.STRING)  {	  if(last)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
611	[BUG]  [BUGGY]  if(ambiguousElseClause  ||  c  ==  first)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(ambiguousElseClause  ||  c  ==  first)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  ||  c  ==  first)  {	  if(ambiguousElseClause    ||    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
612	[BUG]  [BUGGY]  if(functionNeedsParens  ||  needsElseClause  ||  ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(functionNeedsParens  ||  needsElseClause  ||  ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(functionNeedsParens  ||  needsElseClause  ||  ambiguousElseClause)  {	  if(functionNeedsParens    ||    needsElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
613	[BUG]  [BUGGY]  if(functionNeedsParens  ||  needsElseClause  ||  context.isSyntheticBlock())  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(functionNeedsParens  ||  needsElseClause  ||  context.isSyntheticBlock())  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(functionNeedsParens  ||  needsElseClause  ||  context.isSyntheticBlock())  {	  if(functionNeedsParens    ||    needsElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
614	[BUG]  [BUGGY]  if(functionNeedsParens  ||  needsElseClause  ||  context.isFunctionDeclaration())  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(functionNeedsParens  ||  needsElseClause  ||  context.isFunctionDeclaration())  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(functionNeedsParens  ||  needsElseClause  ||  context.isFunctionDeclaration())  {	  if(functionNeedsParens    ||    needsElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
615	[BUG]  [BUGGY]  if(functionNeedsParens  ||  needsElseClause  ||  preserveBlock)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(functionNeedsParens  ||  needsElseClause  ||  preserveBlock)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(functionNeedsParens  ||  needsElseClause  ||  preserveBlock)  {	  if(functionNeedsParens    ||    needsElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
616	[BUG]  [BUGGY]  if(functionNeedsParens  ||  needsElseClause  ||  context.isSupported())  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(functionNeedsParens  ||  needsElseClause  ||  context.isSupported())  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(functionNeedsParens  ||  needsElseClause  ||  context.isSupported())  {	  if(functionNeedsParens    ||    needsElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
617	[BUG]  [BUGGY]  if(hasElseClause  ||  needsParens  ||  preserveBlock)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseClause  ||  needsParens  ||  preserveBlock)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseClause  ||  needsParens  ||  preserveBlock)  {	  if(hasElseClause    ||    needsParens    ||    first)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
618	[BUG]  [BUGGY]  if(functions  ||  needsParens  ||  first)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(functions  ||  needsParens  ||  first)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(functions  ||  needsParens  ||  first)  {	  if(hasElseClause    ||    needsParens    ||    first)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
619	[BUG]  [BUGGY]  if(usesParens  ||  needsElseClause  ||  context.isSyntheticBlock())  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(usesParens  ||  needsElseClause  ||  context.isSyntheticBlock())  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(usesParens  ||  needsElseClause  ||  context.isSyntheticBlock())  {	  if(usesParens    ||    needsElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
620	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  first!=  null  &&  first.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  first!=  null  &&  first.getType()  ==  Token.NAME)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  first!=  null  &&  first.getType()  ==  Token.NAME)  {	  if(!ambiguousElseClause    &&    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
621	[BUG]  [BUGGY]  if(isSwitch(first)&&  hasElseClause  >>  false)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(isSwitch(first)&&  hasElseClause  >>  false)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(isSwitch(first)&&  hasElseClause  >>  false)  {	  if(isSwitch(first)&&    needsParens!=    false)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
622	[BUG]  [BUGGY]  if(functionsParens)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(functionsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(functionsParens)  {	  if(funcNeedsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
623	[BUG]  [BUGGY]  cc.addChildBefore(first);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.addChildBefore(first);  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.addChildBefore(first);	  cc.addChildToFront(first);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
624	[BUG]  [BUGGY]  if(hasElse  ||  needsParens  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElse  ||  needsParens  ==  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElse  ||  needsParens  ==  null)  {	  if(first    ||    needsParens    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
625	[BUG]  [BUGGY]  if(first  ==  Context.STATEMENT  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ==  Context.STATEMENT  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ==  Context.STATEMENT  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(first    ==    Context.STATEMENT)    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
626	[BUG]  [BUGGY]  if(first.getType()  ==  Token.FUNCTION  ||  first.getFirstChild().getType()  ==  Token.CATCH)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first.getType()  ==  Token.FUNCTION  ||  first.getFirstChild().getType()  ==  Token.CATCH)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first.getType()  ==  Token.FUNCTION  ||  first.getFirstChild().getType()  ==  Token.CATCH)  {	  if(first    ||    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
627	[BUG]  [BUGGY]  if(first.getType()  ==  Token.FUNCTION  ||  first.getFirstChild().getType()  ==  Token.EXPR_RESULT)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first.getType()  ==  Token.FUNCTION  ||  first.getFirstChild().getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first.getType()  ==  Token.FUNCTION  ||  first.getFirstChild().getType()  ==  Token.EXPR_RESULT)  {	  if(first    ||    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
628	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first.getType()  ==  Token.STRING  ||  first.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(first    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
629	[BUG]  [BUGGY]  if(hasElseClause  &&  needsParens  &&  c.getLastChild().getString().endsWith( ".__ "))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseClause  &&  needsParens  &&  c.getLastChild().getString().endsWith( ".__ "))  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseClause  &&  needsParens  &&  c.getLastChild().getString().endsWith( ".__ "))  {	  if(hasElseClause    ||    needsParens    &&    c.getLastChild().getString().endsWith(   "__   "))    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
630	[BUG]  [BUGGY]  cc.addChildToFront(context.getCurrentSegment());  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.addChildToFront(context.getCurrentSegment());  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.addChildToFront(context.getCurrentSegment());	  cc.addChildToFront(context.getCurrentNode());    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
631	[BUG]  [BUGGY]  if(needsParens  ||  first  ==  null  ||  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(needsParens  ||  first  ==  null  ||  hasElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(needsParens  ||  first  ==  null  ||  hasElseClause)  {	  if(needsParens    ||    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
632	[BUG]  [BUGGY]  if(isSwitch(first)&&  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(isSwitch(first)&&  hasElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(isSwitch(first)&&  hasElseClause)  {	  if(isSwitch(first)&&    needsParens!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
633	[BUG]  [BUGGY]  if(isSwitch(first)&&  hasElseParens)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(isSwitch(first)&&  hasElseParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(isSwitch(first)&&  hasElseParens)  {	  if(isSwitch(first)&&    needsParens!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
634	[BUG]  [BUGGY]  if(last  ||  ambiguousElseClause  ||  needsParens)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(last  ||  ambiguousElseClause  ||  needsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(last  ||  ambiguousElseClause  ||  needsParens)  {	  if(ambiguousElseClause    ||    needsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
635	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  needsParens  ||  needsElseClause)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  needsParens  ||  needsElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  needsParens  ||  needsElseClause)  {	  if(needsParens    ||    needsElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
636	[BUG]  [BUGGY]  if(useLineBreaks  &&  first!=  null  &&  first.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(useLineBreaks  &&  first!=  null  &&  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(useLineBreaks  &&  first!=  null  &&  first.getType()  ==  Token.FUNCTION)  {	  if(useLineBreaks    &&    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
637	[BUG]  [BUGGY]  if(useLineBreaks  &&  first!=  null  &&  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(useLineBreaks  &&  first!=  null  &&  first.getType()  ==  Token.STRING)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(useLineBreaks  &&  first!=  null  &&  first.getType()  ==  Token.STRING)  {	  if(useLineBreaks    &&    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
638	[BUG]  [BUGGY]  if(useLineBreaks  &&  first!=  null  &&  first.getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(useLineBreaks  &&  first!=  null  &&  first.getType()  ==  Token.VAR)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(useLineBreaks  &&  first!=  null  &&  first.getType()  ==  Token.VAR)  {	  if(useLineBreaks    &&    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
639	[BUG]  [BUGGY]  if(useLineBreaks  &&  first!=  null  &&  first.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(useLineBreaks  &&  first!=  null  &&  first.getType()  ==  Token.NAME)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(useLineBreaks  &&  first!=  null  &&  first.getType()  ==  Token.NAME)  {	  if(useLineBreaks    &&    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
640	[BUG]  [BUGGY]  if(functionsParens  ||  needsElseClause  ||  ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(functionsParens  ||  needsElseClause  ||  ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(functionsParens  ||  needsElseClause  ||  ambiguousElseClause)  {	  if(functionsParens    ||    needsElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
641	[BUG]  [BUGGY]  if(functionsParens  ||  needsElseClause  ||  context.isSyntheticBlock())  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(functionsParens  ||  needsElseClause  ||  context.isSyntheticBlock())  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(functionsParens  ||  needsElseClause  ||  context.isSyntheticBlock())  {	  if(functionsParens    ||    needsElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
642	[BUG]  [BUGGY]  if(functionsParens  ||  needsElseClause  ||  context.isFunctionDeclaration())  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(functionsParens  ||  needsElseClause  ||  context.isFunctionDeclaration())  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(functionsParens  ||  needsElseClause  ||  context.isFunctionDeclaration())  {	  if(functionsParens    ||    needsElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
643	[BUG]  [BUGGY]  if(last  ==  null  ||  ambiguousElseClause  ==  null)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(last  ==  null  ||  ambiguousElseClause  ==  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(last  ==  null  ||  ambiguousElseClause  ==  null)  {	  if(ambiguousElseClause    &&    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
644	[BUG]  [BUGGY]  if(ambiguousElseClause  &&  c  ==  null)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(ambiguousElseClause  &&  c  ==  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  &&  c  ==  null)  {	  if(ambiguousElseClause    &&    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
645	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  needsParens  ==  null  &&  hasElse)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  needsParens  ==  null  &&  hasElse)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  needsParens  ==  null  &&  hasElse)  {	  if(!ambiguousElseClause    &&    needsParens    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
646	[BUG]  [BUGGY]  if(first!=  null  &&!ambiguousElseClause  &&  needsParens)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first!=  null  &&!ambiguousElseClause  &&  needsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first!=  null  &&!ambiguousElseClause  &&  needsParens)  {	  if(!ambiguousElseClause    ||    needsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
647	[BUG]  [BUGGY]  if(!ambiguousElseClause  ||  funcNeedsParens)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  ||  funcNeedsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  ||  funcNeedsParens)  {	  if(!ambiguousElseClause    ||    needsParens)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
648	[BUG]  [BUGGY]  if(hasElseParens  &&  first  ==  null  &&  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseParens  &&  first  ==  null  &&  hasElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseParens  &&  first  ==  null  &&  hasElseClause)  {	  if(hasElseParens    &&    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
649	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  needsParens  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  needsParens  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  needsParens  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!ambiguousElseClause    &&    needsParens    ||    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
650	[BUG]  [BUGGY]  if(hasElseClause  &&!ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElseClause  &&!ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElseClause  &&!ambiguousElseClause)  {	  if(!ambiguousElseClause    &&    needsParens    ||    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
651	[BUG]  [BUGGY]  if(d  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(d  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(d  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(ambiguousElseClause    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
652	[BUG]  [BUGGY]  if(first  ||  first  <=  context)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ||  first  <=  context)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  first  <=  context)  {	  if(first    ||    first)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
653	[BUG]  [BUGGY]  cc.endBlock(context  ==  Context.EXPR_RESULT  ||  context  ==  Context.STATEMENT);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.endBlock(context  ==  Context.EXPR_RESULT  ||  context  ==  Context.STATEMENT);  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.endBlock(context  ==  Context.EXPR_RESULT  ||  context  ==  Context.STATEMENT);	  cc.endBlock(context    ==    Context.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
654	[BUG]  [BUGGY]  cc.endBlock(context  ==  Context.EXPR_RESULT,  c);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.endBlock(context  ==  Context.EXPR_RESULT,  c);  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.endBlock(context  ==  Context.EXPR_RESULT,  c);	  cc.endBlock(context    ==    Context.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
655	[BUG]  [BUGGY]  cc.endBlock(context  ==  Context.EXPR_RESULT,  d);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.endBlock(context  ==  Context.EXPR_RESULT,  d);  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.endBlock(context  ==  Context.EXPR_RESULT,  d);	  cc.endBlock(context    ==    Context.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
656	[BUG]  [BUGGY]  if(last  ==  null  ||  ambiguousElseClause  &&  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(last  ==  null  ||  ambiguousElseClause  &&  hasElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(last  ==  null  ||  ambiguousElseClause  &&  hasElseClause)  {	  if(ambiguousElseClause    &&    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
657	[BUG]  [BUGGY]  if(first  ||  ambiguousElseClause  &&  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ||  ambiguousElseClause  &&  hasElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  ambiguousElseClause  &&  hasElseClause)  {	  if(ambiguousElseClause    &&    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
658	[BUG]  [BUGGY]  if(last!=  null  &&  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(last!=  null  &&  hasElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(last!=  null  &&  hasElseClause)  {	  if(ambiguousElseClause    &&    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
659	[BUG]  [BUGGY]  if(first  ||  first  ==  null  ||  c.getLastChild().getString().equals( " "))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ||  first  ==  null  ||  c.getLastChild().getString().equals( " "))  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  first  ==  null  ||  c.getLastChild().getString().equals( " "))  {	  if(first    ||    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
660	[BUG]  [BUGGY]  if(first  ||  first  ==  null  ||  c.getLastChild().getString().endsWith( "- "))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ||  first  ==  null  ||  c.getLastChild().getString().endsWith( "- "))  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  first  ==  null  ||  c.getLastChild().getString().endsWith( "- "))  {	  if(first    ||    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
661	[BUG]  [BUGGY]  if(first  ||  first  ==  null  ||  c.getLastChild().getString().equals( "__ "))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ||  first  ==  null  ||  c.getLastChild().getString().equals( "__ "))  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  first  ==  null  ||  c.getLastChild().getString().equals( "__ "))  {	  if(first    ||    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
662	[BUG]  [BUGGY]  if(first  ||  first  ==  null  ||  parent.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ||  first  ==  null  ||  parent.getType()  ==  Token.BLOCK)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  first  ==  null  ||  parent.getType()  ==  Token.BLOCK)  {	  if(first    ||    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
663	[BUG]  [BUGGY]  if(context  ==  Context.EXPR_RESULT  ||  context  ==  Context.SWITCH_OF_EXPR)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(context  ==  Context.EXPR_RESULT  ||  context  ==  Context.SWITCH_OF_EXPR)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(context  ==  Context.EXPR_RESULT  ||  context  ==  Context.SWITCH_OF_EXPR)  {	  if(context    ==    Context.EXPR_RESULT)    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
664	[BUG]  [BUGGY]  if(context  ==  Context.EXPR_RESULT  ||  context!=  Context.STATEMENT)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(context  ==  Context.EXPR_RESULT  ||  context!=  Context.STATEMENT)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(context  ==  Context.EXPR_RESULT  ||  context!=  Context.STATEMENT)  {	  if(context    ==    Context.EXPR_RESULT)    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
665	[BUG]  [BUGGY]  if(context  ==  Context.EXPR_RESULT  ||  context  ==  Context.SCRIPT_OF_EXPR)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(context  ==  Context.EXPR_RESULT  ||  context  ==  Context.SCRIPT_OF_EXPR)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(context  ==  Context.EXPR_RESULT  ||  context  ==  Context.SCRIPT_OF_EXPR)  {	  if(context    ==    Context.EXPR_RESULT)    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
666	[BUG]  [BUGGY]  if(first  ==  null  ||!last)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ==  null  ||!last)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ==  null  ||!last)  {	  if(first    ==    null    ||!ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
667	[BUG]  [BUGGY]  if(first  &&  ambiguousElseClause!=  null)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  &&  ambiguousElseClause!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  &&  ambiguousElseClause!=  null)  {	  if(ambiguousElseClause    &&    first    >=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
668	[BUG]  [BUGGY]  if(ambiguousElseClause  ||  first  >=  null)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(ambiguousElseClause  ||  first  >=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  ||  first  >=  null)  {	  if(ambiguousElseClause    &&    first    >=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
669	[BUG]  [BUGGY]  if(functionsParens  >  0  &&  needsElseClause)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(functionsParens  >  0  &&  needsElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(functionsParens  >  0  &&  needsElseClause)  {	  if(functionsParens    &&    needsElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
670	[BUG]  [BUGGY]  if(functionsParens  &&  needsParens)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(functionsParens  &&  needsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(functionsParens  &&  needsParens)  {	  if(functionsParens    &&    needsElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
671	[BUG]  [BUGGY]  if(fn.hasChildren()  ||  c.getFirstChild().hasChildren())  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(fn.hasChildren()  ||  c.getFirstChild().hasChildren())  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(fn.hasChildren()  ||  c.getFirstChild().hasChildren())  {	  if(fn.hasChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
672	[BUG]  [BUGGY]  if(fn.hasChildren()  &&  c.getFirstChild()  ==  n)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(fn.hasChildren()  &&  c.getFirstChild()  ==  n)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(fn.hasChildren()  &&  c.getFirstChild()  ==  n)  {	  if(fn.hasChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
673	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  fn.hasChildren()  ||  ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  fn.hasChildren()  ||  ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  fn.hasChildren()  ||  ambiguousElseClause)  {	  if(fn.hasChildren()    ||    ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
674	[BUG]  [BUGGY]  if(function  ||  needsParens  &&  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(function  ||  needsParens  &&  hasElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(function  ||  needsParens  &&  hasElseClause)  {	  if(first    ||    needsParens    &&    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
675	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  first  ||  needsParens  &&  hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  first  ||  needsParens  &&  hasElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  first  ||  needsParens  &&  hasElseClause)  {	  if(first    ||    needsParens    &&    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
676	[BUG]  [BUGGY]  if(first  ||  needsParens  &&  ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ||  needsParens  &&  ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  needsParens  &&  ambiguousElseClause)  {	  if(first    ||    needsParens    &&    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
677	[BUG]  [BUGGY]  if(hasElse  ||  ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(hasElse  ||  ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(hasElse  ||  ambiguousElseClause)  {	  if(ambiguousElseClause    ||    hasElse)    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
678	[BUG]  [BUGGY]  if(functionClause  ||  hasElse)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(functionClause  ||  hasElse)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(functionClause  ||  hasElse)  {	  if(ambiguousElseClause    ||    hasElse)    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
679	[BUG]  [BUGGY]  add(context  ==  Context.STATEMENT);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  add(context  ==  Context.STATEMENT);  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	add(context  ==  Context.STATEMENT);	  cc.endBlock(context    ==    Context.STATEMENT);    add(first);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
680	[BUG]  [BUGGY]  cc.endBlock(context!=  Context.STATEMENT);  add(first);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.endBlock(context!=  Context.STATEMENT);  add(first);  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.endBlock(context!=  Context.STATEMENT);  add(first);	  cc.endBlock(context    ==    Context.STATEMENT);    add(first);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
681	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  hasElse  ||  first  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  hasElse  ||  first  ==  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  hasElse  ||  first  ==  null)  {	  if(!ambiguousElseClause    &&    needsParens    ||    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
682	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  needsParens  ||  hasElse  ||  first  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  needsParens  ||  hasElse  ||  first  ==  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  needsParens  ||  hasElse  ||  first  ==  null)  {	  if(!ambiguousElseClause    &&    needsParens    ||    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
683	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  needsParens  &&  hasElse  ||  first  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  needsParens  &&  hasElse  ||  first  ==  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  needsParens  &&  hasElse  ||  first  ==  null)  {	  if(!ambiguousElseClause    &&    needsParens    ||    first    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
684	[BUG]  [BUGGY]  if(isSwitch(first)&&  isSwitch(context))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(isSwitch(first)&&  isSwitch(context))  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(isSwitch(first)&&  isSwitch(context))  {	  if(isSwitch(first)&&    needsParens    ==    false)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
685	[BUG]  [BUGGY]  cc.beginBlock(context  ==  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.beginBlock(context  ==  Context.START_OF_EXPR);  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.beginBlock(context  ==  Context.START_OF_EXPR);	  cc.endBlock(context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
686	[BUG]  [BUGGY]  if(context!=  Context.STATEMENT)  {  cc.endBlock(context  ==  Context.STATEMENT);  }  else  {  addExpr(c,  1);  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(context!=  Context.STATEMENT)  {  cc.endBlock(context  ==  Context.STATEMENT);  }  else  {  addExpr(c,  1);  }  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(context!=  Context.STATEMENT)  {  cc.endBlock(context  ==  Context.STATEMENT);  }  else  {  addExpr(c,  1);  }	  cc.endBlock(context!=    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
687	[BUG]  [BUGGY]  if(first  ==  Context.NAME  ||  first.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ==  Context.NAME  ||  first.getType()  ==  Token.NAME)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ==  Context.NAME  ||  first.getType()  ==  Token.NAME)  {	  if(first    ||    first.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
688	[BUG]  [BUGGY]  if(first.getType()  ==  Token.NAME  ||  first.getFirstChild().getType()  ==  Token.CATCH)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first.getType()  ==  Token.NAME  ||  first.getFirstChild().getType()  ==  Token.CATCH)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first.getType()  ==  Token.NAME  ||  first.getFirstChild().getType()  ==  Token.CATCH)  {	  if(first    ||    first.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
689	[BUG]  [BUGGY]  if(ambiguousElseClause  &&  c.getFirstChild()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(ambiguousElseClause  &&  c.getFirstChild()!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  &&  c.getFirstChild()!=  null)  {	  if(ambiguousElseClause    &&    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
690	[BUG]  [BUGGY]  if(ambiguousElseClause  &&  first!=  null  &&  first.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(ambiguousElseClause  &&  first!=  null  &&  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  &&  first!=  null  &&  first.getType()  ==  Token.FUNCTION)  {	  if(ambiguousElseClause    &&    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
691	[BUG]  [BUGGY]  if(ambiguousElseClause  ||  c.getFirstChild()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(ambiguousElseClause  ||  c.getFirstChild()!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  ||  c.getFirstChild()!=  null)  {	  if(ambiguousElseClause    ||    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
692	[BUG]  [BUGGY]  if(ambiguousElseClause  ||  c!=  null)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(ambiguousElseClause  ||  c!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(ambiguousElseClause  ||  c!=  null)  {	  if(ambiguousElseClause    ||    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
693	[BUG]  [BUGGY]  if(declaration  ==  null  ||  ambiguousElseClause!=  null)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(declaration  ==  null  ||  ambiguousElseClause!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(declaration  ==  null  ||  ambiguousElseClause!=  null)  {	  if(ambiguousElseClause    ||    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
694	[BUG]  [BUGGY]  cc.addPosition(d);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.addPosition(d);  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.addPosition(d);	  cc.addNumber(d);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
695	[BUG]  [BUGGY]  cc.addChildToFront(second);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.addChildToFront(second);  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.addChildToFront(second);	  cc.addChildToFront(d);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
696	[BUG]  [BUGGY]  if(first  ==  Context.BLOCK  ||  first.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ==  Context.BLOCK  ||  first.getType()  ==  Token.BLOCK)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ==  Context.BLOCK  ||  first.getType()  ==  Token.BLOCK)  {	  if(first    ||    first.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
697	[BUG]  [BUGGY]  if(first  ||  first.getType()  ==  Token.BLOCK  ||  first.getType()  ==  Token.CATCH)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ||  first.getType()  ==  Token.BLOCK  ||  first.getType()  ==  Token.CATCH)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  first.getType()  ==  Token.BLOCK  ||  first.getType()  ==  Token.CATCH)  {	  if(first    ||    first.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
698	[BUG]  [BUGGY]  if(first  ||  first.getType()  ==  Token.BLOCK  ||  first.getType()  ==  Token.EXPR_RESULT)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ||  first.getType()  ==  Token.BLOCK  ||  first.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ||  first.getType()  ==  Token.BLOCK  ||  first.getType()  ==  Token.EXPR_RESULT)  {	  if(first    ||    first.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
699	[BUG]  [BUGGY]  cc.endBlock(context  ==  Context.STATEMENT  ||  context  ==  Context.IN_FOR_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.endBlock(context  ==  Context.STATEMENT  ||  context  ==  Context.IN_FOR_INIT_CLAUSE);  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.endBlock(context  ==  Context.STATEMENT  ||  context  ==  Context.IN_FOR_INIT_CLAUSE);	  cc.endBlock(context    ==    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
700	[BUG]  [BUGGY]  cc.endBlock(context  ==  Context.STATEMENT  ||  context  ==  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  cc.endBlock(context  ==  Context.STATEMENT  ||  context  ==  Context.START_OF_EXPR);  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	cc.endBlock(context  ==  Context.STATEMENT  ||  context  ==  Context.START_OF_EXPR);	  cc.endBlock(context    ==    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
701	[BUG]  [BUGGY]  if(functions  &&  needParens)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(functions  &&  needParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(functions  &&  needParens)  {	  if(ambiguousElseClause    &&    needParens)    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
702	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&  hasElse  ||  first!=  null)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&  hasElse  ||  first!=  null)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&  hasElse  ||  first!=  null)  {	  if(hasElse    ||    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
703	[BUG]  [BUGGY]  if(fn.getType()!=  Token.FUNCTION  ||  ambiguousElseClause)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(fn.getType()!=  Token.FUNCTION  ||  ambiguousElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(fn.getType()!=  Token.FUNCTION  ||  ambiguousElseClause)  {	  if(fn.getType()    ==    Token.FUNCTION    ||    ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
704	[BUG]  [BUGGY]  if(!ambiguousElseClause  &&!hasElseClause)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(!ambiguousElseClause  &&!hasElseClause)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(!ambiguousElseClause  &&!hasElseClause)  {	  if(ambiguousElseClause    ||    hasElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
705	[BUG]  [BUGGY]  if(first!=  Context.STATEMENT  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first!=  Context.STATEMENT  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first!=  Context.STATEMENT  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(first!=    Context.STATEMENT)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
706	[BUG]  [BUGGY]  if(first!=  Context.STATEMENT  ||  context  ==  Context.STATEMENT)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first!=  Context.STATEMENT  ||  context  ==  Context.STATEMENT)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first!=  Context.STATEMENT  ||  context  ==  Context.STATEMENT)  {	  if(first!=    Context.STATEMENT)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
707	[BUG]  [BUGGY]  if(first  ==  Context.OTHER  ||!needsParens)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ==  Context.OTHER  ||!needsParens)  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ==  Context.OTHER  ||!needsParens)  {	  if(first    ==    Context.OTHER    ||!ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
708	[BUG]  [BUGGY]  if(first  ==  Context.OTHER  ||!dependsOn(n,  context))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }  add(     "}     ");      [BUGGY]  if(first  ==  Context.OTHER  ||!dependsOn(n,  context))  {  [BUGGY]      add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  cc.beginBlock();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	686	686	1	replace	if(first  ==  Context.OTHER  ||!dependsOn(n,  context))  {	  if(first    ==    Context.OTHER    ||!ambiguousElseClause)    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
