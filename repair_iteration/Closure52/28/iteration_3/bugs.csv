bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Preconditions.checkState(childCount  >=  2);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Preconditions.checkState(childCount  >=  2);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Preconditions.checkState(childCount  >=  2);	  Preconditions.checkState(childCount!=    2);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
2	[BUG]  [BUGGY]  Node  n  =  first.getLastChild();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Node  n  =  first.getLastChild();  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Node  n  =  first.getLastChild();	  Node    n    =    first.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
3	[BUG]  [BUGGY]  Node  n  =  context.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Node  n  =  context.getFirstChild();  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Node  n  =  context.getFirstChild();	  Node    n    =    first.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
4	[BUG]  [BUGGY]  Node  n  =  first.getNext();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Node  n  =  first.getNext();  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Node  n  =  first.getNext();	  Node    n    =    first.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
5	[BUG]  [BUGGY]  Node  n  =  this.first.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Node  n  =  this.first.getFirstChild();  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Node  n  =  this.first.getFirstChild();	  Node    n    =    first.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
6	[BUG]  [BUGGY]  Node  n  =  last.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Node  n  =  last.getFirstChild();  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Node  n  =  last.getFirstChild();	  Node    n    =    first.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
7	[BUG]  [BUGGY]  Node  n  =  second.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Node  n  =  second.getFirstChild();  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Node  n  =  second.getFirstChild();	  Node    n    =    first.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
8	[BUG]  [BUGGY]  Context  cc  =  createContext(n);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Context  cc  =  createContext(n);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =  createContext(n);	  Context    cc    =    createContext(context);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
9	[BUG]  [BUGGY]  Context  cc  =  createContext(context,  context);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Context  cc  =  createContext(context,  context);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =  createContext(context,  context);	  Context    cc    =    createContext(context);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
10	[BUG]  [BUGGY]  Context  cc  =  createContext(context,  n);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Context  cc  =  createContext(context,  n);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =  createContext(context,  n);	  Context    cc    =    createContext(context);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
11	[BUG]  [BUGGY]  Context  cc  =  createContext(n,  context);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Context  cc  =  createContext(n,  context);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =  createContext(n,  context);	  Context    cc    =    createContext(context);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
12	[BUG]  [BUGGY]  Context  cc  =  createContext(context,  parent);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Context  cc  =  createContext(context,  parent);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =  createContext(context,  parent);	  Context    cc    =    createContext(context);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
13	[BUG]  [BUGGY]  Context  cc  =  createContext(context,  false);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Context  cc  =  createContext(context,  false);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =  createContext(context,  false);	  Context    cc    =    createContext(context);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
14	[BUG]  [BUGGY]  Context  cc  =  getContext().getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Context  cc  =  getContext().getCurrentContext();  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =  getContext().getCurrentContext();	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
15	[BUG]  [BUGGY]  Context  cc  =  getContext(context);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Context  cc  =  getContext(context);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =  getContext(context);	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
16	[BUG]  [BUGGY]  Context  cc  =  getContext().getRootContext();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Context  cc  =  getContext().getRootContext();  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =  getContext().getRootContext();	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
17	[BUG]  [BUGGY]  Context  cc  =  createContext();  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Context  cc  =  createContext();  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =  createContext();	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
18	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2  -  childCount  +  1);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Preconditions.checkState(childCount  ==  2  -  childCount  +  1);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Preconditions.checkState(childCount  ==  2  -  childCount  +  1);	  Preconditions.checkState(childCount    ==    2    -    childCount);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
19	[BUG]  [BUGGY]  Preconditions.checkState(childCount  >=  2  -  1);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Preconditions.checkState(childCount  >=  2  -  1);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Preconditions.checkState(childCount  >=  2  -  1);	  Preconditions.checkState(childCount    ==    2    -    childCount);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
20	[BUG]  [BUGGY]  cc.addNumber(n.getDouble());  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  cc.addNumber(n.getDouble());  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	cc.addNumber(n.getDouble());	  cc.addNumber(n.getNumber());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
21	[BUG]  [BUGGY]  cc.addNumber(n.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  cc.addNumber(n.getFirstChild());  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	cc.addNumber(n.getFirstChild());	  cc.addNumber(n.getNumber());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
22	[BUG]  [BUGGY]  cc.addNumber(n.getNumber()  +  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  cc.addNumber(n.getNumber()  +  1);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	cc.addNumber(n.getNumber()  +  1);	  cc.addNumber(n.getNumber());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
23	[BUG]  [BUGGY]  cc.addNumber(n.getInt());  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  cc.addNumber(n.getInt());  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	cc.addNumber(n.getInt());	  cc.addNumber(n.getNumber());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
24	[BUG]  [BUGGY]  cc.addNumber(n.getString());  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  cc.addNumber(n.getString());  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	cc.addNumber(n.getString());	  cc.addNumber(n.getNumber());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
25	[BUG]  [BUGGY]  Context  cc  =  context.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Context  cc  =  context.getCurrentContext();  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =  context.getCurrentContext();	  Context    cc    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
26	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().getRootContext();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Context  cc  =  getCurrentContext().getRootContext();  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =  getCurrentContext().getRootContext();	  Context    cc    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
27	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext(context);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Context  cc  =  getCurrentContext(context);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =  getCurrentContext(context);	  Context    cc    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
28	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Context  cc  =  getCurrentContext().getCurrentContext();  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =  getCurrentContext().getCurrentContext();	  Context    cc    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
29	[BUG]  [BUGGY]  Context  cc  =  createCurrentContext();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Context  cc  =  createCurrentContext();  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =  createCurrentContext();	  Context    cc    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
30	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().getContextForNode(n);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Context  cc  =  getCurrentContext().getContextForNode(n);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =  getCurrentContext().getContextForNode(n);	  Context    cc    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
31	[BUG]  [BUGGY]  addList(first,  false,  context);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  addList(first,  false,  context);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	addList(first,  false,  context);	  Preconditions.checkState(childCount    ==    2);    addList(first,    false,    context);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
32	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  addList(first,  false,  context);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Preconditions.checkState(childCount  ==  1);  addList(first,  false,  context);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Preconditions.checkState(childCount  ==  1);  addList(first,  false,  context);	  Preconditions.checkState(childCount    ==    2);    addList(first,    false,    context);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
33	[BUG]  [BUGGY]  Context.checkState(childCount  ==  2);  addList(first,  false,  context);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Context.checkState(childCount  ==  2);  addList(first,  false,  context);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context.checkState(childCount  ==  2);  addList(first,  false,  context);	  Preconditions.checkState(childCount    ==    2);    addList(first,    false,    context);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
34	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  addList(first,  true,  context);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Preconditions.checkState(childCount  ==  2);  addList(first,  true,  context);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Preconditions.checkState(childCount  ==  2);  addList(first,  true,  context);	  Preconditions.checkState(childCount    ==    2);    addList(first,    false,    context);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
35	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  0);  addList(first,  false,  context);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Preconditions.checkState(childCount  ==  0);  addList(first,  false,  context);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Preconditions.checkState(childCount  ==  0);  addList(first,  false,  context);	  Preconditions.checkState(childCount    ==    2);    addList(first,    false,    context);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
36	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  3);  addList(first,  false,  context);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Preconditions.checkState(childCount  ==  3);  addList(first,  false,  context);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Preconditions.checkState(childCount  ==  3);  addList(first,  false,  context);	  Preconditions.checkState(childCount    ==    2);    addList(first,    false,    context);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
37	[BUG]  [BUGGY]  Context  cc  =(context  ==  null)?  context.getContext()  :  context;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Context  cc  =(context  ==  null)?  context.getContext()  :  context;  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =(context  ==  null)?  context.getContext()  :  context;	  Context    cc    =    context.getContext();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
38	[BUG]  [BUGGY]  Context  cc  =  this.context.getContext();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Context  cc  =  this.context.getContext();  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =  this.context.getContext();	  Context    cc    =    context.getContext();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
39	[BUG]  [BUGGY]  Context  cc  =  context.getContext(n);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Context  cc  =  context.getContext(n);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =  context.getContext(n);	  Context    cc    =    context.getContext();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
40	[BUG]  [BUGGY]  Context  cc  =  first.getContext();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Context  cc  =  first.getContext();  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =  first.getContext();	  Context    cc    =    context.getContext();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
41	[BUG]  [BUGGY]  Context  cc  =  getContextForNumber(context);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Context  cc  =  getContextForNumber(context);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =  getContextForNumber(context);	  Context    cc    =    getContextForNoInOperator(context);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
42	[BUG]  [BUGGY]  Context  cc  =  getContextForNumberOperator(context);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Context  cc  =  getContextForNumberOperator(context);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =  getContextForNumberOperator(context);	  Context    cc    =    getContextForNoInOperator(context);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
43	[BUG]  [BUGGY]  Context  cc  =  getContextForNumberInOperator(context);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Context  cc  =  getContextForNumberInOperator(context);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =  getContextForNumberInOperator(context);	  Context    cc    =    getContextForNoInOperator(context);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
44	[BUG]  [BUGGY]  Context  cc  =  getContextForNoInOperator(n);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Context  cc  =  getContextForNoInOperator(n);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =  getContextForNoInOperator(n);	  Context    cc    =    getContextForNoInOperator(context);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
45	[BUG]  [BUGGY]  Context  cc  =  getContextForNoInOperator(context,  1);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Context  cc  =  getContextForNoInOperator(context,  1);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =  getContextForNoInOperator(context,  1);	  Context    cc    =    getContextForNoInOperator(context);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
46	[BUG]  [BUGGY]  Context  cc  =  getContextForNoInOperator(context,  n);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Context  cc  =  getContextForNoInOperator(context,  n);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =  getContextForNoInOperator(context,  n);	  Context    cc    =    getContextForNoInOperator(context);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
47	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  3  -  1);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Preconditions.checkState(childCount  ==  3  -  1);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Preconditions.checkState(childCount  ==  3  -  1);	  Preconditions.checkState(childCount    ==    2    -    1);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
48	[BUG]  [BUGGY]  Preconditions.checkState(childCount  >>  1);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Preconditions.checkState(childCount  >>  1);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Preconditions.checkState(childCount  >>  1);	  Preconditions.checkState(childCount    >=    1);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
49	[BUG]  [BUGGY]  Preconditions.checkState(childCount  >  1);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Preconditions.checkState(childCount  >  1);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Preconditions.checkState(childCount  >  1);	  Preconditions.checkState(childCount    >=    1);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
50	[BUG]  [BUGGY]  Preconditions.checkState(childCount  >=  3);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Preconditions.checkState(childCount  >=  3);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Preconditions.checkState(childCount  >=  3);	  Preconditions.checkState(childCount!=    3);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
51	[BUG]  [BUGGY]  cc.addNumber(first.getDouble());  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  cc.addNumber(first.getDouble());  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	cc.addNumber(first.getDouble());	  cc.addNumber(first.getNumber());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
52	[BUG]  [BUGGY]  cc.addNumber(first.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  cc.addNumber(first.getFirstChild());  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	cc.addNumber(first.getFirstChild());	  cc.addNumber(first.getNumber());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
53	[BUG]  [BUGGY]  cc.addNumber(first.getNumber()  +  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  cc.addNumber(first.getNumber()  +  1);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	cc.addNumber(first.getNumber()  +  1);	  cc.addNumber(first.getNumber());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
54	[BUG]  [BUGGY]  cc.addNumber(first.getString());  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  cc.addNumber(first.getString());  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	cc.addNumber(first.getString());	  cc.addNumber(first.getNumber());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
55	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1  -  1);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Preconditions.checkState(childCount  ==  1  -  1);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Preconditions.checkState(childCount  ==  1  -  1);	  Preconditions.checkState(childCount    ==    1    -    childCount);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
56	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1  -  2);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Preconditions.checkState(childCount  ==  1  -  2);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Preconditions.checkState(childCount  ==  1  -  2);	  Preconditions.checkState(childCount    ==    1    -    childCount);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
57	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1  -  childCount  +  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Preconditions.checkState(childCount  ==  1  -  childCount  +  1);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Preconditions.checkState(childCount  ==  1  -  childCount  +  1);	  Preconditions.checkState(childCount    ==    1    -    childCount);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
58	[BUG]  [BUGGY]  Context  cc  =  Context.getCurrentContext(context);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Context  cc  =  Context.getCurrentContext(context);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =  Context.getCurrentContext(context);	  Context    cc    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
59	[BUG]  [BUGGY]  Context  cc  =  Context.getCurrentContext(n);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Context  cc  =  Context.getCurrentContext(n);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =  Context.getCurrentContext(n);	  Context    cc    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
60	[BUG]  [BUGGY]  Context  cc  =  Context.getCurrentContextForNode(n);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Context  cc  =  Context.getCurrentContextForNode(n);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =  Context.getCurrentContextForNode(n);	  Context    cc    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
61	[BUG]  [BUGGY]  Context  cc  =  Context.currentContext();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Context  cc  =  Context.currentContext();  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =  Context.currentContext();	  Context    cc    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
62	[BUG]  [BUGGY]  Context  cc  =  getContext().getCurrentNode();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Context  cc  =  getContext().getCurrentNode();  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =  getContext().getCurrentNode();	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
63	[BUG]  [BUGGY]  Context  cc  =  getContextForNoInOperator();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Context  cc  =  getContextForNoInOperator();  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =  getContextForNoInOperator();	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
64	[BUG]  [BUGGY]  Context  cc  =  getContextForNUMBER(context);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Context  cc  =  getContextForNUMBER(context);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =  getContextForNUMBER(context);	  Context    cc    =    getContextForNoInOperator(context);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
65	[BUG]  [BUGGY]  if(first!=  null)  {  cc.addNumber(first.getNumber());  }  else  {  Preconditions.checkState(childCount  ==  2);  addList(first);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  if(first!=  null)  {  cc.addNumber(first.getNumber());  }  else  {  Preconditions.checkState(childCount  ==  2);  addList(first);  }  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	if(first!=  null)  {  cc.addNumber(first.getNumber());  }  else  {  Preconditions.checkState(childCount  ==  2);  addList(first);  }	  cc.addNumber(first.getNumber());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
66	[BUG]  [BUGGY]  if(first!=  null)  {  cc.addNumber(first.getNumber());  }  else  {  Preconditions.checkState(childCount  ==  1);  addList(first);  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  if(first!=  null)  {  cc.addNumber(first.getNumber());  }  else  {  Preconditions.checkState(childCount  ==  1);  addList(first);  }  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	if(first!=  null)  {  cc.addNumber(first.getNumber());  }  else  {  Preconditions.checkState(childCount  ==  1);  addList(first);  }	  cc.addNumber(first.getNumber());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
67	[BUG]  [BUGGY]  if(first!=  null)  {  cc.addNumber(first.getNumber());  }  else  {  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  if(first!=  null)  {  cc.addNumber(first.getNumber());  }  else  {  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  }  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	if(first!=  null)  {  cc.addNumber(first.getNumber());  }  else  {  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  }	  cc.addNumber(first.getNumber());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
68	[BUG]  [BUGGY]  if(first!=  null)  {  cc.addNumber(first.getNumber());  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  if(first!=  null)  {  cc.addNumber(first.getNumber());  }  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	if(first!=  null)  {  cc.addNumber(first.getNumber());  }	  cc.addNumber(first.getNumber());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
69	[BUG]  [BUGGY]  if(first!=  null)  {  cc.addNumber(first.getNumber());  }  else  {  Preconditions.checkState(childCount  ==  1);  addList(first,  false,  context);  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  if(first!=  null)  {  cc.addNumber(first.getNumber());  }  else  {  Preconditions.checkState(childCount  ==  1);  addList(first,  false,  context);  }  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	if(first!=  null)  {  cc.addNumber(first.getNumber());  }  else  {  Preconditions.checkState(childCount  ==  1);  addList(first,  false,  context);  }	  cc.addNumber(first.getNumber());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
70	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  0  -  childCount);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Preconditions.checkState(childCount  ==  0  -  childCount);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Preconditions.checkState(childCount  ==  0  -  childCount);	  Preconditions.checkState(childCount    ==    2    -    childCount);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
71	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2  *  childCount);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Preconditions.checkState(childCount  ==  2  *  childCount);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Preconditions.checkState(childCount  ==  2  *  childCount);	  Preconditions.checkState(childCount    ==    2    -    childCount);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
72	[BUG]  [BUGGY]  cc.addNumber(n.getNumber()  -  1);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  cc.addNumber(n.getNumber()  -  1);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	cc.addNumber(n.getNumber()  -  1);	  cc.addNumber(n.getNumber());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
73	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  0  -  1);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Preconditions.checkState(childCount  ==  0  -  1);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Preconditions.checkState(childCount  ==  0  -  1);	  Preconditions.checkState(childCount    ==    2    -    1);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
74	[BUG]  [BUGGY]  Context  cc  =(context  ==  null)?  context.getContext()  :  context.getContext();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Context  cc  =(context  ==  null)?  context.getContext()  :  context.getContext();  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =(context  ==  null)?  context.getContext()  :  context.getContext();	  Context    cc    =    context.getContext();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
75	[BUG]  [BUGGY]  Context  cc  =  getContextForNode(context);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Context  cc  =  getContextForNode(context);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =  getContextForNode(context);	  Context    cc    =    context.getContext();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
76	[BUG]  [BUGGY]  Context  cc  =  getContextForNode(n.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Context  cc  =  getContextForNode(n.getFirstChild());  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =  getContextForNode(n.getFirstChild());	  Context    cc    =    context.getContext();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
77	[BUG]  [BUGGY]  Context  cc  =  createContext(context,  true);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Context  cc  =  createContext(context,  true);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =  createContext(context,  true);	  Context    cc    =    createContext(context);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
78	[BUG]  [BUGGY]  Node  n  =  first!=  null?  context.getFirstChild()  :  first.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Node  n  =  first!=  null?  context.getFirstChild()  :  first.getFirstChild();  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Node  n  =  first!=  null?  context.getFirstChild()  :  first.getFirstChild();	  Node    n    =    first.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
79	[BUG]  [BUGGY]  Node  n  =  first  ==  null?  context.getFirstChild()  :  first.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Node  n  =  first  ==  null?  context.getFirstChild()  :  first.getFirstChild();  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Node  n  =  first  ==  null?  context.getFirstChild()  :  first.getFirstChild();	  Node    n    =    first.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
80	[BUG]  [BUGGY]  Node  n  =  first  ==  null?  context.getNumber()  :  first.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Node  n  =  first  ==  null?  context.getNumber()  :  first.getFirstChild();  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Node  n  =  first  ==  null?  context.getNumber()  :  first.getFirstChild();	  Node    n    =    first.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
81	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().getCurrentNode();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Context  cc  =  getCurrentContext().getCurrentNode();  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =  getCurrentContext().getCurrentNode();	  Context    cc    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
82	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  3  -  childCount);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Preconditions.checkState(childCount  ==  3  -  childCount);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Preconditions.checkState(childCount  ==  3  -  childCount);	  Preconditions.checkState(childCount    ==    2    -    childCount);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
83	[BUG]  [BUGGY]  Preconditions.checkState(childCount  >  2  -  childCount);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Preconditions.checkState(childCount  >  2  -  childCount);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Preconditions.checkState(childCount  >  2  -  childCount);	  Preconditions.checkState(childCount    ==    2    -    childCount);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
84	[BUG]  [BUGGY]  Context  cc  =  createContext(context,  n.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Context  cc  =  createContext(context,  n.getFirstChild());  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =  createContext(context,  n.getFirstChild());	  Context    cc    =    createContext(context);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
85	[BUG]  [BUGGY]  Context  cc  =  createContext(context,  this);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Context  cc  =  createContext(context,  this);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =  createContext(context,  this);	  Context    cc    =    createContext(context);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
86	[BUG]  [BUGGY]  Context  cc  =  getContextForNoUndefined(context);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Context  cc  =  getContextForNoUndefined(context);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =  getContextForNoUndefined(context);	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
87	[BUG]  [BUGGY]  Context  cc  =  getContextForNoDeclaration();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Context  cc  =  getContextForNoDeclaration();  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =  getContextForNoDeclaration();	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
88	[BUG]  [BUGGY]  if(first!=  null)  {  cc.addNumber(first.getNumber());  }  else  {  Preconditions.checkState(childCount  ==  2);  add( ") ");  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  if(first!=  null)  {  cc.addNumber(first.getNumber());  }  else  {  Preconditions.checkState(childCount  ==  2);  add( ") ");  }  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	if(first!=  null)  {  cc.addNumber(first.getNumber());  }  else  {  Preconditions.checkState(childCount  ==  2);  add( ") ");  }	  cc.addNumber(first.getNumber());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
89	[BUG]  [BUGGY]  if(first!=  null)  {  cc.addNumber(first.getNumber());  }  else  {  Preconditions.checkState(childCount  ==  2);  add( " ");  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  if(first!=  null)  {  cc.addNumber(first.getNumber());  }  else  {  Preconditions.checkState(childCount  ==  2);  add( " ");  }  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	if(first!=  null)  {  cc.addNumber(first.getNumber());  }  else  {  Preconditions.checkState(childCount  ==  2);  add( " ");  }	  cc.addNumber(first.getNumber());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
90	[BUG]  [BUGGY]  if(first!=  null)  {  cc.addNumber(first.getNumber());  }  else  {  Preconditions.checkState(childCount  ==  1);  add( ") ");  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  if(first!=  null)  {  cc.addNumber(first.getNumber());  }  else  {  Preconditions.checkState(childCount  ==  1);  add( ") ");  }  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	if(first!=  null)  {  cc.addNumber(first.getNumber());  }  else  {  Preconditions.checkState(childCount  ==  1);  add( ") ");  }	  cc.addNumber(first.getNumber());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
91	[BUG]  [BUGGY]  if(first!=  null)  {  cc.addNumber(first.getNumber());  }  else  {  Preconditions.checkState(childCount  ==  1);  add( " ");  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  if(first!=  null)  {  cc.addNumber(first.getNumber());  }  else  {  Preconditions.checkState(childCount  ==  1);  add( " ");  }  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	if(first!=  null)  {  cc.addNumber(first.getNumber());  }  else  {  Preconditions.checkState(childCount  ==  1);  add( " ");  }	  cc.addNumber(first.getNumber());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
92	[BUG]  [BUGGY]  Context  cc  =(context  ==  null)?  context.getContext()  :  context.getRootContext();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Context  cc  =(context  ==  null)?  context.getContext()  :  context.getRootContext();  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =(context  ==  null)?  context.getContext()  :  context.getRootContext();	  Context    cc    =    context.getContext();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
93	[BUG]  [BUGGY]  Context  cc  =(context  ==  null)?  context.getContext()  :  context.getCurrentNode();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Context  cc  =(context  ==  null)?  context.getContext()  :  context.getCurrentNode();  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =(context  ==  null)?  context.getContext()  :  context.getCurrentNode();	  Context    cc    =    context.getContext();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
94	[BUG]  [BUGGY]  Preconditions.checkState(childCount  >>  2);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Preconditions.checkState(childCount  >>  2);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Preconditions.checkState(childCount  >>  2);	  Preconditions.checkState(childCount!=    2);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
95	[BUG]  [BUGGY]  Context  cc  =  Context.getCurrentContextForNoInOperator(context);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Context  cc  =  Context.getCurrentContextForNoInOperator(context);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =  Context.getCurrentContextForNoInOperator(context);	  Context    cc    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
96	[BUG]  [BUGGY]  Context  cc  =  Context.getCurrentContextForNoInOperator();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Context  cc  =  Context.getCurrentContextForNoInOperator();  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =  Context.getCurrentContextForNoInOperator();	  Context    cc    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
97	[BUG]  [BUGGY]  cc.addNumber(n.getLong());  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  cc.addNumber(n.getLong());  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	cc.addNumber(n.getLong());	  cc.addNumber(n.getNumber());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
98	[BUG]  [BUGGY]  Preconditions.checkState(childCount  <  1  -  childCount);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Preconditions.checkState(childCount  <  1  -  childCount);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Preconditions.checkState(childCount  <  1  -  childCount);	  Preconditions.checkState(childCount    ==    1    -    childCount);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
99	[BUG]  [BUGGY]  Preconditions.checkState(childCount  >  1  -  childCount);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Preconditions.checkState(childCount  >  1  -  childCount);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Preconditions.checkState(childCount  >  1  -  childCount);	  Preconditions.checkState(childCount    ==    1    -    childCount);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
100	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextForNoInOperator();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Context  cc  =  getCurrentContextForNoInOperator();  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =  getCurrentContextForNoInOperator();	  Context    cc    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
101	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextForNoInOperator(context);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Context  cc  =  getCurrentContextForNoInOperator(context);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =  getCurrentContextForNoInOperator(context);	  Context    cc    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
102	[BUG]  [BUGGY]  Context  cc  =  getContextForNoNumber(context);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Context  cc  =  getContextForNoNumber(context);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =  getContextForNoNumber(context);	  Context    cc    =    getContextForNoInOperator(context);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
103	[BUG]  [BUGGY]  Context  cc  =  createContextForNoInOperator(context);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      addList(first);  add(     ")     ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:      [BUGGY]  Context  cc  =  createContextForNoInOperator(context);  [BUGGY]      cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =  createContextForNoInOperator(context);	  Context    cc    =    getContextForNoInOperator(context);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
