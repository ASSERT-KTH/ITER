bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Preconditions.checkState(childCount!=  1);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    addList(first);  add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:    [BUGGY]  Preconditions.checkState(childCount!=  1);  [BUGGY]    cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Preconditions.checkState(childCount!=  1);	  Preconditions.checkState(childCount    ==    1);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
2	[BUG]  [BUGGY]  Preconditions.checkState(childCount  >=  1);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    addList(first);  add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:    [BUGGY]  Preconditions.checkState(childCount  >=  1);  [BUGGY]    cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Preconditions.checkState(childCount  >=  1);	  Preconditions.checkState(childCount    ==    1);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
3	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1  -  childCount);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    addList(first);  add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:    [BUGGY]  Preconditions.checkState(childCount  ==  1  -  childCount);  [BUGGY]    cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Preconditions.checkState(childCount  ==  1  -  childCount);	  Preconditions.checkState(childCount    ==    1);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
4	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    addList(first);  add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:    [BUGGY]  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  [BUGGY]    cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
5	[BUG]  [BUGGY]  cc.addNumber(n.getNumber());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    addList(first);  add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:    [BUGGY]  cc.addNumber(n.getNumber());  [BUGGY]    cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	cc.addNumber(n.getNumber());	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
6	[BUG]  [BUGGY]  Node  n  =  first.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    addList(first);  add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:    [BUGGY]  Node  n  =  first.getFirstChild();  [BUGGY]    cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Node  n  =  first.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
7	[BUG]  [BUGGY]  Context  cc  =  context.getContext();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    addList(first);  add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:    [BUGGY]  Context  cc  =  context.getContext();  [BUGGY]    cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =  context.getContext();	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
8	[BUG]  [BUGGY]  Context  cc  =  getContext();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    addList(first);  add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:    [BUGGY]  Context  cc  =  getContext();  [BUGGY]    cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =  getContext();	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
9	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2  -  childCount);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    addList(first);  add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:    [BUGGY]  Preconditions.checkState(childCount  ==  2  -  childCount);  [BUGGY]    cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Preconditions.checkState(childCount  ==  2  -  childCount);	  Preconditions.checkState(childCount    ==    2);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
10	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2  -  1);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    addList(first);  add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:    [BUGGY]  Preconditions.checkState(childCount  ==  2  -  1);  [BUGGY]    cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Preconditions.checkState(childCount  ==  2  -  1);	  Preconditions.checkState(childCount    ==    2);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
11	[BUG]  [BUGGY]  Preconditions.checkState(childCount!=  2);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    addList(first);  add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:    [BUGGY]  Preconditions.checkState(childCount!=  2);  [BUGGY]    cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Preconditions.checkState(childCount!=  2);	  Preconditions.checkState(childCount    ==    2);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
12	[BUG]  [BUGGY]  Preconditions.checkState(childCount!=  3);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    addList(first);  add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:    [BUGGY]  Preconditions.checkState(childCount!=  3);  [BUGGY]    cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Preconditions.checkState(childCount!=  3);	  Preconditions.checkState(childCount    ==    3);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
13	[BUG]  [BUGGY]  Context  cc  =  Context.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    addList(first);  add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:    [BUGGY]  Context  cc  =  Context.getCurrentContext();  [BUGGY]    cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =  Context.getCurrentContext();	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
14	[BUG]  [BUGGY]  cc.addNumber(first.getNumber());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    addList(first);  add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:    [BUGGY]  cc.addNumber(first.getNumber());  [BUGGY]    cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	cc.addNumber(first.getNumber());	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
15	[BUG]  [BUGGY]  Context  cc  =  getContextForNoInOperator(context);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    addList(first);  add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:    [BUGGY]  Context  cc  =  getContextForNoInOperator(context);  [BUGGY]    cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =  getContextForNoInOperator(context);	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
16	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    addList(first);  add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:    [BUGGY]  Context  cc  =  getCurrentContext();  [BUGGY]    cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =  getCurrentContext();	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
17	[BUG]  [BUGGY]  Context  cc  =  createContext(context);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    addList(first);  add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:    [BUGGY]  Context  cc  =  createContext(context);  [BUGGY]    cc.addNumber(n.getDouble());  break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	226	226	1	replace	Context  cc  =  createContext(context);	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
