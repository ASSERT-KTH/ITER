bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.STRING)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.STRING)  {	  if    (c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
2	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.STRING  ||  c.getType()!=  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.STRING  ||  c.getType()!=  Token.STRING)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.STRING  ||  c.getType()!=  Token.STRING)  {	  if    (c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
3	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.NAME  &&  c.getType()  ==  Token.ASSIGN)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.NAME  &&  c.getType()  ==  Token.ASSIGN)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.NAME  &&  c.getType()  ==  Token.ASSIGN)  {	  if    (c.getType()    ==    Token.NAME    ||    c.getType()    ==    Token.ASSIGN)    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
4	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.NAME  ||  c.getType()!=  Token.ASSIGN)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.NAME  ||  c.getType()!=  Token.ASSIGN)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.NAME  ||  c.getType()!=  Token.ASSIGN)  {	  if    (c.getType()    ==    Token.NAME    ||    c.getType()    ==    Token.ASSIGN)    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
5	[BUG]  [BUGGY]  Node  body  =  c.getNext();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Node  body  =  c.getNext();  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Node  body  =  c.getNext();	  Node    body    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
6	[BUG]  [BUGGY]  Node  body  =  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Node  body  =  n.getFirstChild();  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Node  body  =  n.getFirstChild();	  Node    body    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
7	[BUG]  [BUGGY]  Node  body  =  c.getLocalPart();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Node  body  =  c.getLocalPart();  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Node  body  =  c.getLocalPart();	  Node    body    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
8	[BUG]  [BUGGY]  Node  body  =  c.getSeparator();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Node  body  =  c.getSeparator();  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Node  body  =  c.getSeparator();	  Node    body    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
9	[BUG]  [BUGGY]  Node  body  =  c.next();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Node  body  =  c.next();  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Node  body  =  c.next();	  Node    body    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
10	[BUG]  [BUGGY]  if(c.getType()  ==  Token.NAME  &&  c.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()  ==  Token.NAME  &&  c.getType()  ==  Token.FUNCTION)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()  ==  Token.NAME  &&  c.getType()  ==  Token.FUNCTION)  {	  if(c.getType()    ==    Token.NAME    ||    c.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
11	[BUG]  [BUGGY]  if(c.getType()  ==  Token.NAME  ||  c.getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()  ==  Token.NAME  ||  c.getType()!=  Token.FUNCTION)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()  ==  Token.NAME  ||  c.getType()!=  Token.FUNCTION)  {	  if(c.getType()    ==    Token.NAME    ||    c.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
12	[BUG]  [BUGGY]  if(c.getType()!=  Token.NAME  ||  c.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()!=  Token.NAME  ||  c.getType()  ==  Token.FUNCTION)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()!=  Token.NAME  ||  c.getType()  ==  Token.FUNCTION)  {	  if(c.getType()    ==    Token.NAME    ||    c.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
13	[BUG]  [BUGGY]  if(c.getType()!=  Token.NAME  &&  c.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()!=  Token.NAME  &&  c.getType()  ==  Token.FUNCTION)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()!=  Token.NAME  &&  c.getType()  ==  Token.FUNCTION)  {	  if(c.getType()    ==    Token.NAME    ||    c.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
14	[BUG]  [BUGGY]  if(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.NAME)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.NAME)  {	  if(c.getType()    ==    Token.NAME    ||    c.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
15	[BUG]  [BUGGY]  if(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.FOR)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.FOR)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.FOR)  {	  if(c.getType()    ==    Token.NAME    ||    c.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
16	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(c,  n);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  NodeUtil.copyCurrentStructure(c,  n);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	NodeUtil.copyCurrentStructure(c,  n);	  NodeUtil.copyCurrentStructure(c);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
17	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(c,  c);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  NodeUtil.copyCurrentStructure(c,  c);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	NodeUtil.copyCurrentStructure(c,  c);	  NodeUtil.copyCurrentStructure(c);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
18	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(c,  first);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  NodeUtil.copyCurrentStructure(c,  first);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	NodeUtil.copyCurrentStructure(c,  first);	  NodeUtil.copyCurrentStructure(c);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
19	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(n);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  NodeUtil.copyCurrentStructure(n);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	NodeUtil.copyCurrentStructure(n);	  NodeUtil.copyCurrentStructure(c);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
20	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(first);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  NodeUtil.copyCurrentStructure(first);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	NodeUtil.copyCurrentStructure(first);	  NodeUtil.copyCurrentStructure(c);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
21	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(context);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  NodeUtil.copyCurrentStructure(context);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	NodeUtil.copyCurrentStructure(context);	  NodeUtil.copyCurrentStructure(c);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
22	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.NAME,  c.getString());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.NAME,  c.getString());  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.NAME,  c.getString());	  Preconditions.checkState(c.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
23	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.GET);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.GET);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.GET);	  Preconditions.checkState(c.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
24	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.BLOCK);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.BLOCK);	  Preconditions.checkState(c.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
25	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.NAME);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.NAME);	  Preconditions.checkState(c.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
26	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()!=  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()!=  Token.NAME);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()!=  Token.NAME);	  Preconditions.checkState(c.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
27	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.STRING);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.STRING);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.STRING);	  Preconditions.checkState(c.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
28	[BUG]  [BUGGY]  if(c.getType()  ==  Token.SCRIPT  ||  c.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()  ==  Token.SCRIPT  ||  c.getType()  ==  Token.NAME)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()  ==  Token.SCRIPT  ||  c.getType()  ==  Token.NAME)  {	  if(c.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
29	[BUG]  [BUGGY]  if(c.getType()  ==  Token.SCRIPT  ||  c.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()  ==  Token.SCRIPT  ||  c.getType()  ==  Token.STRING)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()  ==  Token.SCRIPT  ||  c.getType()  ==  Token.STRING)  {	  if(c.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
30	[BUG]  [BUGGY]  if(c.getType()  ==  Token.SCRIPT  ||  c.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()  ==  Token.SCRIPT  ||  c.getType()  ==  Token.BLOCK)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()  ==  Token.SCRIPT  ||  c.getType()  ==  Token.BLOCK)  {	  if(c.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
31	[BUG]  [BUGGY]  if(c.getType()  ==  Token.SCRIPT  ||  c.getType()  ==  Token.GET)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()  ==  Token.SCRIPT  ||  c.getType()  ==  Token.GET)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()  ==  Token.SCRIPT  ||  c.getType()  ==  Token.GET)  {	  if(c.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
32	[BUG]  [BUGGY]  if(c.getType()  ==  Token.SCRIPT  ||  c.getType()  ==  Token.CATCH)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()  ==  Token.SCRIPT  ||  c.getType()  ==  Token.CATCH)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()  ==  Token.SCRIPT  ||  c.getType()  ==  Token.CATCH)  {	  if(c.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
33	[BUG]  [BUGGY]  if(c.getType()  ==  Token.SCRIPT  ||  c.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()  ==  Token.SCRIPT  ||  c.getType()  ==  Token.FUNCTION)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()  ==  Token.SCRIPT  ||  c.getType()  ==  Token.FUNCTION)  {	  if(c.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
34	[BUG]  [BUGGY]  if(c.getType()  ==  Token.GET  &&  c.getType()  ==  Token.CATCH)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()  ==  Token.GET  &&  c.getType()  ==  Token.CATCH)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()  ==  Token.GET  &&  c.getType()  ==  Token.CATCH)  {	  if    (c.getType()    ==    Token.GET    ||    c.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
35	[BUG]  [BUGGY]  if(c.getType()!=  Token.GET  ||  c.getType()  ==  Token.CATCH)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()!=  Token.GET  ||  c.getType()  ==  Token.CATCH)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()!=  Token.GET  ||  c.getType()  ==  Token.CATCH)  {	  if    (c.getType()    ==    Token.GET    ||    c.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
36	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.VAR  ||  c.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.VAR  ||  c.getType()  ==  Token.NAME);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.VAR  ||  c.getType()  ==  Token.NAME);	  Preconditions.checkState(c.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
37	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.VAR  ||  c.getType()  ==  Token.GET);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.VAR  ||  c.getType()  ==  Token.GET);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.VAR  ||  c.getType()  ==  Token.GET);	  Preconditions.checkState(c.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
38	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.VAR  ||  c.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.VAR  ||  c.getType()  ==  Token.BLOCK);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.VAR  ||  c.getType()  ==  Token.BLOCK);	  Preconditions.checkState(c.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
39	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.VAR  ||  c.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.VAR  ||  c.getType()  ==  Token.FUNCTION);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.VAR  ||  c.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(c.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
40	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.VAR  ||  c.getType()  ==  Token.CATCH);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.VAR  ||  c.getType()  ==  Token.CATCH);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.VAR  ||  c.getType()  ==  Token.CATCH);	  Preconditions.checkState(c.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
41	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.VAR  ||  c.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.VAR  ||  c.getType()  ==  Token.VAR);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.VAR  ||  c.getType()  ==  Token.VAR);	  Preconditions.checkState(c.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
42	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()!=  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()!=  Token.FUNCTION);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()!=  Token.FUNCTION);	  Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
43	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.GET);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.GET);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.GET);	  Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
44	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.NAME);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.NAME);	  Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
45	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.CATCH);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.CATCH);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.CATCH);	  Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
46	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.STRING);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.STRING);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.STRING);	  Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
47	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.EXPR);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.EXPR);	  Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
48	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()!=  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()!=  Token.EXPR_RESULT);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(c.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
49	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.EXPR_RESULT  ||  c.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.EXPR_RESULT  ||  c.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.EXPR_RESULT  ||  c.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(c.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
50	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.EXPR_RESULT,  c.getString());  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.EXPR_RESULT,  c.getString());  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.EXPR_RESULT,  c.getString());	  Preconditions.checkState(c.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
51	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.EXPR);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.EXPR);	  Preconditions.checkState(c.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
52	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.EXPR_RESULT  ||  c.getType()  ==  Token.GET);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.EXPR_RESULT  ||  c.getType()  ==  Token.GET);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.EXPR_RESULT  ||  c.getType()  ==  Token.GET);	  Preconditions.checkState(c.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
53	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.EXPR_RESULT  ||  c.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.EXPR_RESULT  ||  c.getType()  ==  Token.FUNCTION);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.EXPR_RESULT  ||  c.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(c.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
54	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.CATCH  &&  c.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.CATCH  &&  c.getType()  ==  Token.NAME)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.CATCH  &&  c.getType()  ==  Token.NAME)  {	  if    (c.getType()    ==    Token.CATCH    ||    c.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
55	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.CATCH  ||  c.getType()!=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.CATCH  ||  c.getType()!=  Token.NAME)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.CATCH  ||  c.getType()!=  Token.NAME)  {	  if    (c.getType()    ==    Token.CATCH    ||    c.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
56	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.GETPROP  ||  c.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.GETPROP  ||  c.getType()  ==  Token.GETPROP);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.GETPROP  ||  c.getType()  ==  Token.GETPROP);	  Preconditions.checkState(c.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
57	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.GETPROP  ||  c.getType()  ==  Token.SET);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.GETPROP  ||  c.getType()  ==  Token.SET);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.GETPROP  ||  c.getType()  ==  Token.SET);	  Preconditions.checkState(c.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
58	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.GETPROP,  c.getString());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.GETPROP,  c.getString());  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.GETPROP,  c.getString());	  Preconditions.checkState(c.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
59	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()!=  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()!=  Token.GETPROP);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()!=  Token.GETPROP);	  Preconditions.checkState(c.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
60	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.GET);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.GET);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.GET);	  Preconditions.checkState(c.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
61	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.GETPROP  ||  c.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.GETPROP  ||  c.getType()  ==  Token.NAME);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.GETPROP  ||  c.getType()  ==  Token.NAME);	  Preconditions.checkState(c.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
62	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.FUNCTION)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.FUNCTION)  {	  if    (c.getType()    ==    Token.CATCH    ||    c!=    first)    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
63	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.SET)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.SET)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.SET)  {	  if    (c.getType()    ==    Token.CATCH    ||    c!=    first)    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
64	[BUG]  [BUGGY]  Node  first  =  c.getLastChild();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Node  first  =  c.getLastChild();  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Node  first  =  c.getLastChild();	  Node    first    =    c.getNext();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
65	[BUG]  [BUGGY]  Node  first  =  c.getNext()  +  1;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Node  first  =  c.getNext()  +  1;  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Node  first  =  c.getNext()  +  1;	  Node    first    =    c.getNext();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
66	[BUG]  [BUGGY]  Node  first  =  c.getNext()  ||  c.getType()  ==  Token.FUNCTION;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Node  first  =  c.getNext()  ||  c.getType()  ==  Token.FUNCTION;  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Node  first  =  c.getNext()  ||  c.getType()  ==  Token.FUNCTION;	  Node    first    =    c.getNext();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
67	[BUG]  [BUGGY]  Node  first  =  c.getNext()  ||  c.getType()  ==  Token.GETPROP;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Node  first  =  c.getNext()  ||  c.getType()  ==  Token.GETPROP;  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Node  first  =  c.getNext()  ||  c.getType()  ==  Token.GETPROP;	  Node    first    =    c.getNext();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
68	[BUG]  [BUGGY]  Node  first  =  n.getNext();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Node  first  =  n.getNext();  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Node  first  =  n.getNext();	  Node    first    =    c.getNext();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
69	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.NAME  &&  c.getType()  ==  Token.CATCH)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.NAME  &&  c.getType()  ==  Token.CATCH)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.NAME  &&  c.getType()  ==  Token.CATCH)  {	  if    (c.getType()    ==    Token.NAME    ||    c.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
70	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.NAME  ||  c.getType()!=  Token.CATCH)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.NAME  ||  c.getType()!=  Token.CATCH)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.NAME  ||  c.getType()!=  Token.CATCH)  {	  if    (c.getType()    ==    Token.NAME    ||    c.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
71	[BUG]  [BUGGY]  if(c.getType()!=  Token.NAME  ||  c.getType()  ==  Token.CATCH)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()!=  Token.NAME  ||  c.getType()  ==  Token.CATCH)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()!=  Token.NAME  ||  c.getType()  ==  Token.CATCH)  {	  if    (c.getType()    ==    Token.NAME    ||    c.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
72	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.ASSIGN)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.ASSIGN)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.ASSIGN)  {	  if    (c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.ASSIGN)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
73	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.STRING  ||  c.getType()!=  Token.ASSIGN)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.STRING  ||  c.getType()!=  Token.ASSIGN)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.STRING  ||  c.getType()!=  Token.ASSIGN)  {	  if    (c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.ASSIGN)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
74	[BUG]  [BUGGY]  if(c.getType()  ==  Token.CATCH  &&  c.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()  ==  Token.CATCH  &&  c.getType()  ==  Token.STRING)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()  ==  Token.CATCH  &&  c.getType()  ==  Token.STRING)  {	  if(c.getType()    ==    Token.CATCH    ||    c.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
75	[BUG]  [BUGGY]  if(c.getType()  ==  Token.CATCH  ||  c.getType()!=  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()  ==  Token.CATCH  ||  c.getType()!=  Token.STRING)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()  ==  Token.CATCH  ||  c.getType()!=  Token.STRING)  {	  if(c.getType()    ==    Token.CATCH    ||    c.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
76	[BUG]  [BUGGY]  if(c.getType()!=  Token.CATCH  ||  c.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()!=  Token.CATCH  ||  c.getType()  ==  Token.STRING)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()!=  Token.CATCH  ||  c.getType()  ==  Token.STRING)  {	  if(c.getType()    ==    Token.CATCH    ||    c.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
77	[BUG]  [BUGGY]  if(c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.STRING)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.STRING)  {	  if(c.getType()    ==    Token.CATCH    ||    c.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
78	[BUG]  [BUGGY]  if(c.getType()  ==  Token.GETPROP  ||  c.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()  ==  Token.GETPROP  ||  c.getType()  ==  Token.GETPROP)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()  ==  Token.GETPROP  ||  c.getType()  ==  Token.GETPROP)  {	  if(c.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
79	[BUG]  [BUGGY]  if(c.getType()  ==  Token.GETPROP  ||  c.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()  ==  Token.GETPROP  ||  c.getType()  ==  Token.NAME)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()  ==  Token.GETPROP  ||  c.getType()  ==  Token.NAME)  {	  if(c.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
80	[BUG]  [BUGGY]  if(c.getType()  ==  Token.GETPROP  ||  c.getType()  ==  Token.SET)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()  ==  Token.GETPROP  ||  c.getType()  ==  Token.SET)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()  ==  Token.GETPROP  ||  c.getType()  ==  Token.SET)  {	  if(c.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
81	[BUG]  [BUGGY]  if(c.getType()  ==  Token.GETPROP  ||  c.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()  ==  Token.GETPROP  ||  c.getType()  ==  Token.STRING)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()  ==  Token.GETPROP  ||  c.getType()  ==  Token.STRING)  {	  if(c.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
82	[BUG]  [BUGGY]  if(c.getType()  ==  Token.GETPROP  ||  c.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()  ==  Token.GETPROP  ||  c.getType()  ==  Token.BLOCK)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()  ==  Token.GETPROP  ||  c.getType()  ==  Token.BLOCK)  {	  if(c.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
83	[BUG]  [BUGGY]  if(c.getType()  ==  Token.GETPROP  ||  c.getType()  ==  Token.SEMI)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()  ==  Token.GETPROP  ||  c.getType()  ==  Token.SEMI)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()  ==  Token.GETPROP  ||  c.getType()  ==  Token.SEMI)  {	  if(c.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
84	[BUG]  [BUGGY]  if(c.getType()  ==  Token.CATCH  &&  c.getType()  ==  Token.GET)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()  ==  Token.CATCH  &&  c.getType()  ==  Token.GET)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()  ==  Token.CATCH  &&  c.getType()  ==  Token.GET)  {	  if    (c.getType()    ==    Token.CATCH    ||    c.getType()    ==    Token.GET)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
85	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.CATCH  ||  c.getType()!=  Token.GET)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.CATCH  ||  c.getType()!=  Token.GET)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.CATCH  ||  c.getType()!=  Token.GET)  {	  if    (c.getType()    ==    Token.CATCH    ||    c.getType()    ==    Token.GET)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
86	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.SCRIPT)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.SCRIPT)  {	  if    (c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
87	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.STRING  ||  c.getType()!=  Token.SCRIPT)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.STRING  ||  c.getType()!=  Token.SCRIPT)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.STRING  ||  c.getType()!=  Token.SCRIPT)  {	  if    (c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
88	[BUG]  [BUGGY]  if  (c.getType()!=  Token.STRING  ||  c.getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()!=  Token.STRING  ||  c.getType()  ==  Token.SCRIPT)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()!=  Token.STRING  ||  c.getType()  ==  Token.SCRIPT)  {	  if    (c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
89	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.CALL)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.CALL)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.CALL)  {	  if    (c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
90	[BUG]  [BUGGY]  if(c.getType()  ==  Token.CALL  ||  c.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()  ==  Token.CALL  ||  c.getType()  ==  Token.STRING)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()  ==  Token.CALL  ||  c.getType()  ==  Token.STRING)  {	  if    (c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
91	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.STRING  ||  c.getType()!=  Token.CALL)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.STRING  ||  c.getType()!=  Token.CALL)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.STRING  ||  c.getType()!=  Token.CALL)  {	  if    (c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
92	[BUG]  [BUGGY]  if(c.getType()  ==  Token.NAME  &&  c.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()  ==  Token.NAME  &&  c.getType()  ==  Token.STRING)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()  ==  Token.NAME  &&  c.getType()  ==  Token.STRING)  {	  if(c.getType()    ==    Token.NAME    ||    c.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
93	[BUG]  [BUGGY]  if(c.getType()  ==  Token.NAME  ||  c.getType()!=  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()  ==  Token.NAME  ||  c.getType()!=  Token.STRING)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()  ==  Token.NAME  ||  c.getType()!=  Token.STRING)  {	  if(c.getType()    ==    Token.NAME    ||    c.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
94	[BUG]  [BUGGY]  if(c.getType()!=  Token.NAME  ||  c.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()!=  Token.NAME  ||  c.getType()  ==  Token.STRING)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()!=  Token.NAME  ||  c.getType()  ==  Token.STRING)  {	  if(c.getType()    ==    Token.NAME    ||    c.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
95	[BUG]  [BUGGY]  if(c.getType()!=  Token.NAME  &&  c.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()!=  Token.NAME  &&  c.getType()  ==  Token.STRING)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()!=  Token.NAME  &&  c.getType()  ==  Token.STRING)  {	  if(c.getType()    ==    Token.NAME    ||    c.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
96	[BUG]  [BUGGY]  if(c.getType()  ==  Token.NAME  ||  c.getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()  ==  Token.NAME  ||  c.getString().equals( "string "))  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()  ==  Token.NAME  ||  c.getString().equals( "string "))  {	  if(c.getType()    ==    Token.NAME    ||    c.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
97	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.CATCH  &&  c.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.CATCH  &&  c.getType()  ==  Token.GETPROP)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.CATCH  &&  c.getType()  ==  Token.GETPROP)  {	  if    (c.getType()    ==    Token.CATCH    ||    c.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
98	[BUG]  [BUGGY]  if(c.getType()  ==  Token.GETPROP  ||  c.getType()  ==  Token.CATCH)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()  ==  Token.GETPROP  ||  c.getType()  ==  Token.CATCH)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()  ==  Token.GETPROP  ||  c.getType()  ==  Token.CATCH)  {	  if    (c.getType()    ==    Token.CATCH    ||    c.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
99	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.CATCH  ||  c.getType()!=  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.CATCH  ||  c.getType()!=  Token.GETPROP)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.CATCH  ||  c.getType()!=  Token.GETPROP)  {	  if    (c.getType()    ==    Token.CATCH    ||    c.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
100	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.CATCH)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.CATCH)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.CATCH)  {	  if    (c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
101	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.STRING  ||  c.getType()!=  Token.CATCH)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.STRING  ||  c.getType()!=  Token.CATCH)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.STRING  ||  c.getType()!=  Token.CATCH)  {	  if    (c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
102	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()!=  Token.STRING);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()!=  Token.STRING);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()!=  Token.STRING);	  Preconditions.checkState(c.getType()    ==    Token.STRING);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
103	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.NAME);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.NAME);	  Preconditions.checkState(c.getType()    ==    Token.STRING);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
104	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.GET);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.GET);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.GET);	  Preconditions.checkState(c.getType()    ==    Token.STRING);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
105	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.STRING);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.STRING);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.STRING);	  Preconditions.checkState(c.getType()    ==    Token.STRING);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
106	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING,  c.getString());  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING,  c.getString());  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.STRING,  c.getString());	  Preconditions.checkState(c.getType()    ==    Token.STRING);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
107	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.BLOCK);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.BLOCK);	  Preconditions.checkState(c.getType()    ==    Token.STRING);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
108	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.NAME  &&  c.getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.NAME  &&  c.getType()  ==  Token.SCRIPT)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.NAME  &&  c.getType()  ==  Token.SCRIPT)  {	  if    (c.getType()    ==    Token.NAME    ||    c.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
109	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.NAME  ||  c.getType()!=  Token.SCRIPT)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.NAME  ||  c.getType()!=  Token.SCRIPT)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.NAME  ||  c.getType()!=  Token.SCRIPT)  {	  if    (c.getType()    ==    Token.NAME    ||    c.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
110	[BUG]  [BUGGY]  if(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.EXPR_RESULT)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.EXPR_RESULT)  {	  if(c.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
111	[BUG]  [BUGGY]  if  (c  ==  null  ||  c.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c  ==  null  ||  c.getType()  ==  Token.STRING)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c  ==  null  ||  c.getType()  ==  Token.STRING)  {	  if    (c!=    null    ||    c.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
112	[BUG]  [BUGGY]  if  (c!=  null  &&  c.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c!=  null  &&  c.getType()  ==  Token.STRING)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c!=  null  &&  c.getType()  ==  Token.STRING)  {	  if    (c!=    null    ||    c.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
113	[BUG]  [BUGGY]  if  (c  >=  null  ||  c.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c  >=  null  ||  c.getType()  ==  Token.STRING)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c  >=  null  ||  c.getType()  ==  Token.STRING)  {	  if    (c!=    null    ||    c.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
114	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.FUNCTION)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.FUNCTION)  {	  if    (c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
115	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.STRING  ||  c.getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.STRING  ||  c.getType()!=  Token.FUNCTION)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.STRING  ||  c.getType()!=  Token.FUNCTION)  {	  if    (c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
116	[BUG]  [BUGGY]  if(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.STRING)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.STRING)  {	  if    (c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
117	[BUG]  [BUGGY]  Context  cc  =  c.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Context  cc  =  c.getCurrentContext();  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Context  cc  =  c.getCurrentContext();	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
118	[BUG]  [BUGGY]  Context  cc  =(context  ==  Context.START_OF_EXPR)?  context.getCurrentContext()  :  context;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Context  cc  =(context  ==  Context.START_OF_EXPR)?  context.getCurrentContext()  :  context;  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Context  cc  =(context  ==  Context.START_OF_EXPR)?  context.getCurrentContext()  :  context;	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
119	[BUG]  [BUGGY]  Context  cc  =(context  ==  Context.END_OF_EXPR)?  context.getCurrentContext()  :  context;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Context  cc  =(context  ==  Context.END_OF_EXPR)?  context.getCurrentContext()  :  context;  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Context  cc  =(context  ==  Context.END_OF_EXPR)?  context.getCurrentContext()  :  context;	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
120	[BUG]  [BUGGY]  Context  cc  =(context  ==  Context.END_OBJECTLIT)?  context.getCurrentContext()  :  context;  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Context  cc  =(context  ==  Context.END_OBJECTLIT)?  context.getCurrentContext()  :  context;  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Context  cc  =(context  ==  Context.END_OBJECTLIT)?  context.getCurrentContext()  :  context;	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
121	[BUG]  [BUGGY]  Context  cc  =(context  ==  Context.START_OF_EXPR)?  context.getCurrentContext()  :  null;  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Context  cc  =(context  ==  Context.START_OF_EXPR)?  context.getCurrentContext()  :  null;  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Context  cc  =(context  ==  Context.START_OF_EXPR)?  context.getCurrentContext()  :  null;	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
122	[BUG]  [BUGGY]  Context  cc  =(context  ==  Context.BLOCK)?  context.getCurrentContext()  :  context;  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Context  cc  =(context  ==  Context.BLOCK)?  context.getCurrentContext()  :  context;  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Context  cc  =(context  ==  Context.BLOCK)?  context.getCurrentContext()  :  context;	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
123	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.SEMI)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.SEMI)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.SEMI)  {	  if    (c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.SEMI)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
124	[BUG]  [BUGGY]  if(c.getType()  ==  Token.SEMI  ||  c.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()  ==  Token.SEMI  ||  c.getType()  ==  Token.STRING)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()  ==  Token.SEMI  ||  c.getType()  ==  Token.STRING)  {	  if    (c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.SEMI)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
125	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.STRING  ||  c.getType()!=  Token.SEMI)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.STRING  ||  c.getType()!=  Token.SEMI)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.STRING  ||  c.getType()!=  Token.SEMI)  {	  if    (c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.SEMI)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
126	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.CATCH  &&  c.getType()  ==  Token.SEMI)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.CATCH  &&  c.getType()  ==  Token.SEMI)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.CATCH  &&  c.getType()  ==  Token.SEMI)  {	  if    (c.getType()    ==    Token.CATCH    ||    c.getType()    ==    Token.SEMI)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
127	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.CATCH  ||  c.getType()!=  Token.SEMI)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.CATCH  ||  c.getType()!=  Token.SEMI)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.CATCH  ||  c.getType()!=  Token.SEMI)  {	  if    (c.getType()    ==    Token.CATCH    ||    c.getType()    ==    Token.SEMI)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
128	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.SEMI  ||  c.getType()  ==  Token.CATCH)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.SEMI  ||  c.getType()  ==  Token.CATCH)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.SEMI  ||  c.getType()  ==  Token.CATCH)  {	  if    (c.getType()    ==    Token.CATCH    ||    c.getType()    ==    Token.SEMI)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
129	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.CATCH  &&  c.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.CATCH  &&  c.getType()  ==  Token.BLOCK)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.CATCH  &&  c.getType()  ==  Token.BLOCK)  {	  if    (c.getType()    ==    Token.CATCH    ||    c.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
130	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.CATCH  ||  c.getType()!=  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.CATCH  ||  c.getType()!=  Token.BLOCK)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.CATCH  ||  c.getType()!=  Token.BLOCK)  {	  if    (c.getType()    ==    Token.CATCH    ||    c.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
131	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.BLOCK)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.BLOCK)  {	  if    (c.getType()    ==    Token.CATCH    ||    c.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
132	[BUG]  [BUGGY]  if(c.getType()  ==  Token.NAME  &&  c.getType()  ==  Token.GET)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()  ==  Token.NAME  &&  c.getType()  ==  Token.GET)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()  ==  Token.NAME  &&  c.getType()  ==  Token.GET)  {	  if    (c.getType()    ==    Token.NAME    ||    c.getType()    ==    Token.GET)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
133	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.SET)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.SET)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.SET)  {	  if    (c.getType()    ==    Token.NAME    ||    c.getType()    ==    Token.GET)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
134	[BUG]  [BUGGY]  if(c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.NAME)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.NAME)  {	  if    (c.getType()    ==    Token.NAME    ||    c.getType()    ==    Token.GET)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
135	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.NAME)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.NAME)  {	  if    (c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
136	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.STRING  ||  c.getType()!=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.STRING  ||  c.getType()!=  Token.NAME)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.STRING  ||  c.getType()!=  Token.NAME)  {	  if    (c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
137	[BUG]  [BUGGY]  Node  body  =  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Node  body  =  n.getLastChild();  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Node  body  =  n.getLastChild();	  Node    body    =    c.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
138	[BUG]  [BUGGY]  Node  body  =  first.getLastChild();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Node  body  =  first.getLastChild();  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Node  body  =  first.getLastChild();	  Node    body    =    c.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
139	[BUG]  [BUGGY]  Node  body  =  first.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Node  body  =  first.getFirstChild();  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Node  body  =  first.getFirstChild();	  Node    body    =    c.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
140	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.NAME  &&  c.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.NAME  &&  c.getType()  ==  Token.GETPROP)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.NAME  &&  c.getType()  ==  Token.GETPROP)  {	  if    (c.getType()    ==    Token.NAME    ||    c.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
141	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.NAME  ||  c.getType()!=  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.NAME  ||  c.getType()!=  Token.GETPROP)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.NAME  ||  c.getType()!=  Token.GETPROP)  {	  if    (c.getType()    ==    Token.NAME    ||    c.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
142	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.NAME  &&  c.getType()  ==  Token.CALL)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.NAME  &&  c.getType()  ==  Token.CALL)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.NAME  &&  c.getType()  ==  Token.CALL)  {	  if    (c.getType()    ==    Token.NAME    ||    c.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
143	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.NAME  ||  c.getType()!=  Token.CALL)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.NAME  ||  c.getType()!=  Token.CALL)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.NAME  ||  c.getType()!=  Token.CALL)  {	  if    (c.getType()    ==    Token.NAME    ||    c.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
144	[BUG]  [BUGGY]  if(c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.SET)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.SET)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.SET)  {	  if(c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
145	[BUG]  [BUGGY]  if(c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {	  if(c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
146	[BUG]  [BUGGY]  if(c.getType()  ==  Token.STRING  ||  c.getType()!=  Token.SET)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()  ==  Token.STRING  ||  c.getType()!=  Token.SET)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()  ==  Token.STRING  ||  c.getType()!=  Token.SET)  {	  if(c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
147	[BUG]  [BUGGY]  if(c.getType()!=  Token.STRING  ||  c.getType()  ==  Token.SET)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()!=  Token.STRING  ||  c.getType()  ==  Token.SET)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()!=  Token.STRING  ||  c.getType()  ==  Token.SET)  {	  if(c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
148	[BUG]  [BUGGY]  if(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.GET)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.GET)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.GET)  {	  if(c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
149	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.NAME  &&  c.getType()  ==  Token.SEMI)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.NAME  &&  c.getType()  ==  Token.SEMI)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.NAME  &&  c.getType()  ==  Token.SEMI)  {	  if    (c.getType()    ==    Token.NAME    ||    c.getType()    ==    Token.SEMI)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
150	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.NAME  ||  c.getType()!=  Token.SEMI)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.NAME  ||  c.getType()!=  Token.SEMI)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.NAME  ||  c.getType()!=  Token.SEMI)  {	  if    (c.getType()    ==    Token.NAME    ||    c.getType()    ==    Token.SEMI)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
151	[BUG]  [BUGGY]  if(c.getType()!=  Token.NAME  ||  c.getType()  ==  Token.SEMI)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()!=  Token.NAME  ||  c.getType()  ==  Token.SEMI)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()!=  Token.NAME  ||  c.getType()  ==  Token.SEMI)  {	  if    (c.getType()    ==    Token.NAME    ||    c.getType()    ==    Token.SEMI)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
152	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.NAME  &&  c.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.NAME  &&  c.getType()  ==  Token.BLOCK)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.NAME  &&  c.getType()  ==  Token.BLOCK)  {	  if    (c.getType()    ==    Token.NAME    ||    c.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
153	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.NAME  ||  c.getType()!=  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.NAME  ||  c.getType()!=  Token.BLOCK)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.NAME  ||  c.getType()!=  Token.BLOCK)  {	  if    (c.getType()    ==    Token.NAME    ||    c.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
154	[BUG]  [BUGGY]  if  (c.getType()!=  Token.NAME  ||  c.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()!=  Token.NAME  ||  c.getType()  ==  Token.BLOCK)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()!=  Token.NAME  ||  c.getType()  ==  Token.BLOCK)  {	  if    (c.getType()    ==    Token.NAME    ||    c.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
155	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.CATCH);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.CATCH);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.CATCH);	  Preconditions.checkState(c.getType()    ==    Token.CATCH);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
156	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.GET);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.GET);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.GET);	  Preconditions.checkState(c.getType()    ==    Token.CATCH);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
157	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.BLOCK);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.BLOCK);	  Preconditions.checkState(c.getType()    ==    Token.CATCH);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
158	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.NAME);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.NAME);	  Preconditions.checkState(c.getType()    ==    Token.CATCH);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
159	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()!=  Token.CATCH);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()!=  Token.CATCH);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()!=  Token.CATCH);	  Preconditions.checkState(c.getType()    ==    Token.CATCH);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
160	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.SET);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.SET);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.SET);	  Preconditions.checkState(c.getType()    ==    Token.CATCH);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
161	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Node  first  =  n.getFirstChild();  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Node  first  =  n.getFirstChild();	  Node    first    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
162	[BUG]  [BUGGY]  Node  first  =  c.next();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Node  first  =  c.next();  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Node  first  =  c.next();	  Node    first    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
163	[BUG]  [BUGGY]  Node  first  =  c.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Node  first  =  c.removeFirstChild();  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Node  first  =  c.removeFirstChild();	  Node    first    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
164	[BUG]  [BUGGY]  Node  first  =  c.getPreviousChild();  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Node  first  =  c.getPreviousChild();  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Node  first  =  c.getPreviousChild();	  Node    first    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
165	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.GETPROP)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.STRING  &&  c.getType()  ==  Token.GETPROP)  {	  if    (c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
166	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.STRING  ||  c.getType()!=  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.STRING  ||  c.getType()!=  Token.GETPROP)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.STRING  ||  c.getType()!=  Token.GETPROP)  {	  if    (c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
167	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.VAR  ||  c.getType()  ==  Token.STRING);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.VAR  ||  c.getType()  ==  Token.STRING);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.VAR  ||  c.getType()  ==  Token.STRING);	  Preconditions.checkState(c.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
168	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.GETELEM)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.GETELEM)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.GETELEM)  {	  if    (c.getType()    ==    Token.CATCH    ||    c.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
169	[BUG]  [BUGGY]  if(c.getType()  ==  Token.SCRIPT  ||  c.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()  ==  Token.SCRIPT  ||  c.getType()  ==  Token.GETPROP)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()  ==  Token.SCRIPT  ||  c.getType()  ==  Token.GETPROP)  {	  if(c.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
170	[BUG]  [BUGGY]  if  ((  c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.SEMI)&&!NodeUtil.isExpressionNode(c))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  ((  c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.SEMI)&&!NodeUtil.isExpressionNode(c))  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  ((  c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.SEMI)&&!NodeUtil.isExpressionNode(c))  {	  if    (c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.SEMI)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
171	[BUG]  [BUGGY]  if(c.getType()  ==  Token.NAME  ||  c.getChildCount()  ==  2)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()  ==  Token.NAME  ||  c.getChildCount()  ==  2)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()  ==  Token.NAME  ||  c.getChildCount()  ==  2)  {	  if(c.getType()    ==    Token.NAME    ||    c.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
172	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.SCRIPT)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.SCRIPT)  {	  if    (c.getType()    ==    Token.CATCH    ||    c.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
173	[BUG]  [BUGGY]  Node  body  =  c.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Node  body  =  c.removeFirstChild();  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Node  body  =  c.removeFirstChild();	  Node    body    =    c.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
174	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  Node  first  =  c.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  Node  first  =  c.getFirstChild();  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  Node  first  =  c.getFirstChild();	  Node    first    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
175	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.CATCH);  Node  first  =  c.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.CATCH);  Node  first  =  c.getFirstChild();  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.CATCH);  Node  first  =  c.getFirstChild();	  Node    first    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
176	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.GETPROP);  Node  first  =  c.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.GETPROP);  Node  first  =  c.getFirstChild();  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.GETPROP);  Node  first  =  c.getFirstChild();	  Node    first    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
177	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING);  Node  first  =  c.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING);  Node  first  =  c.getFirstChild();  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.STRING);  Node  first  =  c.getFirstChild();	  Node    first    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
178	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.CATCH);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.CATCH);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.CATCH);	  Preconditions.checkState(c.getType()    ==    Token.STRING);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
179	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.FUNCTION);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(c.getType()    ==    Token.STRING);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
180	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(n,  c);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  NodeUtil.copyCurrentStructure(n,  c);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	NodeUtil.copyCurrentStructure(n,  c);	  NodeUtil.copyCurrentStructure(c);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
181	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(context,  c);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  NodeUtil.copyCurrentStructure(context,  c);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	NodeUtil.copyCurrentStructure(context,  c);	  NodeUtil.copyCurrentStructure(c);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
182	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(c,  next);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  NodeUtil.copyCurrentStructure(c,  next);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	NodeUtil.copyCurrentStructure(c,  next);	  NodeUtil.copyCurrentStructure(c);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
183	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.SEMI  ||  c.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.SEMI  ||  c.getType()  ==  Token.NAME)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.SEMI  ||  c.getType()  ==  Token.NAME)  {	  if    (c.getType()    ==    Token.NAME    ||    c.getType()    ==    Token.SEMI)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
184	[BUG]  [BUGGY]  if(c.getType()  ==  Token.GETPROP  ||  c.getType()  ==  Token.SETPROP)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()  ==  Token.GETPROP  ||  c.getType()  ==  Token.SETPROP)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()  ==  Token.GETPROP  ||  c.getType()  ==  Token.SETPROP)  {	  if(c.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
185	[BUG]  [BUGGY]  if(c.getType()  ==  Token.GETPROP  ||  c.getType()  ==  Token.TRY)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()  ==  Token.GETPROP  ||  c.getType()  ==  Token.TRY)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()  ==  Token.GETPROP  ||  c.getType()  ==  Token.TRY)  {	  if(c.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
186	[BUG]  [BUGGY]  Context  cc  =(context  ==  Context.START_OBJECTLIT)?  context.getCurrentContext()  :  context;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Context  cc  =(context  ==  Context.START_OBJECTLIT)?  context.getCurrentContext()  :  context;  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Context  cc  =(context  ==  Context.START_OBJECTLIT)?  context.getCurrentContext()  :  context;	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
187	[BUG]  [BUGGY]  Context  cc  =  context.getCurrentContext(c);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Context  cc  =  context.getCurrentContext(c);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Context  cc  =  context.getCurrentContext(c);	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
188	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.GETELEM)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.GETELEM)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.GETELEM)  {	  if    (c.getType()    ==    Token.NAME    ||    c.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
189	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.SETPROP)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.SETPROP)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.SETPROP)  {	  if    (c.getType()    ==    Token.NAME    ||    c.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
190	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
191	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.BLOCK);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.BLOCK);	  Preconditions.checkState(c.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
192	[BUG]  [BUGGY]  if  ((  c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.SCRIPT)&&  NodeUtil.isExpressionNode(c))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  ((  c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.SCRIPT)&&  NodeUtil.isExpressionNode(c))  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  ((  c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.SCRIPT)&&  NodeUtil.isExpressionNode(c))  {	  if    (c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
193	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.EXPR_RESULT  ||  c.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.EXPR_RESULT  ||  c.getType()  ==  Token.NAME);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.EXPR_RESULT  ||  c.getType()  ==  Token.NAME);	  Preconditions.checkState(c.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
194	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.EXPR_RESULT  ||  c.getType()  ==  Token.CATCH);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.EXPR_RESULT  ||  c.getType()  ==  Token.CATCH);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.EXPR_RESULT  ||  c.getType()  ==  Token.CATCH);	  Preconditions.checkState(c.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
195	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.EXPR_RESULT  ||  c.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.EXPR_RESULT  ||  c.getType()  ==  Token.BLOCK);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.EXPR_RESULT  ||  c.getType()  ==  Token.BLOCK);	  Preconditions.checkState(c.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
196	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.END)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.END)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.END)  {	  if    (c.getType()    ==    Token.NAME    ||    c.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
197	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.CATCH);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.CATCH);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.CATCH);	  Preconditions.checkState(c.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
198	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.FUNCTION);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(c.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
199	[BUG]  [BUGGY]  if(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.SETS)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.SETS)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.SETS)  {	  if(c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
200	[BUG]  [BUGGY]  if(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.START)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.START)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.START)  {	  if(c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.SET)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
201	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.BLOCK  ||  c.getType()  ==  Token.CATCH)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.BLOCK  ||  c.getType()  ==  Token.CATCH)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.BLOCK  ||  c.getType()  ==  Token.CATCH)  {	  if    (c.getType()    ==    Token.CATCH    ||    c.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
202	[BUG]  [BUGGY]  if  ((  c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.BLOCK)&&!NodeUtil.isExpressionNode(c))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  ((  c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.BLOCK)&&!NodeUtil.isExpressionNode(c))  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  ((  c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.BLOCK)&&!NodeUtil.isExpressionNode(c))  {	  if    (c.getType()    ==    Token.CATCH    ||    c.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
203	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.GETPROP  ||  c.getType()  ==  Token.SETPROP);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.GETPROP  ||  c.getType()  ==  Token.SETPROP);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.GETPROP  ||  c.getType()  ==  Token.SETPROP);	  Preconditions.checkState(c.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
204	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.GETPROP  ||  c.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.GETPROP  ||  c.getType()  ==  Token.BLOCK);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.GETPROP  ||  c.getType()  ==  Token.BLOCK);	  Preconditions.checkState(c.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
205	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.GETPROP  ||  c.getType()  ==  Token.STRING);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.GETPROP  ||  c.getType()  ==  Token.STRING);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.GETPROP  ||  c.getType()  ==  Token.STRING);	  Preconditions.checkState(c.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
206	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.GETPROP  ||  c.getType()  ==  Token.CATCH);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.GETPROP  ||  c.getType()  ==  Token.CATCH);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.GETPROP  ||  c.getType()  ==  Token.CATCH);	  Preconditions.checkState(c.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
207	[BUG]  [BUGGY]  Node  first  =  c.getPrevious();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Node  first  =  c.getPrevious();  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Node  first  =  c.getPrevious();	  Node    first    =    c.getNext();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
208	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.GETELEM)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.GETELEM)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.GETELEM)  {	  if    (c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
209	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.SETPROP)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.SETPROP)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.SETPROP)  {	  if    (c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
210	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.STRING);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.STRING);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.STRING);	  Preconditions.checkState(c.getType()    ==    Token.CATCH);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
211	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.FUNCTION);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(c.getType()    ==    Token.CATCH);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
212	[BUG]  [BUGGY]  if(c.getType()!=  Token.STRING  ||  c.getType()  ==  Token.CATCH)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()!=  Token.STRING  ||  c.getType()  ==  Token.CATCH)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()!=  Token.STRING  ||  c.getType()  ==  Token.CATCH)  {	  if    (c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
213	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.GETPROP,  c.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.GETPROP,  c.getFirstChild());  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.GETPROP,  c.getFirstChild());	  Preconditions.checkState(c.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
214	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.GETPROP  &&  c.getString().equals( "prototype "));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.GETPROP  &&  c.getString().equals( "prototype "));  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.GETPROP  &&  c.getString().equals( "prototype "));	  Preconditions.checkState(c.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
215	[BUG]  [BUGGY]  if(!(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.SEMI))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(!(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.SEMI))  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(!(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.SEMI))  {	  if    (c.getType()    ==    Token.NAME    ||    c.getType()    ==    Token.SEMI)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
216	[BUG]  [BUGGY]  if(c.getType()!=  Token.STRING  ||  c.getType()  ==  Token.ASSIGN)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()!=  Token.STRING  ||  c.getType()  ==  Token.ASSIGN)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()!=  Token.STRING  ||  c.getType()  ==  Token.ASSIGN)  {	  if    (c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.ASSIGN)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
217	[BUG]  [BUGGY]  if(c.getType()!=  Token.STRING  ||  c.getType()  ==  Token.CALL)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()!=  Token.STRING  ||  c.getType()  ==  Token.CALL)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()!=  Token.STRING  ||  c.getType()  ==  Token.CALL)  {	  if    (c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
218	[BUG]  [BUGGY]  Node  first  =  c.getNext()  ||  c.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Node  first  =  c.getNext()  ||  c.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Node  first  =  c.getNext()  ||  c.getFirstChild().getType()  ==  Token.FUNCTION;	  Node    first    =    c.getNext();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
219	[BUG]  [BUGGY]  Node  first  =  c.getNext()  ||  c.getFirstChild().getType()  ==  Token.STRING;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Node  first  =  c.getNext()  ||  c.getFirstChild().getType()  ==  Token.STRING;  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Node  first  =  c.getNext()  ||  c.getFirstChild().getType()  ==  Token.STRING;	  Node    first    =    c.getNext();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
220	[BUG]  [BUGGY]  Node  first  =  c.getNext()  ||  c.getType()  ==  Token.STRING;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Node  first  =  c.getNext()  ||  c.getType()  ==  Token.STRING;  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Node  first  =  c.getNext()  ||  c.getType()  ==  Token.STRING;	  Node    first    =    c.getNext();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
221	[BUG]  [BUGGY]  Node  first  =  c.getNext()  ||  c.getFirstChild().getType()  ==  Token.BLOCK;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Node  first  =  c.getNext()  ||  c.getFirstChild().getType()  ==  Token.BLOCK;  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Node  first  =  c.getNext()  ||  c.getFirstChild().getType()  ==  Token.BLOCK;	  Node    first    =    c.getNext();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
222	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.VAR,  c.getString());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.VAR,  c.getString());  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.VAR,  c.getString());	  Preconditions.checkState(c.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
223	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.VAR  ||  c.getType()  ==  Token.SCRIPT);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.VAR  ||  c.getType()  ==  Token.SCRIPT);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.VAR  ||  c.getType()  ==  Token.SCRIPT);	  Preconditions.checkState(c.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
224	[BUG]  [BUGGY]  if(c.getType()!=  Token.NAME  ||  c.getType()  ==  Token.GET)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()!=  Token.NAME  ||  c.getType()  ==  Token.GET)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()!=  Token.NAME  ||  c.getType()  ==  Token.GET)  {	  if    (c.getType()    ==    Token.NAME    ||    c.getType()    ==    Token.GET)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
225	[BUG]  [BUGGY]  if(c.getType()!=  Token.CATCH  ||  c.getType()  ==  Token.GET)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()!=  Token.CATCH  ||  c.getType()  ==  Token.GET)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()!=  Token.CATCH  ||  c.getType()  ==  Token.GET)  {	  if    (c.getType()    ==    Token.CATCH    ||    c.getType()    ==    Token.GET)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
226	[BUG]  [BUGGY]  if(c.getType()!=  Token.STRING  ||  c.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()!=  Token.STRING  ||  c.getType()  ==  Token.NAME)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()!=  Token.STRING  ||  c.getType()  ==  Token.NAME)  {	  if    (c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
227	[BUG]  [BUGGY]  if(c.getType()!=  Token.NAME  ||  c.getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()!=  Token.NAME  ||  c.getType()  ==  Token.SCRIPT)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()!=  Token.NAME  ||  c.getType()  ==  Token.SCRIPT)  {	  if    (c.getType()    ==    Token.NAME    ||    c.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
228	[BUG]  [BUGGY]  if(c.getType()!=  Token.NAME  ||  c.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()!=  Token.NAME  ||  c.getType()  ==  Token.GETPROP)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()!=  Token.NAME  ||  c.getType()  ==  Token.GETPROP)  {	  if    (c.getType()    ==    Token.NAME    ||    c.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
229	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.GETPROP  &&!NodeUtil.isExpressionNode(c))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.GETPROP  &&!NodeUtil.isExpressionNode(c))  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.GETPROP  &&!NodeUtil.isExpressionNode(c))  {	  if    (c.getType()    ==    Token.NAME    ||    c.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
230	[BUG]  [BUGGY]  if(c.getType()!=  Token.CATCH  ||  c.getType()  ==  Token.SEMI)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()!=  Token.CATCH  ||  c.getType()  ==  Token.SEMI)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()!=  Token.CATCH  ||  c.getType()  ==  Token.SEMI)  {	  if    (c.getType()    ==    Token.CATCH    ||    c.getType()    ==    Token.SEMI)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
231	[BUG]  [BUGGY]  Node  first  =  c.getFirstChild().getNext();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Node  first  =  c.getFirstChild().getNext();  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Node  first  =  c.getFirstChild().getNext();	  Node    first    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
232	[BUG]  [BUGGY]  if(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.VAR)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.VAR)  {	  if(c.getType()    ==    Token.NAME    ||    c.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
233	[BUG]  [BUGGY]  if(c.getType()!=  Token.CATCH  ||  c.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()!=  Token.CATCH  ||  c.getType()  ==  Token.GETPROP)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()!=  Token.CATCH  ||  c.getType()  ==  Token.GETPROP)  {	  if    (c.getType()    ==    Token.CATCH    ||    c.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
234	[BUG]  [BUGGY]  if(!(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.GETPROP))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(!(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.GETPROP))  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(!(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.GETPROP))  {	  if    (c.getType()    ==    Token.CATCH    ||    c.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
235	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.NAME,  c.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.NAME,  c.getFirstChild());  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.NAME,  c.getFirstChild());	  Preconditions.checkState(c.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
236	[BUG]  [BUGGY]  if(c.getType()  ==  Token.CATCH  &&  c.getType()  ==  Token.CATCH)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()  ==  Token.CATCH  &&  c.getType()  ==  Token.CATCH)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()  ==  Token.CATCH  &&  c.getType()  ==  Token.CATCH)  {	  if    (c.getType()    ==    Token.CATCH    ||    c.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
237	[BUG]  [BUGGY]  if(!(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.SCRIPT))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(!(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.SCRIPT))  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(!(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.SCRIPT))  {	  if    (c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
238	[BUG]  [BUGGY]  if(c.getType()!=  Token.STRING  ||  c.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()!=  Token.STRING  ||  c.getType()  ==  Token.GETPROP)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()!=  Token.STRING  ||  c.getType()  ==  Token.GETPROP)  {	  if    (c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
239	[BUG]  [BUGGY]  if(c.getType()  ==  Token.SCRIPT  ||  c.getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()  ==  Token.SCRIPT  ||  c.getType()  ==  Token.VAR)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()  ==  Token.SCRIPT  ||  c.getType()  ==  Token.VAR)  {	  if(c.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
240	[BUG]  [BUGGY]  if(c.getType()!=  Token.STRING  ||  c.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()!=  Token.STRING  ||  c.getType()  ==  Token.FUNCTION)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()!=  Token.STRING  ||  c.getType()  ==  Token.FUNCTION)  {	  if    (c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
241	[BUG]  [BUGGY]  if(c.getType()!=  Token.STRING  ||  c.getType()  ==  Token.SEMI)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()!=  Token.STRING  ||  c.getType()  ==  Token.SEMI)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()!=  Token.STRING  ||  c.getType()  ==  Token.SEMI)  {	  if    (c.getType()    ==    Token.STRING    ||    c.getType()    ==    Token.SEMI)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
242	[BUG]  [BUGGY]  Node  body  =  c.getAncestor(2);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Node  body  =  c.getAncestor(2);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Node  body  =  c.getAncestor(2);	  Node    body    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
243	[BUG]  [BUGGY]  Node  body  =  c.getString();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Node  body  =  c.getString();  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Node  body  =  c.getString();	  Node    body    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
244	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.SET);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.SET);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.SET);	  Preconditions.checkState(c.getType()    ==    Token.STRING);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
245	[BUG]  [BUGGY]  if(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.GETPROP)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.GETPROP)  {	  if    (c.getType()    ==    Token.NAME    ||    c.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
246	[BUG]  [BUGGY]  Context  cc  =(context  ==  Context.STATEMENT)?  context.getCurrentContext()  :  context.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Context  cc  =(context  ==  Context.STATEMENT)?  context.getCurrentContext()  :  context.getCurrentContext();  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Context  cc  =(context  ==  Context.STATEMENT)?  context.getCurrentContext()  :  context.getCurrentContext();	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
247	[BUG]  [BUGGY]  Context  cc  =(context  ==  Context.BLOCK)?  context.getCurrentContext()  :  context.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Context  cc  =(context  ==  Context.BLOCK)?  context.getCurrentContext()  :  context.getCurrentContext();  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Context  cc  =(context  ==  Context.BLOCK)?  context.getCurrentContext()  :  context.getCurrentContext();	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
248	[BUG]  [BUGGY]  Context  cc  =(context  ==  Context.STATEMENT)?  context.getCurrentContext()  :  context;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Context  cc  =(context  ==  Context.STATEMENT)?  context.getCurrentContext()  :  context;  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Context  cc  =(context  ==  Context.STATEMENT)?  context.getCurrentContext()  :  context;	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
249	[BUG]  [BUGGY]  Context  cc  =(context  ==  Context.STATEMENT)?  context.getCurrentContext()  :  null;  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  Context  cc  =(context  ==  Context.STATEMENT)?  context.getCurrentContext()  :  null;  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Context  cc  =(context  ==  Context.STATEMENT)?  context.getCurrentContext()  :  null;	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
250	[BUG]  [BUGGY]  if(c.getType()!=  Token.CATCH  ||  c.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()!=  Token.CATCH  ||  c.getType()  ==  Token.BLOCK)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()!=  Token.CATCH  ||  c.getType()  ==  Token.BLOCK)  {	  if    (c.getType()    ==    Token.CATCH    ||    c.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
251	[BUG]  [BUGGY]  if(c.getType()  ==  Token.GETPROP  &&  c.getString().equals( "prototype "))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()  ==  Token.GETPROP  &&  c.getString().equals( "prototype "))  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()  ==  Token.GETPROP  &&  c.getString().equals( "prototype "))  {	  if(c.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
252	[BUG]  [BUGGY]  if(c.getType()  ==  Token.GETPROP  &&  c.getChildCount()  >  1)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()  ==  Token.GETPROP  &&  c.getChildCount()  >  1)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()  ==  Token.GETPROP  &&  c.getChildCount()  >  1)  {	  if(c.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
253	[BUG]  [BUGGY]  if(c.getType()!=  Token.CATCH  ||  c.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if(c.getType()!=  Token.CATCH  ||  c.getType()  ==  Token.NAME)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()!=  Token.CATCH  ||  c.getType()  ==  Token.NAME)  {	  if    (c.getType()    ==    Token.CATCH    ||    c.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
254	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.NAME  ||  c.getChildCount()  ==  2)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  if  (c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.NAME  ||  c.getChildCount()  ==  2)  {  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.NAME  ||  c.getChildCount()  ==  2)  {	  if    (c.getType()    ==    Token.CATCH    ||    c.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
255	[BUG]  [BUGGY]  NodeUtil.removeChild(c);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  NodeUtil.removeChild(c);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	NodeUtil.removeChild(c);	  NodeUtil.copyCurrentStructure(c);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
256	[BUG]  [BUGGY]  NodeUtil.clearCurrentStructure(c);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {      [BUGGY]  NodeUtil.clearCurrentStructure(c);  [BUGGY]      cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	NodeUtil.clearCurrentStructure(c);	  NodeUtil.copyCurrentStructure(c);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
