bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {    [BUGGY]  if  (c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.NAME)  {  [BUGGY]    cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.NAME)  {	  if    (c.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
2	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {    [BUGGY]  if  (c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.GETPROP)  {  [BUGGY]    cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.GETPROP)  {	  if    (c.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
3	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.CALL)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {    [BUGGY]  if  (c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.CALL)  {  [BUGGY]    cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.CALL)  {	  if    (c.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
4	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {    [BUGGY]  if  (c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.FUNCTION)  {  [BUGGY]    cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.FUNCTION)  {	  if    (c.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
5	[BUG]  [BUGGY]  Node  first  =  c.getNext();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {    [BUGGY]  Node  first  =  c.getNext();  [BUGGY]    cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Node  first  =  c.getNext();	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
6	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {    [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.NAME);  [BUGGY]    cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.NAME);	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
7	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {    [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.EXPR_RESULT);	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
8	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {    [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.FUNCTION);  [BUGGY]    cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.FUNCTION);	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
9	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {    [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING);  [BUGGY]    cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.STRING);	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
10	[BUG]  [BUGGY]  Context  cc  =  context.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {    [BUGGY]  Context  cc  =  context.getCurrentContext();  [BUGGY]    cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Context  cc  =  context.getCurrentContext();	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
11	[BUG]  [BUGGY]  Node  first  =  c.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]    add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {    [BUGGY]  Node  first  =  c.getFirstChild();  [BUGGY]    cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Node  first  =  c.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
12	[BUG]  [BUGGY]  if(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {    [BUGGY]  if(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.STRING)  {  [BUGGY]    cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.STRING)  {	  if    (c    ==    first)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
13	[BUG]  [BUGGY]  if(c.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {    [BUGGY]  if(c.getType()  ==  Token.GETPROP)  {  [BUGGY]    cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()  ==  Token.GETPROP)  {	  if    (c    ==    first)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
14	[BUG]  [BUGGY]  if(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {    [BUGGY]  if(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.FUNCTION)  {  [BUGGY]    cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.FUNCTION)  {	  if    (c    ==    first)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
15	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.CATCH)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {    [BUGGY]  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.CATCH)  {  [BUGGY]    cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.CATCH)  {	  if    (c!=    first    ||    c.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
16	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.CATCH)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {    [BUGGY]  if  (c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.CATCH)  {  [BUGGY]    cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.CATCH)  {	  if    (c!=    first    ||    c.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
17	[BUG]  [BUGGY]  if  (c  ==  first  ||  c.getType()  ==  Token.CATCH)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {    [BUGGY]  if  (c  ==  first  ||  c.getType()  ==  Token.CATCH)  {  [BUGGY]    cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c  ==  first  ||  c.getType()  ==  Token.CATCH)  {	  if    (c!=    first    ||    c.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
18	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.GET)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {    [BUGGY]  if  (c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.GET)  {  [BUGGY]    cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.GET)  {	  if    (c!=    first    ||    c.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
19	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.CATCH)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {    [BUGGY]  if  (c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.CATCH)  {  [BUGGY]    cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.CATCH)  {	  if    (c!=    first    ||    c.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
20	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {    [BUGGY]  if  (c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.GETPROP)  {  [BUGGY]    cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.GETPROP)  {	  if    (c!=    first    ||    c.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
21	[BUG]  [BUGGY]  if  (c  ==  first  ||  c.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {    [BUGGY]  if  (c  ==  first  ||  c.getType()  ==  Token.NAME)  {  [BUGGY]    cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c  ==  first  ||  c.getType()  ==  Token.NAME)  {	  if    (c!=    first    ||    c.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
22	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.CALL)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {    [BUGGY]  if  (c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.CALL)  {  [BUGGY]    cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.CALL)  {	  if    (c!=    first    ||    c.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
23	[BUG]  [BUGGY]  if  (c  ==  first  ||  c.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {    [BUGGY]  if  (c  ==  first  ||  c.getType()  ==  Token.STRING)  {  [BUGGY]    cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c  ==  first  ||  c.getType()  ==  Token.STRING)  {	  if    (c!=    first    ||    c.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
24	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {    [BUGGY]  if  (c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.STRING)  {  [BUGGY]    cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.STRING)  {	  if    (c!=    first    ||    c.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
25	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.GET)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {    [BUGGY]  if  (c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.GET)  {  [BUGGY]    cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.GET)  {	  if    (c.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
26	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {    [BUGGY]  if  (c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.BLOCK)  {  [BUGGY]    cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.BLOCK)  {	  if    (c.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
27	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.CATCH);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {    [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.CATCH);  [BUGGY]    cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.CATCH);	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
28	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {    [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.GETPROP);  [BUGGY]    cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.GETPROP);	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
29	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {    [BUGGY]  if  (c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.SCRIPT)  {  [BUGGY]    cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.SCRIPT)  {	  if    (c.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
30	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.CATCH  ||  c!=  first)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {    [BUGGY]  if  (c.getType()  ==  Token.CATCH  ||  c!=  first)  {  [BUGGY]    cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.CATCH  ||  c!=  first)  {	  if    (c!=    first    ||    c.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
31	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {    [BUGGY]  if  (c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.GETPROP)  {  [BUGGY]    cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.GETPROP)  {	  if    (c!=    first    ||    c.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
32	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.SEMI)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {    [BUGGY]  if  (c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.SEMI)  {  [BUGGY]    cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.SEMI)  {	  if    (c!=    first    ||    c.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
33	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.SEMI)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {    [BUGGY]  if  (c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.SEMI)  {  [BUGGY]    cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.SEMI)  {	  if    (c!=    first    ||    c.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
34	[BUG]  [BUGGY]  if  (c!=  null  ||  c.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {    [BUGGY]  if  (c!=  null  ||  c.getType()  ==  Token.STRING)  {  [BUGGY]    cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c!=  null  ||  c.getType()  ==  Token.STRING)  {	  if    (c!=    first    ||    c.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
35	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.CATCH)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {    [BUGGY]  if  (c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.CATCH)  {  [BUGGY]    cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.CATCH)  {	  if    (c.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
36	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {    [BUGGY]  if  (c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.SCRIPT)  {  [BUGGY]    cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.SCRIPT)  {	  if    (c.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
37	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.SEMI)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {    [BUGGY]  if  (c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.SEMI)  {  [BUGGY]    cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.SEMI)  {	  if    (c.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
38	[BUG]  [BUGGY]  if(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.SET)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {    [BUGGY]  if(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.SET)  {  [BUGGY]    cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.SET)  {	  if    (c.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
39	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.ASSIGN)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {    [BUGGY]  if  (c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.ASSIGN)  {  [BUGGY]    cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.NAME  ||  c.getType()  ==  Token.ASSIGN)  {	  if    (c!=    first    ||    c.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
40	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {    [BUGGY]  if  (c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.BLOCK)  {  [BUGGY]    cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.BLOCK)  {	  if    (c!=    first    ||    c.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
41	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {    [BUGGY]  if  (c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.NAME)  {  [BUGGY]    cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.NAME)  {	  if    (c!=    first    ||    c.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
42	[BUG]  [BUGGY]  if  (c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.ASSIGN)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {    [BUGGY]  if  (c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.ASSIGN)  {  [BUGGY]    cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if  (c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.ASSIGN)  {	  if    (c!=    first    ||    c.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
43	[BUG]  [BUGGY]  if(c.getType()  ==  Token.CATCH)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {    [BUGGY]  if(c.getType()  ==  Token.CATCH)  {  [BUGGY]    cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()  ==  Token.CATCH)  {	  if    (c    ==    first)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
44	[BUG]  [BUGGY]  if(c.getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {    [BUGGY]  if(c.getType()  ==  Token.SCRIPT)  {  [BUGGY]    cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()  ==  Token.SCRIPT)  {	  if    (c    ==    first)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
45	[BUG]  [BUGGY]  if(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {    [BUGGY]  if(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.STRING)  {  [BUGGY]    cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	if(c.getType()  ==  Token.CATCH  ||  c.getType()  ==  Token.STRING)  {	  if    (c    ==    first)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
46	[BUG]  [BUGGY]  Node  body  =  c.getFirstChild();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {    [BUGGY]  Node  body  =  c.getFirstChild();  [BUGGY]    cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Node  body  =  c.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
47	[BUG]  [BUGGY]  Node  body  =  c.getLastChild();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {    [BUGGY]  Node  body  =  c.getLastChild();  [BUGGY]    cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Node  body  =  c.getLastChild();	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
48	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(c);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {    [BUGGY]  NodeUtil.copyCurrentStructure(c);  [BUGGY]    cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	NodeUtil.copyCurrentStructure(c);	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
49	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");  for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {    [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.VAR);  [BUGGY]    cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();    [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.31622776601683794	654	654	1	replace	Preconditions.checkState(c.getType()  ==  Token.VAR);	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
