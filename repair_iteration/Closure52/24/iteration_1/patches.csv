bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING)  {  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  if(n.getType()  ==  Token.STRING)  {  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(n.getType()  ==  Token.STRING)  {  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }	  Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
2	[BUG]  [BUGGY]  if(childCount  ==  1)  {  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  if(childCount  ==  1)  {  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(childCount  ==  1)  {  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }	  Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
3	[BUG]  [BUGGY]  if(childCount  ==  1)  {  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  if(childCount  ==  1)  {  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(childCount  ==  1)  {  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
4	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING)  {  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  add(first);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  if(n.getType()  ==  Token.STRING)  {  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  add(first);  }  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(n.getType()  ==  Token.STRING)  {  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  add(first);  }	  Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
5	[BUG]  [BUGGY]  add(context  ==  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  add(context  ==  Context.START_OF_EXPR);  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add(context  ==  Context.START_OF_EXPR);	  Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
6	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING)  {  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  if(n.getType()  ==  Token.STRING)  {  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(n.getType()  ==  Token.STRING)  {  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }	  Preconditions.checkState(childCount    ==    2);    add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
7	[BUG]  [BUGGY]  if(childCount  ==  2)  {  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  if(childCount  ==  2)  {  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(childCount  ==  2)  {  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }	  Preconditions.checkState(childCount    ==    2);    add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
8	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING)  {  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  else  {  add(first);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  if(n.getType()  ==  Token.STRING)  {  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  else  {  add(first);  }  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(n.getType()  ==  Token.STRING)  {  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  else  {  add(first);  }	  Preconditions.checkState(childCount    ==    2);    add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
9	[BUG]  [BUGGY]  add( "  <  OBJECTLIT> ");  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  add( "  <  OBJECTLIT> ");  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <  OBJECTLIT> ");	  add(   "    <       ");    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
10	[BUG]  [BUGGY]  add( "  <  / ");  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  add( "  <  / ");  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <  / ");	  add(   "    <       ");    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
11	[BUG]  [BUGGY]  cc.listSeparator();  add(context  ==  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  cc.listSeparator();  add(context  ==  Context.START_OF_EXPR);  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.listSeparator();  add(context  ==  Context.START_OF_EXPR);	  add(   "    <       ");    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
12	[BUG]  [BUGGY]  add( "  <!(n.getType()  ==  Token.GET  ||  first.getType()  ==  Token.STRING));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  add( "  <!(n.getType()  ==  Token.GET  ||  first.getType()  ==  Token.STRING));  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <!(n.getType()  ==  Token.GET  ||  first.getType()  ==  Token.STRING));	  add(   "    <       ");    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
13	[BUG]  [BUGGY]  add( "  <!(n.getType()  ==  Token.GET  ||  first.getType()  ==  Token.NAME));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  add( "  <!(n.getType()  ==  Token.GET  ||  first.getType()  ==  Token.NAME));  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <!(n.getType()  ==  Token.GET  ||  first.getType()  ==  Token.NAME));	  add(   "    <       ");    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
14	[BUG]  [BUGGY]  add( "  {  hasElseClause  }   ");  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  add( "  {  hasElseClause  }   ");  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  hasElseClause  }   ");	  add(   "    {    n   ");    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
15	[BUG]  [BUGGY]  add( "  {  n,  hasElseClause  }   ");  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  add( "  {  n,  hasElseClause  }   ");  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  n,  hasElseClause  }   ");	  add(   "    {    n   ");    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
16	[BUG]  [BUGGY]  add( "  {  1  }   ");  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  add( "  {  1  }   ");  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  1  }   ");	  add(   "    {    n   ");    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
17	[BUG]  [BUGGY]  add( "  {  node  }   ");  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  add( "  {  node  }   ");  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  node  }   ");	  add(   "    {    n   ");    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
18	[BUG]  [BUGGY]  add( "  {  first  }   ");  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  add( "  {  first  }   ");  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  first  }   ");	  add(   "    {    n   ");    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
19	[BUG]  [BUGGY]  Preconditions.checkState(childCount!=  0);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  Preconditions.checkState(childCount!=  0);  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount!=  0);	  Preconditions.checkState(childCount    ==    0);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
20	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  3);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  Preconditions.checkState(childCount  ==  3);  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  3);	  Preconditions.checkState(childCount    ==    0);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
21	[BUG]  [BUGGY]  Preconditions.checkState(childCount!=  1);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  Preconditions.checkState(childCount!=  1);  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount!=  1);	  Preconditions.checkState(childCount    ==    0);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
22	[BUG]  [BUGGY]  cc.setSeparator(n);  add( "  {   ");  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  cc.setSeparator(n);  add( "  {   ");  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.setSeparator(n);  add( "  {   ");	  cc.listSeparator();    add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
23	[BUG]  [BUGGY]  cc.detachFromParent();  add( "  {   ");  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  cc.detachFromParent();  add( "  {   ");  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.detachFromParent();  add( "  {   ");	  cc.listSeparator();    add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
24	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2  -  childCount);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  Preconditions.checkState(childCount  ==  2  -  childCount);  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  2  -  childCount);	  Preconditions.checkState(childCount    ==    2);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
25	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2  -  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  Preconditions.checkState(childCount  ==  2  -  1);  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  2  -  1);	  Preconditions.checkState(childCount    ==    2);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
26	[BUG]  [BUGGY]  Preconditions.checkState(childCount!=  2);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  Preconditions.checkState(childCount!=  2);  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount!=  2);	  Preconditions.checkState(childCount    ==    2);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
27	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  Node  first  =  n.getFirstChild();  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Node  first  =  n.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
28	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  add( "delete ");  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  Preconditions.checkState(childCount  ==  1);  add( "delete ");  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  1);  add( "delete ");	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
29	[BUG]  [BUGGY]  Node  first  =  n.getNext();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  Node  first  =  n.getNext();  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Node  first  =  n.getNext();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
30	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  add(first);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  Node  first  =  n.getFirstChild();  add(first);  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Node  first  =  n.getFirstChild();  add(first);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
31	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getIndex();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  int  childCount  =  n.getFirstChild().getIndex();  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	int  childCount  =  n.getFirstChild().getIndex();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
32	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  Node  first  =  n.getLastChild();  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Node  first  =  n.getLastChild();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
33	[BUG]  [BUGGY]  cc.setSeparator(context  ==  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  cc.setSeparator(context  ==  Context.START_OF_EXPR);  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.setSeparator(context  ==  Context.START_OF_EXPR);	  cc.listSeparator();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
34	[BUG]  [BUGGY]  cc.setSeparator(n);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  cc.setSeparator(n);  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.setSeparator(n);	  cc.listSeparator();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
35	[BUG]  [BUGGY]  cc.addChildToFront(first);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  cc.addChildToFront(first);  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.addChildToFront(first);	  cc.listSeparator();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
36	[BUG]  [BUGGY]  cc.setSeparator(context  ==  Context.START_OBJECTLIT);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  cc.setSeparator(context  ==  Context.START_OBJECTLIT);  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.setSeparator(context  ==  Context.START_OBJECTLIT);	  cc.listSeparator();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
37	[BUG]  [BUGGY]  cc.setSeparator(context  ==  Context.END_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  cc.setSeparator(context  ==  Context.END_OF_EXPR);  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.setSeparator(context  ==  Context.END_OF_EXPR);	  cc.listSeparator();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
38	[BUG]  [BUGGY]  cc.setSeparator(context  ==  Context.END_OBJECTLIT);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  cc.setSeparator(context  ==  Context.END_OBJECTLIT);  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.setSeparator(context  ==  Context.END_OBJECTLIT);	  cc.listSeparator();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
39	[BUG]  [BUGGY]  add( "[0]  {  0  }   ");  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  add( "[0]  {  0  }   ");  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "[0]  {  0  }   ");	  add(   "    {    0    }       ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
40	[BUG]  [BUGGY]  add( "  {  0  }   ",  needsParens);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  add( "  {  0  }   ",  needsParens);  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  needsParens);	  add(   "    {    0    }       ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
41	[BUG]  [BUGGY]  add( "  {  0  }   ",  context);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  add( "  {  0  }   ",  context);  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  context);	  add(   "    {    0    }       ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
42	[BUG]  [BUGGY]  add( "  <  0  }   ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  add( "  <  0  }   ");  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <  0  }   ");	  add(   "    {    0    }       ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
43	[BUG]  [BUGGY]  add( "  {  0  }  [ ");  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  add( "  {  0  }  [ ");  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }  [ ");	  add(   "    {    0    }       ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
44	[BUG]  [BUGGY]  add( "  {  }  n ");  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  add( "  {  }  n ");  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  }  n ");	  add(   "    {    }       ");    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
45	[BUG]  [BUGGY]  add( "  {  }   ",  needsParens);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  add( "  {  }   ",  needsParens);  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  }   ",  needsParens);	  add(   "    {    }       ");    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
46	[BUG]  [BUGGY]  add( "  {  }   ",  n.getFirstChild());  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  add( "  {  }   ",  n.getFirstChild());  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  }   ",  n.getFirstChild());	  add(   "    {    }       ");    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
47	[BUG]  [BUGGY]  add( "  {  }, ");  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  add( "  {  }, ");  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  }, ");	  add(   "    {    }       ");    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
48	[BUG]  [BUGGY]  add( "  {  }   ",  n);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  add( "  {  }   ",  n);  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  }   ",  n);	  add(   "    {    }       ");    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
49	[BUG]  [BUGGY]  n.add(context  ==  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  n.add(context  ==  Context.START_OF_EXPR);  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add(context  ==  Context.START_OF_EXPR);	  n.add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
50	[BUG]  [BUGGY]  n.add(context  ==  Context.END_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  n.add(context  ==  Context.END_OF_EXPR);  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add(context  ==  Context.END_OF_EXPR);	  n.add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
51	[BUG]  [BUGGY]  n.add( "  {  1  }   ");  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  n.add( "  {  1  }   ");  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add( "  {  1  }   ");	  n.add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
52	[BUG]  [BUGGY]  n.add(context  ==  Context.END_OBJECTLIT);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  n.add(context  ==  Context.END_OBJECTLIT);  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add(context  ==  Context.END_OBJECTLIT);	  n.add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
53	[BUG]  [BUGGY]  n.add(context  ==  Context.END_OF_OBJECTLIT);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  n.add(context  ==  Context.END_OF_OBJECTLIT);  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add(context  ==  Context.END_OF_OBJECTLIT);	  n.add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
54	[BUG]  [BUGGY]  Preconditions.checkState(childCount  >=  1);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  Preconditions.checkState(childCount  >=  1);  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  >=  1);	  Preconditions.checkState(childCount    ==    1);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
55	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1  -  childCount);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  Preconditions.checkState(childCount  ==  1  -  childCount);  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  1  -  childCount);	  Preconditions.checkState(childCount    ==    1);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
56	[BUG]  [BUGGY]  add( "  {  OBJECTLIT  }   ");  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  add( "  {  OBJECTLIT  }   ");  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  OBJECTLIT  }   ");	  add(   "    {    n   ");    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
57	[BUG]  [BUGGY]  add( "  {  OBJECTLIT:   ");  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  add( "  {  OBJECTLIT:   ");  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  OBJECTLIT:   ");	  add(   "    {    n   ");    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
58	[BUG]  [BUGGY]  add( "  {  OBJECTLIT  <   ");  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  add( "  {  OBJECTLIT  <   ");  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  OBJECTLIT  <   ");	  add(   "    {    n   ");    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
59	[BUG]  [BUGGY]  add( "  {  OBJECTLIT:  {   ");  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  add( "  {  OBJECTLIT:  {   ");  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  OBJECTLIT:  {   ");	  add(   "    {    n   ");    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
60	[BUG]  [BUGGY]  cc.addChildToBack(first);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  cc.addChildToBack(first);  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.addChildToBack(first);	  cc.listSeparator();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
61	[BUG]  [BUGGY]  cc.detachFromParent();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  cc.detachFromParent();  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.detachFromParent();	  cc.listSeparator();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
62	[BUG]  [BUGGY]  add( "  {  }   ",  hasElseClause);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  add( "  {  }   ",  hasElseClause);  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  }   ",  hasElseClause);	  add(   "    {    }       ");    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
63	[BUG]  [BUGGY]  add( "  {  }   ",  context);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  add( "  {  }   ",  context);  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  }   ",  context);	  add(   "    {    }       ");    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
64	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  0);  add( "  {   ");  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  Preconditions.checkState(childCount  ==  0);  add( "  {   ");  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  0);  add( "  {   ");	  Preconditions.checkState(childCount    ==    2);    add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
65	[BUG]  [BUGGY]  if(childCount  ==  2)  {  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  if(childCount  ==  2)  {  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(childCount  ==  2)  {  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  Preconditions.checkState(childCount    ==    2);    add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
66	[BUG]  [BUGGY]  add( "  <   ",  hasElseClause);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  add( "  <   ",  hasElseClause);  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <   ",  hasElseClause);	  add(   "    <       ");    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
67	[BUG]  [BUGGY]  add( "  <  n ");  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  add( "  <  n ");  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <  n ");	  add(   "    <       ");    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
68	[BUG]  [BUGGY]  add( "  <!(needsParens)? ");  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  add( "  <!(needsParens)? ");  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <!(needsParens)? ");	  add(   "    <       ");    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
69	[BUG]  [BUGGY]  add( "  {  0  }   ",  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  add( "  {  0  }   ",  Context.START_OF_EXPR);  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  Context.START_OF_EXPR);	  add(   "    {    0    }       ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
70	[BUG]  [BUGGY]  add( "  {  0  }   ",  hasElseClause);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  add( "  {  0  }   ",  hasElseClause);  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  hasElseClause);	  add(   "    {    0    }       ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
71	[BUG]  [BUGGY]  add( "  {  0  }  hasElseClause   ");  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  add( "  {  0  }  hasElseClause   ");  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }  hasElseClause   ");	  add(   "    {    0    }       ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
72	[BUG]  [BUGGY]  add( ")  {  0  }   ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  add( ")  {  0  }   ");  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( ")  {  0  }   ");	  add(   "    {    0    }       ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
73	[BUG]  [BUGGY]  if(needsParens)  {  cc.listSeparator();  add( "  {   ");  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  if(needsParens)  {  cc.listSeparator();  add( "  {   ");  }  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(needsParens)  {  cc.listSeparator();  add( "  {   ");  }	  cc.listSeparator();    add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
74	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n))  {  cc.listSeparator();  add( "  {   ");  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  if(NodeUtil.isExpressionNode(n))  {  cc.listSeparator();  add( "  {   ");  }  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(NodeUtil.isExpressionNode(n))  {  cc.listSeparator();  add( "  {   ");  }	  cc.listSeparator();    add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
75	[BUG]  [BUGGY]  if(needsParens)  {  cc.listSeparator();  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "] ");  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  if(needsParens)  {  cc.listSeparator();  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "] ");  }  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(needsParens)  {  cc.listSeparator();  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "] ");  }	  cc.listSeparator();    add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
76	[BUG]  [BUGGY]  if(needsParens)  {  cc.listSeparator();  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "  <   ");  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  if(needsParens)  {  cc.listSeparator();  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "  <   ");  }  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(needsParens)  {  cc.listSeparator();  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "  <   ");  }	  cc.listSeparator();    add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
77	[BUG]  [BUGGY]  Preconditions.checkState(childCount  >=  0);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  Preconditions.checkState(childCount  >=  0);  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  >=  0);	  Preconditions.checkState(childCount    ==    0);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
78	[BUG]  [BUGGY]  if(needsParens)  {  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  if(needsParens)  {  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(needsParens)  {  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }	  Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
79	[BUG]  [BUGGY]  if(needsParens)  {  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "  <   ");  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  if(needsParens)  {  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "  <   ");  }  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(needsParens)  {  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "  <   ");  }	  Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
80	[BUG]  [BUGGY]  if(needsParens)  {  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "] ");  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  if(needsParens)  {  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "] ");  }  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(needsParens)  {  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "] ");  }	  Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
81	[BUG]  [BUGGY]  n.remove( "  {   ");  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  n.remove( "  {   ");  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.remove( "  {   ");	  n.add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
82	[BUG]  [BUGGY]  n.add( "  <   ");  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  n.add( "  <   ");  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add( "  <   ");	  n.add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
83	[BUG]  [BUGGY]  n.add( "  {  }   ");  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  n.add( "  {  }   ");  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add( "  {  }   ");	  n.add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
84	[BUG]  [BUGGY]  n.add( "  }   ");  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  n.add( "  }   ");  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add( "  }   ");	  n.add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
85	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  add( "remove ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  Preconditions.checkState(childCount  ==  1);  add( "remove ");  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  1);  add( "remove ");	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
86	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  4);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  Preconditions.checkState(childCount  ==  4);  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  4);	  Preconditions.checkState(childCount    ==    1);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
87	[BUG]  [BUGGY]  Preconditions.checkState(childCount  <  1);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  Preconditions.checkState(childCount  <  1);  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  <  1);	  Preconditions.checkState(childCount    ==    1);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
88	[BUG]  [BUGGY]  add( "  {  }   ",  Context.STATEMENT);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  add( "  {  }   ",  Context.STATEMENT);  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  }   ",  Context.STATEMENT);	  add(   "    {    }       ");    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
89	[BUG]  [BUGGY]  if(childCount  ==  2)  {  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  else  {  Context.report(JSError.make(context,  IN_FOR_INIT_CLAUSE));  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  if(childCount  ==  2)  {  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  else  {  Context.report(JSError.make(context,  IN_FOR_INIT_CLAUSE));  }  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(childCount  ==  2)  {  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  else  {  Context.report(JSError.make(context,  IN_FOR_INIT_CLAUSE));  }	  Preconditions.checkState(childCount    ==    2);    add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
90	[BUG]  [BUGGY]  if(childCount  ==  2)  {  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  if(childCount  ==  2)  {  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(childCount  ==  2)  {  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }	  Preconditions.checkState(childCount    ==    2);    add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
91	[BUG]  [BUGGY]  if(context  ==  Context.START_OF_EXPR)  {  cc.listSeparator();  add( "  {   ");  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  if(context  ==  Context.START_OF_EXPR)  {  cc.listSeparator();  add( "  {   ");  }  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(context  ==  Context.START_OF_EXPR)  {  cc.listSeparator();  add( "  {   ");  }	  cc.listSeparator();    add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
92	[BUG]  [BUGGY]  if(childCount  ==  1)  {  cc.listSeparator();  add( "  {   ");  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  if(childCount  ==  1)  {  cc.listSeparator();  add( "  {   ");  }  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(childCount  ==  1)  {  cc.listSeparator();  add( "  {   ");  }	  cc.listSeparator();    add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
93	[BUG]  [BUGGY]  add( "  <   ").append(context  ==  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  add( "  <   ").append(context  ==  Context.START_OF_EXPR);  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <   ").append(context  ==  Context.START_OF_EXPR);	  add(   "    <       ");    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
94	[BUG]  [BUGGY]  add( "  <   ").append(context  ==  Context.END_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  add( "  <   ").append(context  ==  Context.END_OF_EXPR);  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <   ").append(context  ==  Context.END_OF_EXPR);	  add(   "    <       ");    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
95	[BUG]  [BUGGY]  add( "  <   ").append(context  ==  Context.STATEMENT);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  add( "  <   ").append(context  ==  Context.STATEMENT);  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <   ").append(context  ==  Context.STATEMENT);	  add(   "    <       ");    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
96	[BUG]  [BUGGY]  add( "  <   ").append(context  ==  Context.END_OBJECTLIT);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  add( "  <   ").append(context  ==  Context.END_OBJECTLIT);  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <   ").append(context  ==  Context.END_OBJECTLIT);	  add(   "    <       ");    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
97	[BUG]  [BUGGY]  Node  first  =  getFirstChild();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  Node  first  =  getFirstChild();  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Node  first  =  getFirstChild();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
98	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  add( "delete ");  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  Preconditions.checkState(childCount  ==  2);  add( "delete ");  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  2);  add( "delete ");	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
99	[BUG]  [BUGGY]  if(needsParens)  {  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  Context.checkState(context  ==  Context.START_OF_EXPR);  add( "] ");  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  if(needsParens)  {  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  Context.checkState(context  ==  Context.START_OF_EXPR);  add( "] ");  }  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(needsParens)  {  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  Context.checkState(context  ==  Context.START_OF_EXPR);  add( "] ");  }	  Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
100	[BUG]  [BUGGY]  if(childCount  ==  1)  {  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  Context.report(JSError.make(context,  IN_FOR_INIT_CLAUSE));  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  if(childCount  ==  1)  {  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  Context.report(JSError.make(context,  IN_FOR_INIT_CLAUSE));  }  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(childCount  ==  1)  {  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  Context.report(JSError.make(context,  IN_FOR_INIT_CLAUSE));  }	  Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
101	[BUG]  [BUGGY]  add( "  {  0  }   ",  context.getCurrentNode());  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  add( "  {  0  }   ",  context.getCurrentNode());  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  context.getCurrentNode());	  add(   "    {    0    }       ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
102	[BUG]  [BUGGY]  add( "  {  0  }   ",  Context.STATEMENT);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  add( "  {  0  }   ",  Context.STATEMENT);  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  Context.STATEMENT);	  add(   "    {    0    }       ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
103	[BUG]  [BUGGY]  add( "  {  0  }   ",  context.getRootContext());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  add( "  {  0  }   ",  context.getRootContext());  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  context.getRootContext());	  add(   "    {    0    }       ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
104	[BUG]  [BUGGY]  add( "  {  0  }   ",  context.getRootNode());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  add( "  {  0  }   ",  context.getRootNode());  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  context.getRootNode());	  add(   "    {    0    }       ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
105	[BUG]  [BUGGY]  Preconditions.checkState(childCount  <=  0);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  Preconditions.checkState(childCount  <=  0);  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  <=  0);	  Preconditions.checkState(childCount    ==    0);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
106	[BUG]  [BUGGY]  n.add(context  ==  Context.STATEMENT);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  n.add(context  ==  Context.STATEMENT);  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add(context  ==  Context.STATEMENT);	  n.add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
107	[BUG]  [BUGGY]  n.add(context  ==  Context.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  n.add(context  ==  Context.EXPR_RESULT);  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add(context  ==  Context.EXPR_RESULT);	  n.add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
108	[BUG]  [BUGGY]  add( "  {  n:n ");  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  add( "  {  n:n ");  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  n:n ");	  add(   "    {    n   ");    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
109	[BUG]  [BUGGY]  cc.getParent().replaceChild(n,  Node.newString(Token.NAME,  key));  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  cc.getParent().replaceChild(n,  Node.newString(Token.NAME,  key));  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.getParent().replaceChild(n,  Node.newString(Token.NAME,  key));	  cc.listSeparator();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
110	[BUG]  [BUGGY]  cc.getParent().replaceChild(n,  Node.newString(Token.NAME));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  cc.getParent().replaceChild(n,  Node.newString(Token.NAME));  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.getParent().replaceChild(n,  Node.newString(Token.NAME));	  cc.listSeparator();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
111	[BUG]  [BUGGY]  cc.setSeparator(null);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }    [BUGGY]  cc.setSeparator(null);  [BUGGY]    for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.setSeparator(null);	  cc.listSeparator();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
