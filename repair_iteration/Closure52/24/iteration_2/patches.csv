bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "  <   ");  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "  <   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "  <   ");  }	  if(needsParens)    {    Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    }    else    {    Preconditions.checkState(childCount    ==    1);    add(   "    <       ");    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
2	[BUG]  [BUGGY]  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "  <   ");  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "  <   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "  <   ");  }	  if(needsParens)    {    Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    }    else    {    Preconditions.checkState(childCount    ==    1);    add(   "    <       ");    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
3	[BUG]  [BUGGY]  add( "  {   ");  }  else  if(context  ==  Context.START_OF_EXPR)  {  Preconditions.checkState(childCount  ==  1);  add( "  <   ");  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {   ");  }  else  if(context  ==  Context.START_OF_EXPR)  {  Preconditions.checkState(childCount  ==  1);  add( "  <   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {   ");  }  else  if(context  ==  Context.START_OF_EXPR)  {  Preconditions.checkState(childCount  ==  1);  add( "  <   ");  }	  if(needsParens)    {    Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    }    else    {    Preconditions.checkState(childCount    ==    1);    add(   "    <       ");    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
4	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "  <   ");  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "  <   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "  <   ");  }	  if(needsParens)    {    Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    }    else    {    Preconditions.checkState(childCount    ==    1);    add(   "    <       ");    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
5	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  if(context  ==  Context.START_OF_EXPR)  {  add( "  <   ");  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  if(context  ==  Context.START_OF_EXPR)  {  add( "  <   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  if(context  ==  Context.START_OF_EXPR)  {  add( "  <   ");  }	  if(needsParens)    {    Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    }    else    {    Preconditions.checkState(childCount    ==    1);    add(   "    <       ");    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
6	[BUG]  [BUGGY]  add( "  {  0  }   ",  n.getCurrentNode());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  n.getCurrentNode());  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  n.getCurrentNode());	  add(   "    {    0    }       ",    context.getCurrentNode());    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
7	[BUG]  [BUGGY]  add( "  {  0  }   ",  context.getCurrentNode(),  needsParens);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  context.getCurrentNode(),  needsParens);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  context.getCurrentNode(),  needsParens);	  add(   "    {    0    }       ",    context.getCurrentNode());    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
8	[BUG]  [BUGGY]  add( "  {  0  }   ",  first.getCurrentNode());  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  first.getCurrentNode());  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  first.getCurrentNode());	  add(   "    {    0    }       ",    context.getCurrentNode());    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
9	[BUG]  [BUGGY]  add( "  {  0  }   ",  context.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  context.getFirstChild());  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  context.getFirstChild());	  add(   "    {    0    }       ",    context.getCurrentNode());    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
10	[BUG]  [BUGGY]  add( "  {  0  }   ",  context.getLastChild());  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  context.getLastChild());  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  context.getLastChild());	  add(   "    {    0    }       ",    context.getCurrentNode());    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
11	[BUG]  [BUGGY]  add( "  {  0  }   ",  context.getCurrentNode(),  false);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  context.getCurrentNode(),  false);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  context.getCurrentNode(),  false);	  add(   "    {    0    }       ",    context.getCurrentNode());    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
12	[BUG]  [BUGGY]  cc.setSeparator(context!=  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.setSeparator(context!=  Context.START_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.setSeparator(context!=  Context.START_OF_EXPR);	  cc.setSeparator(null);    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
13	[BUG]  [BUGGY]  cc.setSeparator(context  ==  Context.STATEMENT);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.setSeparator(context  ==  Context.STATEMENT);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.setSeparator(context  ==  Context.STATEMENT);	  cc.setSeparator(null);    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
14	[BUG]  [BUGGY]  cc.setSeparator(context  ==  Context.TEXT_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.setSeparator(context  ==  Context.TEXT_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.setSeparator(context  ==  Context.TEXT_OF_EXPR);	  cc.setSeparator(context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
15	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1)  {  cc.listSeparator();  add( "  {   ");  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  1)  {  cc.listSeparator();  add( "  {   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  1)  {  cc.listSeparator();  add( "  {   ");  }	  if(childCount    ==    1)    {    cc.listSeparator();    add(   "    {       ");    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
16	[BUG]  [BUGGY]  int  childCount  =  cc.getSeparator();  add( "  {   ");  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  int  childCount  =  cc.getSeparator();  add( "  {   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	int  childCount  =  cc.getSeparator();  add( "  {   ");	  if(childCount    ==    1)    {    cc.listSeparator();    add(   "    {       ");    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
17	[BUG]  [BUGGY]  int  childCount  =  cc.listSeparator();  add( "  {   ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  int  childCount  =  cc.listSeparator();  add( "  {   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	int  childCount  =  cc.listSeparator();  add( "  {   ");	  if(childCount    ==    1)    {    cc.listSeparator();    add(   "    {       ");    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
18	[BUG]  [BUGGY]  n.add(context  ==  Context.START_OF_OBJECTLIT);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add(context  ==  Context.START_OF_OBJECTLIT);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add(context  ==  Context.START_OF_OBJECTLIT);	  n.add(context    ==    Context.END_OF_OBJECTLIT);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
19	[BUG]  [BUGGY]  n.add(context  ==  Context.END_OF_OBJECTLIT,  first);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add(context  ==  Context.END_OF_OBJECTLIT,  first);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add(context  ==  Context.END_OF_OBJECTLIT,  first);	  n.add(context    ==    Context.END_OF_OBJECTLIT);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
20	[BUG]  [BUGGY]  n.add(context!=  Context.END_OF_OBJECTLIT);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add(context!=  Context.END_OF_OBJECTLIT);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add(context!=  Context.END_OF_OBJECTLIT);	  n.add(context    ==    Context.END_OF_OBJECTLIT);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
21	[BUG]  [BUGGY]  n.add(context  ==  Context.END_OF_OBJECTLIT  ||  context  ==  Context.END_OF_ELSE);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add(context  ==  Context.END_OF_OBJECTLIT  ||  context  ==  Context.END_OF_ELSE);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add(context  ==  Context.END_OF_OBJECTLIT  ||  context  ==  Context.END_OF_ELSE);	  n.add(context    ==    Context.END_OF_OBJECTLIT);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
22	[BUG]  [BUGGY]  n.add(context  ==  Context.END_OF_OBJECTLIT  ||  context  ==  Context.END_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add(context  ==  Context.END_OF_OBJECTLIT  ||  context  ==  Context.END_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add(context  ==  Context.END_OF_OBJECTLIT  ||  context  ==  Context.END_OF_EXPR);	  n.add(context    ==    Context.END_OF_OBJECTLIT);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
23	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1  -  1);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  1  -  1);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  1  -  1);	  Preconditions.checkState(childCount    ==    1    -    childCount);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
24	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1  -  childCount  +  1);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  1  -  childCount  +  1);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  1  -  childCount  +  1);	  Preconditions.checkState(childCount    ==    1    -    childCount);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
25	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1  -  first);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  1  -  first);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  1  -  first);	  Preconditions.checkState(childCount    ==    1    -    childCount);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
26	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1  -  2);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  1  -  2);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  1  -  2);	  Preconditions.checkState(childCount    ==    1    -    childCount);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
27	[BUG]  [BUGGY]  n.add(context  ==  Context.STATEMENT  ||  context  ==  Context.STATEMENT);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add(context  ==  Context.STATEMENT  ||  context  ==  Context.STATEMENT);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add(context  ==  Context.STATEMENT  ||  context  ==  Context.STATEMENT);	  n.add(context    ==    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
28	[BUG]  [BUGGY]  n.add(context  ==  Context.STATEMENT  ||  context  ==  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add(context  ==  Context.STATEMENT  ||  context  ==  Context.START_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add(context  ==  Context.STATEMENT  ||  context  ==  Context.START_OF_EXPR);	  n.add(context    ==    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
29	[BUG]  [BUGGY]  n.add(context  ==  Context.STATEMENT  ||  context  ==  Context.IN_FOR_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add(context  ==  Context.STATEMENT  ||  context  ==  Context.IN_FOR_INIT_CLAUSE);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add(context  ==  Context.STATEMENT  ||  context  ==  Context.IN_FOR_INIT_CLAUSE);	  n.add(context    ==    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
30	[BUG]  [BUGGY]  n.add(context!=  Context.STATEMENT);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add(context!=  Context.STATEMENT);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add(context!=  Context.STATEMENT);	  n.add(context    ==    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
31	[BUG]  [BUGGY]  n.add(context  ==  Context.STATEMENT  +  1);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add(context  ==  Context.STATEMENT  +  1);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add(context  ==  Context.STATEMENT  +  1);	  n.add(context    ==    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
32	[BUG]  [BUGGY]  add( "  {  n: ");  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  n: ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  n: ");	  add(   "    {    n:n   ");    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
33	[BUG]  [BUGGY]  add( "  {  n:0 ");  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  n:0 ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  n:0 ");	  add(   "    {    n:n   ");    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
34	[BUG]  [BUGGY]  add( "  {  n:0  }   ");  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  n:0  }   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  n:0  }   ");	  add(   "    {    n:n   ");    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
35	[BUG]  [BUGGY]  add( "  {  first:n   ");  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  first:n   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  first:n   ");	  add(   "    {    n:n   ");    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
36	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2  -  childCount  +  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  2  -  childCount  +  1);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  2  -  childCount  +  1);	  Preconditions.checkState(childCount    ==    2    -    childCount);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
37	[BUG]  [BUGGY]  Preconditions.checkState(childCount  >=  2  -  1);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  >=  2  -  1);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  >=  2  -  1);	  Preconditions.checkState(childCount    ==    2    -    childCount);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
38	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2  *  childCount);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  2  *  childCount);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  2  *  childCount);	  Preconditions.checkState(childCount    ==    2    -    childCount);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
39	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2  -  childCount  *  2);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  2  -  childCount  *  2);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  2  -  childCount  *  2);	  Preconditions.checkState(childCount    ==    2    -    childCount);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
40	[BUG]  [BUGGY]  n.add( "  }  else  if(context  ==  Context.START_OF_EXPR)  {  add( "  }   ");  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add( "  }  else  if(context  ==  Context.START_OF_EXPR)  {  add( "  }   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add( "  }  else  if(context  ==  Context.START_OF_EXPR)  {  add( "  }   ");  }	  n.add(   "    }       ");    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
41	[BUG]  [BUGGY]  n.add( "  }  else  if(context  ==  Context.END_OF_EXPR)  {  add( "  }   ");  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add( "  }  else  if(context  ==  Context.END_OF_EXPR)  {  add( "  }   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add( "  }  else  if(context  ==  Context.END_OF_EXPR)  {  add( "  }   ");  }	  n.add(   "    }       ");    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
42	[BUG]  [BUGGY]  add( "  }   ");  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  }   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  }   ");	  n.add(   "    }       ");    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
43	[BUG]  [BUGGY]  n.add( "  }  else  if(context  ==  Context.START_OF_EXPR)  {  add( ");  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add( "  }  else  if(context  ==  Context.START_OF_EXPR)  {  add( ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add( "  }  else  if(context  ==  Context.START_OF_EXPR)  {  add( ");  }	  n.add(   "    }       ");    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
44	[BUG]  [BUGGY]  n.add( "  }  else  if(context  ==  Context.START_OF_EXPR)  {  add(first);  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add( "  }  else  if(context  ==  Context.START_OF_EXPR)  {  add(first);  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add( "  }  else  if(context  ==  Context.START_OF_EXPR)  {  add(first);  }	  n.add(   "    }       ");    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
45	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  cc.setSeparator(n);  add( "  {   ");  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  cc.setSeparator(n);  add( "  {   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(n.getType()  ==  Token.NAME)  {  cc.setSeparator(n);  add( "  {   ");  }	  cc.setSeparator(n);    add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
46	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING)  {  cc.setSeparator(n);  add( "  {   ");  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  if(n.getType()  ==  Token.STRING)  {  cc.setSeparator(n);  add( "  {   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(n.getType()  ==  Token.STRING)  {  cc.setSeparator(n);  add( "  {   ");  }	  cc.setSeparator(n);    add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
47	[BUG]  [BUGGY]  cc.setSeparator(key);  add( "  {   ");  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.setSeparator(key);  add( "  {   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.setSeparator(key);  add( "  {   ");	  cc.setSeparator(n);    add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
48	[BUG]  [BUGGY]  cc.setSeparator(first);  add( "  {   ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.setSeparator(first);  add( "  {   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.setSeparator(first);  add( "  {   ");	  cc.setSeparator(n);    add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
49	[BUG]  [BUGGY]  n.add(context!=  Context.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add(context!=  Context.EXPR_RESULT);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add(context!=  Context.EXPR_RESULT);	  n.add(context    ==    Context.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
50	[BUG]  [BUGGY]  n.add(context  ==  Context.EXPR_RESULT,  first);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add(context  ==  Context.EXPR_RESULT,  first);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add(context  ==  Context.EXPR_RESULT,  first);	  n.add(context    ==    Context.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
51	[BUG]  [BUGGY]  n.add(context  ==  Context.EXPR_RESULT  ||  context  ==  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add(context  ==  Context.EXPR_RESULT  ||  context  ==  Context.START_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add(context  ==  Context.EXPR_RESULT  ||  context  ==  Context.START_OF_EXPR);	  n.add(context    ==    Context.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
52	[BUG]  [BUGGY]  n.add(context  ==  Context.EXPR_RESULT  ||  context  ==  Context.END_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add(context  ==  Context.EXPR_RESULT  ||  context  ==  Context.END_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add(context  ==  Context.EXPR_RESULT  ||  context  ==  Context.END_OF_EXPR);	  n.add(context    ==    Context.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
53	[BUG]  [BUGGY]  n.add(context  ==  Context.EXPR_RESULT  ||  context  ==  Context.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add(context  ==  Context.EXPR_RESULT  ||  context  ==  Context.EXPR_RESULT);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add(context  ==  Context.EXPR_RESULT  ||  context  ==  Context.EXPR_RESULT);	  n.add(context    ==    Context.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
54	[BUG]  [BUGGY]  Node  first  =  context.getLastChild();  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Node  first  =  context.getLastChild();  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Node  first  =  context.getLastChild();	  Node    first    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
55	[BUG]  [BUGGY]  Node  first  =  context.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Node  first  =  context.getFirstChild();  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Node  first  =  context.getFirstChild();	  Node    first    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
56	[BUG]  [BUGGY]  Node  first  =  node.getLastChild();  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Node  first  =  node.getLastChild();  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Node  first  =  node.getLastChild();	  Node    first    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
57	[BUG]  [BUGGY]  Node  first  =  context.nextChild();  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Node  first  =  context.nextChild();  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Node  first  =  context.nextChild();	  Node    first    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
58	[BUG]  [BUGGY]  add( "  {  0  }  needsParens   ");  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }  needsParens   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }  needsParens   ");	  add(   "    {    0    }    hasElseClause       ");    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
59	[BUG]  [BUGGY]  add( "  {  0  }  hasElseClause: ");  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }  hasElseClause: ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }  hasElseClause: ");	  add(   "    {    0    }    hasElseClause       ");    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
60	[BUG]  [BUGGY]  add( "  {  0  }  hasElse ");  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }  hasElse ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }  hasElse ");	  add(   "    {    0    }    hasElseClause       ");    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
61	[BUG]  [BUGGY]  add( "  {  0  }  hasElseClause; ");  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }  hasElseClause; ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }  hasElseClause; ");	  add(   "    {    0    }    hasElseClause       ");    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
62	[BUG]  [BUGGY]  add( "  {  0  }  hasElseClause ",  context);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }  hasElseClause ",  context);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }  hasElseClause ",  context);	  add(   "    {    0    }    hasElseClause       ");    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
63	[BUG]  [BUGGY]  add( "  {  0  }  hasElseClause, ");  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }  hasElseClause, ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }  hasElseClause, ");	  add(   "    {    0    }    hasElseClause       ");    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
64	[BUG]  [BUGGY]  add( "[OBJECTLIT:  {   ");  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "[OBJECTLIT:  {   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "[OBJECTLIT:  {   ");	  add(   "    {    OBJECTLIT:    {       ");    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
65	[BUG]  [BUGGY]  n.add( "  {  OBJECTLIT:  {   ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add( "  {  OBJECTLIT:  {   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add( "  {  OBJECTLIT:  {   ");	  add(   "    {    OBJECTLIT:    {       ");    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
66	[BUG]  [BUGGY]  add( "  <  OBJECTLIT:  {   ");  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <  OBJECTLIT:  {   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <  OBJECTLIT:  {   ");	  add(   "    {    OBJECTLIT:    {       ");    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
67	[BUG]  [BUGGY]  add( "  {  OBJECTLIT: ",  needsParens);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  OBJECTLIT: ",  needsParens);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  OBJECTLIT: ",  needsParens);	  add(   "    {    OBJECTLIT:    {       ");    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
68	[BUG]  [BUGGY]  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }	  if(childCount    ==    2)    {    add(   "    {       ");    }    else    {    Preconditions.checkState(childCount    ==    2);    add(   "    {       ");    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
69	[BUG]  [BUGGY]  if(childCount  ==  2)  {  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  if(childCount  ==  2)  {  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(childCount  ==  2)  {  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }	  if(childCount    ==    2)    {    add(   "    {       ");    }    else    {    Preconditions.checkState(childCount    ==    2);    add(   "    {       ");    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
70	[BUG]  [BUGGY]  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }	  if(childCount    ==    2)    {    add(   "    {       ");    }    else    {    Preconditions.checkState(childCount    ==    2);    add(   "    {       ");    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
71	[BUG]  [BUGGY]  add(context  ==  Context.END_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add(context  ==  Context.END_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add(context  ==  Context.END_OF_EXPR);	  add(   "    {    },   ");    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
72	[BUG]  [BUGGY]  add( "  {  },n ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  },n ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  },n ");	  add(   "    {    },   ");    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
73	[BUG]  [BUGGY]  Preconditions.checkState(childCount  >  1);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  >  1);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  >  1);	  Preconditions.checkState(childCount    >=    1);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
74	[BUG]  [BUGGY]  Preconditions.checkState(childCount  >>  1);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  >>  1);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  >>  1);	  Preconditions.checkState(childCount    >=    1);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
75	[BUG]  [BUGGY]  Preconditions.checkState(childCount  [Delete]  1);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  [Delete]  1);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  [Delete]  1);	  Preconditions.checkState(childCount    >=    1);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
76	[BUG]  [BUGGY]  add( "  {  0  }   ",  first);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  first);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  first);	  add(   "    {    0    }       ",    context);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
77	[BUG]  [BUGGY]  add( "  {  0  }   ",  context.getJSDocInfo());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  context.getJSDocInfo());  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  context.getJSDocInfo());	  add(   "    {    0    }       ",    context);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
78	[BUG]  [BUGGY]  add( "  {  0  }   ",  childCount);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  childCount);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  childCount);	  add(   "    {    0    }       ",    context);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
79	[BUG]  [BUGGY]  add( "  {  0  }   ",  new  Context(context));  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  new  Context(context));  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  new  Context(context));	  add(   "    {    0    }       ",    context);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
80	[BUG]  [BUGGY]  add( "  {  }   ",  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  }   ",  Context.START_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  }   ",  Context.START_OF_EXPR);	  add(   "    {    }       ",    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
81	[BUG]  [BUGGY]  add( "  {  }   ",  Context.STATEMENT  +  1);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  }   ",  Context.STATEMENT  +  1);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  }   ",  Context.STATEMENT  +  1);	  add(   "    {    }       ",    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
82	[BUG]  [BUGGY]  add( "  {  }   ",  Context.STATEMENT  |  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  }   ",  Context.STATEMENT  |  Context.START_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  }   ",  Context.STATEMENT  |  Context.START_OF_EXPR);	  add(   "    {    }       ",    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
83	[BUG]  [BUGGY]  add( "  {  }   ",  Context.STATEMENT  ||  context  ==  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  }   ",  Context.STATEMENT  ||  context  ==  Context.START_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  }   ",  Context.STATEMENT  ||  context  ==  Context.START_OF_EXPR);	  add(   "    {    }       ",    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
84	[BUG]  [BUGGY]  add( "  {  }   ",  Context.STATEMENT,  needsParens);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  }   ",  Context.STATEMENT,  needsParens);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  }   ",  Context.STATEMENT,  needsParens);	  add(   "    {    }       ",    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
85	[BUG]  [BUGGY]  add( "  {  }   ",  Context.STATEMENT));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  }   ",  Context.STATEMENT));  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  }   ",  Context.STATEMENT));	  add(   "    {    }       ",    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
86	[BUG]  [BUGGY]  add( "  <   ").append(context  ==  Context.STATEMENT  ||  context  ==  Context.STATEMENT);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <   ").append(context  ==  Context.STATEMENT  ||  context  ==  Context.STATEMENT);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <   ").append(context  ==  Context.STATEMENT  ||  context  ==  Context.STATEMENT);	  add(   "    <       ").append(context    ==    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
87	[BUG]  [BUGGY]  add( "  <   ").append(context  ==  Context.STATEMENT));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <   ").append(context  ==  Context.STATEMENT));  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <   ").append(context  ==  Context.STATEMENT));	  add(   "    <       ").append(context    ==    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
88	[BUG]  [BUGGY]  add( "  <   ").append(context  ==  Context.STATEMENT  +  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <   ").append(context  ==  Context.STATEMENT  +  1);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <   ").append(context  ==  Context.STATEMENT  +  1);	  add(   "    <       ").append(context    ==    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
89	[BUG]  [BUGGY]  add( "  <   ").append(context  ==  Context.STATEMENT  ||  context  ==  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <   ").append(context  ==  Context.STATEMENT  ||  context  ==  Context.START_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <   ").append(context  ==  Context.STATEMENT  ||  context  ==  Context.START_OF_EXPR);	  add(   "    <       ").append(context    ==    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
90	[BUG]  [BUGGY]  add( "  <  / ").append(context  ==  Context.STATEMENT);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <  / ").append(context  ==  Context.STATEMENT);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <  / ").append(context  ==  Context.STATEMENT);	  add(   "    <       ").append(context    ==    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
91	[BUG]  [BUGGY]  add( "  <   ").append(context!=  Context.STATEMENT);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <   ").append(context!=  Context.STATEMENT);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <   ").append(context!=  Context.STATEMENT);	  add(   "    <       ").append(context    ==    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
92	[BUG]  [BUGGY]  add( "[0]  {  1  }   ");  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "[0]  {  1  }   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "[0]  {  1  }   ");	  add(   "[0]    {    0    }       ");    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
93	[BUG]  [BUGGY]  add( "[0]  {  0  }   ",  context);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "[0]  {  0  }   ",  context);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "[0]  {  0  }   ",  context);	  add(   "[0]    {    0    }       ");    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
94	[BUG]  [BUGGY]  add( "[0]  ==  0  }   ");  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "[0]  ==  0  }   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "[0]  ==  0  }   ");	  add(   "[0]    {    0    }       ");    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
95	[BUG]  [BUGGY]  add( "[1]  {  0  }   ");  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "[1]  {  0  }   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "[1]  {  0  }   ");	  add(   "[0]    {    0    }       ");    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
96	[BUG]  [BUGGY]  add( "[0]  {  0  }   ",  first);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "[0]  {  0  }   ",  first);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "[0]  {  0  }   ",  first);	  add(   "[0]    {    0    }       ");    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
97	[BUG]  [BUGGY]  add(first,  context  ==  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add(first,  context  ==  Context.START_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add(first,  context  ==  Context.START_OF_EXPR);	  add(context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
98	[BUG]  [BUGGY]  add(context  ==  Context.STATEMENT);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add(context  ==  Context.STATEMENT);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add(context  ==  Context.STATEMENT);	  add(context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
99	[BUG]  [BUGGY]  add(context  ==  Context.TEXT_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add(context  ==  Context.TEXT_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add(context  ==  Context.TEXT_OF_EXPR);	  add(context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
100	[BUG]  [BUGGY]  add(context!=  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add(context!=  Context.START_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add(context!=  Context.START_OF_EXPR);	  add(context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
101	[BUG]  [BUGGY]  add(context  ==  Context.START_OF_EXPR,  n);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add(context  ==  Context.START_OF_EXPR,  n);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add(context  ==  Context.START_OF_EXPR,  n);	  add(context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
102	[BUG]  [BUGGY]  Preconditions.checkState(childCount  >  0);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  >  0);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  >  0);	  Preconditions.checkState(childCount    >=    0);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
103	[BUG]  [BUGGY]  cc.setSeparator(first);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.setSeparator(first);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.setSeparator(first);	  cc.setSeparator(n);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
104	[BUG]  [BUGGY]  cc.setSeparator(context);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.setSeparator(context);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.setSeparator(context);	  cc.setSeparator(n);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
105	[BUG]  [BUGGY]  cc.setSeparator(last);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.setSeparator(last);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.setSeparator(last);	  cc.setSeparator(n);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
106	[BUG]  [BUGGY]  cc.setSeparator(key);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.setSeparator(key);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.setSeparator(key);	  cc.setSeparator(n);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
107	[BUG]  [BUGGY]  cc.setSeparator(n  +  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.setSeparator(n  +  1);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.setSeparator(n  +  1);	  cc.setSeparator(n);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
108	[BUG]  [BUGGY]  cc.setSeparator(n,  context);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.setSeparator(n,  context);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.setSeparator(n,  context);	  cc.setSeparator(n);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
109	[BUG]  [BUGGY]  add( "  <!(hasElse)?   ");  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <!(hasElse)?   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <!(hasElse)?   ");	  add(   "    <!(needsParens)?   ");    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
110	[BUG]  [BUGGY]  add( "  <!(context  ==  Context.START_OF_EXPR)?   ");  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <!(context  ==  Context.START_OF_EXPR)?   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <!(context  ==  Context.START_OF_EXPR)?   ");	  add(   "    <!(needsParens)?   ");    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
111	[BUG]  [BUGGY]  add( "  <!(context  ==  Context.END_OF_EXPR)?   ");  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <!(context  ==  Context.END_OF_EXPR)?   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <!(context  ==  Context.END_OF_EXPR)?   ");	  add(   "    <!(needsParens)?   ");    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
112	[BUG]  [BUGGY]  add( "  <!(body)?   ");  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <!(body)?   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <!(body)?   ");	  add(   "    <!(needsParens)?   ");    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
113	[BUG]  [BUGGY]  add( "  <!(shouldSeparate)?   ");  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <!(shouldSeparate)?   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <!(shouldSeparate)?   ");	  add(   "    <!(needsParens)?   ");    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
114	[BUG]  [BUGGY]  add( "  {  ambiguousElseClause  }   ");  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  ambiguousElseClause  }   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  ambiguousElseClause  }   ");	  add(   "    {    hasElseClause    }       ");    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
115	[BUG]  [BUGGY]  add( "  {  hasElseClause  }  n ");  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  hasElseClause  }  n ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  hasElseClause  }  n ");	  add(   "    {    hasElseClause    }       ");    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
116	[BUG]  [BUGGY]  add( "  {  needsParens  }   ");  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  needsParens  }   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  needsParens  }   ");	  add(   "    {    hasElseClause    }       ");    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
117	[BUG]  [BUGGY]  add( "  {  hasElseClause  }   ",  context);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  hasElseClause  }   ",  context);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  hasElseClause  }   ",  context);	  add(   "    {    hasElseClause    }       ");    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
118	[BUG]  [BUGGY]  add( "  {  hasElseClause  }   ",  needsParens);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  hasElseClause  }   ",  needsParens);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  hasElseClause  }   ",  needsParens);	  add(   "    {    hasElseClause    }       ");    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
119	[BUG]  [BUGGY]  add( "  {  childCount  }   ");  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  childCount  }   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  childCount  }   ");	  add(   "    {    hasElseClause    }       ");    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
120	[BUG]  [BUGGY]  add( "  {  }   ",  first);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  }   ",  first);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  }   ",  first);	  add(   "    {    }       ",    context);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
121	[BUG]  [BUGGY]  add( "  {  }   ",  childCount);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  }   ",  childCount);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  }   ",  childCount);	  add(   "    {    }       ",    context);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
122	[BUG]  [BUGGY]  Preconditions.checkState(childCount  >=  2);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  >=  2);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  >=  2);	  Preconditions.checkState(childCount    ==    2    -    1);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
123	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  2;  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  2;	  Preconditions.checkState(childCount    ==    2    -    1);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
124	[BUG]  [BUGGY]  cc.getParent().replaceChild(context,  Node.newString(Token.NAME,  key));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.getParent().replaceChild(context,  Node.newString(Token.NAME,  key));  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.getParent().replaceChild(context,  Node.newString(Token.NAME,  key));	  cc.getParent().replaceChild(n,    Node.newString(Token.NAME,    key));    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
125	[BUG]  [BUGGY]  cc.getParent().replaceChild(first,  Node.newString(Token.NAME,  key));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.getParent().replaceChild(first,  Node.newString(Token.NAME,  key));  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.getParent().replaceChild(first,  Node.newString(Token.NAME,  key));	  cc.getParent().replaceChild(n,    Node.newString(Token.NAME,    key));    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
126	[BUG]  [BUGGY]  cc.getParent().replaceChild(n,  Node.newString(Token.NAME,  key),  context);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.getParent().replaceChild(n,  Node.newString(Token.NAME,  key),  context);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.getParent().replaceChild(n,  Node.newString(Token.NAME,  key),  context);	  cc.getParent().replaceChild(n,    Node.newString(Token.NAME,    key));    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
127	[BUG]  [BUGGY]  cc.getParent().replaceChild(n,  Node.newString(Token.NAME,  key),  first);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.getParent().replaceChild(n,  Node.newString(Token.NAME,  key),  first);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.getParent().replaceChild(n,  Node.newString(Token.NAME,  key),  first);	  cc.getParent().replaceChild(n,    Node.newString(Token.NAME,    key));    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
128	[BUG]  [BUGGY]  cc.getParent().replaceChild(n,  Node.newString(Token.NAME,  key),  false);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.getParent().replaceChild(n,  Node.newString(Token.NAME,  key),  false);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.getParent().replaceChild(n,  Node.newString(Token.NAME,  key),  false);	  cc.getParent().replaceChild(n,    Node.newString(Token.NAME,    key));    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
129	[BUG]  [BUGGY]  cc.getNext().replaceChild(n,  Node.newString(Token.NAME,  key));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.getNext().replaceChild(n,  Node.newString(Token.NAME,  key));  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.getNext().replaceChild(n,  Node.newString(Token.NAME,  key));	  cc.getParent().replaceChild(n,    Node.newString(Token.NAME,    key));    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
130	[BUG]  [BUGGY]  add(n.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add(n.getFirstChild());  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add(n.getFirstChild());	  Node    first    =    n.getFirstChild();    add(first);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
131	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  add(first);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Node  first  =  n.getLastChild();  add(first);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Node  first  =  n.getLastChild();  add(first);	  Node    first    =    n.getFirstChild();    add(first);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
132	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  add(first,  context);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Node  first  =  n.getFirstChild();  add(first,  context);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Node  first  =  n.getFirstChild();  add(first,  context);	  Node    first    =    n.getFirstChild();    add(first);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
133	[BUG]  [BUGGY]  Node  first  =  context.getFirstChild();  add(first);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Node  first  =  context.getFirstChild();  add(first);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Node  first  =  context.getFirstChild();  add(first);	  Node    first    =    n.getFirstChild();    add(first);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
134	[BUG]  [BUGGY]  add(n.getLastChild());  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add(n.getLastChild());  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add(n.getLastChild());	  Node    first    =    n.getFirstChild();    add(first);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
135	[BUG]  [BUGGY]  add( "  {  n,  needsParens  }   ");  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  n,  needsParens  }   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  n,  needsParens  }   ");	  add(   "    {    n,    hasElseClause    }       ");    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
136	[BUG]  [BUGGY]  add( "  {  node,  hasElseClause  }   ");  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  node,  hasElseClause  }   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  node,  hasElseClause  }   ");	  add(   "    {    n,    hasElseClause    }       ");    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
137	[BUG]  [BUGGY]  add( "  {  first,  hasElseClause  }   ");  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  first,  hasElseClause  }   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  first,  hasElseClause  }   ");	  add(   "    {    n,    hasElseClause    }       ");    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
138	[BUG]  [BUGGY]  add( "  {  n,  haveElseClause  }   ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  n,  haveElseClause  }   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  n,  haveElseClause  }   ");	  add(   "    {    n,    hasElseClause    }       ");    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
139	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }	  if(childCount    ==    2)    {    Preconditions.checkState(childCount    ==    2);    add(   "    {       ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
140	[BUG]  [BUGGY]  add( "  {  node  }  n ");  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  node  }  n ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  node  }  n ");	  add(   "    {    node    }       ");    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
141	[BUG]  [BUGGY]  add( "  {  node  }  ' ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  node  }  ' ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  node  }  ' ");	  add(   "    {    node    }       ");    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
142	[BUG]  [BUGGY]  add( "  {  n  }   ");  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  n  }   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  n  }   ");	  add(   "    {    node    }       ");    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
143	[BUG]  [BUGGY]  cc.setSeparator(context  ==  Context.START_OBJECTLIT  ||  context  ==  Context.START_OBJECTLIT);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.setSeparator(context  ==  Context.START_OBJECTLIT  ||  context  ==  Context.START_OBJECTLIT);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.setSeparator(context  ==  Context.START_OBJECTLIT  ||  context  ==  Context.START_OBJECTLIT);	  cc.setSeparator(context    ==    Context.START_OBJECTLIT);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
144	[BUG]  [BUGGY]  cc.setSeparator(context  ==  Context.START_OBJECTLIT  |  context  ==  Context.START_OBJECTLIT);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.setSeparator(context  ==  Context.START_OBJECTLIT  |  context  ==  Context.START_OBJECTLIT);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.setSeparator(context  ==  Context.START_OBJECTLIT  |  context  ==  Context.START_OBJECTLIT);	  cc.setSeparator(context    ==    Context.START_OBJECTLIT);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
145	[BUG]  [BUGGY]  cc.setSeparator(context  ==  Context.START_OBJECTLIT  ||  context  ==  Context.END_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.setSeparator(context  ==  Context.START_OBJECTLIT  ||  context  ==  Context.END_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.setSeparator(context  ==  Context.START_OBJECTLIT  ||  context  ==  Context.END_OF_EXPR);	  cc.setSeparator(context    ==    Context.START_OBJECTLIT);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
146	[BUG]  [BUGGY]  cc.setSeparator(context!=  Context.START_OBJECTLIT);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.setSeparator(context!=  Context.START_OBJECTLIT);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.setSeparator(context!=  Context.START_OBJECTLIT);	  cc.setSeparator(context    ==    Context.START_OBJECTLIT);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
147	[BUG]  [BUGGY]  add( "  <   ",  needsParens);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <   ",  needsParens);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <   ",  needsParens);	  add(   "    <       ",    hasElseClause);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
148	[BUG]  [BUGGY]  add( "  <   ",  ambiguousElseClause);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <   ",  ambiguousElseClause);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <   ",  ambiguousElseClause);	  add(   "    <       ",    hasElseClause);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
149	[BUG]  [BUGGY]  add( "  <   ",  childCount);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <   ",  childCount);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <   ",  childCount);	  add(   "    <       ",    hasElseClause);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
150	[BUG]  [BUGGY]  add( "  <   ",  hasElseClause,  needsParens);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <   ",  hasElseClause,  needsParens);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <   ",  hasElseClause,  needsParens);	  add(   "    <       ",    hasElseClause);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
151	[BUG]  [BUGGY]  add( "  <   ",  hasElseClause  + "> ");  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <   ",  hasElseClause  + "> ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <   ",  hasElseClause  + "> ");	  add(   "    <       ",    hasElseClause);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
152	[BUG]  [BUGGY]  add( "  <   ",  needParens);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <   ",  needParens);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <   ",  needParens);	  add(   "    <       ",    hasElseClause);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
153	[BUG]  [BUGGY]  Context.checkState(childCount  ==  1);  add( "  {   ");  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Context.checkState(childCount  ==  1);  add( "  {   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Context.checkState(childCount  ==  1);  add( "  {   ");	  if(needsParens)    {    Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
154	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }	  if(needsParens)    {    Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
155	[BUG]  [BUGGY]  Preconditions.checkState(childCount!=  1);  add( "  {   ");  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount!=  1);  add( "  {   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount!=  1);  add( "  {   ");	  if(needsParens)    {    Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
156	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  add( ".  {   ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  1);  add( ".  {   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  1);  add( ".  {   ");	  if(needsParens)    {    Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
157	[BUG]  [BUGGY]  add( "  <!(first.getType()  ==  Token.GET  ||  first.getType()  ==  Token.NAME));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <!(first.getType()  ==  Token.GET  ||  first.getType()  ==  Token.NAME));  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <!(first.getType()  ==  Token.GET  ||  first.getType()  ==  Token.NAME));	  add(   "    <!(n.getType()    ==    Token.GET    ||    first.getType()    ==    Token.NAME));    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
158	[BUG]  [BUGGY]  add( "  <!(first.getType()  ==  Token.GET  ||  second.getType()  ==  Token.NAME));  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <!(first.getType()  ==  Token.GET  ||  second.getType()  ==  Token.NAME));  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <!(first.getType()  ==  Token.GET  ||  second.getType()  ==  Token.NAME));	  add(   "    <!(n.getType()    ==    Token.GET    ||    first.getType()    ==    Token.NAME));    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
159	[BUG]  [BUGGY]  add(first,   "  <!(n.getType()  ==  Token.GET  ||  first.getType()  ==  Token.NAME));  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add(first,   "  <!(n.getType()  ==  Token.GET  ||  first.getType()  ==  Token.NAME));  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add(first,   "  <!(n.getType()  ==  Token.GET  ||  first.getType()  ==  Token.NAME));	  add(   "    <!(n.getType()    ==    Token.GET    ||    first.getType()    ==    Token.NAME));    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
160	[BUG]  [BUGGY]  add( ",  <!(first.getType()  ==  Token.GET  ||  first.getType()  ==  Token.NAME));  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( ",  <!(first.getType()  ==  Token.GET  ||  first.getType()  ==  Token.NAME));  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( ",  <!(first.getType()  ==  Token.GET  ||  first.getType()  ==  Token.NAME));	  add(   "    <!(n.getType()    ==    Token.GET    ||    first.getType()    ==    Token.NAME));    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
161	[BUG]  [BUGGY]  add( "  <!first.getType()  ==  Token.GET  ||  first.getType()  ==  Token.NAME));  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <!first.getType()  ==  Token.GET  ||  first.getType()  ==  Token.NAME));  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <!first.getType()  ==  Token.GET  ||  first.getType()  ==  Token.NAME));	  add(   "    <!(n.getType()    ==    Token.GET    ||    first.getType()    ==    Token.NAME));    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
162	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(childCount    ==    2)    {    Preconditions.checkState(childCount    ==    2);    add(   "    {       ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
163	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(childCount    ==    2)    {    Preconditions.checkState(childCount    ==    2);    add(   "    {       ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
164	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  0);  add( "  {   ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  0);  add( "  {   ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  0);  add( "  {   ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(childCount    ==    2)    {    Preconditions.checkState(childCount    ==    2);    add(   "    {       ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
165	[BUG]  [BUGGY]  Context.checkState(childCount  ==  2);  add( "  {   ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Context.checkState(childCount  ==  2);  add( "  {   ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Context.checkState(childCount  ==  2);  add( "  {   ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(childCount    ==    2)    {    Preconditions.checkState(childCount    ==    2);    add(   "    {       ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
166	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  3  -  1);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  3  -  1);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  3  -  1);	  Preconditions.checkState(childCount    ==    3);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
167	[BUG]  [BUGGY]  Preconditions.checkState(childCount!=  3);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount!=  3);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount!=  3);	  Preconditions.checkState(childCount    ==    3);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
168	[BUG]  [BUGGY]  Context.checkState(childCount  ==  2);  add( "  {   ");  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Context.checkState(childCount  ==  2);  add( "  {   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Context.checkState(childCount  ==  2);  add( "  {   ");	  if(n.getType()    ==    Token.STRING)    {    Preconditions.checkState(childCount    ==    2);    add(   "    {       ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
169	[BUG]  [BUGGY]  add(first);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add(first);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add(first);	  if(n.getType()    ==    Token.STRING)    {    Preconditions.checkState(childCount    ==    2);    add(   "    {       ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
170	[BUG]  [BUGGY]  Context.report(JSError.make(context,  IN_FOR_INIT_CLAUSE));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Context.report(JSError.make(context,  IN_FOR_INIT_CLAUSE));  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Context.report(JSError.make(context,  IN_FOR_INIT_CLAUSE));	  if(childCount    ==    2)    {    Preconditions.checkState(childCount    ==    2);    add(   "    {       ");    }    else    {    Context.report(JSError.make(context,    IN_FOR_INIT_CLAUSE));    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
171	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  else  {  Context.report(JSError.make(context,  IN_FOR_INIT_CLAUSE));  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  else  {  Context.report(JSError.make(context,  IN_FOR_INIT_CLAUSE));  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  else  {  Context.report(JSError.make(context,  IN_FOR_INIT_CLAUSE));  }	  if(childCount    ==    2)    {    Preconditions.checkState(childCount    ==    2);    add(   "    {       ");    }    else    {    Context.report(JSError.make(context,    IN_FOR_INIT_CLAUSE));    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
172	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  Context.report(JSError.make(context,  IN_FOR_INIT_CLAUSE));  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  Context.report(JSError.make(context,  IN_FOR_INIT_CLAUSE));  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  Context.report(JSError.make(context,  IN_FOR_INIT_CLAUSE));  }	  if(childCount    ==    2)    {    Preconditions.checkState(childCount    ==    2);    add(   "    {       ");    }    else    {    Context.report(JSError.make(context,    IN_FOR_INIT_CLAUSE));    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
173	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  0);  add( "  {   ");  }  else  {  Context.report(JSError.make(context,  IN_FOR_INIT_CLAUSE));  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  0);  add( "  {   ");  }  else  {  Context.report(JSError.make(context,  IN_FOR_INIT_CLAUSE));  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  0);  add( "  {   ");  }  else  {  Context.report(JSError.make(context,  IN_FOR_INIT_CLAUSE));  }	  if(childCount    ==    2)    {    Preconditions.checkState(childCount    ==    2);    add(   "    {       ");    }    else    {    Context.report(JSError.make(context,    IN_FOR_INIT_CLAUSE));    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
174	[BUG]  [BUGGY]  add( ")  {  0  }  (context  ==  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( ")  {  0  }  (context  ==  Context.START_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( ")  {  0  }  (context  ==  Context.START_OF_EXPR);	  add(   ")    {    0    }       ");    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
175	[BUG]  [BUGGY]  add( ")  {  0  }  (context  ==  Context.START_OF_EXPR));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( ")  {  0  }  (context  ==  Context.START_OF_EXPR));  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( ")  {  0  }  (context  ==  Context.START_OF_EXPR));	  add(   ")    {    0    }       ");    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
176	[BUG]  [BUGGY]  add( ")  {  0  }  (context  ==  Context.END_OF_OBJECTLIT);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( ")  {  0  }  (context  ==  Context.END_OF_OBJECTLIT);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( ")  {  0  }  (context  ==  Context.END_OF_OBJECTLIT);	  add(   ")    {    0    }       ");    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
177	[BUG]  [BUGGY]  add( ")  {  0  }  (context  ==  Context.END_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( ")  {  0  }  (context  ==  Context.END_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( ")  {  0  }  (context  ==  Context.END_OF_EXPR);	  add(   ")    {    0    }       ");    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
178	[BUG]  [BUGGY]  add( ")  {  0  }  (context  ==  Context.END_OF_EXPR));  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( ")  {  0  }  (context  ==  Context.END_OF_EXPR));  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( ")  {  0  }  (context  ==  Context.END_OF_EXPR));	  add(   ")    {    0    }       ");    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
179	[BUG]  [BUGGY]  add( "  {  },  needsParens   ");  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  },  needsParens   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  },  needsParens   ");	  add(   "    {    }    n   ");    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
180	[BUG]  [BUGGY]  add( "  {  },  needsParens) ");  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  },  needsParens) ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  },  needsParens) ");	  add(   "    {    }    n   ");    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
181	[BUG]  [BUGGY]  add( "  {  },  hasElseClause   ");  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  },  hasElseClause   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  },  hasElseClause   ");	  add(   "    {    }    n   ");    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
182	[BUG]  [BUGGY]  add( "  {  },  needsParens] ");  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  },  needsParens] ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  },  needsParens] ");	  add(   "    {    }    n   ");    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
183	[BUG]  [BUGGY]  add( "  {  },  hasElse   ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  },  hasElse   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  },  hasElse   ");	  add(   "    {    }    n   ");    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
184	[BUG]  [BUGGY]  add( "  <  / ").append(context  ==  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <  / ").append(context  ==  Context.START_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <  / ").append(context  ==  Context.START_OF_EXPR);	  add(   "    <       ").append(context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
185	[BUG]  [BUGGY]  add( "  <   ").append(context  ==  Context.TEXT_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <   ").append(context  ==  Context.TEXT_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <   ").append(context  ==  Context.TEXT_OF_EXPR);	  add(   "    <       ").append(context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
186	[BUG]  [BUGGY]  add( "  <   ").append(context  ==  Context.START_OF_EXPR));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <   ").append(context  ==  Context.START_OF_EXPR));  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <   ").append(context  ==  Context.START_OF_EXPR));	  add(   "    <       ").append(context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
187	[BUG]  [BUGGY]  add( "  <   ").append(context  ==  Context.OBJECTLIT);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <   ").append(context  ==  Context.OBJECTLIT);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <   ").append(context  ==  Context.OBJECTLIT);	  add(   "    <       ").append(context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
188	[BUG]  [BUGGY]  Context.checkState(childCount  ==  1);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Context.checkState(childCount  ==  1);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Context.checkState(childCount  ==  1);	  if(context    ==    Context.START_OF_EXPR)    {    cc.listSeparator();    add(   "    {       ");    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
189	[BUG]  [BUGGY]  Context  cc  =  context.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Context  cc  =  context.getCurrentContext();  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Context  cc  =  context.getCurrentContext();	  if(context    ==    Context.START_OF_EXPR)    {    cc.listSeparator();    add(   "    {       ");    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
190	[BUG]  [BUGGY]  Context  cc  =  context.getContext();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Context  cc  =  context.getContext();  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Context  cc  =  context.getContext();	  if(context    ==    Context.START_OF_EXPR)    {    cc.listSeparator();    add(   "    {       ");    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
191	[BUG]  [BUGGY]  Node  first  =  node.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Node  first  =  node.getFirstChild();  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Node  first  =  node.getFirstChild();	  Node    first    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
192	[BUG]  [BUGGY]  n.add( "  <   ").append(context  ==  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add( "  <   ").append(context  ==  Context.START_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add( "  <   ").append(context  ==  Context.START_OF_EXPR);	  n.add(   "    <       ");    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
193	[BUG]  [BUGGY]  n.add( "  <   ").append(context  ==  Context.END_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add( "  <   ").append(context  ==  Context.END_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add( "  <   ").append(context  ==  Context.END_OF_EXPR);	  n.add(   "    <       ");    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
194	[BUG]  [BUGGY]  n.add( "  <   ").append(context  ==  Context.END_OBJECTLIT);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add( "  <   ").append(context  ==  Context.END_OBJECTLIT);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add( "  <   ").append(context  ==  Context.END_OBJECTLIT);	  n.add(   "    <       ");    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
195	[BUG]  [BUGGY]  if(hasElseClause)  {  if(needsParens)  {  cc.listSeparator();  add( "  {   ");  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  if(hasElseClause)  {  if(needsParens)  {  cc.listSeparator();  add( "  {   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(hasElseClause)  {  if(needsParens)  {  cc.listSeparator();  add( "  {   ");  }	  if(needsParens)    {    cc.listSeparator();    add(   "    {       ");    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
196	[BUG]  [BUGGY]  if(first)  {  if(needsParens)  {  cc.listSeparator();  add( "  {   ");  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  if(first)  {  if(needsParens)  {  cc.listSeparator();  add( "  {   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(first)  {  if(needsParens)  {  cc.listSeparator();  add( "  {   ");  }	  if(needsParens)    {    cc.listSeparator();    add(   "    {       ");    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
197	[BUG]  [BUGGY]  if(hasElseClause)  {  if(!needsParens)  {  cc.listSeparator();  add( "  {   ");  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  if(hasElseClause)  {  if(!needsParens)  {  cc.listSeparator();  add( "  {   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(hasElseClause)  {  if(!needsParens)  {  cc.listSeparator();  add( "  {   ");  }	  if(needsParens)    {    cc.listSeparator();    add(   "    {       ");    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
198	[BUG]  [BUGGY]  if(hasElseClause)  {  if(needsParens)  {  cc.listSeparator();  add( ",  {   ");  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  if(hasElseClause)  {  if(needsParens)  {  cc.listSeparator();  add( ",  {   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(hasElseClause)  {  if(needsParens)  {  cc.listSeparator();  add( ",  {   ");  }	  if(needsParens)    {    cc.listSeparator();    add(   "    {       ");    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
199	[BUG]  [BUGGY]  if(hasElseClause)  {  if(needsParens)  {  cc.listSeparator();  add( ".  {   ");  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  if(hasElseClause)  {  if(needsParens)  {  cc.listSeparator();  add( ".  {   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(hasElseClause)  {  if(needsParens)  {  cc.listSeparator();  add( ".  {   ");  }	  if(needsParens)    {    cc.listSeparator();    add(   "    {       ");    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
200	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  else  {  add(first);  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  else  {  add(first);  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  else  {  add(first);  }	  if(n.getType()    ==    Token.STRING)    {    Preconditions.checkState(childCount    ==    2);    add(   "    {       ");    }    else    {    add(first);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
201	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  else  {  add(context  ==  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  else  {  add(context  ==  Context.START_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  else  {  add(context  ==  Context.START_OF_EXPR);	  if(n.getType()    ==    Token.STRING)    {    Preconditions.checkState(childCount    ==    2);    add(   "    {       ");    }    else    {    add(first);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
202	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  else  {  add(context  ==  Context.START_OF_EXPR);  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  else  {  add(context  ==  Context.START_OF_EXPR);  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  else  {  add(context  ==  Context.START_OF_EXPR);  }	  if(n.getType()    ==    Token.STRING)    {    Preconditions.checkState(childCount    ==    2);    add(   "    {       ");    }    else    {    add(first);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
203	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  else  {  add(context  ==  Context.END_OBJECTLIT);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  else  {  add(context  ==  Context.END_OBJECTLIT);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  else  {  add(context  ==  Context.END_OBJECTLIT);	  if(n.getType()    ==    Token.STRING)    {    Preconditions.checkState(childCount    ==    2);    add(   "    {       ");    }    else    {    add(first);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
204	[BUG]  [BUGGY]  cc.setSeparator(context!=  Context.END_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.setSeparator(context!=  Context.END_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.setSeparator(context!=  Context.END_OF_EXPR);	  cc.setSeparator(context    ==    Context.END_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
205	[BUG]  [BUGGY]  cc.setSeparator(context  ==  Context.END_OF_EXPR  ||  context  ==  Context.END_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.setSeparator(context  ==  Context.END_OF_EXPR  ||  context  ==  Context.END_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.setSeparator(context  ==  Context.END_OF_EXPR  ||  context  ==  Context.END_OF_EXPR);	  cc.setSeparator(context    ==    Context.END_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
206	[BUG]  [BUGGY]  cc.addSeparator(context  ==  Context.END_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.addSeparator(context  ==  Context.END_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.addSeparator(context  ==  Context.END_OF_EXPR);	  cc.setSeparator(context    ==    Context.END_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
207	[BUG]  [BUGGY]  add( "  {  OBJECTLIT  }   ",  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  OBJECTLIT  }   ",  Context.START_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  OBJECTLIT  }   ",  Context.START_OF_EXPR);	  add(   "    {    OBJECTLIT    }       ");    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
208	[BUG]  [BUGGY]  add( "[OBJECTLIT] ");  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "[OBJECTLIT] ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "[OBJECTLIT] ");	  add(   "    {    OBJECTLIT    }       ");    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
209	[BUG]  [BUGGY]  add( "  {  OBJECTLIT  }   ",  context);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  OBJECTLIT  }   ",  context);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  OBJECTLIT  }   ",  context);	  add(   "    {    OBJECTLIT    }       ");    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
210	[BUG]  [BUGGY]  add( "  {  OBJECTLIT  }   ",  first);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  OBJECTLIT  }   ",  first);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  OBJECTLIT  }   ",  first);	  add(   "    {    OBJECTLIT    }       ");    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
211	[BUG]  [BUGGY]  add( "  {  OBJECTLIT  }   ",  needsParens);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  OBJECTLIT  }   ",  needsParens);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  OBJECTLIT  }   ",  needsParens);	  add(   "    {    OBJECTLIT    }       ");    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
212	[BUG]  [BUGGY]  cc.listSeparator();  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "] ");  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.listSeparator();  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "] ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.listSeparator();  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "] ");  }	  if(needsParens)    {    cc.listSeparator();    add(   "    {       ");    }    else    {    Preconditions.checkState(childCount    ==    1);    add(   "]   ");    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
213	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  add( "] ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  1);  add( "] ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  1);  add( "] ");	  if(needsParens)    {    cc.listSeparator();    add(   "    {       ");    }    else    {    Preconditions.checkState(childCount    ==    1);    add(   "]   ");    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
214	[BUG]  [BUGGY]  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "] ");  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "] ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "] ");  }	  if(needsParens)    {    cc.listSeparator();    add(   "    {       ");    }    else    {    Preconditions.checkState(childCount    ==    1);    add(   "]   ");    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
215	[BUG]  [BUGGY]  cc.listSeparator();  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( ".] ");  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.listSeparator();  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( ".] ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.listSeparator();  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( ".] ");  }	  if(needsParens)    {    cc.listSeparator();    add(   "    {       ");    }    else    {    Preconditions.checkState(childCount    ==    1);    add(   "]   ");    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
216	[BUG]  [BUGGY]  cc.listSeparator();  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "  <   ");  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.listSeparator();  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "  <   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.listSeparator();  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "  <   ");  }	  if(needsParens)    {    cc.listSeparator();    add(   "    {       ");    }    else    {    Preconditions.checkState(childCount    ==    1);    add(   "    <       ");    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
217	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  add( "  <   ");  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  1);  add( "  <   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  1);  add( "  <   ");	  if(needsParens)    {    cc.listSeparator();    add(   "    {       ");    }    else    {    Preconditions.checkState(childCount    ==    1);    add(   "    <       ");    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
218	[BUG]  [BUGGY]  cc.listSeparator();  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( ")  <   ");  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.listSeparator();  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( ")  <   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.listSeparator();  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( ")  <   ");  }	  if(needsParens)    {    cc.listSeparator();    add(   "    {       ");    }    else    {    Preconditions.checkState(childCount    ==    1);    add(   "    <       ");    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
219	[BUG]  [BUGGY]  add( "  {  0  }   ",  hasElseClause,  needsParens);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  hasElseClause,  needsParens);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  hasElseClause,  needsParens);	  add(   "    {    0    }       ",    hasElseClause);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
220	[BUG]  [BUGGY]  add( "  {  0  }   ",  needParens);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  needParens);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  needParens);	  add(   "    {    0    }       ",    hasElseClause);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
221	[BUG]  [BUGGY]  add( "  {  }   ",  ambiguousElseClause);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  }   ",  ambiguousElseClause);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  }   ",  ambiguousElseClause);	  add(   "    {    }       ",    hasElseClause);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
222	[BUG]  [BUGGY]  add( "  {  }   ",  hasElseClause,  needsParens);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  }   ",  hasElseClause,  needsParens);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  }   ",  hasElseClause,  needsParens);	  add(   "    {    }       ",    hasElseClause);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
223	[BUG]  [BUGGY]  add( "  {  }   ",  needParens);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  }   ",  needParens);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  }   ",  needParens);	  add(   "    {    }       ",    hasElseClause);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
224	[BUG]  [BUGGY]  if(childCount  ==  1)  {  Preconditions.checkState(childCount  ==  0);  add( "  {   ");  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  if(childCount  ==  1)  {  Preconditions.checkState(childCount  ==  0);  add( "  {   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(childCount  ==  1)  {  Preconditions.checkState(childCount  ==  0);  add( "  {   ");  }	  Preconditions.checkState(childCount    ==    0);    add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
225	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1)  {  add( "  {   ");  }  else  {  Context.report(JSError.make(context,  IN_FOR_INIT_CLAUSE));  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  1)  {  add( "  {   ");  }  else  {  Context.report(JSError.make(context,  IN_FOR_INIT_CLAUSE));  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  1)  {  add( "  {   ");  }  else  {  Context.report(JSError.make(context,  IN_FOR_INIT_CLAUSE));  }	  if(childCount    ==    1)    {    Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    }    else    {    Context.report(JSError.make(context,    IN_FOR_INIT_CLAUSE));    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
226	[BUG]  [BUGGY]  add( "  {  OBJECTLIT: "  +  Integer.toHexString(childCount));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  OBJECTLIT: "  +  Integer.toHexString(childCount));  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  OBJECTLIT: "  +  Integer.toHexString(childCount));	  add(   "    {    OBJECTLIT:       ");    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
227	[BUG]  [BUGGY]  add( "  {  OBJECTLIT: "  +  Integer.toHexString(Integer.toHexString(context));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  OBJECTLIT: "  +  Integer.toHexString(Integer.toHexString(context));  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  OBJECTLIT: "  +  Integer.toHexString(Integer.toHexString(context));	  add(   "    {    OBJECTLIT:       ");    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
228	[BUG]  [BUGGY]  add( "  {  OBJECTLIT: "  +  Integer.toHexString(intValue));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  OBJECTLIT: "  +  Integer.toHexString(intValue));  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  OBJECTLIT: "  +  Integer.toHexString(intValue));	  add(   "    {    OBJECTLIT:       ");    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
229	[BUG]  [BUGGY]  add( "  {  OBJECTLIT: "  +  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  OBJECTLIT: "  +  Context.START_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  OBJECTLIT: "  +  Context.START_OF_EXPR);	  add(   "    {    OBJECTLIT:       ");    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
230	[BUG]  [BUGGY]  add( "delete ");  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "delete ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "delete ");	  Preconditions.checkState(childCount    ==    1);    add(   "delete   ");    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
231	[BUG]  [BUGGY]  Context.checkState(childCount  ==  1);  add( "delete ");  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Context.checkState(childCount  ==  1);  add( "delete ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Context.checkState(childCount  ==  1);  add( "delete ");	  Preconditions.checkState(childCount    ==    1);    add(   "delete   ");    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
232	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  0);  add( "delete ");  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  0);  add( "delete ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  0);  add( "delete ");	  Preconditions.checkState(childCount    ==    1);    add(   "delete   ");    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
233	[BUG]  [BUGGY]  Preconditions.checkState(childCount!=  1);  add( "delete ");  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount!=  1);  add( "delete ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount!=  1);  add( "delete ");	  Preconditions.checkState(childCount    ==    1);    add(   "delete   ");    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
234	[BUG]  [BUGGY]  add( "  {  }   ",  n.getLastChild());  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  }   ",  n.getLastChild());  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  }   ",  n.getLastChild());	  add(   "    {    }       ",    n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
235	[BUG]  [BUGGY]  add( "  {  }   ",  first.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  }   ",  first.getFirstChild());  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  }   ",  first.getFirstChild());	  add(   "    {    }       ",    n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
236	[BUG]  [BUGGY]  add( "  {  }   ",  n.getNext());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  }   ",  n.getNext());  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  }   ",  n.getNext());	  add(   "    {    }       ",    n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
237	[BUG]  [BUGGY]  add( "  {  }   ",  n.getString());  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  }   ",  n.getString());  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  }   ",  n.getString());	  add(   "    {    }       ",    n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
238	[BUG]  [BUGGY]  add( "  {  }   ",  c.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  }   ",  c.getFirstChild());  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  }   ",  c.getFirstChild());	  add(   "    {    }       ",    n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
239	[BUG]  [BUGGY]  add( "  {  }   ",  n.getLineno());  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  }   ",  n.getLineno());  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  }   ",  n.getLineno());	  add(   "    {    }       ",    n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
240	[BUG]  [BUGGY]  add( "  {  first  }  n ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  first  }  n ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  first  }  n ");	  add(   "    {    first    }       ");    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
241	[BUG]  [BUGGY]  add( "  {  first,  needsParens  }   ");  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  first,  needsParens  }   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  first,  needsParens  }   ");	  add(   "    {    first    }       ");    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
242	[BUG]  [BUGGY]  add( "  {  first,  childCount  }   ");  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  first,  childCount  }   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  first,  childCount  }   ");	  add(   "    {    first    }       ");    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
243	[BUG]  [BUGGY]  add( "  {  first  }  ' ");  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  first  }  ' ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  first  }  ' ");	  add(   "    {    first    }       ");    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
244	[BUG]  [BUGGY]  add( "  {  first,  hasElse]  }   ");  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  first,  hasElse]  }   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  first,  hasElse]  }   ");	  add(   "    {    first    }       ");    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
245	[BUG]  [BUGGY]  add( "  <  / ").append(context  ==  Context.END_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <  / ").append(context  ==  Context.END_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <  / ").append(context  ==  Context.END_OF_EXPR);	  add(   "    <       ").append(context    ==    Context.END_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
246	[BUG]  [BUGGY]  add( "  <   ").append(context!=  Context.END_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <   ").append(context!=  Context.END_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <   ").append(context!=  Context.END_OF_EXPR);	  add(   "    <       ").append(context    ==    Context.END_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
247	[BUG]  [BUGGY]  add( "  <   ").append(context  ==  Context.END_OF_EXPR));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <   ").append(context  ==  Context.END_OF_EXPR));  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <   ").append(context  ==  Context.END_OF_EXPR));	  add(   "    <       ").append(context    ==    Context.END_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
248	[BUG]  [BUGGY]  add( "  <  n ").append(context  ==  Context.END_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <  n ").append(context  ==  Context.END_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <  n ").append(context  ==  Context.END_OF_EXPR);	  add(   "    <       ").append(context    ==    Context.END_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
249	[BUG]  [BUGGY]  n.add(context!=  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add(context!=  Context.START_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add(context!=  Context.START_OF_EXPR);	  n.add(context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
250	[BUG]  [BUGGY]  n.add(context  ==  Context.TEXT_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add(context  ==  Context.TEXT_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add(context  ==  Context.TEXT_OF_EXPR);	  n.add(context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
251	[BUG]  [BUGGY]  n.add(context  ==  Context.STRICT_OBJECTLIT);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add(context  ==  Context.STRICT_OBJECTLIT);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add(context  ==  Context.STRICT_OBJECTLIT);	  n.add(context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
252	[BUG]  [BUGGY]  n.add(context  ==  Context.START_OF_EXPR,  first);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add(context  ==  Context.START_OF_EXPR,  first);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add(context  ==  Context.START_OF_EXPR,  first);	  n.add(context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
253	[BUG]  [BUGGY]  add( "  {  0  }   ",  Context.END_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  Context.END_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  Context.END_OF_EXPR);	  add(   "    {    0    }       ",    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
254	[BUG]  [BUGGY]  add( "  {  0  }   ",  Context.START_OF_EXPR));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  Context.START_OF_EXPR));  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  Context.START_OF_EXPR));	  add(   "    {    0    }       ",    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
255	[BUG]  [BUGGY]  add( "  {  0  }   ",  Context.TEXT_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  Context.TEXT_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  Context.TEXT_OF_EXPR);	  add(   "    {    0    }       ",    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
256	[BUG]  [BUGGY]  add( "  {  0  }   ",  Context.START_OF_EXPR  +  1);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  Context.START_OF_EXPR  +  1);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  Context.START_OF_EXPR  +  1);	  add(   "    {    0    }       ",    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
257	[BUG]  [BUGGY]  add( "  {  0  }   ",  Context.NEW_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  Context.NEW_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  Context.NEW_OF_EXPR);	  add(   "    {    0    }       ",    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
258	[BUG]  [BUGGY]  n.remove();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.remove();  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.remove();	  n.remove(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
259	[BUG]  [BUGGY]  n.removeChild(key);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.removeChild(key);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.removeChild(key);	  n.remove(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
260	[BUG]  [BUGGY]  n.remove( "  {  1  }   ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.remove( "  {  1  }   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.remove( "  {  1  }   ");	  n.remove(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
261	[BUG]  [BUGGY]  n.remove( "  <   ");  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.remove( "  <   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.remove( "  <   ");	  n.remove(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
262	[BUG]  [BUGGY]  n.remove(0);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.remove(0);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.remove(0);	  n.remove(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
263	[BUG]  [BUGGY]  add( "  {  0  }   ",  n.getRootNode());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  n.getRootNode());  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  n.getRootNode());	  add(   "    {    0    }       ",    context.getRootNode());    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
264	[BUG]  [BUGGY]  add( "  {  0  }   ",  context.getRootNode(),  needsParens);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  context.getRootNode(),  needsParens);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  context.getRootNode(),  needsParens);	  add(   "    {    0    }       ",    context.getRootNode());    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
265	[BUG]  [BUGGY]  add( "  {  0  }   ",  first.getRootNode());  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  first.getRootNode());  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  first.getRootNode());	  add(   "    {    0    }       ",    context.getRootNode());    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
266	[BUG]  [BUGGY]  add( "  {  0  }   ",  context.getRootNode(),  false);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  context.getRootNode(),  false);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  context.getRootNode(),  false);	  add(   "    {    0    }       ",    context.getRootNode());    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
267	[BUG]  [BUGGY]  add( "  {  0  }   ",  context.getRootNode(),  hasElseClause);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  context.getRootNode(),  hasElseClause);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  context.getRootNode(),  hasElseClause);	  add(   "    {    0    }       ",    context.getRootNode());    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
268	[BUG]  [BUGGY]  n.removeChild(first);  add( "  {   ");  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.removeChild(first);  add( "  {   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.removeChild(first);  add( "  {   ");	  cc.detachFromParent();    add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
269	[BUG]  [BUGGY]  cc.removeChild(first);  add( "  {   ");  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.removeChild(first);  add( "  {   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.removeChild(first);  add( "  {   ");	  cc.detachFromParent();    add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
270	[BUG]  [BUGGY]  add( "remove ");  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "remove ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "remove ");	  Preconditions.checkState(childCount    ==    1);    add(   "remove   ");    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
271	[BUG]  [BUGGY]  if(childCount  ==  1)  {  Preconditions.checkState(childCount  ==  1);  add( "remove ");  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  if(childCount  ==  1)  {  Preconditions.checkState(childCount  ==  1);  add( "remove ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(childCount  ==  1)  {  Preconditions.checkState(childCount  ==  1);  add( "remove ");  }	  Preconditions.checkState(childCount    ==    1);    add(   "remove   ");    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
272	[BUG]  [BUGGY]  n.add( "  <  OBJECTLIT> ");  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add( "  <  OBJECTLIT> ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add( "  <  OBJECTLIT> ");	  add(   "    <    OBJECTLIT>   ");    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
273	[BUG]  [BUGGY]  add( "  <  OBJECTLIT> ",  first);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <  OBJECTLIT> ",  first);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <  OBJECTLIT> ",  first);	  add(   "    <    OBJECTLIT>   ");    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
274	[BUG]  [BUGGY]  append( "  <  OBJECTLIT> ");  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  append( "  <  OBJECTLIT> ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	append( "  <  OBJECTLIT> ");	  add(   "    <    OBJECTLIT>   ");    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
275	[BUG]  [BUGGY]  add( "  <  OBJECTLIT> ",  context);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <  OBJECTLIT> ",  context);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <  OBJECTLIT> ",  context);	  add(   "    <    OBJECTLIT>   ");    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
276	[BUG]  [BUGGY]  Preconditions.checkState(childCount  >>  2);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  >>  2);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  >>  2);	  Preconditions.checkState(childCount!=    2);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
277	[BUG]  [BUGGY]  add( "  {  OBJECTLIT   ");  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  OBJECTLIT   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  OBJECTLIT   ");	  add(   "    {    OBJECTLIT    <       ");    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
278	[BUG]  [BUGGY]  add( "  {  OBJECTLIT,  childCount  <   ");  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  OBJECTLIT,  childCount  <   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  OBJECTLIT,  childCount  <   ");	  add(   "    {    OBJECTLIT    <       ");    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
279	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExpressionNode(first))  {  cc.listSeparator();  add( "  {   ");  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(NodeUtil.isExpressionNode(first))  {  cc.listSeparator();  add( "  {   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(NodeUtil.isExpressionNode(first))  {  cc.listSeparator();  add( "  {   ");  }	  if(NodeUtil.isExpressionNode(n))    {    cc.listSeparator();    add(   "    {       ");    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
280	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExpressionNode(n)||  NodeUtil.isExpressionNode(n))  {  cc.listSeparator();  add( "  {   ");  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(NodeUtil.isExpressionNode(n)||  NodeUtil.isExpressionNode(n))  {  cc.listSeparator();  add( "  {   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(NodeUtil.isExpressionNode(n)||  NodeUtil.isExpressionNode(n))  {  cc.listSeparator();  add( "  {   ");  }	  if(NodeUtil.isExpressionNode(n))    {    cc.listSeparator();    add(   "    {       ");    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
281	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExpressionNode(first))  {  add(cc.listSeparator();  add( "  {   ");  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(NodeUtil.isExpressionNode(first))  {  add(cc.listSeparator();  add( "  {   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(NodeUtil.isExpressionNode(first))  {  add(cc.listSeparator();  add( "  {   ");  }	  if(NodeUtil.isExpressionNode(n))    {    cc.listSeparator();    add(   "    {       ");    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
282	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExpressionNode(n));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(NodeUtil.isExpressionNode(n));  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(NodeUtil.isExpressionNode(n));	  if(NodeUtil.isExpressionNode(n))    {    cc.listSeparator();    add(   "    {       ");    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
283	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExpressionNode(first))  {  add(cc.listSeparator());  add( "  {   ");  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(NodeUtil.isExpressionNode(first))  {  add(cc.listSeparator());  add( "  {   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(NodeUtil.isExpressionNode(first))  {  add(cc.listSeparator());  add( "  {   ");  }	  if(NodeUtil.isExpressionNode(n))    {    cc.listSeparator();    add(   "    {       ");    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
284	[BUG]  [BUGGY]  Context.checkState(NodeUtil.isExpressionNode(n));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Context.checkState(NodeUtil.isExpressionNode(n));  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Context.checkState(NodeUtil.isExpressionNode(n));	  if(NodeUtil.isExpressionNode(n))    {    cc.listSeparator();    add(   "    {       ");    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
285	[BUG]  [BUGGY]  Node  first  =  context.getNext();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Node  first  =  context.getNext();  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Node  first  =  context.getNext();	  Node    first    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
286	[BUG]  [BUGGY]  Node  first  =  n.getNext()  +  1;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Node  first  =  n.getNext()  +  1;  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Node  first  =  n.getNext()  +  1;	  Node    first    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
287	[BUG]  [BUGGY]  Node  first  =  node.getNext();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Node  first  =  node.getNext();  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Node  first  =  node.getNext();	  Node    first    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
288	[BUG]  [BUGGY]  Preconditions.checkState(childCount  <=  1);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  <=  1);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  <=  1);	  Preconditions.checkState(childCount    <=    0);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
289	[BUG]  [BUGGY]  Preconditions.checkState(childCount  <  0);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  <  0);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  <  0);	  Preconditions.checkState(childCount    <=    0);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
290	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  =  0);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  =  0);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  =  0);	  Preconditions.checkState(childCount    <=    0);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
291	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  cc.listSeparator();  add(context  ==  Context.START_OF_EXPR);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  cc.listSeparator();  add(context  ==  Context.START_OF_EXPR);  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(n.getType()  ==  Token.NAME)  {  cc.listSeparator();  add(context  ==  Context.START_OF_EXPR);  }	  cc.listSeparator();    add(context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
292	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  add(context  ==  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  1);  add(context  ==  Context.START_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  1);  add(context  ==  Context.START_OF_EXPR);	  cc.listSeparator();    add(context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
293	[BUG]  [BUGGY]  cc.listSeparator();  add(context  ==  Context.END_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.listSeparator();  add(context  ==  Context.END_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.listSeparator();  add(context  ==  Context.END_OF_EXPR);	  cc.listSeparator();    add(context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
294	[BUG]  [BUGGY]  add( "  {  1  }  n ");  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  1  }  n ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  1  }  n ");	  add(   "    {    1    }       ");    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
295	[BUG]  [BUGGY]  add( "  {  1  }   ",  childCount);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  1  }   ",  childCount);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  1  }   ",  childCount);	  add(   "    {    1    }       ");    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
296	[BUG]  [BUGGY]  add( "  {  1  }   ",  context);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  1  }   ",  context);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  1  }   ",  context);	  add(   "    {    1    }       ");    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
297	[BUG]  [BUGGY]  add( "  {  1  }   ",  n);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  1  }   ",  n);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  1  }   ",  n);	  add(   "    {    1    }       ");    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
298	[BUG]  [BUGGY]  Context.checkState(childCount  ==  2);  add( "delete ");  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Context.checkState(childCount  ==  2);  add( "delete ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Context.checkState(childCount  ==  2);  add( "delete ");	  Preconditions.checkState(childCount    ==    2);    add(   "delete   ");    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
299	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  add( "delete ",  needsParens);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  2);  add( "delete ",  needsParens);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  2);  add( "delete ",  needsParens);	  Preconditions.checkState(childCount    ==    2);    add(   "delete   ");    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
300	[BUG]  [BUGGY]  cc.addChildToFront(n);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.addChildToFront(n);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.addChildToFront(n);	  cc.addChildToFront(first);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
301	[BUG]  [BUGGY]  cc.addChildToFront(last);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.addChildToFront(last);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.addChildToFront(last);	  cc.addChildToFront(first);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
302	[BUG]  [BUGGY]  cc.addChildToFront(context);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.addChildToFront(context);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.addChildToFront(context);	  cc.addChildToFront(first);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
303	[BUG]  [BUGGY]  cc.addChildToFront(body);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.addChildToFront(body);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.addChildToFront(body);	  cc.addChildToFront(first);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
304	[BUG]  [BUGGY]  cc.addChildToFront(first,  n);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.addChildToFront(first,  n);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.addChildToFront(first,  n);	  cc.addChildToFront(first);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
305	[BUG]  [BUGGY]  cc.addChildToFront(first,  first);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.addChildToFront(first,  first);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.addChildToFront(first,  first);	  cc.addChildToFront(first);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
306	[BUG]  [BUGGY]  n.add(context!=  Context.END_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add(context!=  Context.END_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add(context!=  Context.END_OF_EXPR);	  n.add(context    ==    Context.END_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
307	[BUG]  [BUGGY]  n.add(context  >=  Context.END_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add(context  >=  Context.END_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add(context  >=  Context.END_OF_EXPR);	  n.add(context    ==    Context.END_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
308	[BUG]  [BUGGY]  n.add(first,  context  ==  Context.END_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add(first,  context  ==  Context.END_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add(first,  context  ==  Context.END_OF_EXPR);	  n.add(context    ==    Context.END_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
309	[BUG]  [BUGGY]  n.add(context  ==  Context.END_OF_EXPR,  first);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add(context  ==  Context.END_OF_EXPR,  first);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add(context  ==  Context.END_OF_EXPR,  first);	  n.add(context    ==    Context.END_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
310	[BUG]  [BUGGY]  add( "  <  0  }  [ ");  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <  0  }  [ ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <  0  }  [ ");	  add(   "    {    0    }    [   ");    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
311	[BUG]  [BUGGY]  add( ")  {  0  }  [ ");  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( ")  {  0  }  [ ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( ")  {  0  }  [ ");	  add(   "    {    0    }    [   ");    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
312	[BUG]  [BUGGY]  add( "  {  1  }  [ ");  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  1  }  [ ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  1  }  [ ");	  add(   "    {    0    }    [   ");    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
313	[BUG]  [BUGGY]  Node  first  =  getLastChild();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Node  first  =  getLastChild();  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Node  first  =  getLastChild();	  Node    first    =    getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
314	[BUG]  [BUGGY]  Node  first  =  getFirstChild().getNext();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Node  first  =  getFirstChild().getNext();  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Node  first  =  getFirstChild().getNext();	  Node    first    =    getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
315	[BUG]  [BUGGY]  Node  first  =  getFirstChild().next();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Node  first  =  getFirstChild().next();  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Node  first  =  getFirstChild().next();	  Node    first    =    getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
316	[BUG]  [BUGGY]  add( "  {  0  }   ",  context.getRootContext(),  needsParens);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  context.getRootContext(),  needsParens);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  context.getRootContext(),  needsParens);	  add(   "    {    0    }       ",    context.getRootContext());    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
317	[BUG]  [BUGGY]  add( "  {  0  }   ",  n.getRootContext());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  n.getRootContext());  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  n.getRootContext());	  add(   "    {    0    }       ",    context.getRootContext());    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
318	[BUG]  [BUGGY]  add( "  {  0  }   ",  context.getRootContext(),  needParens);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  context.getRootContext(),  needParens);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  context.getRootContext(),  needParens);	  add(   "    {    0    }       ",    context.getRootContext());    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
319	[BUG]  [BUGGY]  add( "  {  0  }   ",  first.getRootContext());  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  first.getRootContext());  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  first.getRootContext());	  add(   "    {    0    }       ",    context.getRootContext());    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
320	[BUG]  [BUGGY]  add( "  {  0  }   ",  context.getRootContext(),  false);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  context.getRootContext(),  false);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  context.getRootContext(),  false);	  add(   "    {    0    }       ",    context.getRootContext());    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
321	[BUG]  [BUGGY]  add( "  {  0  }   ",  context.getRootContext()  +  1);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  context.getRootContext()  +  1);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  context.getRootContext()  +  1);	  add(   "    {    0    }       ",    context.getRootContext());    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
322	[BUG]  [BUGGY]  add( "  {  }   ",  hasElse);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  }   ",  hasElse);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  }   ",  hasElse);	  add(   "    {    }       ",    n);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
323	[BUG]  [BUGGY]  add( "  {  }   ",  n  +  1);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  }   ",  n  +  1);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  }   ",  n  +  1);	  add(   "    {    }       ",    n);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
324	[BUG]  [BUGGY]  n.add( "[1]  {  1  }   ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add( "[1]  {  1  }   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add( "[1]  {  1  }   ");	  n.add(   "    {    1    }       ");    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
325	[BUG]  [BUGGY]  n.add( "  {  1  }   ",  childCount);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add( "  {  1  }   ",  childCount);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add( "  {  1  }   ",  childCount);	  n.add(   "    {    1    }       ");    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
326	[BUG]  [BUGGY]  n.add( "  {  1  }   ",  first);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add( "  {  1  }   ",  first);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add( "  {  1  }   ",  first);	  n.add(   "    {    1    }       ");    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
327	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  Context.checkState(context  ==  Context.START_OF_EXPR);  add( "] ");  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  Context.checkState(context  ==  Context.START_OF_EXPR);  add( "] ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  Context.checkState(context  ==  Context.START_OF_EXPR);  add( "] ");  }	  if(needsParens)    {    Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    }    else    {    Context.checkState(context    ==    Context.START_OF_EXPR);    add(   "]   ");    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
328	[BUG]  [BUGGY]  Context.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  Context.checkState(context  ==  Context.START_OF_EXPR);  add( "] ");  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Context.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  Context.checkState(context  ==  Context.START_OF_EXPR);  add( "] ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Context.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  Context.checkState(context  ==  Context.START_OF_EXPR);  add( "] ");  }	  if(needsParens)    {    Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    }    else    {    Context.checkState(context    ==    Context.START_OF_EXPR);    add(   "]   ");    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
329	[BUG]  [BUGGY]  add( "  {   ");  }  else  {  Context.checkState(context  ==  Context.START_OF_EXPR);  add( "] ");  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {   ");  }  else  {  Context.checkState(context  ==  Context.START_OF_EXPR);  add( "] ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {   ");  }  else  {  Context.checkState(context  ==  Context.START_OF_EXPR);  add( "] ");  }	  if(needsParens)    {    Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    }    else    {    Context.checkState(context    ==    Context.START_OF_EXPR);    add(   "]   ");    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
330	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  Context.checkState(context  ==  Context.END_OF_EXPR);  add( "] ");  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  Context.checkState(context  ==  Context.END_OF_EXPR);  add( "] ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  Context.checkState(context  ==  Context.END_OF_EXPR);  add( "] ");  }	  if(needsParens)    {    Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    }    else    {    Context.checkState(context    ==    Context.START_OF_EXPR);    add(   "]   ");    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
331	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  if(context  ==  Context.START_OF_EXPR)  {  add( "] ");  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  if(context  ==  Context.START_OF_EXPR)  {  add( "] ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  if(context  ==  Context.START_OF_EXPR)  {  add( "] ");  }	  if(needsParens)    {    Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    }    else    {    Context.checkState(context    ==    Context.START_OF_EXPR);    add(   "]   ");    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
332	[BUG]  [BUGGY]  add( "  {  }   ",  needsParens,  context);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  }   ",  needsParens,  context);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  }   ",  needsParens,  context);	  add(   "    {    }       ",    needsParens);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
333	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  add(first);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  add(first);  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  add(first);  }	  if(n.getType()    ==    Token.STRING)    {    Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    }    else    {    add(first);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
334	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  add(context  ==  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  add(context  ==  Context.START_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  add(context  ==  Context.START_OF_EXPR);	  if(n.getType()    ==    Token.STRING)    {    Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    }    else    {    add(first);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
335	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  add(context  ==  Context.END_OBJECTLIT);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  add(context  ==  Context.END_OBJECTLIT);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  add(context  ==  Context.END_OBJECTLIT);	  if(n.getType()    ==    Token.STRING)    {    Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    }    else    {    add(first);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
336	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  add(context  ==  Context.END_OF_OBJECTLIT);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  add(context  ==  Context.END_OF_OBJECTLIT);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  add(context  ==  Context.END_OF_OBJECTLIT);	  if(n.getType()    ==    Token.STRING)    {    Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    }    else    {    add(first);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
337	[BUG]  [BUGGY]  cc.getParent().replaceChild(first,  Node.newString(Token.NAME));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.getParent().replaceChild(first,  Node.newString(Token.NAME));  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.getParent().replaceChild(first,  Node.newString(Token.NAME));	  cc.getParent().replaceChild(n,    Node.newString(Token.NAME));    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
338	[BUG]  [BUGGY]  cc.getParent().replaceChild(context,  Node.newString(Token.NAME));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.getParent().replaceChild(context,  Node.newString(Token.NAME));  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.getParent().replaceChild(context,  Node.newString(Token.NAME));	  cc.getParent().replaceChild(n,    Node.newString(Token.NAME));    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
339	[BUG]  [BUGGY]  cc.getParent().replaceChild(n,  Node.newString(Token.NAME,  first));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.getParent().replaceChild(n,  Node.newString(Token.NAME,  first));  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.getParent().replaceChild(n,  Node.newString(Token.NAME,  first));	  cc.getParent().replaceChild(n,    Node.newString(Token.NAME));    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
340	[BUG]  [BUGGY]  cc.getNext().replaceChild(n,  Node.newString(Token.NAME));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.getNext().replaceChild(n,  Node.newString(Token.NAME));  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.getNext().replaceChild(n,  Node.newString(Token.NAME));	  cc.getParent().replaceChild(n,    Node.newString(Token.NAME));    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
341	[BUG]  [BUGGY]  cc.getParent().replaceChild(n,  Node.newString(Token.NAME,  last));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.getParent().replaceChild(n,  Node.newString(Token.NAME,  last));  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.getParent().replaceChild(n,  Node.newString(Token.NAME,  last));	  cc.getParent().replaceChild(n,    Node.newString(Token.NAME));    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
342	[BUG]  [BUGGY]  cc.detachFromParent(context);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.detachFromParent(context);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.detachFromParent(context);	  cc.detachFromParent();    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
343	[BUG]  [BUGGY]  cc.removeChild(first);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.removeChild(first);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.removeChild(first);	  cc.detachFromParent();    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
344	[BUG]  [BUGGY]  cc.detachFromNext();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.detachFromNext();  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.detachFromNext();	  cc.detachFromParent();    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
345	[BUG]  [BUGGY]  cc.detachFromParent(first);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.detachFromParent(first);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.detachFromParent(first);	  cc.detachFromParent();    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
346	[BUG]  [BUGGY]  cc.detachFromFirstChild();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.detachFromFirstChild();  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.detachFromFirstChild();	  cc.detachFromParent();    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
347	[BUG]  [BUGGY]  cc.addChildToBack(n);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.addChildToBack(n);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.addChildToBack(n);	  cc.addChildToBack(first);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
348	[BUG]  [BUGGY]  cc.addChildToBack(last);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.addChildToBack(last);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.addChildToBack(last);	  cc.addChildToBack(first);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
349	[BUG]  [BUGGY]  cc.addChildToBack(context);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.addChildToBack(context);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.addChildToBack(context);	  cc.addChildToBack(first);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
350	[BUG]  [BUGGY]  cc.addChildToBack(body);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.addChildToBack(body);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.addChildToBack(body);	  cc.addChildToBack(first);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
351	[BUG]  [BUGGY]  cc.addChildToBack(first,  n);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.addChildToBack(first,  n);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.addChildToBack(first,  n);	  cc.addChildToBack(first);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
352	[BUG]  [BUGGY]  add(context  ==  Context.START_OBJECTLIT);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add(context  ==  Context.START_OBJECTLIT);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add(context  ==  Context.START_OBJECTLIT);	  if(n.getType()    ==    Token.STRING)    {    Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
353	[BUG]  [BUGGY]  add( "  <  /OBJECTLIT> ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <  /OBJECTLIT> ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <  /OBJECTLIT> ");	  add(   "    <    /   ");    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
354	[BUG]  [BUGGY]  n.add( "  <  / ");  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add( "  <  / ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add( "  <  / ");	  add(   "    <    /   ");    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
355	[BUG]  [BUGGY]  append( "  <  / ");  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  append( "  <  / ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	append( "  <  / ");	  add(   "    <    /   ");    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
356	[BUG]  [BUGGY]  n.add(context  ==  Context.END_OBJECTLIT  ||  context  ==  Context.END_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add(context  ==  Context.END_OBJECTLIT  ||  context  ==  Context.END_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add(context  ==  Context.END_OBJECTLIT  ||  context  ==  Context.END_OF_EXPR);	  n.add(context    ==    Context.END_OBJECTLIT);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
357	[BUG]  [BUGGY]  n.add(context  ==  Context.END_OBJECTLIT,  first);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add(context  ==  Context.END_OBJECTLIT,  first);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add(context  ==  Context.END_OBJECTLIT,  first);	  n.add(context    ==    Context.END_OBJECTLIT);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
358	[BUG]  [BUGGY]  n.add(context!=  Context.END_OBJECTLIT);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add(context!=  Context.END_OBJECTLIT);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add(context!=  Context.END_OBJECTLIT);	  n.add(context    ==    Context.END_OBJECTLIT);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
359	[BUG]  [BUGGY]  n.add(context  ==  Context.END_OBJECTLIT  ||  context  ==  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add(context  ==  Context.END_OBJECTLIT  ||  context  ==  Context.START_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add(context  ==  Context.END_OBJECTLIT  ||  context  ==  Context.START_OF_EXPR);	  n.add(context    ==    Context.END_OBJECTLIT);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
360	[BUG]  [BUGGY]  n.add(context  ==  Context.END_OBJECTLIT  ||  context  ==  Context.END_OBJECTLIT);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add(context  ==  Context.END_OBJECTLIT  ||  context  ==  Context.END_OBJECTLIT);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add(context  ==  Context.END_OBJECTLIT  ||  context  ==  Context.END_OBJECTLIT);	  n.add(context    ==    Context.END_OBJECTLIT);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
361	[BUG]  [BUGGY]  add( "  <  n> ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <  n> ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <  n> ");	  add(   "    <    n   ");    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
362	[BUG]  [BUGGY]  add( "  <  /n> ");  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <  /n> ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <  /n> ");	  add(   "    <    n   ");    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
363	[BUG]  [BUGGY]  add( "  <  node> ");  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <  node> ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <  node> ");	  add(   "    <    n   ");    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
364	[BUG]  [BUGGY]  add( "  <  b> ");  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <  b> ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <  b> ");	  add(   "    <    n   ");    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
365	[BUG]  [BUGGY]  add( "  {  0  }   ",  hasElse);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  hasElse);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  hasElse);	  add(   "    {    0    }       ",    needsParens);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
366	[BUG]  [BUGGY]  add( "  {  0  }   ",  needsParens,  context);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  needsParens,  context);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  needsParens,  context);	  add(   "    {    0    }       ",    needsParens);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
367	[BUG]  [BUGGY]  add( "  <  0  }  hasElseClause   ");  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <  0  }  hasElseClause   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <  0  }  hasElseClause   ");	  add(   "    <    0    }       ");    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
368	[BUG]  [BUGGY]  add( "  <  0  }   ",  needsParens);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <  0  }   ",  needsParens);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <  0  }   ",  needsParens);	  add(   "    <    0    }       ");    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
369	[BUG]  [BUGGY]  add( "  <  0  }   ",  context);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <  0  }   ",  context);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <  0  }   ",  context);	  add(   "    <    0    }       ");    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
370	[BUG]  [BUGGY]  add( "  <  0  }   ",  first);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <  0  }   ",  first);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <  0  }   ",  first);	  add(   "    <    0    }       ");    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
371	[BUG]  [BUGGY]  add( "  <   ").append(context  ==  Context.END_OBJECTLIT  ||  context  ==  Context.END_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <   ").append(context  ==  Context.END_OBJECTLIT  ||  context  ==  Context.END_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <   ").append(context  ==  Context.END_OBJECTLIT  ||  context  ==  Context.END_OF_EXPR);	  add(   "    <       ").append(context    ==    Context.END_OBJECTLIT);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
372	[BUG]  [BUGGY]  add( "  <   ").append(context  ==  Context.END_OBJECTLIT,  n);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <   ").append(context  ==  Context.END_OBJECTLIT,  n);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <   ").append(context  ==  Context.END_OBJECTLIT,  n);	  add(   "    <       ").append(context    ==    Context.END_OBJECTLIT);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
373	[BUG]  [BUGGY]  add( "  <   ").append(context!=  Context.END_OBJECTLIT);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <   ").append(context!=  Context.END_OBJECTLIT);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <   ").append(context!=  Context.END_OBJECTLIT);	  add(   "    <       ").append(context    ==    Context.END_OBJECTLIT);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
374	[BUG]  [BUGGY]  add( "  <  / ").append(context  ==  Context.END_OBJECTLIT);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <  / ").append(context  ==  Context.END_OBJECTLIT);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <  / ").append(context  ==  Context.END_OBJECTLIT);	  add(   "    <       ").append(context    ==    Context.END_OBJECTLIT);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
375	[BUG]  [BUGGY]  add( "  <   ").append(context  ==  Context.END_OBJECTLIT  +  1);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <   ").append(context  ==  Context.END_OBJECTLIT  +  1);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <   ").append(context  ==  Context.END_OBJECTLIT  +  1);	  add(   "    <       ").append(context    ==    Context.END_OBJECTLIT);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
376	[BUG]  [BUGGY]  add( "  {  0  }   ",  Context.STATEMENT  +  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  Context.STATEMENT  +  1);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  Context.STATEMENT  +  1);	  add(   "    {    0    }       ",    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
377	[BUG]  [BUGGY]  add( "  {  0  }   ",  Context.STATEMENT  |  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  Context.STATEMENT  |  Context.START_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  Context.STATEMENT  |  Context.START_OF_EXPR);	  add(   "    {    0    }       ",    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
378	[BUG]  [BUGGY]  add( "  {  0  }   ",  Context.STATEMENT));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  Context.STATEMENT));  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  Context.STATEMENT));	  add(   "    {    0    }       ",    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
379	[BUG]  [BUGGY]  add( "  {  0  }   ",  context.STATEMENT);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  context.STATEMENT);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  context.STATEMENT);	  add(   "    {    0    }       ",    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
380	[BUG]  [BUGGY]  add( "  <!(first.getType()  ==  Token.GET  ||  first.getType()  ==  Token.STRING));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <!(first.getType()  ==  Token.GET  ||  first.getType()  ==  Token.STRING));  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <!(first.getType()  ==  Token.GET  ||  first.getType()  ==  Token.STRING));	  add(   "    <!(n.getType()    ==    Token.GET    ||    first.getType()    ==    Token.STRING));    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
381	[BUG]  [BUGGY]  add( "  <!(first.getType()  ==  Token.GET  ||  second.getType()  ==  Token.STRING));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <!(first.getType()  ==  Token.GET  ||  second.getType()  ==  Token.STRING));  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <!(first.getType()  ==  Token.GET  ||  second.getType()  ==  Token.STRING));	  add(   "    <!(n.getType()    ==    Token.GET    ||    first.getType()    ==    Token.STRING));    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
382	[BUG]  [BUGGY]  add(first,   "  <!(n.getType()  ==  Token.GET  ||  first.getType()  ==  Token.STRING));  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add(first,   "  <!(n.getType()  ==  Token.GET  ||  first.getType()  ==  Token.STRING));  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add(first,   "  <!(n.getType()  ==  Token.GET  ||  first.getType()  ==  Token.STRING));	  add(   "    <!(n.getType()    ==    Token.GET    ||    first.getType()    ==    Token.STRING));    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
383	[BUG]  [BUGGY]  add( ",  <!(first.getType()  ==  Token.GET  ||  first.getType()  ==  Token.STRING));  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( ",  <!(first.getType()  ==  Token.GET  ||  first.getType()  ==  Token.STRING));  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( ",  <!(first.getType()  ==  Token.GET  ||  first.getType()  ==  Token.STRING));	  add(   "    <!(n.getType()    ==    Token.GET    ||    first.getType()    ==    Token.STRING));    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
384	[BUG]  [BUGGY]  add( "  <!first.getType()  ==  Token.GET  ||  first.getType()  ==  Token.STRING));  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <!first.getType()  ==  Token.GET  ||  first.getType()  ==  Token.STRING));  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <!first.getType()  ==  Token.GET  ||  first.getType()  ==  Token.STRING));	  add(   "    <!(n.getType()    ==    Token.GET    ||    first.getType()    ==    Token.STRING));    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
385	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "] ");  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "] ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "] ");  }	  if(needsParens)    {    Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    }    else    {    Preconditions.checkState(childCount    ==    1);    add(   "]   ");    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
386	[BUG]  [BUGGY]  add( "  {   ");  }  else  if(context  ==  Context.START_OF_EXPR)  {  Preconditions.checkState(childCount  ==  1);  add( "] ");  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {   ");  }  else  if(context  ==  Context.START_OF_EXPR)  {  Preconditions.checkState(childCount  ==  1);  add( "] ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {   ");  }  else  if(context  ==  Context.START_OF_EXPR)  {  Preconditions.checkState(childCount  ==  1);  add( "] ");  }	  if(needsParens)    {    Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    }    else    {    Preconditions.checkState(childCount    ==    1);    add(   "]   ");    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
387	[BUG]  [BUGGY]  add( "  {   ");  }  else  if(context  ==  Context.START_OF_EXPR)  {  add( "] ");  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {   ");  }  else  if(context  ==  Context.START_OF_EXPR)  {  add( "] ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {   ");  }  else  if(context  ==  Context.START_OF_EXPR)  {  add( "] ");  }	  if(needsParens)    {    Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    }    else    {    Preconditions.checkState(childCount    ==    1);    add(   "]   ");    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
388	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild().getIndex();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  int  childCount  =  n.getLastChild().getIndex();  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	int  childCount  =  n.getLastChild().getIndex();	  int    childCount    =    n.getFirstChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
389	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getIndex()  +  1;  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  int  childCount  =  n.getFirstChild().getIndex()  +  1;  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	int  childCount  =  n.getFirstChild().getIndex()  +  1;	  int    childCount    =    n.getFirstChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
390	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getIndex()  -  1;  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  int  childCount  =  n.getFirstChild().getIndex()  -  1;  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	int  childCount  =  n.getFirstChild().getIndex()  -  1;	  int    childCount    =    n.getFirstChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
391	[BUG]  [BUGGY]  int  childCount  =  context.getFirstChild().getIndex();  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  int  childCount  =  context.getFirstChild().getIndex();  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	int  childCount  =  context.getFirstChild().getIndex();	  int    childCount    =    n.getFirstChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
392	[BUG]  [BUGGY]  int  childCount  =  first.getFirstChild().getIndex();  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  int  childCount  =  first.getFirstChild().getIndex();  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	int  childCount  =  first.getFirstChild().getIndex();	  int    childCount    =    n.getFirstChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
393	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getIndex(context);  [CE]  illegal  start  of  expression  [FE]                                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  int  childCount  =  n.getFirstChild().getIndex(context);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	int  childCount  =  n.getFirstChild().getIndex(context);	  int    childCount    =    n.getFirstChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
394	[BUG]  [BUGGY]  n.add( "  {  }   ",  needsParens);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add( "  {  }   ",  needsParens);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add( "  {  }   ",  needsParens);	  n.add(   "    {    }       ");    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
395	[BUG]  [BUGGY]  n.add( "  {  }   ",  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add( "  {  }   ",  Context.START_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add( "  {  }   ",  Context.START_OF_EXPR);	  n.add(   "    {    }       ");    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
396	[BUG]  [BUGGY]  cc.setSeparator(context  ==  Context.END_OBJECTLIT  ||  context  ==  Context.END_OBJECTLIT);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.setSeparator(context  ==  Context.END_OBJECTLIT  ||  context  ==  Context.END_OBJECTLIT);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.setSeparator(context  ==  Context.END_OBJECTLIT  ||  context  ==  Context.END_OBJECTLIT);	  cc.setSeparator(context    ==    Context.END_OBJECTLIT);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
397	[BUG]  [BUGGY]  cc.setSeparator(context  ==  Context.END_OBJECTLIT  ||  context  ==  Context.END_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.setSeparator(context  ==  Context.END_OBJECTLIT  ||  context  ==  Context.END_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.setSeparator(context  ==  Context.END_OBJECTLIT  ||  context  ==  Context.END_OF_EXPR);	  cc.setSeparator(context    ==    Context.END_OBJECTLIT);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
398	[BUG]  [BUGGY]  cc.setSeparator(context  ==  Context.END_OBJECTLIT  ||  context  ==  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.setSeparator(context  ==  Context.END_OBJECTLIT  ||  context  ==  Context.START_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.setSeparator(context  ==  Context.END_OBJECTLIT  ||  context  ==  Context.START_OF_EXPR);	  cc.setSeparator(context    ==    Context.END_OBJECTLIT);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
399	[BUG]  [BUGGY]  cc.setSeparator(context  ==  Context.END_OBJECTLIT  |  context  ==  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.setSeparator(context  ==  Context.END_OBJECTLIT  |  context  ==  Context.START_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.setSeparator(context  ==  Context.END_OBJECTLIT  |  context  ==  Context.START_OF_EXPR);	  cc.setSeparator(context    ==    Context.END_OBJECTLIT);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
400	[BUG]  [BUGGY]  cc.setSeparator(context!=  Context.END_OBJECTLIT);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.setSeparator(context!=  Context.END_OBJECTLIT);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.setSeparator(context!=  Context.END_OBJECTLIT);	  cc.setSeparator(context    ==    Context.END_OBJECTLIT);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
401	[BUG]  [BUGGY]  Context.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Context.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Context.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(childCount    ==    1)    {    Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
402	[BUG]  [BUGGY]  add( "  {   ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {   ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {   ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(childCount    ==    1)    {    Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
403	[BUG]  [BUGGY]  add( "  {  OBJECTLIT  ==   ");  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  OBJECTLIT  ==   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  OBJECTLIT  ==   ");	  add(   "    {    OBJECTLIT    <       ");    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
404	[BUG]  [BUGGY]  add( "  {  OBJECTLIT  >>   ");  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  OBJECTLIT  >>   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  OBJECTLIT  >>   ");	  add(   "    {    OBJECTLIT    <       ");    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
405	[BUG]  [BUGGY]  add( "  {  OBJECTLIT!=   ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  OBJECTLIT!=   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  OBJECTLIT!=   ");	  add(   "    {    OBJECTLIT    <       ");    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
406	[BUG]  [BUGGY]  add( "  {  0  }  hasElseClause,  1   ");  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }  hasElseClause,  1   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }  hasElseClause,  1   ");	  add(   "    {    0    }    hasElseClause       ");    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
407	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2)  {  add( "  {   ");  }  else  {  Context.report(JSError.make(context,  IN_FOR_INIT_CLAUSE));  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  2)  {  add( "  {   ");  }  else  {  Context.report(JSError.make(context,  IN_FOR_INIT_CLAUSE));  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  2)  {  add( "  {   ");  }  else  {  Context.report(JSError.make(context,  IN_FOR_INIT_CLAUSE));  }	  if(childCount    ==    2)    {    Preconditions.checkState(childCount    ==    2);    add(   "    {       ");    }    else    {    Context.report(JSError.make(context,    IN_FOR_INIT_CLAUSE));    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
408	[BUG]  [BUGGY]  if(childCount  ==  2)  {  Preconditions.checkState(childCount  ==  2);  add( "delete ");  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  if(childCount  ==  2)  {  Preconditions.checkState(childCount  ==  2);  add( "delete ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(childCount  ==  2)  {  Preconditions.checkState(childCount  ==  2);  add( "delete ");  }	  Preconditions.checkState(childCount    ==    2);    add(   "delete   ");    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
409	[BUG]  [BUGGY]  if(childCount  ==  2)  {  Preconditions.checkState(childCount  ==  2);  add( "delete ");  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  if(childCount  ==  2)  {  Preconditions.checkState(childCount  ==  2);  add( "delete ");  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(childCount  ==  2)  {  Preconditions.checkState(childCount  ==  2);  add( "delete ");  }  else  {  throw  new  IllegalStateException( " ");  }	  Preconditions.checkState(childCount    ==    2);    add(   "delete   ");    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
410	[BUG]  [BUGGY]  if(childCount  ==  2)  {  Preconditions.checkState(childCount  ==  2);  add( "delete ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  if(childCount  ==  2)  {  Preconditions.checkState(childCount  ==  2);  add( "delete ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(childCount  ==  2)  {  Preconditions.checkState(childCount  ==  2);  add( "delete ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  Preconditions.checkState(childCount    ==    2);    add(   "delete   ");    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
411	[BUG]  [BUGGY]  add( "  {  0  }   ",  context.getNodeType());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  context.getNodeType());  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  context.getNodeType());	  add(   "    {    0    }       ",    context.getRootNode());    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
412	[BUG]  [BUGGY]  add( "  {  0  }   ",  context.getNode());  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  context.getNode());  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  context.getNode());	  add(   "    {    0    }       ",    context.getRootNode());    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
413	[BUG]  [BUGGY]  add( "  {  0  }   ",  context.getSourceName());  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  context.getSourceName());  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  context.getSourceName());	  add(   "    {    0    }       ",    context.getRootNode());    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
414	[BUG]  [BUGGY]  add( "  {  OBJECTLIT:  {  1  }   ");  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  OBJECTLIT:  {  1  }   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  OBJECTLIT:  {  1  }   ");	  add(   "    {    OBJECTLIT:    {       ");    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
415	[BUG]  [BUGGY]  add( "  {  OBJECTLIT:  <   ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  OBJECTLIT:  <   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  OBJECTLIT:  <   ");	  add(   "    {    OBJECTLIT:    {       ");    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
416	[BUG]  [BUGGY]  add( "  {  OBJECTLIT:  [ ");  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  OBJECTLIT:  [ ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  OBJECTLIT:  [ ");	  add(   "    {    OBJECTLIT:    {       ");    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
417	[BUG]  [BUGGY]  add( "  <  OBJECTLIT: ");  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <  OBJECTLIT: ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <  OBJECTLIT: ");	  add(   "    {    OBJECTLIT:       ");    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
418	[BUG]  [BUGGY]  add( ")  {  OBJECTLIT: ");  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( ")  {  OBJECTLIT: ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( ")  {  OBJECTLIT: ");	  add(   "    {    OBJECTLIT:       ");    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
419	[BUG]  [BUGGY]  add( "  {  0  }   ",  context.getNodeContext());  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  context.getNodeContext());  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  context.getNodeContext());	  add(   "    {    0    }       ",    context.getRootContext());    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
420	[BUG]  [BUGGY]  add( ")  {  0  }   ",  context.getRootContext());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( ")  {  0  }   ",  context.getRootContext());  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( ")  {  0  }   ",  context.getRootContext());	  add(   "    {    0    }       ",    context.getRootContext());    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
421	[BUG]  [BUGGY]  add( "  {  0  }   ",  context.getContextRoot());  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  context.getContextRoot());  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  context.getContextRoot());	  add(   "    {    0    }       ",    context.getRootContext());    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
422	[BUG]  [BUGGY]  add( "  {  0  }   ",  context.getCurrentContext());  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  context.getCurrentContext());  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  context.getCurrentContext());	  add(   "    {    0    }       ",    context.getRootContext());    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
423	[BUG]  [BUGGY]  cc.addSeparator(context  ==  Context.END_OBJECTLIT);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.addSeparator(context  ==  Context.END_OBJECTLIT);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.addSeparator(context  ==  Context.END_OBJECTLIT);	  cc.setSeparator(context    ==    Context.END_OBJECTLIT);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
424	[BUG]  [BUGGY]  cc.setSeparator(context  ==  Context.END_OBJECTLIT  +  1);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.setSeparator(context  ==  Context.END_OBJECTLIT  +  1);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.setSeparator(context  ==  Context.END_OBJECTLIT  +  1);	  cc.setSeparator(context    ==    Context.END_OBJECTLIT);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
425	[BUG]  [BUGGY]  add( "  <  objLit> ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <  objLit> ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <  objLit> ");	  add(   "    <    n   ");    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
426	[BUG]  [BUGGY]  add( "  {  1  }   ",  hasElseClause);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  1  }   ",  hasElseClause);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  1  }   ",  hasElseClause);	  add(   "    {    1    }       ");    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
427	[BUG]  [BUGGY]  add( "  {  1  }   ",  n.getLastChild());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  1  }   ",  n.getLastChild());  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  1  }   ",  n.getLastChild());	  add(   "    {    1    }       ");    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
428	[BUG]  [BUGGY]  add( "  {  1  }   ",  needsParens);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  1  }   ",  needsParens);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  1  }   ",  needsParens);	  add(   "    {    1    }       ");    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
429	[BUG]  [BUGGY]  add( "  {  1  }   ",  n.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  1  }   ",  n.getFirstChild());  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  1  }   ",  n.getFirstChild());	  add(   "    {    1    }       ");    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
430	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2  &&  needsParens)  {  cc.listSeparator();  add( "  {   ");  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  2  &&  needsParens)  {  cc.listSeparator();  add( "  {   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  2  &&  needsParens)  {  cc.listSeparator();  add( "  {   ");  }	  if(needsParens)    {    cc.listSeparator();    add(   "    {       ");    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
431	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2  &&  hasElseClause)  {  cc.listSeparator();  add( "  {   ");  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  2  &&  hasElseClause)  {  cc.listSeparator();  add( "  {   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  2  &&  hasElseClause)  {  cc.listSeparator();  add( "  {   ");  }	  if(needsParens)    {    cc.listSeparator();    add(   "    {       ");    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
432	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2  &&  hasElseParens)  {  cc.listSeparator();  add( "  {   ");  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  2  &&  hasElseParens)  {  cc.listSeparator();  add( "  {   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  2  &&  hasElseParens)  {  cc.listSeparator();  add( "  {   ");  }	  if(needsParens)    {    cc.listSeparator();    add(   "    {       ");    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
433	[BUG]  [BUGGY]  add( "  <   ").append(context  ==  Context.STATEMENT)+  1;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <   ").append(context  ==  Context.STATEMENT)+  1;  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <   ").append(context  ==  Context.STATEMENT)+  1;	  add(   "    <       ").append(context    ==    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
434	[BUG]  [BUGGY]  add( "  <   ").append(context  ==  Context.STATEMENT)  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <   ").append(context  ==  Context.STATEMENT)  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <   ").append(context  ==  Context.STATEMENT)	  add(   "    <       ").append(context    ==    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
435	[BUG]  [BUGGY]  add( "  {  }   ",  context  +  1);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  }   ",  context  +  1);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  }   ",  context  +  1);	  add(   "    {    }       ",    context);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
436	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  else  {  add(first);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  else  {  add(first);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  else  {  add(first);	  if(n.getType()    ==    Token.STRING)    {    Preconditions.checkState(childCount    ==    2);    add(   "    {       ");    }    else    {    add(first);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
437	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  add( ")  {   ");  }  else  {  add(first);  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  2);  add( ")  {   ");  }  else  {  add(first);  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  2);  add( ")  {   ");  }  else  {  add(first);  }	  if(n.getType()    ==    Token.STRING)    {    Preconditions.checkState(childCount    ==    2);    add(   "    {       ");    }    else    {    add(first);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
438	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  0);  add( "remove ");  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  0);  add( "remove ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  0);  add( "remove ");	  Preconditions.checkState(childCount    ==    1);    add(   "remove   ");    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
439	[BUG]  [BUGGY]  add( "  {  }   ",  needsParens  +  1);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  }   ",  needsParens  +  1);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  }   ",  needsParens  +  1);	  add(   "    {    }       ",    needsParens);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
440	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1)  {  add( "  {   ");  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  1)  {  add( "  {   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  1)  {  add( "  {   ");  }	  if(childCount    ==    1)    {    Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
441	[BUG]  [BUGGY]  Preconditions.checkState(childCount!=  2  -  childCount);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount!=  2  -  childCount);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount!=  2  -  childCount);	  Preconditions.checkState(childCount!=    2);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
442	[BUG]  [BUGGY]  n.add(context  ==  Context.STATEMENT  ||  context  ==  Context.END_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add(context  ==  Context.STATEMENT  ||  context  ==  Context.END_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add(context  ==  Context.STATEMENT  ||  context  ==  Context.END_OF_EXPR);	  n.add(context    ==    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
443	[BUG]  [BUGGY]  n.add(context  ==  Context.STATEMENT)  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add(context  ==  Context.STATEMENT)  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add(context  ==  Context.STATEMENT)	  n.add(context    ==    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
444	[BUG]  [BUGGY]  cc.addChildToBack(new  Node(context,  first));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.addChildToBack(new  Node(context,  first));  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.addChildToBack(new  Node(context,  first));	  cc.addChildToBack(first);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
445	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2)  {  add( "  {   ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  2)  {  add( "  {   ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  2)  {  add( "  {   ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(childCount    ==    2)    {    Preconditions.checkState(childCount    ==    2);    add(   "    {       ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
446	[BUG]  [BUGGY]  add( "  {  0  }  [] ");  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }  [] ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }  [] ");	  add(   "    {    0    }    [   ");    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
447	[BUG]  [BUGGY]  add( "  {  0  }  [ ",  context);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }  [ ",  context);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }  [ ",  context);	  add(   "    {    0    }    [   ");    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
448	[BUG]  [BUGGY]  cc.detachFromPosition();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.detachFromPosition();  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.detachFromPosition();	  cc.detachFromParent();    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
449	[BUG]  [BUGGY]  cc.detachFromPrefix();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.detachFromPrefix();  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.detachFromPrefix();	  cc.detachFromParent();    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
450	[BUG]  [BUGGY]  n  =  n.getFirstChild();  add(n);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n  =  n.getFirstChild();  add(n);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n  =  n.getFirstChild();  add(n);	  Node    first    =    n.getFirstChild();    add(first);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
451	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getStartIndex();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  int  childCount  =  n.getFirstChild().getStartIndex();  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	int  childCount  =  n.getFirstChild().getStartIndex();	  int    childCount    =    n.getFirstChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
452	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getColumnCount();  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  int  childCount  =  n.getFirstChild().getColumnCount();  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	int  childCount  =  n.getFirstChild().getColumnCount();	  int    childCount    =    n.getFirstChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
453	[BUG]  [BUGGY]  add(first).append(context  ==  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add(first).append(context  ==  Context.START_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add(first).append(context  ==  Context.START_OF_EXPR);	  add(   "    <       ").append(context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
454	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  0)  {  cc.listSeparator();  add( "  {   ");  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  0)  {  cc.listSeparator();  add( "  {   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  0)  {  cc.listSeparator();  add( "  {   ");  }	  if(childCount    ==    1)    {    cc.listSeparator();    add(   "    {       ");    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
455	[BUG]  [BUGGY]  add( ")  {  OBJECTLIT  }   ");  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( ")  {  OBJECTLIT  }   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( ")  {  OBJECTLIT  }   ");	  add(   "    {    OBJECTLIT    }       ");    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
456	[BUG]  [BUGGY]  add( "  {  OBJECTLIT  }   ",  hasElseClause);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  OBJECTLIT  }   ",  hasElseClause);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  OBJECTLIT  }   ",  hasElseClause);	  add(   "    {    OBJECTLIT    }       ");    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
457	[BUG]  [BUGGY]  cc.getParent().replaceChild(n,  Node.newString(Token.NAME,  1));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.getParent().replaceChild(n,  Node.newString(Token.NAME,  1));  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.getParent().replaceChild(n,  Node.newString(Token.NAME,  1));	  cc.getParent().replaceChild(n,    Node.newString(Token.NAME));    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
458	[BUG]  [BUGGY]  cc.getParent().replaceChild(n,  Node.newString(Token.NAME,  name));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.getParent().replaceChild(n,  Node.newString(Token.NAME,  name));  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.getParent().replaceChild(n,  Node.newString(Token.NAME,  name));	  cc.getParent().replaceChild(n,    Node.newString(Token.NAME));    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
459	[BUG]  [BUGGY]  if(childCount  ==  0)  {  Preconditions.checkState(childCount  ==  0);  add( "  {   ");  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  if(childCount  ==  0)  {  Preconditions.checkState(childCount  ==  0);  add( "  {   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(childCount  ==  0)  {  Preconditions.checkState(childCount  ==  0);  add( "  {   ");  }	  Preconditions.checkState(childCount    ==    0);    add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
460	[BUG]  [BUGGY]  if(childCount  ==  0)  {  Preconditions.checkState(childCount  ==  0);  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "] ");  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  if(childCount  ==  0)  {  Preconditions.checkState(childCount  ==  0);  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "] ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(childCount  ==  0)  {  Preconditions.checkState(childCount  ==  0);  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "] ");  }	  Preconditions.checkState(childCount    ==    0);    add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
461	[BUG]  [BUGGY]  if(childCount  ==  0)  {  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  if(childCount  ==  0)  {  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(childCount  ==  0)  {  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }	  Preconditions.checkState(childCount    ==    0);    add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
462	[BUG]  [BUGGY]  if(childCount  ==  0)  {  Preconditions.checkState(childCount  ==  0);  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "  <   ");  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  if(childCount  ==  0)  {  Preconditions.checkState(childCount  ==  0);  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "  <   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(childCount  ==  0)  {  Preconditions.checkState(childCount  ==  0);  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "  <   ");  }	  Preconditions.checkState(childCount    ==    0);    add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
463	[BUG]  [BUGGY]  add( "  <   ").append(context  ==  Context.END_OF_EXPR)+  1;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <   ").append(context  ==  Context.END_OF_EXPR)+  1;  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <   ").append(context  ==  Context.END_OF_EXPR)+  1;	  add(   "    <       ").append(context    ==    Context.END_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
464	[BUG]  [BUGGY]  if(needsParens)  {  cc.listSeparator();  add(context  ==  Context.START_OF_EXPR);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  if(needsParens)  {  cc.listSeparator();  add(context  ==  Context.START_OF_EXPR);  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(needsParens)  {  cc.listSeparator();  add(context  ==  Context.START_OF_EXPR);  }	  cc.listSeparator();    add(context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
465	[BUG]  [BUGGY]  if(context  ==  Context.START_OF_EXPR)  {  cc.listSeparator();  add(context  ==  Context.START_OF_EXPR);  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  if(context  ==  Context.START_OF_EXPR)  {  cc.listSeparator();  add(context  ==  Context.START_OF_EXPR);  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(context  ==  Context.START_OF_EXPR)  {  cc.listSeparator();  add(context  ==  Context.START_OF_EXPR);  }	  cc.listSeparator();    add(context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
466	[BUG]  [BUGGY]  if(first!=  null)  {  cc.listSeparator();  add(context  ==  Context.START_OF_EXPR);  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  if(first!=  null)  {  cc.listSeparator();  add(context  ==  Context.START_OF_EXPR);  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(first!=  null)  {  cc.listSeparator();  add(context  ==  Context.START_OF_EXPR);  }	  cc.listSeparator();    add(context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
467	[BUG]  [BUGGY]  cc.setSeparator(context  ==  Context.START_OBJECTLIT  ||  context  ==  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.setSeparator(context  ==  Context.START_OBJECTLIT  ||  context  ==  Context.START_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.setSeparator(context  ==  Context.START_OBJECTLIT  ||  context  ==  Context.START_OF_EXPR);	  cc.setSeparator(context    ==    Context.START_OBJECTLIT);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
468	[BUG]  [BUGGY]  cc.setSeparator(context  ==  Context.START_OBJECTLIT  ||  context  ==  Context.START_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.setSeparator(context  ==  Context.START_OBJECTLIT  ||  context  ==  Context.START_INIT_CLAUSE);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.setSeparator(context  ==  Context.START_OBJECTLIT  ||  context  ==  Context.START_INIT_CLAUSE);	  cc.setSeparator(context    ==    Context.START_OBJECTLIT);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
469	[BUG]  [BUGGY]  cc.setSeparator(context  ==  Context.TEXT_OBJECTLIT);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.setSeparator(context  ==  Context.TEXT_OBJECTLIT);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.setSeparator(context  ==  Context.TEXT_OBJECTLIT);	  cc.setSeparator(context    ==    Context.START_OBJECTLIT);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
470	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2)  {  add( "  {   ");  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  2)  {  add( "  {   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  2)  {  add( "  {   ");  }	  if(childCount    ==    2)    {    Preconditions.checkState(childCount    ==    2);    add(   "    {       ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
471	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING)  {  add( "  <!(n.getType()  ==  Token.GET  ||  first.getType()  ==  Token.STRING));  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  if(first.getType()  ==  Token.STRING)  {  add( "  <!(n.getType()  ==  Token.GET  ||  first.getType()  ==  Token.STRING));  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(first.getType()  ==  Token.STRING)  {  add( "  <!(n.getType()  ==  Token.GET  ||  first.getType()  ==  Token.STRING));  }	  add(   "    <!(n.getType()    ==    Token.GET    ||    first.getType()    ==    Token.STRING));    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
472	[BUG]  [BUGGY]  add( ")  <!(first.getType()  ==  Token.GET  ||  first.getType()  ==  Token.STRING));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( ")  <!(first.getType()  ==  Token.GET  ||  first.getType()  ==  Token.STRING));  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( ")  <!(first.getType()  ==  Token.GET  ||  first.getType()  ==  Token.STRING));	  add(   "    <!(n.getType()    ==    Token.GET    ||    first.getType()    ==    Token.STRING));    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
473	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING)  {  add( "  <!(n.getType()  ==  Token.GET  ||  first.getType()  ==  Token.STRING));  }  else  {  add( "[ ");  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  if(first.getType()  ==  Token.STRING)  {  add( "  <!(n.getType()  ==  Token.GET  ||  first.getType()  ==  Token.STRING));  }  else  {  add( "[ ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(first.getType()  ==  Token.STRING)  {  add( "  <!(n.getType()  ==  Token.GET  ||  first.getType()  ==  Token.STRING));  }  else  {  add( "[ ");  }	  add(   "    <!(n.getType()    ==    Token.GET    ||    first.getType()    ==    Token.STRING));    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
474	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2)  {  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  2)  {  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  2)  {  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }	  if(childCount    ==    2)    {    add(   "    {       ");    }    else    {    Preconditions.checkState(childCount    ==    2);    add(   "    {       ");    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
475	[BUG]  [BUGGY]  if(childCount  ==  2)  {  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  3);  add( "  {   ");  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  if(childCount  ==  2)  {  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  3);  add( "  {   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(childCount  ==  2)  {  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  3);  add( "  {   ");  }	  if(childCount    ==    2)    {    add(   "    {       ");    }    else    {    Preconditions.checkState(childCount    ==    2);    add(   "    {       ");    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
476	[BUG]  [BUGGY]  add(context  ==  Context.BEFORE_DANGLING_ELSE);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add(context  ==  Context.BEFORE_DANGLING_ELSE);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add(context  ==  Context.BEFORE_DANGLING_ELSE);	  add(context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
477	[BUG]  [BUGGY]  add(n,  context  ==  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add(n,  context  ==  Context.START_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add(n,  context  ==  Context.START_OF_EXPR);	  add(context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
478	[BUG]  [BUGGY]  add(context  ==  Context.TEXT_OBJECTLIT);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add(context  ==  Context.TEXT_OBJECTLIT);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add(context  ==  Context.TEXT_OBJECTLIT);	  add(context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
479	[BUG]  [BUGGY]  n.remove( "  }   ");  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.remove( "  }   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.remove( "  }   ");	  n.add(   "    }       ");    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
480	[BUG]  [BUGGY]  n.add(context  ==  Context.NAME_OF_OBJECTLIT);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add(context  ==  Context.NAME_OF_OBJECTLIT);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add(context  ==  Context.NAME_OF_OBJECTLIT);	  n.add(   "    }       ");    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
481	[BUG]  [BUGGY]  n.add(context  ==  Context.TEXT_OBJECTLIT);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add(context  ==  Context.TEXT_OBJECTLIT);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add(context  ==  Context.TEXT_OBJECTLIT);	  n.add(   "    }       ");    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
482	[BUG]  [BUGGY]  add( "  <   ",  hasElseClause?  IN_FOR_INIT_CLAUSE  :  IN_FOR_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <   ",  hasElseClause?  IN_FOR_INIT_CLAUSE  :  IN_FOR_INIT_CLAUSE);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <   ",  hasElseClause?  IN_FOR_INIT_CLAUSE  :  IN_FOR_INIT_CLAUSE);	  add(   "    <       ",    hasElseClause);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
483	[BUG]  [BUGGY]  add( "  <   ",  hasElseClause? "> "  : "  <   ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <   ",  hasElseClause? "> "  : "  <   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <   ",  hasElseClause? "> "  : "  <   ");	  add(   "    <       ",    hasElseClause);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
484	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  0  -  childCount);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  0  -  childCount);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  0  -  childCount);	  Preconditions.checkState(childCount    ==    1    -    childCount);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
485	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1  +  childCount);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  1  +  childCount);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  1  +  childCount);	  Preconditions.checkState(childCount    ==    1    -    childCount);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
486	[BUG]  [BUGGY]  if(needsParens)  {  cc.detachFromParent();  add( "  {   ");  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  if(needsParens)  {  cc.detachFromParent();  add( "  {   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(needsParens)  {  cc.detachFromParent();  add( "  {   ");  }	  cc.detachFromParent();    add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
487	[BUG]  [BUGGY]  if(needsParens)  {  cc.detachFromParent();  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "] ");  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  if(needsParens)  {  cc.detachFromParent();  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "] ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(needsParens)  {  cc.detachFromParent();  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "] ");  }	  cc.detachFromParent();    add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
488	[BUG]  [BUGGY]  if(needsParens)  {  cc.detachFromParent();  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( ", ");  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  if(needsParens)  {  cc.detachFromParent();  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( ", ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(needsParens)  {  cc.detachFromParent();  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( ", ");  }	  cc.detachFromParent();    add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
489	[BUG]  [BUGGY]  add( "  {  0  }   ",  needsParens  +  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  needsParens  +  1);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  needsParens  +  1);	  add(   "    {    0    }       ",    needsParens);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
490	[BUG]  [BUGGY]  add(1)  {  0  }   ");  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add(1)  {  0  }   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add(1)  {  0  }   ");	  add(   ")    {    0    }       ");    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
491	[BUG]  [BUGGY]  add(first)  {  0  }   ");  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add(first)  {  0  }   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add(first)  {  0  }   ");	  add(   ")    {    0    }       ");    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
492	[BUG]  [BUGGY]  add( ")  {  0  }   ",  context);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( ")  {  0  }   ",  context);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( ")  {  0  }   ",  context);	  add(   ")    {    0    }       ");    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
493	[BUG]  [BUGGY]  add(2)  {  0  }   ");  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add(2)  {  0  }   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add(2)  {  0  }   ");	  add(   ")    {    0    }       ");    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
494	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2  +  childCount);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  2  +  childCount);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  2  +  childCount);	  Preconditions.checkState(childCount    ==    2    -    childCount);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
495	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  Node  first  =  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  1);  Node  first  =  n.getLastChild();  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  1);  Node  first  =  n.getLastChild();	  Node    first    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
496	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  Node  first  =  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  1);  Node  first  =  n.getFirstChild();  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  1);  Node  first  =  n.getFirstChild();	  Node    first    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
497	[BUG]  [BUGGY]  n.add(context  ==  Context.BEFORE_DANGLING_ELSE);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add(context  ==  Context.BEFORE_DANGLING_ELSE);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add(context  ==  Context.BEFORE_DANGLING_ELSE);	  n.add(context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
498	[BUG]  [BUGGY]  n.add(context  ==  Context.FIELD_NAME);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add(context  ==  Context.FIELD_NAME);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add(context  ==  Context.FIELD_NAME);	  n.add(context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
499	[BUG]  [BUGGY]  if(childCount  ==  1)  {  Preconditions.checkState(childCount  ==  1);  add( "delete ");  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  if(childCount  ==  1)  {  Preconditions.checkState(childCount  ==  1);  add( "delete ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(childCount  ==  1)  {  Preconditions.checkState(childCount  ==  1);  add( "delete ");  }	  Preconditions.checkState(childCount    ==    1);    add(   "delete   ");    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
500	[BUG]  [BUGGY]  if(childCount  ==  1)  {  Preconditions.checkState(childCount  ==  1);  add( "delete ");  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  if(childCount  ==  1)  {  Preconditions.checkState(childCount  ==  1);  add( "delete ");  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(childCount  ==  1)  {  Preconditions.checkState(childCount  ==  1);  add( "delete ");  }  else  {  throw  new  IllegalStateException( " ");  }	  Preconditions.checkState(childCount    ==    1);    add(   "delete   ");    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
501	[BUG]  [BUGGY]  if(childCount  ==  1)  {  Preconditions.checkState(childCount  ==  1);  add( "delete ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  if(childCount  ==  1)  {  Preconditions.checkState(childCount  ==  1);  add( "delete ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(childCount  ==  1)  {  Preconditions.checkState(childCount  ==  1);  add( "delete ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  Preconditions.checkState(childCount    ==    1);    add(   "delete   ");    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
502	[BUG]  [BUGGY]  if(childCount  ==  1)  {  Preconditions.checkState(childCount  ==  1);  add( "delete ");  }  else  {  Context.START_OF_EXPR  =  false;  }  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  if(childCount  ==  1)  {  Preconditions.checkState(childCount  ==  1);  add( "delete ");  }  else  {  Context.START_OF_EXPR  =  false;  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(childCount  ==  1)  {  Preconditions.checkState(childCount  ==  1);  add( "delete ");  }  else  {  Context.START_OF_EXPR  =  false;  }	  Preconditions.checkState(childCount    ==    1);    add(   "delete   ");    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
503	[BUG]  [BUGGY]  add( ")  {  }, ");  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( ")  {  }, ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( ")  {  }, ");	  add(   "    {    },   ");    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
504	[BUG]  [BUGGY]  add( ")  {  }   ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( ")  {  }   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( ")  {  }   ");	  add(   "    {    },   ");    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
505	[BUG]  [BUGGY]  n.add(context  ==  Context.END_OF_ELSE);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add(context  ==  Context.END_OF_ELSE);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add(context  ==  Context.END_OF_ELSE);	  n.add(context    ==    Context.END_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
506	[BUG]  [BUGGY]  cc.setSeparator(context  ==  Context.BEFORE_DANGLING_ELSE);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.setSeparator(context  ==  Context.BEFORE_DANGLING_ELSE);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.setSeparator(context  ==  Context.BEFORE_DANGLING_ELSE);	  cc.setSeparator(context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
507	[BUG]  [BUGGY]  cc.addSeparator(context  ==  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.addSeparator(context  ==  Context.START_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.addSeparator(context  ==  Context.START_OF_EXPR);	  cc.setSeparator(context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
508	[BUG]  [BUGGY]  cc.setSeparator(context  ==  Context.START_OF_ELSE);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.setSeparator(context  ==  Context.START_OF_ELSE);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.setSeparator(context  ==  Context.START_OF_ELSE);	  cc.setSeparator(context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
509	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  0);  Node  first  =  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  0);  Node  first  =  n.getFirstChild();  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  0);  Node  first  =  n.getFirstChild();	  Node    first    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
510	[BUG]  [BUGGY]  n.add( "  {  1  }   ",  context);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add( "  {  1  }   ",  context);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add( "  {  1  }   ",  context);	  n.add(   "    {    1    }       ");    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
511	[BUG]  [BUGGY]  add( "  {  }   ",  node.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  }   ",  node.getFirstChild());  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  }   ",  node.getFirstChild());	  add(   "    {    }       ",    n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
512	[BUG]  [BUGGY]  add( "  {  n:%s  }   ");  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  n:%s  }   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  n:%s  }   ");	  add(   "    {    n:n   ");    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
513	[BUG]  [BUGGY]  n.add( "  <   ").append(context  ==  Context.END_OF_OBJECTLIT);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add( "  <   ").append(context  ==  Context.END_OF_OBJECTLIT);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add( "  <   ").append(context  ==  Context.END_OF_OBJECTLIT);	  n.add(   "    <       ");    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
514	[BUG]  [BUGGY]  add( "  {  haveElseClause  }   ");  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  haveElseClause  }   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  haveElseClause  }   ");	  add(   "    {    hasElseClause    }       ");    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
515	[BUG]  [BUGGY]  add( ")  {  hasElseClause  }   ");  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( ")  {  hasElseClause  }   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( ")  {  hasElseClause  }   ");	  add(   "    {    hasElseClause    }       ");    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
516	[BUG]  [BUGGY]  add( "  {  first,  body  }   ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  first,  body  }   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  first,  body  }   ");	  add(   "    {    first    }       ");    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
517	[BUG]  [BUGGY]  add( "  {  first;  }   ");  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  first;  }   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  first;  }   ");	  add(   "    {    first    }       ");    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
518	[BUG]  [BUGGY]  add( "  {  }   ",  Context.END_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  }   ",  Context.END_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  }   ",  Context.END_OF_EXPR);	  add(   "    {    }       ",    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
519	[BUG]  [BUGGY]  add( "  {  }   ",  Context.STATEMENT  + "  }   ");  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  }   ",  Context.STATEMENT  + "  }   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  }   ",  Context.STATEMENT  + "  }   ");	  add(   "    {    }       ",    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
520	[BUG]  [BUGGY]  add( "  {  }   ",  Context.STATEMENT  ||  context  ==  Context.END_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  }   ",  Context.STATEMENT  ||  context  ==  Context.END_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  }   ",  Context.STATEMENT  ||  context  ==  Context.END_OF_EXPR);	  add(   "    {    }       ",    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
521	[BUG]  [BUGGY]  add( "[]  {  0  }   ");  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "[]  {  0  }   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "[]  {  0  }   ");	  add(   "[0]    {    0    }       ");    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
522	[BUG]  [BUGGY]  add( ")  <  0  }   ");  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( ")  <  0  }   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( ")  <  0  }   ");	  add(   "    <    0    }       ");    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
523	[BUG]  [BUGGY]  add( "  <  0  }  1 ");  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <  0  }  1 ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <  0  }  1 ");	  add(   "    <    0    }       ");    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
524	[BUG]  [BUGGY]  add( "  {  0  }   ",  context  ==  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  context  ==  Context.START_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  context  ==  Context.START_OF_EXPR);	  add(   "    {    0    }       ",    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
525	[BUG]  [BUGGY]  add( ")  {  0  }   ",  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( ")  {  0  }   ",  Context.START_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( ")  {  0  }   ",  Context.START_OF_EXPR);	  add(   "    {    0    }       ",    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
526	[BUG]  [BUGGY]  add( "  {  0  }   ",  Context.SCRIPT_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  Context.SCRIPT_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  Context.SCRIPT_OF_EXPR);	  add(   "    {    0    }       ",    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
527	[BUG]  [BUGGY]  cc.setSeparator(context  ==  Context.END_OF_ELSE);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.setSeparator(context  ==  Context.END_OF_ELSE);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.setSeparator(context  ==  Context.END_OF_ELSE);	  cc.setSeparator(context    ==    Context.END_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
528	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGet(first))  {  cc.listSeparator();  add( "  {   ");  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(NodeUtil.isGet(first))  {  cc.listSeparator();  add( "  {   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(NodeUtil.isGet(first))  {  cc.listSeparator();  add( "  {   ");  }	  if(NodeUtil.isExpressionNode(n))    {    cc.listSeparator();    add(   "    {       ");    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
529	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExpressionNode(first))  ==  cc.listSeparator();  add( "  {   ");  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(NodeUtil.isExpressionNode(first))  ==  cc.listSeparator();  add( "  {   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(NodeUtil.isExpressionNode(first))  ==  cc.listSeparator();  add( "  {   ");	  if(NodeUtil.isExpressionNode(n))    {    cc.listSeparator();    add(   "    {       ");    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
530	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExpressionNode(n))  {  cc.listSeparator();  add( "  {   ");  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(NodeUtil.isExpressionNode(n))  {  cc.listSeparator();  add( "  {   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(NodeUtil.isExpressionNode(n))  {  cc.listSeparator();  add( "  {   ");  }	  if(NodeUtil.isExpressionNode(n))    {    cc.listSeparator();    add(   "    {       ");    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
531	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGet(n))  {  cc.listSeparator();  add( "  {   ");  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(NodeUtil.isGet(n))  {  cc.listSeparator();  add( "  {   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(NodeUtil.isGet(n))  {  cc.listSeparator();  add( "  {   ");  }	  if(NodeUtil.isExpressionNode(n))    {    cc.listSeparator();    add(   "    {       ");    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
532	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1)  {  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "  <   ");  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  1)  {  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "  <   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  1)  {  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "  <   ");  }	  if(needsParens)    {    Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    }    else    {    Preconditions.checkState(childCount    ==    1);    add(   "    <       ");    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
533	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  0);  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "  <   ");  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  0);  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "  <   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  0);  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "  <   ");  }	  if(needsParens)    {    Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    }    else    {    Preconditions.checkState(childCount    ==    1);    add(   "    <       ");    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
534	[BUG]  [BUGGY]  if(needsParens)  {  cc.setSeparator(n);  add( "  {   ");  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  if(needsParens)  {  cc.setSeparator(n);  add( "  {   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(needsParens)  {  cc.setSeparator(n);  add( "  {   ");  }	  cc.setSeparator(n);    add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
535	[BUG]  [BUGGY]  cc.setSeparator(context  ==  Context.START_OF_EXPR);  add( "  {   ");  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.setSeparator(context  ==  Context.START_OF_EXPR);  add( "  {   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.setSeparator(context  ==  Context.START_OF_EXPR);  add( "  {   ");	  cc.setSeparator(n);    add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
536	[BUG]  [BUGGY]  cc.setSeparator(context);  add( "  {   ");  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.setSeparator(context);  add( "  {   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.setSeparator(context);  add( "  {   ");	  cc.setSeparator(n);    add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
537	[BUG]  [BUGGY]  add( "  <!(shouldSeparator)?   ");  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <!(shouldSeparator)?   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <!(shouldSeparator)?   ");	  add(   "    <!(needsParens)?   ");    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
538	[BUG]  [BUGGY]  add( "  <!(needsParens)?   ",  hasElse);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <!(needsParens)?   ",  hasElse);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <!(needsParens)?   ",  hasElse);	  add(   "    <!(needsParens)?   ");    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
539	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1)  {  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "] ");  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  1)  {  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "] ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  1)  {  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "] ");  }	  if(needsParens)    {    Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    }    else    {    Preconditions.checkState(childCount    ==    1);    add(   "]   ");    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
540	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  0);  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "] ");  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  0);  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "] ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  0);  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "] ");  }	  if(needsParens)    {    Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    }    else    {    Preconditions.checkState(childCount    ==    1);    add(   "]   ");    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
541	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "] ");  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "] ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "] ");  }	  if(needsParens)    {    Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    }    else    {    Preconditions.checkState(childCount    ==    1);    add(   "]   ");    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
542	[BUG]  [BUGGY]  add( ")  <  / ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( ")  <  / ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( ")  <  / ");	  add(   "    <    /   ");    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
543	[BUG]  [BUGGY]  add( "  <!/ ");  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <!/ ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <!/ ");	  add(   "    <    /   ");    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
544	[BUG]  [BUGGY]  n.add(context  ==  Context.END_OBJECTLIT  |  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add(context  ==  Context.END_OBJECTLIT  |  Context.START_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add(context  ==  Context.END_OBJECTLIT  |  Context.START_OF_EXPR);	  n.add(context    ==    Context.END_OBJECTLIT);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
545	[BUG]  [BUGGY]  add( "  {  0  }   ",  context.getTextNode());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  context.getTextNode());  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  context.getTextNode());	  add(   "    {    0    }       ",    context.getCurrentNode());    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
546	[BUG]  [BUGGY]  add( "  {  0  }   ",  context.getCurrentNameNode());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  context.getCurrentNameNode());  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  context.getCurrentNameNode());	  add(   "    {    0    }       ",    context.getCurrentNode());    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
547	[BUG]  [BUGGY]  add( "  {  0  }   ",  context.getCurrentName());  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  context.getCurrentName());  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  context.getCurrentName());	  add(   "    {    0    }       ",    context.getCurrentNode());    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
548	[BUG]  [BUGGY]  add( "  {  0  }   ",  context.getText());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  context.getText());  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  context.getText());	  add(   "    {    0    }       ",    context.getCurrentNode());    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
549	[BUG]  [BUGGY]  n.add(context  ==  Context.END_OF_OBJECTLIT  |  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add(context  ==  Context.END_OF_OBJECTLIT  |  Context.START_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add(context  ==  Context.END_OF_OBJECTLIT  |  Context.START_OF_EXPR);	  n.add(context    ==    Context.END_OF_OBJECTLIT);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
550	[BUG]  [BUGGY]  n.add(context  ==  Context.END_OF_OBJECTLIT  ||  context  ==  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add(context  ==  Context.END_OF_OBJECTLIT  ||  context  ==  Context.START_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add(context  ==  Context.END_OF_OBJECTLIT  ||  context  ==  Context.START_OF_EXPR);	  n.add(context    ==    Context.END_OF_OBJECTLIT);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
551	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1)  {  add( "  {   ");  }  else  {  add(first);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  1)  {  add( "  {   ");  }  else  {  add(first);  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  1)  {  add( "  {   ");  }  else  {  add(first);  }	  if(n.getType()    ==    Token.STRING)    {    Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    }    else    {    add(first);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
552	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  add(first);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  add(first);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  else  {  add(first);	  if(n.getType()    ==    Token.STRING)    {    Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    }    else    {    add(first);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
553	[BUG]  [BUGGY]  add( "  {  0  }   ",  n);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  n);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  n);	  add(   "    {    0    }       ",    hasElseClause);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
554	[BUG]  [BUGGY]  add( "  {  0  }   ",  Context.STATEMENT  + "  }   ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  Context.STATEMENT  + "  }   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  Context.STATEMENT  + "  }   ");	  add(   "    {    0    }       ",    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
555	[BUG]  [BUGGY]  add(first, "  {  0  }   ",  Context.STATEMENT);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add(first, "  {  0  }   ",  Context.STATEMENT);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add(first, "  {  0  }   ",  Context.STATEMENT);	  add(   "    {    0    }       ",    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
556	[BUG]  [BUGGY]  n.add(context  ==  Context.EXPR_RESULT)  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add(context  ==  Context.EXPR_RESULT)  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add(context  ==  Context.EXPR_RESULT)	  n.add(context    ==    Context.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
557	[BUG]  [BUGGY]  n.add(context  ==  Context.EXPR_RESULT  +  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add(context  ==  Context.EXPR_RESULT  +  1);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add(context  ==  Context.EXPR_RESULT  +  1);	  n.add(context    ==    Context.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
558	[BUG]  [BUGGY]  add( ")  {  n,  hasElseClause  }   ");  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( ")  {  n,  hasElseClause  }   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( ")  {  n,  hasElseClause  }   ");	  add(   "    {    n,    hasElseClause    }       ");    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
559	[BUG]  [BUGGY]  add( "  {  n,  needParens  }   ");  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  n,  needParens  }   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  n,  needParens  }   ");	  add(   "    {    n,    hasElseClause    }       ");    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
560	[BUG]  [BUGGY]  add( "  {  }   ",  n.intValue());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  }   ",  n.intValue());  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  }   ",  n.intValue());	  add(   "    {    }       ",    n);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
561	[BUG]  [BUGGY]  cc.getParent().replaceChild(n,  Node.newString(Token.NAME,  key),  this);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.getParent().replaceChild(n,  Node.newString(Token.NAME,  key),  this);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.getParent().replaceChild(n,  Node.newString(Token.NAME,  key),  this);	  cc.getParent().replaceChild(n,    Node.newString(Token.NAME,    key));    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
562	[BUG]  [BUGGY]  cc.getParent().replaceChild(n,  Node.newString(Token.NAME,  key),  node);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.getParent().replaceChild(n,  Node.newString(Token.NAME,  key),  node);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.getParent().replaceChild(n,  Node.newString(Token.NAME,  key),  node);	  cc.getParent().replaceChild(n,    Node.newString(Token.NAME,    key));    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
563	[BUG]  [BUGGY]  cc.getParent().replaceChild(n,  Node.newString(Token.NAME,  key),  predicate);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.getParent().replaceChild(n,  Node.newString(Token.NAME,  key),  predicate);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.getParent().replaceChild(n,  Node.newString(Token.NAME,  key),  predicate);	  cc.getParent().replaceChild(n,    Node.newString(Token.NAME,    key));    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
564	[BUG]  [BUGGY]  n.remove( "  {  }   ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.remove( "  {  }   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.remove( "  {  }   ");	  n.add(   "    {    }       ");    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
565	[BUG]  [BUGGY]  add( "  <  OBJECTLIT> "  +  Integer.toHexString(childCount));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <  OBJECTLIT> "  +  Integer.toHexString(childCount));  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <  OBJECTLIT> "  +  Integer.toHexString(childCount));	  add(   "    <    OBJECTLIT>   ");    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
566	[BUG]  [BUGGY]  add( "  <  OBJECTLIT> ").add(context  ==  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <  OBJECTLIT> ").add(context  ==  Context.START_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <  OBJECTLIT> ").add(context  ==  Context.START_OF_EXPR);	  add(   "    <    OBJECTLIT>   ");    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
567	[BUG]  [BUGGY]  add( ")  <  OBJECTLIT> ");  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( ")  <  OBJECTLIT> ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( ")  <  OBJECTLIT> ");	  add(   "    <    OBJECTLIT>   ");    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
568	[BUG]  [BUGGY]  add( "  <  OBJECTLIT> "  +  Integer.toHexString(n.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <  OBJECTLIT> "  +  Integer.toHexString(n.getLastChild()));  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <  OBJECTLIT> "  +  Integer.toHexString(n.getLastChild()));	  add(   "    <    OBJECTLIT>   ");    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
569	[BUG]  [BUGGY]  add( "  <  OBJECTLIT> "  +  Integer.toString(childCount));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <  OBJECTLIT> "  +  Integer.toString(childCount));  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <  OBJECTLIT> "  +  Integer.toString(childCount));	  add(   "    <    OBJECTLIT>   ");    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
570	[BUG]  [BUGGY]  add( "  <   ").append(context  ==  Context.END_OBJECTLIT  ||  context  ==  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <   ").append(context  ==  Context.END_OBJECTLIT  ||  context  ==  Context.START_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <   ").append(context  ==  Context.END_OBJECTLIT  ||  context  ==  Context.START_OF_EXPR);	  add(   "    <       ").append(context    ==    Context.END_OBJECTLIT);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
571	[BUG]  [BUGGY]  add( "  {  }   ",  funcNeedsParens);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  }   ",  funcNeedsParens);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  }   ",  funcNeedsParens);	  add(   "    {    }       ",    hasElseClause);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
572	[BUG]  [BUGGY]  if(first.getType()  ==  Token.NAME)  {  add( "  <!(n.getType()  ==  Token.GET  ||  first.getType()  ==  Token.NAME));  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  if(first.getType()  ==  Token.NAME)  {  add( "  <!(n.getType()  ==  Token.GET  ||  first.getType()  ==  Token.NAME));  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(first.getType()  ==  Token.NAME)  {  add( "  <!(n.getType()  ==  Token.GET  ||  first.getType()  ==  Token.NAME));  }	  add(   "    <!(n.getType()    ==    Token.GET    ||    first.getType()    ==    Token.NAME));    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
573	[BUG]  [BUGGY]  add( ")  <!(first.getType()  ==  Token.GET  ||  first.getType()  ==  Token.NAME));  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( ")  <!(first.getType()  ==  Token.GET  ||  first.getType()  ==  Token.NAME));  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( ")  <!(first.getType()  ==  Token.GET  ||  first.getType()  ==  Token.NAME));	  add(   "    <!(n.getType()    ==    Token.GET    ||    first.getType()    ==    Token.NAME));    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
574	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  add( ")  {   ");  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  2);  add( ")  {   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  2);  add( ")  {   ");	  if(n.getType()    ==    Token.STRING)    {    Preconditions.checkState(childCount    ==    2);    add(   "    {       ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
575	[BUG]  [BUGGY]  Context  cc  =  getContextForNode(context);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Context  cc  =  getContextForNode(context);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Context  cc  =  getContextForNode(context);	  if(context    ==    Context.START_OF_EXPR)    {    cc.listSeparator();    add(   "    {       ");    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
576	[BUG]  [BUGGY]  Context  cc  =  getContextForNoInOperator(context);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Context  cc  =  getContextForNoInOperator(context);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Context  cc  =  getContextForNoInOperator(context);	  if(context    ==    Context.START_OF_EXPR)    {    cc.listSeparator();    add(   "    {       ");    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
577	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Context  cc  =  getCurrentContext();  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Context  cc  =  getCurrentContext();	  if(context    ==    Context.START_OF_EXPR)    {    cc.listSeparator();    add(   "    {       ");    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
578	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1)  {  add( "  {   ");  }  else  {  Context.checkState(context  ==  Context.START_OF_EXPR);  add( "] ");  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  1)  {  add( "  {   ");  }  else  {  Context.checkState(context  ==  Context.START_OF_EXPR);  add( "] ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  1)  {  add( "  {   ");  }  else  {  Context.checkState(context  ==  Context.START_OF_EXPR);  add( "] ");  }	  if(needsParens)    {    Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    }    else    {    Context.checkState(context    ==    Context.START_OF_EXPR);    add(   "]   ");    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
579	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  0);  add( "  {   ");  }  else  {  Context.checkState(context  ==  Context.START_OF_EXPR);  add( "] ");  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  0);  add( "  {   ");  }  else  {  Context.checkState(context  ==  Context.START_OF_EXPR);  add( "] ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  0);  add( "  {   ");  }  else  {  Context.checkState(context  ==  Context.START_OF_EXPR);  add( "] ");  }	  if(needsParens)    {    Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    }    else    {    Context.checkState(context    ==    Context.START_OF_EXPR);    add(   "]   ");    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
580	[BUG]  [BUGGY]  add( "[0]  {  0  }  hasElse ");  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "[0]  {  0  }  hasElse ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "[0]  {  0  }  hasElse ");	  add(   "[0]    {    0    }       ");    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
581	[BUG]  [BUGGY]  Context  cc  =  context.getCurrentContext();  add( "  {   ");  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Context  cc  =  context.getCurrentContext();  add( "  {   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Context  cc  =  context.getCurrentContext();  add( "  {   ");	  if(context    ==    Context.START_OF_EXPR)    {    cc.listSeparator();    add(   "    {       ");    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
582	[BUG]  [BUGGY]  cc.listSeparator();  add( ")  {   ");  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.listSeparator();  add( ")  {   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.listSeparator();  add( ")  {   ");	  if(context    ==    Context.START_OF_EXPR)    {    cc.listSeparator();    add(   "    {       ");    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
583	[BUG]  [BUGGY]  add( "  {  first,  hasElse, ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  first,  hasElse, ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  first,  hasElse, ");	  add(   "    {    first    }       ");    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
584	[BUG]  [BUGGY]  add( "  {  first,  hasElse ");  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  first,  hasElse ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  first,  hasElse ");	  add(   "    {    first    }       ");    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
585	[BUG]  [BUGGY]  add( "  {  first,  needsParens:   ");  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  first,  needsParens:   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  first,  needsParens:   ");	  add(   "    {    first    }       ");    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
586	[BUG]  [BUGGY]  add( "  {  OBJECTLIT= ");  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  OBJECTLIT= ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  OBJECTLIT= ");	  add(   "    {    OBJECTLIT    <       ");    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
587	[BUG]  [BUGGY]  add( "  <   ",  n);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <   ",  n);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <   ",  n);	  add(   "    <       ",    hasElseClause);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
588	[BUG]  [BUGGY]  n.add( "  {  }   ",  Context.STATEMENT);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add( "  {  }   ",  Context.STATEMENT);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add( "  {  }   ",  Context.STATEMENT);	  n.add(   "    {    }       ");    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
589	[BUG]  [BUGGY]  add( "  {  OBJECTLIT: "  +  Integer.toHexString(context));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  OBJECTLIT: "  +  Integer.toHexString(context));  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  OBJECTLIT: "  +  Integer.toHexString(context));	  add(   "    {    OBJECTLIT:       ");    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
590	[BUG]  [BUGGY]  add( "  {  OBJECTLIT: "  +  Integer.toHexString(int));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  OBJECTLIT: "  +  Integer.toHexString(int));  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  OBJECTLIT: "  +  Integer.toHexString(int));	  add(   "    {    OBJECTLIT:       ");    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
591	[BUG]  [BUGGY]  add( "  {  OBJECTLIT: "  +  Token.name(n.getString()));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  OBJECTLIT: "  +  Token.name(n.getString()));  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  OBJECTLIT: "  +  Token.name(n.getString()));	  add(   "    {    OBJECTLIT:       ");    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
592	[BUG]  [BUGGY]  add( "  {   ");  }  else  {  Context.report(JSError.make(context,  IN_FOR_INIT_CLAUSE));  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {   ");  }  else  {  Context.report(JSError.make(context,  IN_FOR_INIT_CLAUSE));  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {   ");  }  else  {  Context.report(JSError.make(context,  IN_FOR_INIT_CLAUSE));  }	  if(childCount    ==    1)    {    Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    }    else    {    Context.report(JSError.make(context,    IN_FOR_INIT_CLAUSE));    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
593	[BUG]  [BUGGY]  if(childCount  >  0)  {  Preconditions.checkState(childCount  ==  0);  add( "  {   ");  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  if(childCount  >  0)  {  Preconditions.checkState(childCount  ==  0);  add( "  {   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(childCount  >  0)  {  Preconditions.checkState(childCount  ==  0);  add( "  {   ");  }	  Preconditions.checkState(childCount    ==    0);    add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
594	[BUG]  [BUGGY]  if(childCount  ==  2)  {  Preconditions.checkState(childCount  ==  0);  add( "  {   ");  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  if(childCount  ==  2)  {  Preconditions.checkState(childCount  ==  0);  add( "  {   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(childCount  ==  2)  {  Preconditions.checkState(childCount  ==  0);  add( "  {   ");  }	  Preconditions.checkState(childCount    ==    0);    add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
595	[BUG]  [BUGGY]  if(childCount  ==  2)  {  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  if(childCount  ==  2)  {  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(childCount  ==  2)  {  Preconditions.checkState(childCount  ==  1);  add( "  {   ");  }	  Preconditions.checkState(childCount    ==    0);    add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
596	[BUG]  [BUGGY]  if(childCount  ==  0)  {  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  if(childCount  ==  0)  {  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(childCount  ==  0)  {  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }	  Preconditions.checkState(childCount    ==    0);    add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
597	[BUG]  [BUGGY]  add( "  {  1  }   ",  getContextForNoInOperator(context));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  1  }   ",  getContextForNoInOperator(context));  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  1  }   ",  getContextForNoInOperator(context));	  add(   "    {    1    }       ");    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
598	[BUG]  [BUGGY]  add( "  {  1  }   ",  Context.STATEMENT);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  1  }   ",  Context.STATEMENT);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  1  }   ",  Context.STATEMENT);	  add(   "    {    1    }       ");    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
599	[BUG]  [BUGGY]  add( "  {  n:] ");  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  n:] ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  n:] ");	  add(   "    {    n:n   ");    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
600	[BUG]  [BUGGY]  add( "  {  n:' ");  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  n:' ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  n:' ");	  add(   "    {    n:n   ");    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
601	[BUG]  [BUGGY]  cc.setSeparator(context  ==  Context.BLOCK);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.setSeparator(context  ==  Context.BLOCK);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.setSeparator(context  ==  Context.BLOCK);	  cc.setSeparator(null);    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
602	[BUG]  [BUGGY]  if(childCount  ==  1)  {  Preconditions.checkState(childCount  ==  1);  add( "delete ");  }  else  {  break;  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  if(childCount  ==  1)  {  Preconditions.checkState(childCount  ==  1);  add( "delete ");  }  else  {  break;  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(childCount  ==  1)  {  Preconditions.checkState(childCount  ==  1);  add( "delete ");  }  else  {  break;  }	  Preconditions.checkState(childCount    ==    1);    add(   "delete   ");    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
603	[BUG]  [BUGGY]  if(childCount  ==  1)  {  Preconditions.checkState(childCount  ==  1);  add( "delete ");  }  else  {  add(context  ==  Context.START_OF_EXPR);  add(first);  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  if(childCount  ==  1)  {  Preconditions.checkState(childCount  ==  1);  add( "delete ");  }  else  {  add(context  ==  Context.START_OF_EXPR);  add(first);  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(childCount  ==  1)  {  Preconditions.checkState(childCount  ==  1);  add( "delete ");  }  else  {  add(context  ==  Context.START_OF_EXPR);  add(first);  }	  Preconditions.checkState(childCount    ==    1);    add(   "delete   ");    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
604	[BUG]  [BUGGY]  cc.addChildToFront(new  Node(context,  first));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.addChildToFront(new  Node(context,  first));  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.addChildToFront(new  Node(context,  first));	  cc.addChildToFront(first);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
605	[BUG]  [BUGGY]  add( "  <   ").append(context  ==  Context.END_OBJECTLIT,  first);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <   ").append(context  ==  Context.END_OBJECTLIT,  first);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <   ").append(context  ==  Context.END_OBJECTLIT,  first);	  add(   "    <       ").append(context    ==    Context.END_OBJECTLIT);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
606	[BUG]  [BUGGY]  cc.listSeparator();  add( "  {   ");  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.listSeparator();  add( "  {   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.listSeparator();  add( "  {   ");  }	  if(needsParens)    {    cc.listSeparator();    add(   "    {       ");    }    else    {    Preconditions.checkState(childCount    ==    1);    add(   "    <       ");    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
607	[BUG]  [BUGGY]  cc.listSeparator();  add( ")  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "  <   ");  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.listSeparator();  add( ")  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "  <   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.listSeparator();  add( ")  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "  <   ");  }	  if(needsParens)    {    cc.listSeparator();    add(   "    {       ");    }    else    {    Preconditions.checkState(childCount    ==    1);    add(   "    <       ");    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
608	[BUG]  [BUGGY]  add( ") ").append(context  ==  Context.END_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( ") ").append(context  ==  Context.END_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( ") ").append(context  ==  Context.END_OF_EXPR);	  add(   "    <       ").append(context    ==    Context.END_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
609	[BUG]  [BUGGY]  cc.getParent().replaceChild(parent,  Node.newString(Token.NAME));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.getParent().replaceChild(parent,  Node.newString(Token.NAME));  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.getParent().replaceChild(parent,  Node.newString(Token.NAME));	  cc.getParent().replaceChild(n,    Node.newString(Token.NAME));    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
610	[BUG]  [BUGGY]  cc.listSeparator();  add(context  ==  Context.STATEMENT);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.listSeparator();  add(context  ==  Context.STATEMENT);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.listSeparator();  add(context  ==  Context.STATEMENT);	  cc.listSeparator();    add(context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
611	[BUG]  [BUGGY]  if(childCount  ==  2)  {  add( "delete ");  }  else  {  Preconditions.checkState(childCount  ==  2);  add( "delete ");  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  if(childCount  ==  2)  {  add( "delete ");  }  else  {  Preconditions.checkState(childCount  ==  2);  add( "delete ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(childCount  ==  2)  {  add( "delete ");  }  else  {  Preconditions.checkState(childCount  ==  2);  add( "delete ");  }	  Preconditions.checkState(childCount    ==    2);    add(   "delete   ");    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
612	[BUG]  [BUGGY]  if(childCount  ==  2)  {  Preconditions.checkState(childCount  ==  2);  add( "delete ");  }  else  {  break;  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  if(childCount  ==  2)  {  Preconditions.checkState(childCount  ==  2);  add( "delete ");  }  else  {  break;  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(childCount  ==  2)  {  Preconditions.checkState(childCount  ==  2);  add( "delete ");  }  else  {  break;  }	  Preconditions.checkState(childCount    ==    2);    add(   "delete   ");    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
613	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  0);  add( "  {   ");  }  else  {  add(first);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  0);  add( "  {   ");  }  else  {  add(first);  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  0);  add( "  {   ");  }  else  {  add(first);  }	  if(n.getType()    ==    Token.STRING)    {    Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    }    else    {    add(first);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
614	[BUG]  [BUGGY]  add( "  <  0> ");  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <  0> ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <  0> ");	  add(   "    <    0    }       ");    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
615	[BUG]  [BUGGY]  add( "  <  0  }   ",  Context.STATEMENT);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <  0  }   ",  Context.STATEMENT);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <  0  }   ",  Context.STATEMENT);	  add(   "    <    0    }       ");    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
616	[BUG]  [BUGGY]  add( "  <  0  }   ",  getCurrentNodeType());  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <  0  }   ",  getCurrentNodeType());  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <  0  }   ",  getCurrentNodeType());	  add(   "    <    0    }       ");    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
617	[BUG]  [BUGGY]  cc.listSeparator();  add( ",  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "] ");  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.listSeparator();  add( ",  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "] ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.listSeparator();  add( ",  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "] ");  }	  if(needsParens)    {    cc.listSeparator();    add(   "    {       ");    }    else    {    Preconditions.checkState(childCount    ==    1);    add(   "]   ");    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
618	[BUG]  [BUGGY]  cc.listSeparator();  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( ")] ");  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.listSeparator();  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( ")] ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.listSeparator();  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( ")] ");  }	  if(needsParens)    {    cc.listSeparator();    add(   "    {       ");    }    else    {    Preconditions.checkState(childCount    ==    1);    add(   "]   ");    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
619	[BUG]  [BUGGY]  if(first.getType()  ==  Token.GET  ||  first.getType()  ==  Token.STRING)  {  add( "  <!(n.getType()  ==  Token.GET  ||  first.getType()  ==  Token.STRING));  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  if(first.getType()  ==  Token.GET  ||  first.getType()  ==  Token.STRING)  {  add( "  <!(n.getType()  ==  Token.GET  ||  first.getType()  ==  Token.STRING));  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(first.getType()  ==  Token.GET  ||  first.getType()  ==  Token.STRING)  {  add( "  <!(n.getType()  ==  Token.GET  ||  first.getType()  ==  Token.STRING));  }	  add(   "    <!(n.getType()    ==    Token.GET    ||    first.getType()    ==    Token.STRING));    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
620	[BUG]  [BUGGY]  if(first.getType()  ==  Token.GET  ||  first.getType()  ==  Token.STRING)  {  add( "  <!(first.getType()  ==  Token.GET  ||  first.getType()  ==  Token.STRING));  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  if(first.getType()  ==  Token.GET  ||  first.getType()  ==  Token.STRING)  {  add( "  <!(first.getType()  ==  Token.GET  ||  first.getType()  ==  Token.STRING));  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(first.getType()  ==  Token.GET  ||  first.getType()  ==  Token.STRING)  {  add( "  <!(first.getType()  ==  Token.GET  ||  first.getType()  ==  Token.STRING));  }	  add(   "    <!(n.getType()    ==    Token.GET    ||    first.getType()    ==    Token.STRING));    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
621	[BUG]  [BUGGY]  if(childCount  ==  1)  {  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  if(childCount  ==  1)  {  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(childCount  ==  1)  {  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }	  if(childCount    ==    2)    {    Preconditions.checkState(childCount    ==    2);    add(   "    {       ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
622	[BUG]  [BUGGY]  add( "  {  node  }   ",  context);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  node  }   ",  context);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  node  }   ",  context);	  add(   "    {    node    }       ");    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
623	[BUG]  [BUGGY]  add( "  {  node  }   ",  n);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  node  }   ",  n);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  node  }   ",  n);	  add(   "    {    node    }       ");    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
624	[BUG]  [BUGGY]  add( "  {  node  }   ",  first);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  node  }   ",  first);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  node  }   ",  first);	  add(   "    {    node    }       ");    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
625	[BUG]  [BUGGY]  add( "  {  0  }   ",  Context.STATEMENT  ||  context  ==  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  Context.STATEMENT  ||  context  ==  Context.START_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  Context.STATEMENT  ||  context  ==  Context.START_OF_EXPR);	  add(   "    {    0    }       ",    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
626	[BUG]  [BUGGY]  add( "  {  0  }   ",  Context.STATEMENT  ||  context  ==  Context.END_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  Context.STATEMENT  ||  context  ==  Context.END_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  Context.STATEMENT  ||  context  ==  Context.END_OF_EXPR);	  add(   "    {    0    }       ",    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
627	[BUG]  [BUGGY]  add( ")  {  0  }   ",  Context.STATEMENT);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( ")  {  0  }   ",  Context.STATEMENT);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( ")  {  0  }   ",  Context.STATEMENT);	  add(   "    {    0    }       ",    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
628	[BUG]  [BUGGY]  add( ") ").append(context  ==  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( ") ").append(context  ==  Context.START_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( ") ").append(context  ==  Context.START_OF_EXPR);	  add(   "    <       ").append(context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
629	[BUG]  [BUGGY]  Node  first  =  getFirstChild().cloneTree();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Node  first  =  getFirstChild().cloneTree();  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Node  first  =  getFirstChild().cloneTree();	  Node    first    =    getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
630	[BUG]  [BUGGY]  Node  first  =  createFirstChild();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Node  first  =  createFirstChild();  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Node  first  =  createFirstChild();	  Node    first    =    getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
631	[BUG]  [BUGGY]  if(first.getType()  ==  Token.GET  ||  first.getType()  ==  Token.NAME)  {  add( "  <!(n.getType()  ==  Token.GET  ||  first.getType()  ==  Token.NAME));  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  if(first.getType()  ==  Token.GET  ||  first.getType()  ==  Token.NAME)  {  add( "  <!(n.getType()  ==  Token.GET  ||  first.getType()  ==  Token.NAME));  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(first.getType()  ==  Token.GET  ||  first.getType()  ==  Token.NAME)  {  add( "  <!(n.getType()  ==  Token.GET  ||  first.getType()  ==  Token.NAME));  }	  add(   "    <!(n.getType()    ==    Token.GET    ||    first.getType()    ==    Token.NAME));    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
632	[BUG]  [BUGGY]  if(first.getType()  ==  Token.GET  ||  first.getType()  ==  Token.NAME)  {  add( "  <!(first.getType()  ==  Token.GET  ||  first.getType()  ==  Token.NAME));  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  if(first.getType()  ==  Token.GET  ||  first.getType()  ==  Token.NAME)  {  add( "  <!(first.getType()  ==  Token.GET  ||  first.getType()  ==  Token.NAME));  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(first.getType()  ==  Token.GET  ||  first.getType()  ==  Token.NAME)  {  add( "  <!(first.getType()  ==  Token.GET  ||  first.getType()  ==  Token.NAME));  }	  add(   "    <!(n.getType()    ==    Token.GET    ||    first.getType()    ==    Token.NAME));    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
633	[BUG]  [BUGGY]  if(first.getType()  ==  Token.GET  ||  first.getType()  ==  Token.NAME)  {  add( "  <!(n.getType()  ==  Token.GET  ||  first.getType()  ==  Token.SET));  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  if(first.getType()  ==  Token.GET  ||  first.getType()  ==  Token.NAME)  {  add( "  <!(n.getType()  ==  Token.GET  ||  first.getType()  ==  Token.SET));  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(first.getType()  ==  Token.GET  ||  first.getType()  ==  Token.NAME)  {  add( "  <!(n.getType()  ==  Token.GET  ||  first.getType()  ==  Token.SET));  }	  add(   "    <!(n.getType()    ==    Token.GET    ||    first.getType()    ==    Token.NAME));    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
634	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  3);  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "  <   ");  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  3);  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "  <   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  3);  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "  <   ");  }	  if(needsParens)    {    Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    }    else    {    Preconditions.checkState(childCount    ==    1);    add(   "    <       ");    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
635	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  3);  add( "  <   ");  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  3);  add( "  <   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  3);  add( "  <   ");  }	  if(needsParens)    {    Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    }    else    {    Preconditions.checkState(childCount    ==    1);    add(   "    <       ");    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
636	[BUG]  [BUGGY]  add( "  {  }   ",  isEnabled(context));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  }   ",  isEnabled(context));  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  }   ",  isEnabled(context));	  add(   "    {    }       ",    needsParens);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
637	[BUG]  [BUGGY]  Preconditions.checkState(childCount!=  4);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount!=  4);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount!=  4);	  Preconditions.checkState(childCount    ==    4);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
638	[BUG]  [BUGGY]  add( "  {  0  }   ",  isEnabled(context));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  isEnabled(context));  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  isEnabled(context));	  add(   "    {    0    }       ",    hasElseClause);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
639	[BUG]  [BUGGY]  Node  first  =  n.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Node  first  =  n.removeFirstChild();  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Node  first  =  n.removeFirstChild();	  Node    first    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
640	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Node  first  =  n.getFirstChild().getNext();  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Node  first  =  n.getFirstChild().getNext();	  Node    first    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
641	[BUG]  [BUGGY]  add( "  {  }  / ");  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  }  / ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  }  / ");	  add(   "    {    }    n   ");    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
642	[BUG]  [BUGGY]  if(childCount  ==  1)  {  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  if(childCount  ==  1)  {  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(childCount  ==  1)  {  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }	  if(childCount    ==    2)    {    add(   "    {       ");    }    else    {    Preconditions.checkState(childCount    ==    2);    add(   "    {       ");    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
643	[BUG]  [BUGGY]  cc.setSeparator(context  ==  Context.START_OF_EXPR  ||  context  ==  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.setSeparator(context  ==  Context.START_OF_EXPR  ||  context  ==  Context.START_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.setSeparator(context  ==  Context.START_OF_EXPR  ||  context  ==  Context.START_OF_EXPR);	  cc.setSeparator(context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
644	[BUG]  [BUGGY]  add( ")  {  }   ",  n.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( ")  {  }   ",  n.getFirstChild());  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( ")  {  }   ",  n.getFirstChild());	  add(   "    {    }       ",    n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
645	[BUG]  [BUGGY]  add( "  {  }   ",  n.getChildCount());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  }   ",  n.getChildCount());  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  }   ",  n.getChildCount());	  add(   "    {    }       ",    n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
646	[BUG]  [BUGGY]  add(context  ==  Context.END_OBJECTLIT);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add(context  ==  Context.END_OBJECTLIT);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add(context  ==  Context.END_OBJECTLIT);	  if(n.getType()    ==    Token.STRING)    {    Preconditions.checkState(childCount    ==    2);    add(   "    {       ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
647	[BUG]  [BUGGY]  n.add( "  }   ").append(context  ==  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add( "  }   ").append(context  ==  Context.START_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add( "  }   ").append(context  ==  Context.START_OF_EXPR);	  n.add(   "    }       ");    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
648	[BUG]  [BUGGY]  n.add( "  }   ").append(context  ==  Context.END_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add( "  }   ").append(context  ==  Context.END_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add( "  }   ").append(context  ==  Context.END_OF_EXPR);	  n.add(   "    }       ");    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
649	[BUG]  [BUGGY]  n.add( "  }   ").append(context  ==  Context.STATEMENT);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add( "  }   ").append(context  ==  Context.STATEMENT);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add( "  }   ").append(context  ==  Context.STATEMENT);	  n.add(   "    }       ");    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
650	[BUG]  [BUGGY]  add( "  <!(needsParens)?   ",  context);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <!(needsParens)?   ",  context);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <!(needsParens)?   ",  context);	  add(   "    <!(needsParens)?   ");    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
651	[BUG]  [BUGGY]  add( "  <!(needsParens)?   ",  needsParens);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <!(needsParens)?   ",  needsParens);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <!(needsParens)?   ",  needsParens);	  add(   "    <!(needsParens)?   ");    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
652	[BUG]  [BUGGY]  add( "  <  OBJECTLIT> ",  isEnabled(context));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <  OBJECTLIT> ",  isEnabled(context));  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <  OBJECTLIT> ",  isEnabled(context));	  add(   "    <    OBJECTLIT>   ");    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
653	[BUG]  [BUGGY]  add( "  <  OBJECTLIT> "  +  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <  OBJECTLIT> "  +  Context.START_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <  OBJECTLIT> "  +  Context.START_OF_EXPR);	  add(   "    <    OBJECTLIT>   ");    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
654	[BUG]  [BUGGY]  add( "  <  OBJECTLIT> ").add(context  ==  Context.END_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <  OBJECTLIT> ").add(context  ==  Context.END_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <  OBJECTLIT> ").add(context  ==  Context.END_OF_EXPR);	  add(   "    <    OBJECTLIT>   ");    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
655	[BUG]  [BUGGY]  n.setString(key);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.setString(key);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.setString(key);	  n.remove(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
656	[BUG]  [BUGGY]  n.add( "  {  1  }   ",  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add( "  {  1  }   ",  Context.START_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add( "  {  1  }   ",  Context.START_OF_EXPR);	  n.add(   "    {    1    }       ");    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
657	[BUG]  [BUGGY]  n.add( "  {  1  }   ",  needsParens);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add( "  {  1  }   ",  needsParens);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add( "  {  1  }   ",  needsParens);	  n.add(   "    {    1    }       ");    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
658	[BUG]  [BUGGY]  add( "  <  / ").append(context  ==  Context.TEXT_OBJECTLIT);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <  / ").append(context  ==  Context.TEXT_OBJECTLIT);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <  / ").append(context  ==  Context.TEXT_OBJECTLIT);	  add(   "    <    /   ");    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
659	[BUG]  [BUGGY]  add( "  {  0  }   ",  n.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  n.getFirstChild());  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  n.getFirstChild());	  add(   "    {    0    }       ",    context.getCurrentNode());    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
660	[BUG]  [BUGGY]  cc.listSeparator();  add( ",  {   ");  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.listSeparator();  add( ",  {   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.listSeparator();  add( ",  {   ");	  if(needsParens)    {    cc.listSeparator();    add(   "    {       ");    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
661	[BUG]  [BUGGY]  cc.detachFromParent(context  ==  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.detachFromParent(context  ==  Context.START_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.detachFromParent(context  ==  Context.START_OF_EXPR);	  cc.detachFromParent();    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
662	[BUG]  [BUGGY]  cc.detachFromParent(context  {  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.detachFromParent(context  {  Context.START_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.detachFromParent(context  {  Context.START_OF_EXPR);	  cc.detachFromParent();    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
663	[BUG]  [BUGGY]  cc.detachFromParent(context  ==  Context.END_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.detachFromParent(context  ==  Context.END_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.detachFromParent(context  ==  Context.END_OF_EXPR);	  cc.detachFromParent();    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
664	[BUG]  [BUGGY]  cc.detachFromParent(context!=  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.detachFromParent(context!=  Context.START_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.detachFromParent(context!=  Context.START_OF_EXPR);	  cc.detachFromParent();    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
665	[BUG]  [BUGGY]  n.add(context  ==  Context.STATEMENT,  first);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add(context  ==  Context.STATEMENT,  first);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add(context  ==  Context.STATEMENT,  first);	  n.add(context    ==    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
666	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  3);  add( "  {   ");  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  3);  add( "  {   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  3);  add( "  {   ");	  if(needsParens)    {    Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
667	[BUG]  [BUGGY]  add( "  {  0  }  hasElse ",  Context.STATEMENT);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }  hasElse ",  Context.STATEMENT);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }  hasElse ",  Context.STATEMENT);	  add(   "    {    0    }    hasElseClause       ");    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
668	[BUG]  [BUGGY]  add( "  {  0  }  needsParens,  1);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }  needsParens,  1);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }  needsParens,  1);	  add(   "    {    0    }    hasElseClause       ");    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
669	[BUG]  [BUGGY]  add( "  {  0  }  hasElse ",  context);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }  hasElse ",  context);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }  hasElse ",  context);	  add(   "    {    0    }    hasElseClause       ");    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
670	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExpressionNode(n) ")  {  cc.listSeparator();  add( "  {   ");  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(NodeUtil.isExpressionNode(n) ")  {  cc.listSeparator();  add( "  {   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(NodeUtil.isExpressionNode(n) ")  {  cc.listSeparator();  add( "  {   ");  }	  if(NodeUtil.isExpressionNode(n))    {    cc.listSeparator();    add(   "    {       ");    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
671	[BUG]  [BUGGY]  add( "  <   ").append(context  ==  Context.STATEMENT  ||  context  ==  Context.END_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <   ").append(context  ==  Context.STATEMENT  ||  context  ==  Context.END_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <   ").append(context  ==  Context.STATEMENT  ||  context  ==  Context.END_OF_EXPR);	  add(   "    <       ").append(context    ==    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
672	[BUG]  [BUGGY]  add( "  <   ").append(context  ==  Context.STATEMENT  &&  isEnabled(Feature.QUOTE_FIELD_NAMES));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  <   ").append(context  ==  Context.STATEMENT  &&  isEnabled(Feature.QUOTE_FIELD_NAMES));  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  <   ").append(context  ==  Context.STATEMENT  &&  isEnabled(Feature.QUOTE_FIELD_NAMES));	  add(   "    <       ").append(context    ==    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
673	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  else  {  Context.checkState(context  ==  Context.START_OF_EXPR);  add( "] ");  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  else  {  Context.checkState(context  ==  Context.START_OF_EXPR);  add( "] ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  else  {  Context.checkState(context  ==  Context.START_OF_EXPR);  add( "] ");  }	  if(needsParens)    {    Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    }    else    {    Context.checkState(context    ==    Context.START_OF_EXPR);    add(   "]   ");    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
674	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  3);  add( "  {   ");  }  else  {  Context.checkState(context  ==  Context.START_OF_EXPR);  add( "] ");  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  3);  add( "  {   ");  }  else  {  Context.checkState(context  ==  Context.START_OF_EXPR);  add( "] ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  3);  add( "  {   ");  }  else  {  Context.checkState(context  ==  Context.START_OF_EXPR);  add( "] ");  }	  if(needsParens)    {    Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    }    else    {    Context.checkState(context    ==    Context.START_OF_EXPR);    add(   "]   ");    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
675	[BUG]  [BUGGY]  add( ")  {  0  }   ",  context.getRootNode());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( ")  {  0  }   ",  context.getRootNode());  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( ")  {  0  }   ",  context.getRootNode());	  add(   "    {    0    }       ",    context.getRootNode());    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
676	[BUG]  [BUGGY]  add( "  {  0  }   ",  context.getContextNode());  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  context.getContextNode());  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  context.getContextNode());	  add(   "    {    0    }       ",    context.getRootNode());    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
677	[BUG]  [BUGGY]  Preconditions.checkState(childCount  <  2);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  <  2);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  <  2);	  Preconditions.checkState(childCount    <    1);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
678	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  cc.listSeparator();  add( "  {   ");  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  1);  cc.listSeparator();  add( "  {   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  1);  cc.listSeparator();  add( "  {   ");	  if(childCount    ==    1)    {    cc.listSeparator();    add(   "    {       ");    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
679	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  cc.listSeparator();  add( "  {   ");  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  1);  cc.listSeparator();  add( "  {   ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  1);  cc.listSeparator();  add( "  {   ");  }	  if(childCount    ==    1)    {    cc.listSeparator();    add(   "    {       ");    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
680	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  3);  add( "  {   ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  3);  add( "  {   ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  3);  add( "  {   ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(childCount    ==    1)    {    Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
681	[BUG]  [BUGGY]  cc.getParent().replaceChild(n,  Node.newString(Token.NAME,  key),  preserveBlock);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.getParent().replaceChild(n,  Node.newString(Token.NAME,  key),  preserveBlock);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.getParent().replaceChild(n,  Node.newString(Token.NAME,  key),  preserveBlock);	  cc.getParent().replaceChild(n,    Node.newString(Token.NAME,    key));    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
682	[BUG]  [BUGGY]  cc.getParent().replaceChild(n,  Node.newString(Token.NAME,  key),  prefix);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.getParent().replaceChild(n,  Node.newString(Token.NAME,  key),  prefix);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.getParent().replaceChild(n,  Node.newString(Token.NAME,  key),  prefix);	  cc.getParent().replaceChild(n,    Node.newString(Token.NAME,    key));    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
683	[BUG]  [BUGGY]  cc.getParent().replaceChild(n,  Node.newString(Token.NAME,  key),  t);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.getParent().replaceChild(n,  Node.newString(Token.NAME,  key),  t);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.getParent().replaceChild(n,  Node.newString(Token.NAME,  key),  t);	  cc.getParent().replaceChild(n,    Node.newString(Token.NAME,    key));    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
684	[BUG]  [BUGGY]  Preconditions.checkState(childCount  >  1  -  childCount);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  >  1  -  childCount);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  >  1  -  childCount);	  Preconditions.checkState(childCount    ==    1    -    childCount);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
685	[BUG]  [BUGGY]  Preconditions.checkState(childCount  <  1  -  childCount);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  <  1  -  childCount);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  <  1  -  childCount);	  Preconditions.checkState(childCount    ==    1    -    childCount);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
686	[BUG]  [BUGGY]  add( "  {  0  }   ",  getCurrentNodePointer());  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  getCurrentNodePointer());  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  getCurrentNodePointer());	  add(   "    {    0    }       ",    context);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
687	[BUG]  [BUGGY]  n.add(context  ==  Context.END_OBJECTLIT,  1);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add(context  ==  Context.END_OBJECTLIT,  1);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add(context  ==  Context.END_OBJECTLIT,  1);	  n.add(context    ==    Context.END_OBJECTLIT);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
688	[BUG]  [BUGGY]  n.add(context  ==  Context.END_OF_OBJECTLIT,  1);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add(context  ==  Context.END_OF_OBJECTLIT,  1);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add(context  ==  Context.END_OF_OBJECTLIT,  1);	  n.add(context    ==    Context.END_OF_OBJECTLIT);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
689	[BUG]  [BUGGY]  add( "  {  0  }   ",  context  ==  Context.END_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }   ",  context  ==  Context.END_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }   ",  context  ==  Context.END_OF_EXPR);	  add(   "    {    0    }       ",    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
690	[BUG]  [BUGGY]  cc.detachFromParent();  add(context  ==  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.detachFromParent();  add(context  ==  Context.START_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.detachFromParent();  add(context  ==  Context.START_OF_EXPR);	  cc.detachFromParent();    add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
691	[BUG]  [BUGGY]  cc.detachFromParent();  cc.add( "  {   ");  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.detachFromParent();  cc.add( "  {   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.detachFromParent();  cc.add( "  {   ");	  cc.detachFromParent();    add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
692	[BUG]  [BUGGY]  cc.setSeparator(null);  add( "  {   ");  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.setSeparator(null);  add( "  {   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.setSeparator(null);  add( "  {   ");	  cc.setSeparator(n);    add(   "    {       ");    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
693	[BUG]  [BUGGY]  if(childCount  ==  1)  {  Preconditions.checkState(childCount  ==  1);  add( "remove ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  if(childCount  ==  1)  {  Preconditions.checkState(childCount  ==  1);  add( "remove ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(childCount  ==  1)  {  Preconditions.checkState(childCount  ==  1);  add( "remove ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  Preconditions.checkState(childCount    ==    1);    add(   "remove   ");    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
694	[BUG]  [BUGGY]  if(childCount  ==  1)  {  Preconditions.checkState(childCount  ==  1);  add( "remove ");  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  if(childCount  ==  1)  {  Preconditions.checkState(childCount  ==  1);  add( "remove ");  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(childCount  ==  1)  {  Preconditions.checkState(childCount  ==  1);  add( "remove ");  }  else  {  throw  new  IllegalStateException( " ");  }	  Preconditions.checkState(childCount    ==    1);    add(   "remove   ");    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
695	[BUG]  [BUGGY]  if(childCount  ==  1)  {  Preconditions.checkState(childCount  ==  1);  add( "remove ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "delete ");  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  if(childCount  ==  1)  {  Preconditions.checkState(childCount  ==  1);  add( "remove ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "delete ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	if(childCount  ==  1)  {  Preconditions.checkState(childCount  ==  1);  add( "remove ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "delete ");  }	  Preconditions.checkState(childCount    ==    1);    add(   "remove   ");    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
696	[BUG]  [BUGGY]  add( "  {  }   ",  getCurrentNodePointer());  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  }   ",  getCurrentNodePointer());  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  }   ",  getCurrentNodePointer());	  add(   "    {    }       ",    context);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
697	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  3  -  childCount);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  3  -  childCount);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  3  -  childCount);	  Preconditions.checkState(childCount    ==    2    -    childCount);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
698	[BUG]  [BUGGY]  add( "  {  }   ",  hasElseClause,  funcNeedsParens);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  }   ",  hasElseClause,  funcNeedsParens);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  }   ",  hasElseClause,  funcNeedsParens);	  add(   "    {    }       ",    hasElseClause);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
699	[BUG]  [BUGGY]  add( "  {  OBJECTLIT  }   ",  getContextForNoInOperator(context));  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  OBJECTLIT  }   ",  getContextForNoInOperator(context));  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  OBJECTLIT  }   ",  getContextForNoInOperator(context));	  add(   "    {    OBJECTLIT    }       ");    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
700	[BUG]  [BUGGY]  add( "  {  OBJECTLIT  }   ",  Context.STATEMENT);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  OBJECTLIT  }   ",  Context.STATEMENT);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  OBJECTLIT  }   ",  Context.STATEMENT);	  add(   "    {    OBJECTLIT    }       ");    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
701	[BUG]  [BUGGY]  Preconditions.checkState(childCount!=  2  -  1);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount!=  2  -  1);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount!=  2  -  1);	  Preconditions.checkState(childCount!=    2);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
702	[BUG]  [BUGGY]  add( "  {  OBJECTLIT: ",  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  OBJECTLIT: ",  Context.START_OF_EXPR);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  OBJECTLIT: ",  Context.START_OF_EXPR);	  add(   "    {    OBJECTLIT:    {       ");    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
703	[BUG]  [BUGGY]  add( "  {  OBJECTLIT: ",  Context.STATEMENT);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  OBJECTLIT: ",  Context.STATEMENT);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  OBJECTLIT: ",  Context.STATEMENT);	  add(   "    {    OBJECTLIT:    {       ");    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
704	[BUG]  [BUGGY]  add( "  {  }   ",  next);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  }   ",  next);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  }   ",  next);	  add(   "    {    }       ",    n);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
705	[BUG]  [BUGGY]  add( "  {  }   ",  last);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  }   ",  last);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  }   ",  last);	  add(   "    {    }       ",    n);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
706	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  3);  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "] ");  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  3);  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "] ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  3);  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  1);  add( "] ");  }	  if(needsParens)    {    Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    }    else    {    Preconditions.checkState(childCount    ==    1);    add(   "]   ");    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
707	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  3);  add( "] ");  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  3);  add( "] ");  }  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  ==  2);  add( "  {   ");  }  else  {  Preconditions.checkState(childCount  ==  3);  add( "] ");  }	  if(needsParens)    {    Preconditions.checkState(childCount    ==    1);    add(   "    {       ");    }    else    {    Preconditions.checkState(childCount    ==    1);    add(   "]   ");    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
708	[BUG]  [BUGGY]  n.add( "  <   ").append(context  ==  Context.STATEMENT);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  n.add( "  <   ").append(context  ==  Context.STATEMENT);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	n.add( "  <   ").append(context  ==  Context.STATEMENT);	  n.add(   "    <       ");    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
709	[BUG]  [BUGGY]  add( ",  {  0  }  [ ");  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( ",  {  0  }  [ ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( ",  {  0  }  [ ");	  add(   "    {    0    }    [   ");    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
710	[BUG]  [BUGGY]  add( "  {  0  }  ( ");  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  add( "  {  0  }  ( ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	add( "  {  0  }  ( ");	  add(   "    {    0    }    [   ");    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
711	[BUG]  [BUGGY]  cc.listSeparator();  add( "  {  }   ");  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.listSeparator();  add( "  {  }   ");  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.listSeparator();  add( "  {  }   ");	  add(   "    {    },   ");    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
712	[BUG]  [BUGGY]  Preconditions.checkState(childCount  <=  2);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  Preconditions.checkState(childCount  <=  2);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	Preconditions.checkState(childCount  <=  2);	  Preconditions.checkState(childCount    <=    0);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
713	[BUG]  [BUGGY]  cc.setSeparator(context  ==  Context.END_OF_EXPR  ||  context  ==  Context.END_OF_ELSE);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }      [BUGGY]  cc.setSeparator(context  ==  Context.END_OF_EXPR  ||  context  ==  Context.END_OF_ELSE);  [BUGGY]      for  (Node  c  =  first;  c  !=  null;  c  =  c.getNext())  {  if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	652	652	1	replace	cc.setSeparator(context  ==  Context.END_OF_EXPR  ||  context  ==  Context.END_OF_ELSE);	  cc.setSeparator(context    ==    Context.END_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
