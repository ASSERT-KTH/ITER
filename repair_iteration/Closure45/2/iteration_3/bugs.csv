bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  current,  var);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeTraversal.traverse(compiler,  current,  var);  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeTraversal.traverse(compiler,  current,  var);	  NodeTraversal.traverse(compiler,    var,    current);    	non-compiled	[CE]  	61	None	replace
2	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  current,  isPropertyAssign);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeTraversal.traverse(compiler,  var,  current,  isPropertyAssign);  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeTraversal.traverse(compiler,  var,  current,  isPropertyAssign);	  NodeTraversal.traverse(compiler,    var,    current);    	non-compiled	[CE]  	61	None	replace
3	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  current,  true);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeTraversal.traverse(compiler,  var,  current,  true);  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeTraversal.traverse(compiler,  var,  current,  true);	  NodeTraversal.traverse(compiler,    var,    current);    	non-compiled	[CE]  	61	None	replace
4	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  current,  null);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeTraversal.traverse(compiler,  var,  current,  null);  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeTraversal.traverse(compiler,  var,  current,  null);	  NodeTraversal.traverse(compiler,    var,    current);    	non-compiled	[CE]  	61	None	replace
5	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  current  +  1);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeTraversal.traverse(compiler,  var,  current  +  1);  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeTraversal.traverse(compiler,  var,  current  +  1);	  NodeTraversal.traverse(compiler,    var,    current);    	non-compiled	[CE]  	61	None	replace
6	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  current,  assign);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeTraversal.traverse(compiler,  var,  current,  assign);  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeTraversal.traverse(compiler,  var,  current,  assign);	  NodeTraversal.traverse(compiler,    var,    current);    	non-compiled	[CE]  	61	None	replace
7	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  current,  hasFollowing);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeTraversal.traverse(compiler,  var,  current,  hasFollowing);  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeTraversal.traverse(compiler,  var,  current,  hasFollowing);	  NodeTraversal.traverse(compiler,    var,    current);    	non-compiled	[CE]  	61	None	replace
8	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(value,  false))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(value,  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(value,  false))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign,    false))    {    	non-compiled	[CE]  	85	None	replace
9	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  ||!NodeUtil.isLiteralValue(assign,  false))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  ||!NodeUtil.isLiteralValue(assign,  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  ||!NodeUtil.isLiteralValue(assign,  false))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign,    false))    {    	non-compiled	[CE]  	85	None	replace
10	[BUG]  [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(value,  false))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(value,  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(value,  false))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign,    false))    {    	non-compiled	[CE]  	85	None	replace
11	[BUG]  [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  true))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign,    false))    {    	non-compiled	[CE]  	85	None	replace
12	[BUG]  [BUGGY]  }  else  if(hasFollowing  &&!NodeUtil.isLiteralValue(assign,  false))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasFollowing  &&!NodeUtil.isLiteralValue(assign,  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasFollowing  &&!NodeUtil.isLiteralValue(assign,  false))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign,    false))    {    	non-compiled	[CE]  	85	None	replace
13	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isImmutableValue(assign.getFirstChild(),  false))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.isImmutableValue(assign.getFirstChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isImmutableValue(assign.getFirstChild(),  false))  {	  }    else    if(!NodeUtil.isLiteralValue(assign.getFirstChild(),    false))    {    	non-compiled	[CE]  	9	None	replace
14	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isPropertyAssign(assign.getFirstChild(),  false))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.isPropertyAssign(assign.getFirstChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isPropertyAssign(assign.getFirstChild(),  false))  {	  }    else    if(!NodeUtil.isLiteralValue(assign.getFirstChild(),    false))    {    	non-compiled	[CE]  	9	None	replace
15	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(value.getFirstChild(),  false))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(value.getFirstChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isLiteralValue(value.getFirstChild(),  false))  {	  }    else    if(!NodeUtil.isLiteralValue(assign.getFirstChild(),    false))    {    	non-compiled	[CE]  	9	None	replace
16	[BUG]  [BUGGY]  }  else  if(canModifyAllSites  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(canModifyAllSites  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(canModifyAllSites  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true))  {	  }    else    if(!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	17	None	replace
17	[BUG]  [BUGGY]  }  else  if(NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  false))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  false))  {	  }    else    if(!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	17	None	replace
18	[BUG]  [BUGGY]  }  else  if(!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  false)||  assign.assignNode.getLastChild()!=  null)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  false)||  assign.assignNode.getLastChild()!=  null)  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  false)||  assign.assignNode.getLastChild()!=  null)  {	  }    else    if(!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	17	None	replace
19	[BUG]  [BUGGY]  }  else  if(hasFollowing  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  false))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasFollowing  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasFollowing  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  false))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),    false))    {    	non-compiled	[CE]  	73	None	replace
20	[BUG]  [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  false))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  false))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),    false))    {    	non-compiled	[CE]  	73	None	replace
21	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  ||!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  false))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  ||!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  ||!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  false))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),    false))    {    	non-compiled	[CE]  	73	None	replace
22	[BUG]  [BUGGY]  }  else  if(NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  false))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  false))  {	  }    else    if(NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),    false))    {    	non-compiled	[CE]  	74	None	replace
23	[BUG]  [BUGGY]  }  else  if(NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true))  {	  }    else    if(NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),    false))    {    	non-compiled	[CE]  	74	None	replace
24	[BUG]  [BUGGY]  }  else  if(NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  true))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  true))  {	  }    else    if(NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),    false))    {    	non-compiled	[CE]  	74	None	replace
25	[BUG]  [BUGGY]  }  else  if(NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  true))  {	  }    else    if(NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),    false))    {    	non-compiled	[CE]  	74	None	replace
26	[BUG]  [BUGGY]  }  else  if(NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getLastChild(),  false))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getLastChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getLastChild(),  false))  {	  }    else    if(NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),    false))    {    	non-compiled	[CE]  	74	None	replace
27	[BUG]  [BUGGY]  }  else  if(NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getLastChild(),  true))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getLastChild(),  true))  {	  }    else    if(NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),    false))    {    	non-compiled	[CE]  	74	None	replace
28	[BUG]  [BUGGY]  }  else  if(NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true)&&  isPropertyAssign)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true)&&  isPropertyAssign)  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true)&&  isPropertyAssign)  {	  }    else    if(NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),    false))    {    	non-compiled	[CE]  	74	None	replace
29	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  true))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  true))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	75	None	replace
30	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  false))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  false))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	75	None	replace
31	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getLastChild(),  true))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getLastChild(),  true))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	75	None	replace
32	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  false))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  false))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	75	None	replace
33	[BUG]  [BUGGY]  }  else  if(hasFollowing  &&  isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasFollowing  &&  isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasFollowing  &&  isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  true))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	75	None	replace
34	[BUG]  [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  true))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	75	None	replace
35	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isImmutableValue(assign.getLastChild(),  true))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.isImmutableValue(assign.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isImmutableValue(assign.getLastChild(),  true))  {	  }    else    if(!NodeUtil.isLiteralValue(assign.getLastChild(),    true))    {    	non-compiled	[CE]  	8	None	replace
36	[BUG]  [BUGGY]  }  else  if(NodeUtil.isImmutableValue(assign,  assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isImmutableValue(assign,  assign.assignNode.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isImmutableValue(assign,  assign.assignNode.getFirstChild(),  true))  {	  }    else    if(NodeUtil.isLiteralValue(assign,    assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	89	None	replace
37	[BUG]  [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign,  assign.assignNode.getLastChild(),  true))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign,  assign.assignNode.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isLiteralValue(assign,  assign.assignNode.getLastChild(),  true))  {	  }    else    if(NodeUtil.isLiteralValue(assign,    assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	89	None	replace
38	[BUG]  [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign,  assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign,  assign.assignNode.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isAssignmentOp(assign,  assign.assignNode.getFirstChild(),  true))  {	  }    else    if(NodeUtil.isLiteralValue(assign,    assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	89	None	replace
39	[BUG]  [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign,  assign.assignNode.getFirstChild(),  false))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign,  assign.assignNode.getFirstChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isLiteralValue(assign,  assign.assignNode.getFirstChild(),  false))  {	  }    else    if(NodeUtil.isLiteralValue(assign,    assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	89	None	replace
40	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assign,  false))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assign,  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assign,  false))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assign,    true))    {    	non-compiled	[CE]  	86	None	replace
41	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  ||!NodeUtil.isLiteralValue(assign.assign,  true))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  ||!NodeUtil.isLiteralValue(assign.assign,  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  ||!NodeUtil.isLiteralValue(assign.assign,  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assign,    true))    {    	non-compiled	[CE]  	86	None	replace
42	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode,  false))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode,  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode,  false))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assign,    true))    {    	non-compiled	[CE]  	86	None	replace
43	[BUG]  [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assign,  false))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assign,  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assign,  false))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assign,    true))    {    	non-compiled	[CE]  	86	None	replace
44	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isImmutableValue(value,  true))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.isImmutableValue(value,  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isImmutableValue(value,  true))  {	  }    else    if(!NodeUtil.isImmutableValue(assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	10	None	replace
45	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  ||!NodeUtil.isLiteralValue(assign.getFirstChild(),  false))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(isPropertyAssign  ||!NodeUtil.isLiteralValue(assign.getFirstChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(isPropertyAssign  ||!NodeUtil.isLiteralValue(assign.getFirstChild(),  false))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.isLiteralValue(assign.getFirstChild(),    false))    {    	non-compiled	[CE]  	43	None	replace
46	[BUG]  [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getFirstChild(),  false))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getFirstChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getFirstChild(),  false))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.isLiteralValue(assign.getFirstChild(),    false))    {    	non-compiled	[CE]  	43	None	replace
47	[BUG]  [BUGGY]  }  else  if(assign.isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(assign.isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(assign.isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.isLiteralValue(assign.getFirstChild(),    false))    {    	non-compiled	[CE]  	43	None	replace
48	[BUG]  [BUGGY]  }  else  if(canModifyAllSites  &&!NodeUtil.isLiteralValue(assign,  assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(canModifyAllSites  &&!NodeUtil.isLiteralValue(assign,  assign.assignNode.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(canModifyAllSites  &&!NodeUtil.isLiteralValue(assign,  assign.assignNode.getFirstChild(),  true))  {	  }    else    if(!NodeUtil.isLiteralValue(assign,    assign.assignNode.getLastChild(),    true))    {    	non-compiled	[CE]  	58	None	replace
49	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.isLiteralValue(value,  assign.assignNode.getLastChild(),  true))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.isLiteralValue(value,  assign.assignNode.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(isPropertyAssign  &&!NodeUtil.isLiteralValue(value,  assign.assignNode.getLastChild(),  true))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.isLiteralValue(value,    assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	88	None	replace
50	[BUG]  [BUGGY]  }  else  if(assign.isPropertyAssign  &&!NodeUtil.isLiteralValue(value,  assign.assignNode.getLastChild(),  true))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(assign.isPropertyAssign  &&!NodeUtil.isLiteralValue(value,  assign.assignNode.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(assign.isPropertyAssign  &&!NodeUtil.isLiteralValue(value,  assign.assignNode.getLastChild(),  true))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.isLiteralValue(value,    assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	88	None	replace
51	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.isLiteralValue(value,  assign.assignNode.getFirstChild(),  false))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.isLiteralValue(value,  assign.assignNode.getFirstChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(isPropertyAssign  &&!NodeUtil.isLiteralValue(value,  assign.assignNode.getFirstChild(),  false))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.isLiteralValue(value,    assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	88	None	replace
52	[BUG]  [BUGGY]  }  else  if(assign.isPropertyAssign  &&!NodeUtil.isLiteralValue(value,  assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(assign.isPropertyAssign  &&!NodeUtil.isLiteralValue(value,  assign.assignNode.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(assign.isPropertyAssign  &&!NodeUtil.isLiteralValue(value,  assign.assignNode.getFirstChild(),  true))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.isLiteralValue(value,    assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	88	None	replace
53	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.isLiteralValue(value,  assign.assignNode.getLastChild(),  false))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.isLiteralValue(value,  assign.assignNode.getLastChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(isPropertyAssign  &&!NodeUtil.isLiteralValue(value,  assign.assignNode.getLastChild(),  false))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.isLiteralValue(value,    assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	88	None	replace
54	[BUG]  [BUGGY]  }  else  if(NodeUtil.isLiteralValue(value.getLastChild(),  false))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isLiteralValue(value.getLastChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isLiteralValue(value.getLastChild(),  false))  {	  }    else    if(NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),    false))    {    	non-compiled	[CE]  	66	None	replace
55	[BUG]  [BUGGY]  }  else  if(NodeUtil.isLiteralValue(value,  assign.assignNode.getLastChild(),  false))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isLiteralValue(value,  assign.assignNode.getLastChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isLiteralValue(value,  assign.assignNode.getLastChild(),  false))  {	  }    else    if(NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),    false))    {    	non-compiled	[CE]  	66	None	replace
56	[BUG]  [BUGGY]  }  else  if(NodeUtil.isImmutableValue(assign.assignNode.getFirstChild(),  false))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isImmutableValue(assign.assignNode.getFirstChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isImmutableValue(assign.assignNode.getFirstChild(),  false))  {	  }    else    if(NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),    false))    {    	non-compiled	[CE]  	66	None	replace
57	[BUG]  [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign.getString(),  false))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign.getString(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isLiteralValue(assign.getString(),  false))  {	  }    else    if(NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),    false))    {    	non-compiled	[CE]  	66	None	replace
58	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(value,  assign.assignNode.getLastChild(),  true))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(value,  assign.assignNode.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(value,  assign.assignNode.getLastChild(),  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign,    assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	78	None	replace
59	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  assign.assignNode.getFirstChild(),  false))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  assign.assignNode.getFirstChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  assign.assignNode.getFirstChild(),  false))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign,    assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	78	None	replace
60	[BUG]  [BUGGY]  }  else  if(hasFollowing  &&!NodeUtil.isLiteralValue(assign,  assign.assignNode.getLastChild(),  true))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasFollowing  &&!NodeUtil.isLiteralValue(assign,  assign.assignNode.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasFollowing  &&!NodeUtil.isLiteralValue(assign,  assign.assignNode.getLastChild(),  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign,    assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	78	None	replace
61	[BUG]  [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(value,  assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(value,  assign.assignNode.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(value,  assign.assignNode.getFirstChild(),  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign,    assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	78	None	replace
62	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  ||!NodeUtil.isLiteralValue(assign,  assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  ||!NodeUtil.isLiteralValue(assign,  assign.assignNode.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  ||!NodeUtil.isLiteralValue(assign,  assign.assignNode.getFirstChild(),  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign,    assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	78	None	replace
63	[BUG]  [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  assign.assignNode.getLastChild(),  true))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  assign.assignNode.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  assign.assignNode.getLastChild(),  true))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.isLiteralValue(assign,    assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	80	None	replace
64	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  ||!NodeUtil.isLiteralValue(assign,  assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(isPropertyAssign  ||!NodeUtil.isLiteralValue(assign,  assign.assignNode.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(isPropertyAssign  ||!NodeUtil.isLiteralValue(assign,  assign.assignNode.getFirstChild(),  true))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.isLiteralValue(assign,    assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	80	None	replace
65	[BUG]  [BUGGY]  }  else  if(NodeUtil.isImmutableValue(assign.getFirstChild(),  false))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isImmutableValue(assign.getFirstChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isImmutableValue(assign.getFirstChild(),  false))  {	  }    else    if(NodeUtil.isImmutableValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	65	None	replace
66	[BUG]  [BUGGY]  }  else  if(NodeUtil.isImmutableValue(assign.getLastChild(),  true))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isImmutableValue(assign.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isImmutableValue(assign.getLastChild(),  true))  {	  }    else    if(NodeUtil.isImmutableValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	65	None	replace
67	[BUG]  [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {	  }    else    if(NodeUtil.isImmutableValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	65	None	replace
68	[BUG]  [BUGGY]  }  else  if(hasFollowing  &&  isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasFollowing  &&  isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasFollowing  &&  isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true))  {	  }    else    if(hasFollowing    &&    isPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	76	None	replace
69	[BUG]  [BUGGY]  }  else  if(hasFollowing  &&  isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasFollowing  &&  isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasFollowing  &&  isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {	  }    else    if(hasFollowing    &&    isPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	76	None	replace
70	[BUG]  [BUGGY]  }  else  if(hasFollowing  ||  isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasFollowing  ||  isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasFollowing  ||  isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {	  }    else    if(hasFollowing    &&    isPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	76	None	replace
71	[BUG]  [BUGGY]  }  else  if(hasFollowing  &&  isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  false))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasFollowing  &&  isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasFollowing  &&  isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  false))  {	  }    else    if(hasFollowing    &&    isPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	76	None	replace
72	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&  isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&  isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&  isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true))  {	  }    else    if(hasFollowing    &&    isPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	76	None	replace
73	[BUG]  [BUGGY]  }  else  if(hasFollowing  &&  isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  false))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasFollowing  &&  isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasFollowing  &&  isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  false))  {	  }    else    if(hasFollowing    &&    isPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	76	None	replace
74	[BUG]  [BUGGY]  NodeUtil.removeChild(value);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.removeChild(value);  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.removeChild(value);	  NodeUtil.removeChild(assign);    	non-compiled	[CE]  	48	None	replace
75	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  assign);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.removeChild(parent,  assign);  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.removeChild(parent,  assign);	  NodeUtil.removeChild(assign);    	non-compiled	[CE]  	48	None	replace
76	[BUG]  [BUGGY]  NodeUtil.removeChild(parent);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.removeChild(parent);  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.removeChild(parent);	  NodeUtil.removeChild(assign);    	non-compiled	[CE]  	48	None	replace
77	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign.getLastChild(),  true)  &&  isPropertyAssign)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign.getLastChild(),  true)  &&  isPropertyAssign)  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isLiteralValue(assign.getLastChild(),  true)  &&  isPropertyAssign)  {	  }    else    if(!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true)&&    isPropertyAssign)    {    	non-compiled	[CE]  	98	None	replace
78	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign.getFirstChild(),  true)  &&  isPropertyAssign)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign.getFirstChild(),  true)  &&  isPropertyAssign)  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isLiteralValue(assign.getFirstChild(),  true)  &&  isPropertyAssign)  {	  }    else    if(!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true)&&    isPropertyAssign)    {    	non-compiled	[CE]  	98	None	replace
79	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign.getFirstChild(),  true)  &&  hasPropertyAssign)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign.getFirstChild(),  true)  &&  hasPropertyAssign)  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isLiteralValue(assign.getFirstChild(),  true)  &&  hasPropertyAssign)  {	  }    else    if(!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true)&&    isPropertyAssign)    {    	non-compiled	[CE]  	98	None	replace
80	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(value.getFirstChild(),  true)  &&  isPropertyAssign)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(value.getFirstChild(),  true)  &&  isPropertyAssign)  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isLiteralValue(value.getFirstChild(),  true)  &&  isPropertyAssign)  {	  }    else    if(!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true)&&    isPropertyAssign)    {    	non-compiled	[CE]  	98	None	replace
81	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign.getFirstChild(),  false)  &&  isPropertyAssign)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign.getFirstChild(),  false)  &&  isPropertyAssign)  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isLiteralValue(assign.getFirstChild(),  false)  &&  isPropertyAssign)  {	  }    else    if(!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true)&&    isPropertyAssign)    {    	non-compiled	[CE]  	98	None	replace
82	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(value,  true)&&  isPropertyAssign)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(value,  true)&&  isPropertyAssign)  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isLiteralValue(value,  true)&&  isPropertyAssign)  {	  }    else    if(!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true)&&    isPropertyAssign)    {    	non-compiled	[CE]  	98	None	replace
83	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(value,  assign.assignNode.getLastChild(),  false))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(value,  assign.assignNode.getLastChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isLiteralValue(value,  assign.assignNode.getLastChild(),  false))  {	  }    else    if(!NodeUtil.isLiteralValue(assign,    assign.assignNode.getLastChild(),    false))    {    	non-compiled	[CE]  	57	None	replace
84	[BUG]  [BUGGY]  }  else  if(canModifyAllSites  &&!NodeUtil.isLiteralValue(assign,  assign.assignNode.getFirstChild(),  false))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(canModifyAllSites  &&!NodeUtil.isLiteralValue(assign,  assign.assignNode.getFirstChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(canModifyAllSites  &&!NodeUtil.isLiteralValue(assign,  assign.assignNode.getFirstChild(),  false))  {	  }    else    if(!NodeUtil.isLiteralValue(assign,    assign.assignNode.getLastChild(),    false))    {    	non-compiled	[CE]  	57	None	replace
85	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(value,  assign.assignNode.getFirstChild(),  false))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(value,  assign.assignNode.getFirstChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isLiteralValue(value,  assign.assignNode.getFirstChild(),  false))  {	  }    else    if(!NodeUtil.isLiteralValue(assign,    assign.assignNode.getLastChild(),    false))    {    	non-compiled	[CE]  	57	None	replace
86	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  assign.assignNode.getLastChild(),  false))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  assign.assignNode.getLastChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  assign.assignNode.getLastChild(),  false))  {	  }    else    if(!NodeUtil.isLiteralValue(assign,    assign.assignNode.getLastChild(),    false))    {    	non-compiled	[CE]  	57	None	replace
87	[BUG]  [BUGGY]  }  else  if(isPropertyAssign(assign.getFirstChild(),  true))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(isPropertyAssign(assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(isPropertyAssign(assign.getFirstChild(),  true))  {	  }    else    if(!NodeUtil.isPropertyAssign(assign.getLastChild(),    true))    {    	non-compiled	[CE]  	12	None	replace
88	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isPropertyAssign(assign.getString(),  true))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.isPropertyAssign(assign.getString(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isPropertyAssign(assign.getString(),  true))  {	  }    else    if(!NodeUtil.isPropertyAssign(assign.getLastChild(),    true))    {    	non-compiled	[CE]  	12	None	replace
89	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isPropertyAssign(assign.getParent(),  true))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.isPropertyAssign(assign.getParent(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isPropertyAssign(assign.getParent(),  true))  {	  }    else    if(!NodeUtil.isPropertyAssign(assign.getLastChild(),    true))    {    	non-compiled	[CE]  	12	None	replace
90	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  false))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  false))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	72	None	replace
91	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getLastChild(),  true))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getLastChild(),  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	72	None	replace
92	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  false))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  false))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	72	None	replace
93	[BUG]  [BUGGY]  }  else  if(hasFollowing  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasFollowing  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasFollowing  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	72	None	replace
94	[BUG]  [BUGGY]  }  else  if(canModifyAllSites  &&  hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(canModifyAllSites  &&  hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(canModifyAllSites  &&  hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	72	None	replace
95	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  ||!NodeUtil.isLiteralValue(assign,  assign.assignNode.getLastChild(),  true))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(isPropertyAssign  ||!NodeUtil.isLiteralValue(assign,  assign.assignNode.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(isPropertyAssign  ||!NodeUtil.isLiteralValue(assign,  assign.assignNode.getLastChild(),  true))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.isLiteralValue(assign,    assign.assignNode.getLastChild(),    true))    {    	non-compiled	[CE]  	82	None	replace
96	[BUG]  [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  assign.assignNode.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  assign.assignNode.getFirstChild(),  true))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.isLiteralValue(assign,    assign.assignNode.getLastChild(),    true))    {    	non-compiled	[CE]  	82	None	replace
97	[BUG]  [BUGGY]  }  else  if(hasFollowing  &&!NodeUtil.isLiteralValue(assign.getFirstChild(),  false))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasFollowing  &&!NodeUtil.isLiteralValue(assign.getFirstChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasFollowing  &&!NodeUtil.isLiteralValue(assign.getFirstChild(),  false))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.getFirstChild(),    false))    {    	non-compiled	[CE]  	2	None	replace
98	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  ||!NodeUtil.isLiteralValue(assign.getFirstChild(),  false))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  ||!NodeUtil.isLiteralValue(assign.getFirstChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  ||!NodeUtil.isLiteralValue(assign.getFirstChild(),  false))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.getFirstChild(),    false))    {    	non-compiled	[CE]  	2	None	replace
99	[BUG]  [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  false))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  false))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.getFirstChild(),    false))    {    	non-compiled	[CE]  	2	None	replace
100	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode,  false))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode,  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode,  false))  {	  }    else    if(!NodeUtil.isLiteralValue(assign.assignNode,    false))    {    	non-compiled	[CE]  	24	None	replace
101	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode,  true))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode,  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode,  true))  {	  }    else    if(!NodeUtil.isLiteralValue(assign.assignNode,    false))    {    	non-compiled	[CE]  	24	None	replace
102	[BUG]  [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign.assign,  assign.getLastChild(),  true))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign.assign,  assign.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isLiteralValue(assign.assign,  assign.getLastChild(),  true))  {	  }    else    if(NodeUtil.isLiteralValue(value,    assign.assignNode.getLastChild(),    true))    {    	non-compiled	[CE]  	32	None	replace
103	[BUG]  [BUGGY]  }  else  if(NodeUtil.isLiteralValue(value,  assign.assign.getFirstChild(),  true))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isLiteralValue(value,  assign.assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isLiteralValue(value,  assign.assign.getFirstChild(),  true))  {	  }    else    if(NodeUtil.isLiteralValue(value,    assign.assignNode.getLastChild(),    true))    {    	non-compiled	[CE]  	32	None	replace
104	[BUG]  [BUGGY]  }  else  if(NodeUtil.isLiteralValue(var,  assign.assignNode.getLastChild(),  true))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isLiteralValue(var,  assign.assignNode.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isLiteralValue(var,  assign.assignNode.getLastChild(),  true))  {	  }    else    if(NodeUtil.isLiteralValue(value,    assign.assignNode.getLastChild(),    true))    {    	non-compiled	[CE]  	32	None	replace
105	[BUG]  [BUGGY]  }  else  if(NodeUtil.isImmutableValue(assign,  assign.assignNode.getLastChild(),  true))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isImmutableValue(assign,  assign.assignNode.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isImmutableValue(assign,  assign.assignNode.getLastChild(),  true))  {	  }    else    if(NodeUtil.isLiteralValue(value,    assign.assignNode.getLastChild(),    true))    {    	non-compiled	[CE]  	32	None	replace
106	[BUG]  [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign,  assign.assignNode.getLastChild(),  false))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign,  assign.assignNode.getLastChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isLiteralValue(assign,  assign.assignNode.getLastChild(),  false))  {	  }    else    if(NodeUtil.isLiteralValue(value,    assign.assignNode.getLastChild(),    true))    {    	non-compiled	[CE]  	32	None	replace
107	[BUG]  [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {	  }    else    if(!hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	38	None	replace
108	[BUG]  [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true))  {	  }    else    if(!hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	38	None	replace
109	[BUG]  [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(value,  true))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(value,  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(value,  true))  {	  }    else    if(!hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	38	None	replace
110	[BUG]  [BUGGY]  }  else  if(!hasPropertyAssign  ||!NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!hasPropertyAssign  ||!NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!hasPropertyAssign  ||!NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {	  }    else    if(!hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	38	None	replace
111	[BUG]  [BUGGY]  }  else  if(NodeUtil.isPropertyAssign(assign.getFirstChild(),  false))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isPropertyAssign(assign.getFirstChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isPropertyAssign(assign.getFirstChild(),  false))  {	  }    else    if(NodeUtil.isPropertyAssign(assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	33	None	replace
112	[BUG]  [BUGGY]  }  else  if(NodeUtil.isPropertyAssign(assign.getLastChild(),  true))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isPropertyAssign(assign.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isPropertyAssign(assign.getLastChild(),  true))  {	  }    else    if(NodeUtil.isPropertyAssign(assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	33	None	replace
113	[BUG]  [BUGGY]  }  else  if(NodeUtil.isPropertyAssign(assign.getFirstChild(),  false)||  assign.assignNode.getLastChild()!=  null)  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isPropertyAssign(assign.getFirstChild(),  false)||  assign.assignNode.getLastChild()!=  null)  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isPropertyAssign(assign.getFirstChild(),  false)||  assign.assignNode.getLastChild()!=  null)  {	  }    else    if(NodeUtil.isPropertyAssign(assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	33	None	replace
114	[BUG]  [BUGGY]  }  else  if(NodeUtil.isPropertyAssign(assign.getFirstChild(),  false)||  assign.assignNode.getLastChild()  ==  null)  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isPropertyAssign(assign.getFirstChild(),  false)||  assign.assignNode.getLastChild()  ==  null)  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isPropertyAssign(assign.getFirstChild(),  false)||  assign.assignNode.getLastChild()  ==  null)  {	  }    else    if(NodeUtil.isPropertyAssign(assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	33	None	replace
115	[BUG]  [BUGGY]  }  else  if(NodeUtil.isPropertyAssign(assign.getLastChild(),  false))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isPropertyAssign(assign.getLastChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isPropertyAssign(assign.getLastChild(),  false))  {	  }    else    if(NodeUtil.isPropertyAssign(assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	33	None	replace
116	[BUG]  [BUGGY]  }  else  if(NodeUtil.isImmutableValue(assign.getFirstChild(),  true))  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isImmutableValue(assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isImmutableValue(assign.getFirstChild(),  true))  {	  }    else    if(NodeUtil.isPropertyAssign(assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	33	None	replace
117	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  ||!NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(isPropertyAssign  ||!NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(isPropertyAssign  ||!NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.isLiteralValue(assign.getLastChild(),    true))    {    	non-compiled	[CE]  	41	None	replace
118	[BUG]  [BUGGY]  }  else  if(hasFollowing  &&  isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasFollowing  &&  isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasFollowing  &&  isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.isLiteralValue(assign.getLastChild(),    true))    {    	non-compiled	[CE]  	41	None	replace
119	[BUG]  [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  false))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  false))  {	  }    else    if(!hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	46	None	replace
120	[BUG]  [BUGGY]  }  else  if(!hasPropertyAssign  ||!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!hasPropertyAssign  ||!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!hasPropertyAssign  ||!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {	  }    else    if(!hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	46	None	replace
121	[BUG]  [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign.getLastChild(),  false))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign.getLastChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isLiteralValue(assign.getLastChild(),  false))  {	  }    else    if(NodeUtil.isLiteralValue(assign.getFirstChild(),    false))    {    	non-compiled	[CE]  	29	None	replace
122	[BUG]  [BUGGY]  }  else  if(NodeUtil.isLiteralValue(value.getFirstChild(),  false))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isLiteralValue(value.getFirstChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isLiteralValue(value.getFirstChild(),  false))  {	  }    else    if(NodeUtil.isLiteralValue(assign.getFirstChild(),    false))    {    	non-compiled	[CE]  	29	None	replace
123	[BUG]  [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign.getFirstChild(),  false))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign.getFirstChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isAssignmentOp(assign.getFirstChild(),  false))  {	  }    else    if(NodeUtil.isLiteralValue(assign.getFirstChild(),    false))    {    	non-compiled	[CE]  	29	None	replace
124	[BUG]  [BUGGY]  }  else  if(hasFollowing  &&!NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasFollowing  &&!NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasFollowing  &&!NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {	  }    else    if(hasFollowing    &&!NodeUtil.isLiteralValue(assign.getLastChild(),    true))    {    	non-compiled	[CE]  	40	None	replace
125	[BUG]  [BUGGY]  }  else  if(!hasFollowing  &&!NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!hasFollowing  &&!NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!hasFollowing  &&!NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {	  }    else    if(hasFollowing    &&!NodeUtil.isLiteralValue(assign.getLastChild(),    true))    {    	non-compiled	[CE]  	40	None	replace
126	[BUG]  [BUGGY]  }  else  if(hasFollowing  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  false))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasFollowing  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasFollowing  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  false))  {	  }    else    if(hasFollowing    &&!NodeUtil.isLiteralValue(assign.getLastChild(),    true))    {    	non-compiled	[CE]  	40	None	replace
127	[BUG]  [BUGGY]  }  else  if(canModifyAllSites  &&  hasFollowing  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(canModifyAllSites  &&  hasFollowing  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(canModifyAllSites  &&  hasFollowing  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {	  }    else    if(hasFollowing    &&!NodeUtil.isLiteralValue(assign.getLastChild(),    true))    {    	non-compiled	[CE]  	40	None	replace
128	[BUG]  [BUGGY]  }  else  if(!hasFollowing  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!hasFollowing  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!hasFollowing  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {	  }    else    if(hasFollowing    &&!NodeUtil.isLiteralValue(assign.getLastChild(),    true))    {    	non-compiled	[CE]  	40	None	replace
129	[BUG]  [BUGGY]  }  else  if(hasFollowing  &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasFollowing  &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasFollowing  &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true))  {	  }    else    if(hasFollowing    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	6	None	replace
130	[BUG]  [BUGGY]  }  else  if(hasFollowing  &&  isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasFollowing  &&  isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasFollowing  &&  isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	18	None	replace
131	[BUG]  [BUGGY]  }  else  if(canModifyAllSites  &&  isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(canModifyAllSites  &&  isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(canModifyAllSites  &&  isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	18	None	replace
132	[BUG]  [BUGGY]  }  else  if(!isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	18	None	replace
133	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign,  assign.assign.getLastChild(),  true))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign,  assign.assign.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isLiteralValue(assign,  assign.assign.getLastChild(),  true))  {	  }    else    if(!NodeUtil.isLiteralValue(value,    assign.assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	60	None	replace
134	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign,  assign.assign.getFirstChild(),  false))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign,  assign.assign.getFirstChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isLiteralValue(assign,  assign.assign.getFirstChild(),  false))  {	  }    else    if(!NodeUtil.isLiteralValue(value,    assign.assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	60	None	replace
135	[BUG]  [BUGGY]  }  else  if(!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  false))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  false))  {	  }    else    if(!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),    false))    {    	non-compiled	[CE]  	13	None	replace
136	[BUG]  [BUGGY]  }  else  if(!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true)&&  isPropertyAssign)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true)&&  isPropertyAssign)  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true)&&  isPropertyAssign)  {	  }    else    if(!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),    false))    {    	non-compiled	[CE]  	13	None	replace
137	[BUG]  [BUGGY]  }  else  if(NodeUtil.isLiteralValue(value.getLastChild(),  true))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isLiteralValue(value.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isLiteralValue(value.getLastChild(),  true))  {	  }    else    if(NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),    true))    {    	non-compiled	[CE]  	63	None	replace
138	[BUG]  [BUGGY]  }  else  if(NodeUtil.isLiteralValue(value,  assign.assign.getLastChild(),  true))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isLiteralValue(value,  assign.assign.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isLiteralValue(value,  assign.assign.getLastChild(),  true))  {	  }    else    if(NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),    true))    {    	non-compiled	[CE]  	63	None	replace
139	[BUG]  [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign.getString(),  true))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign.getString(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isLiteralValue(assign.getString(),  true))  {	  }    else    if(NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),    true))    {    	non-compiled	[CE]  	63	None	replace
140	[BUG]  [BUGGY]  }  else  if(hasFollowing  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasFollowing  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasFollowing  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	69	None	replace
141	[BUG]  [BUGGY]  }  else  if(canModifyAllSites  &&  hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(canModifyAllSites  &&  hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(canModifyAllSites  &&  hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	69	None	replace
142	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  ||!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  ||!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  ||!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	69	None	replace
143	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(value.getLastChild(),  true))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(value.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isLiteralValue(value.getLastChild(),  true))  {	  }    else    if(!NodeUtil.isLiteralValue(value.getFirstChild(),    true))    {    	non-compiled	[CE]  	20	None	replace
144	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isImmutableValue(value.getFirstChild(),  true))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.isImmutableValue(value.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isImmutableValue(value.getFirstChild(),  true))  {	  }    else    if(!NodeUtil.isLiteralValue(value.getFirstChild(),    true))    {    	non-compiled	[CE]  	20	None	replace
145	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign,  assign.assignNode.getFirstChild(),  false))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign,  assign.assignNode.getFirstChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isLiteralValue(assign,  assign.assignNode.getFirstChild(),  false))  {	  }    else    if(!NodeUtil.isLiteralValue(value,    assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	56	None	replace
146	[BUG]  [BUGGY]  Node  node  =  assign.getNext();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  Node  node  =  assign.getNext();  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	Node  node  =  assign.getNext();	  Node    node    =    assign.getFirstChild();    	non-compiled	[CE]  	50	None	replace
147	[BUG]  [BUGGY]  Node  node  =  assign.assignNode.getFirstChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  Node  node  =  assign.assignNode.getFirstChild();  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	Node  node  =  assign.assignNode.getFirstChild();	  Node    node    =    assign.getFirstChild();    	non-compiled	[CE]  	50	None	replace
148	[BUG]  [BUGGY]  Node  node  =  assign.removeFirstChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  Node  node  =  assign.removeFirstChild();  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	Node  node  =  assign.removeFirstChild();	  Node    node    =    assign.getFirstChild();    	non-compiled	[CE]  	50	None	replace
149	[BUG]  [BUGGY]  Node  node  =  assign.assignNode.getLastChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  Node  node  =  assign.assignNode.getLastChild();  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	Node  node  =  assign.assignNode.getLastChild();	  Node    node    =    assign.getFirstChild();    	non-compiled	[CE]  	50	None	replace
150	[BUG]  [BUGGY]  Node  node  =  assign.getAncestor(1);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  Node  node  =  assign.getAncestor(1);  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	Node  node  =  assign.getAncestor(1);	  Node    node    =    assign.getFirstChild();    	non-compiled	[CE]  	50	None	replace
151	[BUG]  [BUGGY]  }  else  if(!hasPropertyAssign  ||!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!hasPropertyAssign  ||!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!hasPropertyAssign  ||!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true))  {	  }    else    if(!hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),    true))    {    	non-compiled	[CE]  	44	None	replace
152	[BUG]  [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(value.getLastChild(),  true))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(value.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(value.getLastChild(),  true))  {	  }    else    if(!hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),    true))    {    	non-compiled	[CE]  	44	None	replace
153	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(value.getFirstChild(),  false))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(value.getFirstChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(value.getFirstChild(),  false))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(value.getFirstChild(),    true))    {    	non-compiled	[CE]  	5	None	replace
154	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(value.getLastChild(),  true))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(value.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(value.getLastChild(),  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(value.getFirstChild(),    true))    {    	non-compiled	[CE]  	5	None	replace
155	[BUG]  [BUGGY]  }  else  if(assign.hasPropertyAssign  &&!NodeUtil.isLiteralValue(value.getFirstChild(),  true))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(assign.hasPropertyAssign  &&!NodeUtil.isLiteralValue(value.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(assign.hasPropertyAssign  &&!NodeUtil.isLiteralValue(value.getFirstChild(),  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(value.getFirstChild(),    true))    {    	non-compiled	[CE]  	5	None	replace
156	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  ||!NodeUtil.isLiteralValue(value.getFirstChild(),  true))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  ||!NodeUtil.isLiteralValue(value.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  ||!NodeUtil.isLiteralValue(value.getFirstChild(),  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(value.getFirstChild(),    true))    {    	non-compiled	[CE]  	5	None	replace
157	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign,  true))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign,  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isLiteralValue(assign,  true))  {	  }    else    if(!NodeUtil.isLiteralValue(assign.assign,    false))    {    	non-compiled	[CE]  	22	None	replace
158	[BUG]  [BUGGY]  Node  node  =  assign.next();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  Node  node  =  assign.next();  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	Node  node  =  assign.next();	  Node    node    =    assign.getLastChild();    	non-compiled	[CE]  	52	None	replace
159	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isImmutableValue(assign.getFirstChild(),  true))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isImmutableValue(assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.isImmutableValue(assign.getFirstChild(),  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isImmutableValue(assign.getLastChild(),    true))    {    	non-compiled	[CE]  	97	None	replace
160	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  ||!NodeUtil.isImmutableValue(assign.getLastChild(),  true))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  ||!NodeUtil.isImmutableValue(assign.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  ||!NodeUtil.isImmutableValue(assign.getLastChild(),  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isImmutableValue(assign.getLastChild(),    true))    {    	non-compiled	[CE]  	97	None	replace
161	[BUG]  [BUGGY]  NodeUtil.setPropertyAssign(assign,  var.getLastChild());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.setPropertyAssign(assign,  var.getLastChild());  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.setPropertyAssign(assign,  var.getLastChild());	  NodeUtil.setPropertyAssign(assign,    var.getFirstChild());    	non-compiled	[CE]  	93	None	replace
162	[BUG]  [BUGGY]  NodeUtil.setPropertyAssign(assign,  assign.getFirstChild());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.setPropertyAssign(assign,  assign.getFirstChild());  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.setPropertyAssign(assign,  assign.getFirstChild());	  NodeUtil.setPropertyAssign(assign,    var.getFirstChild());    	non-compiled	[CE]  	93	None	replace
163	[BUG]  [BUGGY]  NodeUtil.setPropertyAssign(value,  var.getFirstChild());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.setPropertyAssign(value,  var.getFirstChild());  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.setPropertyAssign(value,  var.getFirstChild());	  NodeUtil.setPropertyAssign(assign,    var.getFirstChild());    	non-compiled	[CE]  	93	None	replace
164	[BUG]  [BUGGY]  NodeUtil.setPropertyAssign(assign,  var.getFirstChild(),  true);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.setPropertyAssign(assign,  var.getFirstChild(),  true);  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.setPropertyAssign(assign,  var.getFirstChild(),  true);	  NodeUtil.setPropertyAssign(assign,    var.getFirstChild());    	non-compiled	[CE]  	93	None	replace
165	[BUG]  [BUGGY]  NodeUtil.setPropertyAssign(value,  assign.getFirstChild());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.setPropertyAssign(value,  assign.getFirstChild());  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.setPropertyAssign(value,  assign.getFirstChild());	  NodeUtil.setPropertyAssign(assign,    var.getFirstChild());    	non-compiled	[CE]  	93	None	replace
166	[BUG]  [BUGGY]  NodeUtil.setPropertyAssign(property,  var.getFirstChild());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.setPropertyAssign(property,  var.getFirstChild());  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.setPropertyAssign(property,  var.getFirstChild());	  NodeUtil.setPropertyAssign(assign,    var.getFirstChild());    	non-compiled	[CE]  	93	None	replace
167	[BUG]  [BUGGY]  NodeUtil.setPropertyAssign(assign,  value.getFirstChild());  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.setPropertyAssign(assign,  value.getFirstChild());  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.setPropertyAssign(assign,  value.getFirstChild());	  NodeUtil.setPropertyAssign(assign,    var.getFirstChild());    	non-compiled	[CE]  	93	None	replace
168	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  ||!NodeUtil.isLiteralValue(assign.getLastChild(),  false))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  ||!NodeUtil.isLiteralValue(assign.getLastChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  ||!NodeUtil.isLiteralValue(assign.getLastChild(),  false))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.getLastChild(),    false))    {    	non-compiled	[CE]  	37	None	replace
169	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isImmutableValue(assign,  false))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.isImmutableValue(assign,  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isImmutableValue(assign,  false))  {	  }    else    if(!NodeUtil.isImmutableValue(assign.assign,    true))    {    	non-compiled	[CE]  	26	None	replace
170	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isImmutableValue(assign.assign,  false))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.isImmutableValue(assign.assign,  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isImmutableValue(assign.assign,  false))  {	  }    else    if(!NodeUtil.isImmutableValue(assign.assign,    true))    {    	non-compiled	[CE]  	26	None	replace
171	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isImmutableValue(assign.assignNode,  false))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.isImmutableValue(assign.assignNode,  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isImmutableValue(assign.assignNode,  false))  {	  }    else    if(!NodeUtil.isImmutableValue(assign.assign,    true))    {    	non-compiled	[CE]  	26	None	replace
172	[BUG]  [BUGGY]  }  else  if(canModifyAllSites  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  true))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(canModifyAllSites  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(canModifyAllSites  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  true))  {	  }    else    if(!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),    true))    {    	non-compiled	[CE]  	14	None	replace
173	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isPropertyAssign(assign,  false))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.isPropertyAssign(assign,  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isPropertyAssign(assign,  false))  {	  }    else    if(!NodeUtil.isLiteralValue(assign,    false))    {    	non-compiled	[CE]  	21	None	replace
174	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isImmutableValue(assign,  true))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.isImmutableValue(assign,  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isImmutableValue(assign,  true))  {	  }    else    if(!NodeUtil.isLiteralValue(assign,    false))    {    	non-compiled	[CE]  	21	None	replace
175	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isPropertyAssign(assign,  true))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.isPropertyAssign(assign,  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isPropertyAssign(assign,  true))  {	  }    else    if(!NodeUtil.isLiteralValue(assign,    false))    {    	non-compiled	[CE]  	21	None	replace
176	[BUG]  [BUGGY]  }  else  if(isFunctionAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  false))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(isFunctionAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(isFunctionAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  false))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    false))    {    	non-compiled	[CE]  	45	None	replace
177	[BUG]  [BUGGY]  }  else  if(!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  true)  &&  hasPropertyAssign)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  true)  &&  hasPropertyAssign)  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  true)  &&  hasPropertyAssign)  {	  }    else    if(!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),    true)&&    hasPropertyAssign)    {    	non-compiled	[CE]  	19	None	replace
178	[BUG]  [BUGGY]  }  else  if(!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true)  &&  mayHaveSecondarySideEffects)  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true)  &&  mayHaveSecondarySideEffects)  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true)  &&  mayHaveSecondarySideEffects)  {	  }    else    if(!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),    true)&&    hasPropertyAssign)    {    	non-compiled	[CE]  	19	None	replace
179	[BUG]  [BUGGY]  }  else  if(!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  false)  &&  hasPropertyAssign)  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  false)  &&  hasPropertyAssign)  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  false)  &&  hasPropertyAssign)  {	  }    else    if(!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),    true)&&    hasPropertyAssign)    {    	non-compiled	[CE]  	19	None	replace
180	[BUG]  [BUGGY]  }  else  if(!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  true)  &&  isPropertyAssign)  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  true)  &&  isPropertyAssign)  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  true)  &&  isPropertyAssign)  {	  }    else    if(!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),    true)&&    hasPropertyAssign)    {    	non-compiled	[CE]  	19	None	replace
181	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  ||!NodeUtil.isLiteralValue(assign.assignNode,  true))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  ||!NodeUtil.isLiteralValue(assign.assignNode,  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  ||!NodeUtil.isLiteralValue(assign.assignNode,  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assignNode,    true))    {    	non-compiled	[CE]  	84	None	replace
182	[BUG]  [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode,  true))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode,  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode,  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assignNode,    true))    {    	non-compiled	[CE]  	84	None	replace
183	[BUG]  [BUGGY]  }  else  if(hasFollowing  &&!NodeUtil.isLiteralValue(assign.assignNode,  true))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasFollowing  &&!NodeUtil.isLiteralValue(assign.assignNode,  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasFollowing  &&!NodeUtil.isLiteralValue(assign.assignNode,  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assignNode,    true))    {    	non-compiled	[CE]  	84	None	replace
184	[BUG]  [BUGGY]  }  else  if(NodeUtil.isLiteralValue(value,  assign.assignNode.getFirstChild(),  false))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isLiteralValue(value,  assign.assignNode.getFirstChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isLiteralValue(value,  assign.assignNode.getFirstChild(),  false))  {	  }    else    if(NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    false))    {    	non-compiled	[CE]  	64	None	replace
185	[BUG]  [BUGGY]  }  else  if(assign.isUnknownValue()  ||!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(assign.isUnknownValue()  ||!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(assign.isUnknownValue()  ||!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {	  }    else    if(assign.isUnknownValue()    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	77	None	replace
186	[BUG]  [BUGGY]  }  else  if(assign.isUnknownValue()  ||  NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(assign.isUnknownValue()  ||  NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(assign.isUnknownValue()  ||  NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {	  }    else    if(assign.isUnknownValue()    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	77	None	replace
187	[BUG]  [BUGGY]  }  else  if(assign.isUnknownValue()  ||!NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(assign.isUnknownValue()  ||!NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(assign.isUnknownValue()  ||!NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {	  }    else    if(assign.isUnknownValue()    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	77	None	replace
188	[BUG]  [BUGGY]  }  else  if(assign.isUnknownValue()  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(assign.isUnknownValue()  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(assign.isUnknownValue()  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {	  }    else    if(assign.isUnknownValue()    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	77	None	replace
189	[BUG]  [BUGGY]  }  else  if(assign.isUnknownValue()  ||!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(assign.isUnknownValue()  ||!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(assign.isUnknownValue()  ||!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true))  {	  }    else    if(assign.isUnknownValue()    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	77	None	replace
190	[BUG]  [BUGGY]  }  else  if(!assign.isUnknownValue()  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!assign.isUnknownValue()  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!assign.isUnknownValue()  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {	  }    else    if(assign.isUnknownValue()    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	77	None	replace
191	[BUG]  [BUGGY]  }  else  if(assign.isUnknownValue()  &&!NodeUtil.isLiteralValue(assign.getFirstChild(),  false))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(assign.isUnknownValue()  &&!NodeUtil.isLiteralValue(assign.getFirstChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(assign.isUnknownValue()  &&!NodeUtil.isLiteralValue(assign.getFirstChild(),  false))  {	  }    else    if(assign.isUnknownValue()    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	77	None	replace
192	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  ||!NodeUtil.isLiteralValue(value,  true))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  ||!NodeUtil.isLiteralValue(value,  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  ||!NodeUtil.isLiteralValue(value,  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(value,    true))    {    	non-compiled	[CE]  	3	None	replace
193	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(var,  true))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(var,  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(var,  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(value,    true))    {    	non-compiled	[CE]  	3	None	replace
194	[BUG]  [BUGGY]  NodeUtil.setPropertyAssign(value,  isPropertyAssign);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.setPropertyAssign(value,  isPropertyAssign);  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.setPropertyAssign(value,  isPropertyAssign);	  NodeUtil.setPropertyAssign(assign,    isPropertyAssign);    	non-compiled	[CE]  	92	None	replace
195	[BUG]  [BUGGY]  NodeUtil.setPropertyAssign(assign,  value);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.setPropertyAssign(assign,  value);  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.setPropertyAssign(assign,  value);	  NodeUtil.setPropertyAssign(assign,    isPropertyAssign);    	non-compiled	[CE]  	92	None	replace
196	[BUG]  [BUGGY]  NodeUtil.setPropertyAssign(property,  assign);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.setPropertyAssign(property,  assign);  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.setPropertyAssign(property,  assign);	  NodeUtil.setPropertyAssign(assign,    isPropertyAssign);    	non-compiled	[CE]  	92	None	replace
197	[BUG]  [BUGGY]  NodeUtil.setPropertyAssign(value,  assign);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.setPropertyAssign(value,  assign);  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.setPropertyAssign(value,  assign);	  NodeUtil.setPropertyAssign(assign,    isPropertyAssign);    	non-compiled	[CE]  	92	None	replace
198	[BUG]  [BUGGY]  NodeUtil.setPropertyAssign(property,  isPropertyAssign);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.setPropertyAssign(property,  isPropertyAssign);  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.setPropertyAssign(property,  isPropertyAssign);	  NodeUtil.setPropertyAssign(assign,    isPropertyAssign);    	non-compiled	[CE]  	92	None	replace
199	[BUG]  [BUGGY]  NodeUtil.setPropertyAssign(assign,  assign);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.setPropertyAssign(assign,  assign);  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.setPropertyAssign(assign,  assign);	  NodeUtil.setPropertyAssign(assign,    isPropertyAssign);    	non-compiled	[CE]  	92	None	replace
200	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  ||!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  ||!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  ||!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),    true))    {    	non-compiled	[CE]  	1	None	replace
201	[BUG]  [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  false))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  false))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),    false))    {    	non-compiled	[CE]  	70	None	replace
202	[BUG]  [BUGGY]  }  else  if(hasFollowing  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  false))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasFollowing  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasFollowing  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  false))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),    false))    {    	non-compiled	[CE]  	70	None	replace
203	[BUG]  [BUGGY]  }  else  if(canModifyAllSites  &&  hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  false))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(canModifyAllSites  &&  hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(canModifyAllSites  &&  hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  false))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),    false))    {    	non-compiled	[CE]  	70	None	replace
204	[BUG]  [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  false))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  false))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),    false))    {    	non-compiled	[CE]  	70	None	replace
205	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isPropertyAssign(assign.getFirstChild(),  false)||  assign.assignNode.getLastChild()!=  null)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.isPropertyAssign(assign.getFirstChild(),  false)||  assign.assignNode.getLastChild()!=  null)  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isPropertyAssign(assign.getFirstChild(),  false)||  assign.assignNode.getLastChild()!=  null)  {	  }    else    if(!NodeUtil.isPropertyAssign(assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	11	None	replace
206	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  ||!NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  ||!NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  ||!NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	36	None	replace
207	[BUG]  [BUGGY]  }  else  if(canModifyAllSites  &&  hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(canModifyAllSites  &&  hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(canModifyAllSites  &&  hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	36	None	replace
208	[BUG]  [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(value,  assign.assignNode.getLastChild(),  true))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(value,  assign.assignNode.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(value,  assign.assignNode.getLastChild(),  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign,    assign.assignNode.getLastChild(),    true))    {    	non-compiled	[CE]  	79	None	replace
209	[BUG]  [BUGGY]  }  else  if(hasFollowing  &&!NodeUtil.isLiteralValue(assign,  assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasFollowing  &&!NodeUtil.isLiteralValue(assign,  assign.assignNode.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasFollowing  &&!NodeUtil.isLiteralValue(assign,  assign.assignNode.getFirstChild(),  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign,    assign.assignNode.getLastChild(),    true))    {    	non-compiled	[CE]  	79	None	replace
210	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  ||!NodeUtil.isLiteralValue(assign,  assign.assignNode.getLastChild(),  true))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  ||!NodeUtil.isLiteralValue(assign,  assign.assignNode.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  ||!NodeUtil.isLiteralValue(assign,  assign.assignNode.getLastChild(),  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign,    assign.assignNode.getLastChild(),    true))    {    	non-compiled	[CE]  	79	None	replace
211	[BUG]  [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign,  true))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign,  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isLiteralValue(assign,  true))  {	  }    else    if(NodeUtil.isLiteralValue(value,    true))    {    	non-compiled	[CE]  	31	None	replace
212	[BUG]  [BUGGY]  }  else  if(NodeUtil.isImmutableValue(assign,  true))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isImmutableValue(assign,  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isImmutableValue(assign,  true))  {	  }    else    if(NodeUtil.isLiteralValue(value,    true))    {    	non-compiled	[CE]  	31	None	replace
213	[BUG]  [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign,  false))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign,  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isLiteralValue(assign,  false))  {	  }    else    if(NodeUtil.isLiteralValue(value,    true))    {    	non-compiled	[CE]  	31	None	replace
214	[BUG]  [BUGGY]  }  else  if(NodeUtil.isLiteralValue(value,  false))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isLiteralValue(value,  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isLiteralValue(value,  false))  {	  }    else    if(NodeUtil.isLiteralValue(value,    true))    {    	non-compiled	[CE]  	31	None	replace
215	[BUG]  [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign,  true))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign,  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isAssignmentOp(assign,  true))  {	  }    else    if(NodeUtil.isLiteralValue(value,    true))    {    	non-compiled	[CE]  	31	None	replace
216	[BUG]  [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign,  false))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign,  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isAssignmentOp(assign,  false))  {	  }    else    if(NodeUtil.isLiteralValue(value,    true))    {    	non-compiled	[CE]  	31	None	replace
217	[BUG]  [BUGGY]  }  else  if(NodeUtil.isPropertyAssign(assign,  true))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isPropertyAssign(assign,  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isPropertyAssign(assign,  true))  {	  }    else    if(NodeUtil.isLiteralValue(value,    true))    {    	non-compiled	[CE]  	31	None	replace
218	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  ||!NodeUtil.isLiteralValue(assign.getLastChild(),  false))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(isPropertyAssign  ||!NodeUtil.isLiteralValue(assign.getLastChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(isPropertyAssign  ||!NodeUtil.isLiteralValue(assign.getLastChild(),  false))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.isLiteralValue(assign.getLastChild(),    false))    {    	non-compiled	[CE]  	99	None	replace
219	[BUG]  [BUGGY]  }  else  if(assign.isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getFirstChild(),  false))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(assign.isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getFirstChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(assign.isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getFirstChild(),  false))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.isLiteralValue(assign.getLastChild(),    false))    {    	non-compiled	[CE]  	99	None	replace
220	[BUG]  [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign.assign,  assign.getFirstChild(),  true))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign.assign,  assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isLiteralValue(assign.assign,  assign.getFirstChild(),  true))  {	  }    else    if(NodeUtil.isLiteralValue(value,    assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	30	None	replace
221	[BUG]  [BUGGY]  }  else  if(NodeUtil.isLiteralValue(var,  assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isLiteralValue(var,  assign.assignNode.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isLiteralValue(var,  assign.assignNode.getFirstChild(),  true))  {	  }    else    if(NodeUtil.isLiteralValue(value,    assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	30	None	replace
222	[BUG]  [BUGGY]  }  else  if(isUnknownValue  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(isUnknownValue  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(isUnknownValue  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {	  }    else    if(isUnknownValue    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	90	None	replace
223	[BUG]  [BUGGY]  }  else  if(isUnknownValue  ||!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(isUnknownValue  ||!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(isUnknownValue  ||!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {	  }    else    if(isUnknownValue    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	90	None	replace
224	[BUG]  [BUGGY]  }  else  if(isUnknownValue  &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(isUnknownValue  &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(isUnknownValue  &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true))  {	  }    else    if(isUnknownValue    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	90	None	replace
225	[BUG]  [BUGGY]  }  else  if(isUnknownValue  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  false))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(isUnknownValue  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(isUnknownValue  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  false))  {	  }    else    if(isUnknownValue    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	90	None	replace
226	[BUG]  [BUGGY]  }  else  if(assign.hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(assign.hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(assign.hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {	  }    else    if(hasPropertyAssign    ||!NodeUtil.isLiteralValue(assign.getLastChild(),    true))    {    	non-compiled	[CE]  	39	None	replace
227	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  ||!NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(isPropertyAssign  ||!NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(isPropertyAssign  ||!NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {	  }    else    if(hasPropertyAssign    ||!NodeUtil.isLiteralValue(assign.getLastChild(),    true))    {    	non-compiled	[CE]  	39	None	replace
228	[BUG]  [BUGGY]  }  else  if(!isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.isLiteralValue(assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	67	None	replace
229	[BUG]  [BUGGY]  Node  param  =  assign.getNext();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  Node  param  =  assign.getNext();  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	Node  param  =  assign.getNext();	  Node    param    =    assign.getParent();    	non-compiled	[CE]  	54	None	replace
230	[BUG]  [BUGGY]  Node  param  =  assign.getLastChild();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  Node  param  =  assign.getLastChild();  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	Node  param  =  assign.getLastChild();	  Node    param    =    assign.getParent();    	non-compiled	[CE]  	54	None	replace
231	[BUG]  [BUGGY]  Node  param  =  assign.getFirstChild();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  Node  param  =  assign.getFirstChild();  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	Node  param  =  assign.getFirstChild();	  Node    param    =    assign.getParent();    	non-compiled	[CE]  	54	None	replace
232	[BUG]  [BUGGY]  Node  param  =  assign.getNameNode();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  Node  param  =  assign.getNameNode();  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	Node  param  =  assign.getNameNode();	  Node    param    =    assign.getParent();    	non-compiled	[CE]  	54	None	replace
233	[BUG]  [BUGGY]  Node  param  =  assign.getAncestor(1);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  Node  param  =  assign.getAncestor(1);  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	Node  param  =  assign.getAncestor(1);	  Node    param    =    assign.getParent();    	non-compiled	[CE]  	54	None	replace
234	[BUG]  [BUGGY]  Node  param  =  assign.getPreviousParent();  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  Node  param  =  assign.getPreviousParent();  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	Node  param  =  assign.getPreviousParent();	  Node    param    =    assign.getParent();    	non-compiled	[CE]  	54	None	replace
235	[BUG]  [BUGGY]  }  else  if(isPropertyAssign(assign.getFirstChild(),  false))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(isPropertyAssign(assign.getFirstChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(isPropertyAssign(assign.getFirstChild(),  false))  {	  }    else    if(!NodeUtil.isPropertyAssign(assign.getLastChild(),    false))    {    	non-compiled	[CE]  	35	None	replace
236	[BUG]  [BUGGY]  NodeUtil.removeChild(current,  assign);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.removeChild(current,  assign);  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.removeChild(current,  assign);	  NodeUtil.removeChild(assign,    current);    	non-compiled	[CE]  	51	None	replace
237	[BUG]  [BUGGY]  NodeUtil.removeChild(value,  current);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.removeChild(value,  current);  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.removeChild(value,  current);	  NodeUtil.removeChild(assign,    current);    	non-compiled	[CE]  	51	None	replace
238	[BUG]  [BUGGY]  NodeUtil.removeChild(assign,  current  +  1);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.removeChild(assign,  current  +  1);  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.removeChild(assign,  current  +  1);	  NodeUtil.removeChild(assign,    current);    	non-compiled	[CE]  	51	None	replace
239	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  current);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.removeChild(parent,  current);  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.removeChild(parent,  current);	  NodeUtil.removeChild(assign,    current);    	non-compiled	[CE]  	51	None	replace
240	[BUG]  [BUGGY]  NodeUtil.removeChild(assign,  current  -  1);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.removeChild(assign,  current  -  1);  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.removeChild(assign,  current  -  1);	  NodeUtil.removeChild(assign,    current);    	non-compiled	[CE]  	51	None	replace
241	[BUG]  [BUGGY]  NodeUtil.removeChild(assign,  var);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.removeChild(assign,  var);  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.removeChild(assign,  var);	  NodeUtil.removeChild(assign,    current);    	non-compiled	[CE]  	51	None	replace
242	[BUG]  [BUGGY]  NodeUtil.removeChild(this.assign,  current);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.removeChild(this.assign,  current);  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.removeChild(this.assign,  current);	  NodeUtil.removeChild(assign,    current);    	non-compiled	[CE]  	51	None	replace
243	[BUG]  [BUGGY]  }  else  if(isFunctionAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(isFunctionAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(isFunctionAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true))  {	  }    else    if(isFunctionAssign    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	47	None	replace
244	[BUG]  [BUGGY]  }  else  if(isFunctionAssign  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(isFunctionAssign  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(isFunctionAssign  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {	  }    else    if(isFunctionAssign    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	47	None	replace
245	[BUG]  [BUGGY]  }  else  if(isFunctionAssign  ||!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(isFunctionAssign  ||!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(isFunctionAssign  ||!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {	  }    else    if(isFunctionAssign    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	47	None	replace
246	[BUG]  [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign.getLastChild(),  true)  &&  isPropertyAssign)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign.getLastChild(),  true)  &&  isPropertyAssign)  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isLiteralValue(assign.getLastChild(),  true)  &&  isPropertyAssign)  {	  }    else    if(NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true)&&    isPropertyAssign)    {    	non-compiled	[CE]  	96	None	replace
247	[BUG]  [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign.getFirstChild(),  true)  &&  isPropertyAssign)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign.getFirstChild(),  true)  &&  isPropertyAssign)  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isLiteralValue(assign.getFirstChild(),  true)  &&  isPropertyAssign)  {	  }    else    if(NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true)&&    isPropertyAssign)    {    	non-compiled	[CE]  	96	None	replace
248	[BUG]  [BUGGY]  }  else  if(NodeUtil.isLiteralValue(value.getFirstChild(),  true)  &&  isPropertyAssign)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isLiteralValue(value.getFirstChild(),  true)  &&  isPropertyAssign)  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isLiteralValue(value.getFirstChild(),  true)  &&  isPropertyAssign)  {	  }    else    if(NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true)&&    isPropertyAssign)    {    	non-compiled	[CE]  	96	None	replace
249	[BUG]  [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign.getFirstChild(),  true)  &&  hasPropertyAssign)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign.getFirstChild(),  true)  &&  hasPropertyAssign)  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isLiteralValue(assign.getFirstChild(),  true)  &&  hasPropertyAssign)  {	  }    else    if(NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true)&&    isPropertyAssign)    {    	non-compiled	[CE]  	96	None	replace
250	[BUG]  [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign.getFirstChild(),  false)  &&  isPropertyAssign)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign.getFirstChild(),  false)  &&  isPropertyAssign)  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isLiteralValue(assign.getFirstChild(),  false)  &&  isPropertyAssign)  {	  }    else    if(NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true)&&    isPropertyAssign)    {    	non-compiled	[CE]  	96	None	replace
251	[BUG]  [BUGGY]  }  else  if(!NodeUtil.mayHaveSecondarySideEffects(assign.getParent(),  true))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.mayHaveSecondarySideEffects(assign.getParent(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.mayHaveSecondarySideEffects(assign.getParent(),  true))  {	  }    else    if(!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getLastChild(),    true))    {    	non-compiled	[CE]  	15	None	replace
252	[BUG]  [BUGGY]  }  else  if(!NodeUtil.mayHaveSecondarySideEffects(assign.assign.getFirstChild(),  true))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.mayHaveSecondarySideEffects(assign.assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.mayHaveSecondarySideEffects(assign.assign.getFirstChild(),  true))  {	  }    else    if(!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getLastChild(),    true))    {    	non-compiled	[CE]  	15	None	replace
253	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isImmutableValue(assign.assignNode.getLastChild(),  true))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isImmutableValue(assign.assignNode.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.isImmutableValue(assign.assignNode.getLastChild(),  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isImmutableValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	87	None	replace
254	[BUG]  [BUGGY]  NodeUtil.removeChild(value);  current--;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.removeChild(value);  current--;  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.removeChild(value);  current--;	  NodeUtil.removeChild(assign);    current--;    	non-compiled	[CE]  	91	None	replace
255	[BUG]  [BUGGY]  NodeUtil.removeChild(current);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.removeChild(current);  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.removeChild(current);	  NodeUtil.removeChild(assign);    current--;    	non-compiled	[CE]  	91	None	replace
256	[BUG]  [BUGGY]  NodeUtil.removeChild(parent);  current--;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.removeChild(parent);  current--;  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.removeChild(parent);  current--;	  NodeUtil.removeChild(assign);    current--;    	non-compiled	[CE]  	91	None	replace
257	[BUG]  [BUGGY]  NodeUtil.removeChild(current);  current--;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.removeChild(current);  current--;  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.removeChild(current);  current--;	  NodeUtil.removeChild(assign);    current--;    	non-compiled	[CE]  	91	None	replace
258	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  assign);  current--;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.removeChild(parent,  assign);  current--;  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.removeChild(parent,  assign);  current--;	  NodeUtil.removeChild(assign);    current--;    	non-compiled	[CE]  	91	None	replace
259	[BUG]  [BUGGY]  NodeUtil.removeChild(value,  assign);  current--;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.removeChild(value,  assign);  current--;  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.removeChild(value,  assign);  current--;	  NodeUtil.removeChild(assign);    current--;    	non-compiled	[CE]  	91	None	replace
260	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(value,  assign.getLastChild(),  true))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(value,  assign.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isLiteralValue(value,  assign.getLastChild(),  true))  {	  }    else    if(!NodeUtil.isLiteralValue(assign.assign,    assign.getLastChild(),    true))    {    	non-compiled	[CE]  	59	None	replace
261	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign.assign,  assign.getFirstChild(),  true))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign.assign,  assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isLiteralValue(assign.assign,  assign.getFirstChild(),  true))  {	  }    else    if(!NodeUtil.isLiteralValue(assign.assign,    assign.getLastChild(),    true))    {    	non-compiled	[CE]  	59	None	replace
262	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign,  assign.getFirstChild(),  true))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign,  assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isLiteralValue(assign,  assign.getFirstChild(),  true))  {	  }    else    if(!NodeUtil.isLiteralValue(assign.assign,    assign.getLastChild(),    true))    {    	non-compiled	[CE]  	59	None	replace
263	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(value,  assign.assign,  true))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(value,  assign.assign,  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isLiteralValue(value,  assign.assign,  true))  {	  }    else    if(!NodeUtil.isLiteralValue(assign.assign,    assign.getLastChild(),    true))    {    	non-compiled	[CE]  	59	None	replace
264	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign.assign,  assign.getLastChild(),  false))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign.assign,  assign.getLastChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isLiteralValue(assign.assign,  assign.getLastChild(),  false))  {	  }    else    if(!NodeUtil.isLiteralValue(assign.assign,    assign.getLastChild(),    true))    {    	non-compiled	[CE]  	59	None	replace
265	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assign,  assign.getLastChild(),  true))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assign,  assign.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assign,  assign.getLastChild(),  true))  {	  }    else    if(!NodeUtil.isLiteralValue(assign.assign,    assign.getLastChild(),    true))    {    	non-compiled	[CE]  	59	None	replace
266	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  assign.getLastChild(),  true))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  assign.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  assign.getLastChild(),  true))  {	  }    else    if(!NodeUtil.isLiteralValue(assign.assign,    assign.getLastChild(),    true))    {    	non-compiled	[CE]  	59	None	replace
267	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  ||!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(isPropertyAssign  ||!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(isPropertyAssign  ||!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),    true))    {    	non-compiled	[CE]  	42	None	replace
268	[BUG]  [BUGGY]  }  else  if(assign.isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(assign.isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(assign.isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),    true))    {    	non-compiled	[CE]  	42	None	replace
269	[BUG]  [BUGGY]  NodeUtil.removeChild(assign,  value);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.removeChild(assign,  value);  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.removeChild(assign,  value);	  NodeUtil.removeChild(value,    assign);    	non-compiled	[CE]  	94	None	replace
270	[BUG]  [BUGGY]  NodeUtil.removeChild(this.assign,  assign);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.removeChild(this.assign,  assign);  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.removeChild(this.assign,  assign);	  NodeUtil.removeChild(value,    assign);    	non-compiled	[CE]  	94	None	replace
271	[BUG]  [BUGGY]  NodeUtil.removeChild(this.assignNode,  assign);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.removeChild(this.assignNode,  assign);  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.removeChild(this.assignNode,  assign);	  NodeUtil.removeChild(value,    assign);    	non-compiled	[CE]  	94	None	replace
272	[BUG]  [BUGGY]  NodeUtil.removeChild(alloc,  assign);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.removeChild(alloc,  assign);  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.removeChild(alloc,  assign);	  NodeUtil.removeChild(value,    assign);    	non-compiled	[CE]  	94	None	replace
273	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(value,  assign.assignNode.getFirstChild(),  false))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(value,  assign.assignNode.getFirstChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(value,  assign.assignNode.getFirstChild(),  false))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(value,    assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	81	None	replace
274	[BUG]  [BUGGY]  }  else  if(assign.hasPropertyAssign  &&!NodeUtil.isLiteralValue(value,  assign.assignNode.getLastChild(),  true))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(assign.hasPropertyAssign  &&!NodeUtil.isLiteralValue(value,  assign.assignNode.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(assign.hasPropertyAssign  &&!NodeUtil.isLiteralValue(value,  assign.assignNode.getLastChild(),  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(value,    assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	81	None	replace
275	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(value,  assign.assignNode.getLastChild(),  false))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(value,  assign.assignNode.getLastChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(value,  assign.assignNode.getLastChild(),  false))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(value,    assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	81	None	replace
276	[BUG]  [BUGGY]  }  else  if(NodeUtil.isImmutableValue(value.getFirstChild(),  true))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isImmutableValue(value.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isImmutableValue(value.getFirstChild(),  true))  {	  }    else    if(NodeUtil.isLiteralValue(value.getFirstChild(),    true))    {    	non-compiled	[CE]  	27	None	replace
277	[BUG]  [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign.getFirstChild(),  true))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isAssignmentOp(assign.getFirstChild(),  true))  {	  }    else    if(NodeUtil.isLiteralValue(value.getFirstChild(),    true))    {    	non-compiled	[CE]  	27	None	replace
278	[BUG]  [BUGGY]  }  else  if(hasFollowing  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  true))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasFollowing  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasFollowing  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),    true))    {    	non-compiled	[CE]  	68	None	replace
279	[BUG]  [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  true))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),    true))    {    	non-compiled	[CE]  	68	None	replace
280	[BUG]  [BUGGY]  }  else  if(canModifyAllSites  &&  hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  true))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(canModifyAllSites  &&  hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(canModifyAllSites  &&  hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),    true))    {    	non-compiled	[CE]  	68	None	replace
281	[BUG]  [BUGGY]  NodeUtil.setPropertyAssign(assign,  false);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.setPropertyAssign(assign,  false);  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.setPropertyAssign(assign,  false);	  NodeUtil.setPropertyAssign(assign,    true);    	non-compiled	[CE]  	62	None	replace
282	[BUG]  [BUGGY]  NodeUtil.setPropertyAssign(value,  true);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.setPropertyAssign(value,  true);  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.setPropertyAssign(value,  true);	  NodeUtil.setPropertyAssign(assign,    true);    	non-compiled	[CE]  	62	None	replace
283	[BUG]  [BUGGY]  NodeUtil.setPropertyAssign(property,  true);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.setPropertyAssign(property,  true);  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.setPropertyAssign(property,  true);	  NodeUtil.setPropertyAssign(assign,    true);    	non-compiled	[CE]  	62	None	replace
284	[BUG]  [BUGGY]  NodeUtil.setPropertyAssign(this.assign,  true);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.setPropertyAssign(this.assign,  true);  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.setPropertyAssign(this.assign,  true);	  NodeUtil.setPropertyAssign(assign,    true);    	non-compiled	[CE]  	62	None	replace
285	[BUG]  [BUGGY]  NodeUtil.setPropertyAssign(assign,  null);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.setPropertyAssign(assign,  null);  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.setPropertyAssign(assign,  null);	  NodeUtil.setPropertyAssign(assign,    true);    	non-compiled	[CE]  	62	None	replace
286	[BUG]  [BUGGY]  NodeUtil.setPropertyAssign(propertyAssign,  false);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.setPropertyAssign(propertyAssign,  false);  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.setPropertyAssign(propertyAssign,  false);	  NodeUtil.setPropertyAssign(assign,    true);    	non-compiled	[CE]  	62	None	replace
287	[BUG]  [BUGGY]  NodeUtil.setPropertyAssign(null,  true);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.setPropertyAssign(null,  true);  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.setPropertyAssign(null,  true);	  NodeUtil.setPropertyAssign(assign,    true);    	non-compiled	[CE]  	62	None	replace
288	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isImmutableValue(assign.getLastChild(),  false))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isImmutableValue(assign.getLastChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.isImmutableValue(assign.getLastChild(),  false))  {	  }    else    if(!NodeUtil.isImmutableValue(assign.getLastChild(),    false))    {    	non-compiled	[CE]  	34	None	replace
289	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isImmutableValue(assign.getFirstChild(),  false))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isImmutableValue(assign.getFirstChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.isImmutableValue(assign.getFirstChild(),  false))  {	  }    else    if(!NodeUtil.isImmutableValue(assign.getLastChild(),    false))    {    	non-compiled	[CE]  	34	None	replace
290	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isAssignmentOp(assign,  false))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.isAssignmentOp(assign,  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isAssignmentOp(assign,  false))  {	  }    else    if(!NodeUtil.isLiteralValue(value,    false))    {    	non-compiled	[CE]  	23	None	replace
291	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  ||!NodeUtil.isLiteralValue(assign,  true))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  ||!NodeUtil.isLiteralValue(assign,  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  ||!NodeUtil.isLiteralValue(assign,  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign,    true))    {    	non-compiled	[CE]  	83	None	replace
292	[BUG]  [BUGGY]  }  else  if(hasFollowing  &&!NodeUtil.isLiteralValue(assign,  true))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasFollowing  &&!NodeUtil.isLiteralValue(assign,  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasFollowing  &&!NodeUtil.isLiteralValue(assign,  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign,    true))    {    	non-compiled	[CE]  	83	None	replace
293	[BUG]  [BUGGY]  Node  parent  =  assign.getNext();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  Node  parent  =  assign.getNext();  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	Node  parent  =  assign.getNext();	  Node    parent    =    assign.getParent();    	non-compiled	[CE]  	53	None	replace
294	[BUG]  [BUGGY]  Node  parent  =  assign.getLastChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  Node  parent  =  assign.getLastChild();  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	Node  parent  =  assign.getLastChild();	  Node    parent    =    assign.getParent();    	non-compiled	[CE]  	53	None	replace
295	[BUG]  [BUGGY]  Node  parent  =  assign.getFirstChild();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  Node  parent  =  assign.getFirstChild();  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	Node  parent  =  assign.getFirstChild();	  Node    parent    =    assign.getParent();    	non-compiled	[CE]  	53	None	replace
296	[BUG]  [BUGGY]  Node  parent  =  assign.getAncestor(1);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  Node  parent  =  assign.getAncestor(1);  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	Node  parent  =  assign.getAncestor(1);	  Node    parent    =    assign.getParent();    	non-compiled	[CE]  	53	None	replace
297	[BUG]  [BUGGY]  Node  parent  =  assign.getOwner();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  Node  parent  =  assign.getOwner();  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	Node  parent  =  assign.getOwner();	  Node    parent    =    assign.getParent();    	non-compiled	[CE]  	53	None	replace
298	[BUG]  [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {	  }    else    if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.isLiteralValue(assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	95	None	replace
299	[BUG]  [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.isLiteralValue(assign.getFirstChild(),  false))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.isLiteralValue(assign.getFirstChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.isLiteralValue(assign.getFirstChild(),  false))  {	  }    else    if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.isLiteralValue(assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	95	None	replace
300	[BUG]  [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.isLiteralValue(value,  true))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.isLiteralValue(value,  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.isLiteralValue(value,  true))  {	  }    else    if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.isLiteralValue(assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	95	None	replace
301	[BUG]  [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign)||!NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign)||!NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isAssignmentOp(assign)||!NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {	  }    else    if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.isLiteralValue(assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	95	None	replace
302	[BUG]  [BUGGY]  }  else  if(NodeUtil.isPropertyAssign(assign)&&!NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isPropertyAssign(assign)&&!NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isPropertyAssign(assign)&&!NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {	  }    else    if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.isLiteralValue(assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	95	None	replace
303	[BUG]  [BUGGY]  }  else  if(NodeUtil.isImmutableValue(assign)&&!NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isImmutableValue(assign)&&!NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isImmutableValue(assign)&&!NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {	  }    else    if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.isLiteralValue(assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	95	None	replace
304	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isImmutableValue(assign.assignNode,  true))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.isImmutableValue(assign.assignNode,  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isImmutableValue(assign.assignNode,  true))  {	  }    else    if(!NodeUtil.isLiteralValue(assign.assignNode,    true))    {    	non-compiled	[CE]  	25	None	replace
305	[BUG]  [BUGGY]  }  else  if(!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getLastChild(),  false))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getLastChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getLastChild(),  false))  {	  }    else    if(!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),    false))    {    	non-compiled	[CE]  	16	None	replace
306	[BUG]  [BUGGY]  }  else  if(NodeUtil.isPropertyAssign(assign.getFirstChild(),  false)&&  isPropertyAssign)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isPropertyAssign(assign.getFirstChild(),  false)&&  isPropertyAssign)  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isPropertyAssign(assign.getFirstChild(),  false)&&  isPropertyAssign)  {	  }    else    if(NodeUtil.isPropertyAssign(assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	33	None	replace
307	[BUG]  [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign)||  NodeUtil.isLiteralValue(value,  true))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign)||  NodeUtil.isLiteralValue(value,  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isAssignmentOp(assign)||  NodeUtil.isLiteralValue(value,  true))  {	  }    else    if(NodeUtil.isLiteralValue(value,    true))    {    	non-compiled	[CE]  	31	None	replace
308	[BUG]  [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isAssignmentOp(assign))  {	  }    else    if(NodeUtil.isLiteralValue(value,    true))    {    	non-compiled	[CE]  	31	None	replace
309	[BUG]  [BUGGY]  }  else  if(NodeUtil.isImmutableValue(value,  true))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isImmutableValue(value,  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isImmutableValue(value,  true))  {	  }    else    if(NodeUtil.isLiteralValue(value,    true))    {    	non-compiled	[CE]  	31	None	replace
310	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assign,  true))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assign,  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assign,  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assign,    true))    {    	non-compiled	[CE]  	86	None	replace
311	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assign,  false))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assign,  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assign,  false))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assign,    true))    {    	non-compiled	[CE]  	86	None	replace
312	[BUG]  [BUGGY]  Node  node  =  assign.node.getFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  Node  node  =  assign.node.getFirstChild();  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	Node  node  =  assign.node.getFirstChild();	  Node    node    =    assign.getFirstChild();    	non-compiled	[CE]  	50	None	replace
313	[BUG]  [BUGGY]  Node  node  =  assign.nextChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  Node  node  =  assign.nextChild();  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	Node  node  =  assign.nextChild();	  Node    node    =    assign.getFirstChild();    	non-compiled	[CE]  	50	None	replace
314	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  false))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(isPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  false))  {	  }    else    if(!NodeUtil.isLiteralValue(assign,    false))    {    	non-compiled	[CE]  	21	None	replace
315	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign,  true)&&  isPropertyAssign)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign,  true)&&  isPropertyAssign)  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isLiteralValue(assign,  true)&&  isPropertyAssign)  {	  }    else    if(!NodeUtil.isLiteralValue(assign,    false))    {    	non-compiled	[CE]  	21	None	replace
316	[BUG]  [BUGGY]  }  else  if(assign.isUnknownValue  &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(assign.isUnknownValue  &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(assign.isUnknownValue  &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true))  {	  }    else    if(isUnknownValue    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	90	None	replace
317	[BUG]  [BUGGY]  NodeUtil.setPropertyAssign(assign,  var.getFirstChild(),  false);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.setPropertyAssign(assign,  var.getFirstChild(),  false);  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.setPropertyAssign(assign,  var.getFirstChild(),  false);	  NodeUtil.setPropertyAssign(assign,    var.getFirstChild());    	non-compiled	[CE]  	93	None	replace
318	[BUG]  [BUGGY]  NodeUtil.setPropertyAssign(assign,  var.getString());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.setPropertyAssign(assign,  var.getString());  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.setPropertyAssign(assign,  var.getString());	  NodeUtil.setPropertyAssign(assign,    var.getFirstChild());    	non-compiled	[CE]  	93	None	replace
319	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isPropertyAssign(assign.getFirstChild(),  true))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isPropertyAssign(assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.isPropertyAssign(assign.getFirstChild(),  true))  {	  }    else    if(!NodeUtil.isPropertyAssign(assign.getLastChild(),    true))    {    	non-compiled	[CE]  	12	None	replace
320	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isPropertyAssign(assign.getLastChild(),  true))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isPropertyAssign(assign.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.isPropertyAssign(assign.getLastChild(),  true))  {	  }    else    if(!NodeUtil.isPropertyAssign(assign.getLastChild(),    true))    {    	non-compiled	[CE]  	12	None	replace
321	[BUG]  [BUGGY]  }  else  if(!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild()))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild()))  {	  }    else    if(!NodeUtil.isPropertyAssign(assign.getLastChild(),    true))    {    	non-compiled	[CE]  	12	None	replace
322	[BUG]  [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign.getFirstChild(),  true)||  assign.assignNode.getLastChild()!=  null)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign.getFirstChild(),  true)||  assign.assignNode.getLastChild()!=  null)  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isLiteralValue(assign.getFirstChild(),  true)||  assign.assignNode.getLastChild()!=  null)  {	  }    else    if(NodeUtil.isLiteralValue(assign.getFirstChild(),    false))    {    	non-compiled	[CE]  	29	None	replace
323	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isImmutableValue(assign.assignNode.getFirstChild(),  false))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isImmutableValue(assign.assignNode.getFirstChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.isImmutableValue(assign.assignNode.getFirstChild(),  false))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isImmutableValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	87	None	replace
324	[BUG]  [BUGGY]  }  else  if(hasFollowing  &&!NodeUtil.isImmutableValue(assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasFollowing  &&!NodeUtil.isImmutableValue(assign.assignNode.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasFollowing  &&!NodeUtil.isImmutableValue(assign.assignNode.getFirstChild(),  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isImmutableValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	87	None	replace
325	[BUG]  [BUGGY]  }  else  if(assign.hasPropertyAssign()  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(assign.hasPropertyAssign()  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(assign.hasPropertyAssign()  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),    true))    {    	non-compiled	[CE]  	1	None	replace
326	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isImmutableValue(assign.assign,  true))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isImmutableValue(assign.assign,  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.isImmutableValue(assign.assign,  true))  {	  }    else    if(!NodeUtil.isImmutableValue(assign.assign,    true))    {    	non-compiled	[CE]  	26	None	replace
327	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isImmutableValue(assign.assignNode,  true))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isImmutableValue(assign.assignNode,  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.isImmutableValue(assign.assignNode,  true))  {	  }    else    if(!NodeUtil.isImmutableValue(assign.assign,    true))    {    	non-compiled	[CE]  	26	None	replace
328	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isImmutableValue(assign,  true))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isImmutableValue(assign,  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.isImmutableValue(assign,  true))  {	  }    else    if(!NodeUtil.isImmutableValue(assign.assign,    true))    {    	non-compiled	[CE]  	26	None	replace
329	[BUG]  [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign.assignNode,  true))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign.assignNode,  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isLiteralValue(assign.assignNode,  true))  {	  }    else    if(!NodeUtil.isLiteralValue(assign.assignNode,    false))    {    	non-compiled	[CE]  	24	None	replace
330	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  assign.assignNode.getFirstChild(),  false))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  assign.assignNode.getFirstChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(isPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  assign.assignNode.getFirstChild(),  false))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.isLiteralValue(value,    assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	88	None	replace
331	[BUG]  [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign)&&  NodeUtil.isLiteralValue(value,  assign.assignNode.getLastChild(),  true))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign)&&  NodeUtil.isLiteralValue(value,  assign.assignNode.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isAssignmentOp(assign)&&  NodeUtil.isLiteralValue(value,  assign.assignNode.getLastChild(),  true))  {	  }    else    if(NodeUtil.isLiteralValue(value,    assign.assignNode.getLastChild(),    true))    {    	non-compiled	[CE]  	32	None	replace
332	[BUG]  [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign)&&  NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign)&&  NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isAssignmentOp(assign)&&  NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {	  }    else    if(NodeUtil.isLiteralValue(assign.getLastChild(),    true))    {    	non-compiled	[CE]  	28	None	replace
333	[BUG]  [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign)&&  NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign)&&  NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isAssignmentOp(assign)&&  NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {	  }    else    if(NodeUtil.isLiteralValue(assign.getLastChild(),    true))    {    	non-compiled	[CE]  	28	None	replace
334	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isAssignmentOp(assign))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.isAssignmentOp(assign))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isAssignmentOp(assign))  {	  }    else    if(!NodeUtil.isLiteralValue(value,    false))    {    	non-compiled	[CE]  	23	None	replace
335	[BUG]  [BUGGY]  Node  param  =  assign.node.getParent();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  Node  param  =  assign.node.getParent();  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	Node  param  =  assign.node.getParent();	  Node    param    =    assign.getParent();    	non-compiled	[CE]  	54	None	replace
336	[BUG]  [BUGGY]  Node  param  =  assign.getPrevious();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  Node  param  =  assign.getPrevious();  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	Node  param  =  assign.getPrevious();	  Node    param    =    assign.getParent();    	non-compiled	[CE]  	54	None	replace
337	[BUG]  [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true))  {	  }    else    if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.isLiteralValue(assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	95	None	replace
338	[BUG]  [BUGGY]  }  else  if(NodeUtil.isName(assign)&&!NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isName(assign)&&!NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isName(assign)&&!NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {	  }    else    if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.isLiteralValue(assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	95	None	replace
339	[BUG]  [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.isImmutableValue(assign.getFirstChild(),  true))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.isImmutableValue(assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.isImmutableValue(assign.getFirstChild(),  true))  {	  }    else    if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.isLiteralValue(assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	95	None	replace
340	[BUG]  [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  false))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  false))  {	  }    else    if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.isLiteralValue(assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	95	None	replace
341	[BUG]  [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign)&&  NodeUtil.isLiteralValue(value.getFirstChild(),  true))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign)&&  NodeUtil.isLiteralValue(value.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isAssignmentOp(assign)&&  NodeUtil.isLiteralValue(value.getFirstChild(),  true))  {	  }    else    if(NodeUtil.isLiteralValue(value.getFirstChild(),    true))    {    	non-compiled	[CE]  	27	None	replace
342	[BUG]  [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(value)&&  NodeUtil.isLiteralValue(value.getFirstChild(),  true))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(value)&&  NodeUtil.isLiteralValue(value.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isAssignmentOp(value)&&  NodeUtil.isLiteralValue(value.getFirstChild(),  true))  {	  }    else    if(NodeUtil.isLiteralValue(value.getFirstChild(),    true))    {    	non-compiled	[CE]  	27	None	replace
343	[BUG]  [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.isLiteralValue(value.getFirstChild(),  true))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.isLiteralValue(value.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.isLiteralValue(value.getFirstChild(),  true))  {	  }    else    if(!NodeUtil.isLiteralValue(value.getFirstChild(),    true))    {    	non-compiled	[CE]  	20	None	replace
344	[BUG]  [BUGGY]  }  else  if(assign.isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(assign.isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(assign.isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  true))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	75	None	replace
345	[BUG]  [BUGGY]  }  else  if(canModifyAllCallSites  &&  isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(canModifyAllCallSites  &&  isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(canModifyAllCallSites  &&  isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  true))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	75	None	replace
346	[BUG]  [BUGGY]  }  else  if(assign.hasPropertyAssign()  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(assign.hasPropertyAssign()  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(assign.hasPropertyAssign()  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {	  }    else    if(hasPropertyAssign    ||!NodeUtil.isLiteralValue(assign.getLastChild(),    true))    {    	non-compiled	[CE]  	39	None	replace
347	[BUG]  [BUGGY]  NodeUtil.removeChild(node,  assign);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.removeChild(node,  assign);  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.removeChild(node,  assign);	  NodeUtil.removeChild(value,    assign);    	non-compiled	[CE]  	94	None	replace
348	[BUG]  [BUGGY]  }  else  if(NodeUtil.isImmutableValue(assign.assignNode.getLastChild(),  true))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isImmutableValue(assign.assignNode.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isImmutableValue(assign.assignNode.getLastChild(),  true))  {	  }    else    if(NodeUtil.isImmutableValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	65	None	replace
349	[BUG]  [BUGGY]  }  else  if(NodeUtil.isImmutableValue(assign.assignNode.getLastChild(),  false))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isImmutableValue(assign.assignNode.getLastChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isImmutableValue(assign.assignNode.getLastChild(),  false))  {	  }    else    if(NodeUtil.isImmutableValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	65	None	replace
350	[BUG]  [BUGGY]  }  else  if(NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  true)&&  isPropertyAssign)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  true)&&  isPropertyAssign)  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  true)&&  isPropertyAssign)  {	  }    else    if(NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),    false))    {    	non-compiled	[CE]  	74	None	replace
351	[BUG]  [BUGGY]  }  else  if(NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  true)&&  hasPropertyAssign)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  true)&&  hasPropertyAssign)  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  true)&&  hasPropertyAssign)  {	  }    else    if(NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),    false))    {    	non-compiled	[CE]  	74	None	replace
352	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign,  assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign,  assign.assignNode.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign,  assign.assignNode.getFirstChild(),  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign,    assign.assignNode.getLastChild(),    true))    {    	non-compiled	[CE]  	79	None	replace
353	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign,  assign.assignNode.getLastChild(),  true))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign,  assign.assignNode.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign,  assign.assignNode.getLastChild(),  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign,    assign.assignNode.getLastChild(),    true))    {    	non-compiled	[CE]  	79	None	replace
354	[BUG]  [BUGGY]  }  else  if(assign.isUnknownValue()  &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(assign.isUnknownValue()  &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(assign.isUnknownValue()  &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true))  {	  }    else    if(assign.isUnknownValue()    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	77	None	replace
355	[BUG]  [BUGGY]  }  else  if(assign.isUnknownValue()  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(assign.isUnknownValue()  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(assign.isUnknownValue()  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  true))  {	  }    else    if(assign.isUnknownValue()    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	77	None	replace
356	[BUG]  [BUGGY]  }  else  if(assign.isUnknownValue()  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  false))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(assign.isUnknownValue()  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(assign.isUnknownValue()  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  false))  {	  }    else    if(assign.isUnknownValue()    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	77	None	replace
357	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&  assign.isUnknownValue()  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&  assign.isUnknownValue()  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&  assign.isUnknownValue()  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {	  }    else    if(assign.isUnknownValue()    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	77	None	replace
358	[BUG]  [BUGGY]  NodeUtil.removeChild(assign,  value);  current--;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.removeChild(assign,  value);  current--;  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.removeChild(assign,  value);  current--;	  NodeUtil.removeChild(assign);    current--;    	non-compiled	[CE]  	91	None	replace
359	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(value.getFirstChild(),  true))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(value.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(value.getFirstChild(),  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(value.getFirstChild(),    true))    {    	non-compiled	[CE]  	5	None	replace
360	[BUG]  [BUGGY]  }  else  if(assign.isPropertyAssign  &&!NodeUtil.isLiteralValue(value.getFirstChild(),  true))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(assign.isPropertyAssign  &&!NodeUtil.isLiteralValue(value.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(assign.isPropertyAssign  &&!NodeUtil.isLiteralValue(value.getFirstChild(),  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(value.getFirstChild(),    true))    {    	non-compiled	[CE]  	5	None	replace
361	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  false))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  false))  {	  }    else    if(!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    false))    {    	non-compiled	[CE]  	71	None	replace
362	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign,  false))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign,  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign,  false))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign,    false))    {    	non-compiled	[CE]  	85	None	replace
363	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign,  true))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign,  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign,  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign,    false))    {    	non-compiled	[CE]  	85	None	replace
364	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign,    false))    {    	non-compiled	[CE]  	85	None	replace
365	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isImmutableValue(assign,  false))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isImmutableValue(assign,  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.isImmutableValue(assign,  false))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign,    false))    {    	non-compiled	[CE]  	85	None	replace
366	[BUG]  [BUGGY]  }  else  if(hasFollowing  &&  isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getFirstChild(),  false))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasFollowing  &&  isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getFirstChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasFollowing  &&  isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getFirstChild(),  false))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.isLiteralValue(assign.getFirstChild(),    false))    {    	non-compiled	[CE]  	43	None	replace
367	[BUG]  [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  false))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  false))  {	  }    else    if(!hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	46	None	replace
368	[BUG]  [BUGGY]  Node  parent  =  assign.node.getParent();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  Node  parent  =  assign.node.getParent();  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	Node  parent  =  assign.node.getParent();	  Node    parent    =    assign.getParent();    	non-compiled	[CE]  	53	None	replace
369	[BUG]  [BUGGY]  Node  parent  =  a.getParent();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  Node  parent  =  a.getParent();  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	Node  parent  =  a.getParent();	  Node    parent    =    assign.getParent();    	non-compiled	[CE]  	53	None	replace
370	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  false))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  false))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.isLiteralValue(assign.getLastChild(),    false))    {    	non-compiled	[CE]  	99	None	replace
371	[BUG]  [BUGGY]  }  else  if(assign.isUnknownValue()  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  false))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(assign.isUnknownValue()  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(assign.isUnknownValue()  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  false))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.isLiteralValue(assign.getLastChild(),    false))    {    	non-compiled	[CE]  	99	None	replace
372	[BUG]  [BUGGY]  NodeUtil.setPropertyAssign(propertyAssign,  true);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.setPropertyAssign(propertyAssign,  true);  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.setPropertyAssign(propertyAssign,  true);	  NodeUtil.setPropertyAssign(assign,    true);    	non-compiled	[CE]  	62	None	replace
373	[BUG]  [BUGGY]  NodeUtil.removePropertyAssign(assign,  false);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.removePropertyAssign(assign,  false);  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.removePropertyAssign(assign,  false);	  NodeUtil.setPropertyAssign(assign,    true);    	non-compiled	[CE]  	62	None	replace
374	[BUG]  [BUGGY]  }  else  if(hasFollowing  &&  isPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasFollowing  &&  isPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  assign.assignNode.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasFollowing  &&  isPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  assign.assignNode.getFirstChild(),  true))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.isLiteralValue(assign,    assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	80	None	replace
375	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assignNode,    true))    {    	non-compiled	[CE]  	84	None	replace
376	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode,  true))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode,  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode,  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assignNode,    true))    {    	non-compiled	[CE]  	84	None	replace
377	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode,  false))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode,  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode,  false))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assignNode,    true))    {    	non-compiled	[CE]  	84	None	replace
378	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  current,  hasPropertyAssign);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeTraversal.traverse(compiler,  var,  current,  hasPropertyAssign);  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeTraversal.traverse(compiler,  var,  current,  hasPropertyAssign);	  NodeTraversal.traverse(compiler,    var,    current);    	non-compiled	[CE]  	61	None	replace
379	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  current,  false);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeTraversal.traverse(compiler,  var,  current,  false);  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeTraversal.traverse(compiler,  var,  current,  false);	  NodeTraversal.traverse(compiler,    var,    current);    	non-compiled	[CE]  	61	None	replace
380	[BUG]  [BUGGY]  }  else  if(assign.isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(assign.isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(assign.isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	18	None	replace
381	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  assign.assign.getFirstChild(),  true))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  assign.assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  assign.assign.getFirstChild(),  true))  {	  }    else    if(!NodeUtil.isLiteralValue(value,    assign.assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	60	None	replace
382	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  assign.assign.getFirstChild(),  true))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  assign.assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(isPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  assign.assign.getFirstChild(),  true))  {	  }    else    if(!NodeUtil.isLiteralValue(value,    assign.assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	60	None	replace
383	[BUG]  [BUGGY]  Node  node  =  assign.node.getLastChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  Node  node  =  assign.node.getLastChild();  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	Node  node  =  assign.node.getLastChild();	  Node    node    =    assign.getLastChild();    	non-compiled	[CE]  	52	None	replace
384	[BUG]  [BUGGY]  Node  node  =  var.getLastChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  Node  node  =  var.getLastChild();  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	Node  node  =  var.getLastChild();	  Node    node    =    assign.getLastChild();    	non-compiled	[CE]  	52	None	replace
385	[BUG]  [BUGGY]  }  else  if(assign.isPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(assign.isPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  assign.assignNode.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(assign.isPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  assign.assignNode.getFirstChild(),  true))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.isLiteralValue(assign,    assign.assignNode.getLastChild(),    true))    {    	non-compiled	[CE]  	82	None	replace
386	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign,  assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign,  assign.assignNode.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign,  assign.assignNode.getFirstChild(),  true))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.isLiteralValue(assign,    assign.assignNode.getLastChild(),    true))    {    	non-compiled	[CE]  	82	None	replace
387	[BUG]  [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getLastChild(),  true))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getLastChild(),  true))  {	  }    else    if(!hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),    true))    {    	non-compiled	[CE]  	44	None	replace
388	[BUG]  [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true)  &&  hasPropertyAssign)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true)  &&  hasPropertyAssign)  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true)  &&  hasPropertyAssign)  {	  }    else    if(NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true)&&    isPropertyAssign)    {    	non-compiled	[CE]  	96	None	replace
389	[BUG]  [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true)  &&  isPropertyAssign)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true)  &&  isPropertyAssign)  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true)  &&  isPropertyAssign)  {	  }    else    if(NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true)&&    isPropertyAssign)    {    	non-compiled	[CE]  	96	None	replace
390	[BUG]  [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true)  &&  hasPropertyAssign)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true)  &&  hasPropertyAssign)  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true)  &&  hasPropertyAssign)  {	  }    else    if(NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true)&&    isPropertyAssign)    {    	non-compiled	[CE]  	96	None	replace
391	[BUG]  [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  false)  &&  isPropertyAssign)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  false)  &&  isPropertyAssign)  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  false)  &&  isPropertyAssign)  {	  }    else    if(NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true)&&    isPropertyAssign)    {    	non-compiled	[CE]  	96	None	replace
392	[BUG]  [BUGGY]  }  else  if(NodeUtil.isLiteralValue(value,  assign.assignNode.getFirstChild(),  true)  &&  isPropertyAssign)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isLiteralValue(value,  assign.assignNode.getFirstChild(),  true)  &&  isPropertyAssign)  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isLiteralValue(value,  assign.assignNode.getFirstChild(),  true)  &&  isPropertyAssign)  {	  }    else    if(NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true)&&    isPropertyAssign)    {    	non-compiled	[CE]  	96	None	replace
393	[BUG]  [BUGGY]  NodeUtil.setPropertyAssign(assign,  var);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.setPropertyAssign(assign,  var);  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.setPropertyAssign(assign,  var);	  NodeUtil.setPropertyAssign(assign,    isPropertyAssign);    	non-compiled	[CE]  	92	None	replace
394	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign.assignNode,  assign.getLastChild(),  true))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign.assignNode,  assign.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isLiteralValue(assign.assignNode,  assign.getLastChild(),  true))  {	  }    else    if(!NodeUtil.isLiteralValue(assign.assign,    assign.getLastChild(),    true))    {    	non-compiled	[CE]  	59	None	replace
395	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  assign.getFirstChild(),  true))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  assign.getFirstChild(),  true))  {	  }    else    if(!NodeUtil.isLiteralValue(assign.assign,    assign.getLastChild(),    true))    {    	non-compiled	[CE]  	59	None	replace
396	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assign,  assign.getFirstChild(),  true))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assign,  assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assign,  assign.getFirstChild(),  true))  {	  }    else    if(!NodeUtil.isLiteralValue(assign.assign,    assign.getLastChild(),    true))    {    	non-compiled	[CE]  	59	None	replace
397	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isPropertyAssign(assign.getFirstChild(),  false))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isPropertyAssign(assign.getFirstChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.isPropertyAssign(assign.getFirstChild(),  false))  {	  }    else    if(!NodeUtil.isPropertyAssign(assign.getLastChild(),    false))    {    	non-compiled	[CE]  	35	None	replace
398	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isPropertyAssign(assign.getLastChild(),  false))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isPropertyAssign(assign.getLastChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.isPropertyAssign(assign.getLastChild(),  false))  {	  }    else    if(!NodeUtil.isPropertyAssign(assign.getLastChild(),    false))    {    	non-compiled	[CE]  	35	None	replace
399	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isPropertyAssign(assign.getFirstChild(),  true)&&  isPropertyAssign)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.isPropertyAssign(assign.getFirstChild(),  true)&&  isPropertyAssign)  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isPropertyAssign(assign.getFirstChild(),  true)&&  isPropertyAssign)  {	  }    else    if(!NodeUtil.isPropertyAssign(assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	11	None	replace
400	[BUG]  [BUGGY]  }  else  if(hasFollowing  &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  false))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasFollowing  &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasFollowing  &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  false))  {	  }    else    if(hasFollowing    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	6	None	replace
401	[BUG]  [BUGGY]  }  else  if(!hasFollowing  &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!hasFollowing  &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!hasFollowing  &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true))  {	  }    else    if(hasFollowing    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	6	None	replace
402	[BUG]  [BUGGY]  }  else  if(canModifyAllCallSites  &&  hasFollowing  &&  isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(canModifyAllCallSites  &&  hasFollowing  &&  isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(canModifyAllCallSites  &&  hasFollowing  &&  isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {	  }    else    if(hasFollowing    &&    isPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	76	None	replace
403	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(value))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(value))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(value))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(value,    true))    {    	non-compiled	[CE]  	3	None	replace
404	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(value,  true))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(value,  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(value,  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(value,    true))    {    	non-compiled	[CE]  	3	None	replace
405	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isImmutableValue(value,  true))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isImmutableValue(value,  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.isImmutableValue(value,  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(value,    true))    {    	non-compiled	[CE]  	3	None	replace
406	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getLastChild(),  false))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getLastChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getLastChild(),  false))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),    false))    {    	non-compiled	[CE]  	73	None	replace
407	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true)  &&  hasPropertyAssign)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true)  &&  hasPropertyAssign)  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true)  &&  hasPropertyAssign)  {	  }    else    if(!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true)&&    isPropertyAssign)    {    	non-compiled	[CE]  	98	None	replace
408	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true)  &&  isPropertyAssign)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true)  &&  isPropertyAssign)  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true)  &&  isPropertyAssign)  {	  }    else    if(!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true)&&    isPropertyAssign)    {    	non-compiled	[CE]  	98	None	replace
409	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true)  &&  hasPropertyAssign)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true)  &&  hasPropertyAssign)  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true)  &&  hasPropertyAssign)  {	  }    else    if(!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true)&&    isPropertyAssign)    {    	non-compiled	[CE]  	98	None	replace
410	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  false)  &&  isPropertyAssign)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  false)  &&  isPropertyAssign)  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  false)  &&  isPropertyAssign)  {	  }    else    if(!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true)&&    isPropertyAssign)    {    	non-compiled	[CE]  	98	None	replace
411	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true)  &&  mayHaveSecondarySideEffects)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true)  &&  mayHaveSecondarySideEffects)  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true)  &&  mayHaveSecondarySideEffects)  {	  }    else    if(!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true)&&    isPropertyAssign)    {    	non-compiled	[CE]  	98	None	replace
412	[BUG]  [BUGGY]  }  else  if(canModifyAllCallSites  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  false))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(canModifyAllCallSites  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(canModifyAllCallSites  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  false))  {	  }    else    if(!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),    false))    {    	non-compiled	[CE]  	16	None	replace
413	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.isImmutableValue(assign.getFirstChild(),  false))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.isImmutableValue(assign.getFirstChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(isPropertyAssign  &&!NodeUtil.isImmutableValue(assign.getFirstChild(),  false))  {	  }    else    if(!NodeUtil.isImmutableValue(assign.getLastChild(),    false))    {    	non-compiled	[CE]  	34	None	replace
414	[BUG]  [BUGGY]  }  else  if(isUnknownValue  &&!NodeUtil.isLiteralValue(assign,  assign.assignNode.getLastChild(),  true))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(isUnknownValue  &&!NodeUtil.isLiteralValue(assign,  assign.assignNode.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(isUnknownValue  &&!NodeUtil.isLiteralValue(assign,  assign.assignNode.getLastChild(),  true))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.isLiteralValue(assign,    assign.assignNode.getLastChild(),    true))    {    	non-compiled	[CE]  	82	None	replace
415	[BUG]  [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode,  false))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode,  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode,  false))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assignNode,    true))    {    	non-compiled	[CE]  	84	None	replace
416	[BUG]  [BUGGY]  NodeUtil.setPropertyAssign(value,  assign,  true);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.setPropertyAssign(value,  assign,  true);  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.setPropertyAssign(value,  assign,  true);	  NodeUtil.setPropertyAssign(assign,    true);    	non-compiled	[CE]  	62	None	replace
417	[BUG]  [BUGGY]  NodeUtil.removePropertyAssign(value,  assign);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.removePropertyAssign(value,  assign);  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.removePropertyAssign(value,  assign);	  NodeUtil.setPropertyAssign(assign,    true);    	non-compiled	[CE]  	62	None	replace
418	[BUG]  [BUGGY]  NodeUtil.setPropertyAssign(property,  assign,  true);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.setPropertyAssign(property,  assign,  true);  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.setPropertyAssign(property,  assign,  true);	  NodeUtil.setPropertyAssign(assign,    true);    	non-compiled	[CE]  	62	None	replace
419	[BUG]  [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign)&&  NodeUtil.isLiteralValue(value,  true))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign)&&  NodeUtil.isLiteralValue(value,  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isAssignmentOp(assign)&&  NodeUtil.isLiteralValue(value,  true))  {	  }    else    if(NodeUtil.isLiteralValue(value,    true))    {    	non-compiled	[CE]  	31	None	replace
420	[BUG]  [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign,  false)&&  NodeUtil.isLiteralValue(value,  true))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign,  false)&&  NodeUtil.isLiteralValue(value,  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isAssignmentOp(assign,  false)&&  NodeUtil.isLiteralValue(value,  true))  {	  }    else    if(NodeUtil.isLiteralValue(value,    true))    {    	non-compiled	[CE]  	31	None	replace
421	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isImmutableValue(value.getFirstChild(),  true))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isImmutableValue(value.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.isImmutableValue(value.getFirstChild(),  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(value.getFirstChild(),    true))    {    	non-compiled	[CE]  	5	None	replace
422	[BUG]  [BUGGY]  }  else  if(NodeUtil.isVarDeclaration(assign.getFirstChild(),  false))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isVarDeclaration(assign.getFirstChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isVarDeclaration(assign.getFirstChild(),  false))  {	  }    else    if(NodeUtil.isLiteralValue(assign.getFirstChild(),    false))    {    	non-compiled	[CE]  	29	None	replace
423	[BUG]  [BUGGY]  }  else  if(assign.isUnknown()  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  false))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(assign.isUnknown()  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(assign.isUnknown()  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  false))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.isLiteralValue(assign.getLastChild(),    false))    {    	non-compiled	[CE]  	99	None	replace
424	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getParent(),  true))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getParent(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getParent(),  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),    true))    {    	non-compiled	[CE]  	68	None	replace
425	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSideEffects(assign.getFirstChild(),  true))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSideEffects(assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSideEffects(assign.getFirstChild(),  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	36	None	replace
426	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isFunction(assign.getFirstChild(),  true))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isFunction(assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.isFunction(assign.getFirstChild(),  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	36	None	replace
427	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&  isUnknownValue  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&  isUnknownValue  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&  isUnknownValue  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {	  }    else    if(isUnknownValue    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	90	None	replace
428	[BUG]  [BUGGY]  }  else  if(assign.isUnknownValue  ||!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(assign.isUnknownValue  ||!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(assign.isUnknownValue  ||!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {	  }    else    if(isUnknownValue    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	90	None	replace
429	[BUG]  [BUGGY]  }  else  if(NodeUtil.isVarDeclaration(assign.getFirstChild(),  true))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isVarDeclaration(assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isVarDeclaration(assign.getFirstChild(),  true))  {	  }    else    if(NodeUtil.isLiteralValue(value.getFirstChild(),    true))    {    	non-compiled	[CE]  	27	None	replace
430	[BUG]  [BUGGY]  }  else  if(NodeUtil.isUnknownValue(assign.getFirstChild(),  true))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isUnknownValue(assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isUnknownValue(assign.getFirstChild(),  true))  {	  }    else    if(NodeUtil.isLiteralValue(value.getFirstChild(),    true))    {    	non-compiled	[CE]  	27	None	replace
431	[BUG]  [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.isLiteralValue(value,  false))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.isLiteralValue(value,  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.isLiteralValue(value,  false))  {	  }    else    if(!NodeUtil.isLiteralValue(value,    false))    {    	non-compiled	[CE]  	23	None	replace
432	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&  isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&  isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&  isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {	  }    else    if(hasFollowing    &&    isPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	76	None	replace
433	[BUG]  [BUGGY]  }  else  if(canModifyAllCallSites  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(canModifyAllCallSites  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(canModifyAllCallSites  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  true))  {	  }    else    if(!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getLastChild(),    true))    {    	non-compiled	[CE]  	15	None	replace
434	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign.assignNode,  assign.getFirstChild(),  true))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign.assignNode,  assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isLiteralValue(assign.assignNode,  assign.getFirstChild(),  true))  {	  }    else    if(!NodeUtil.isLiteralValue(assign.assign,    assign.getLastChild(),    true))    {    	non-compiled	[CE]  	59	None	replace
435	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode,  assign.getLastChild(),  true))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode,  assign.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode,  assign.getLastChild(),  true))  {	  }    else    if(!NodeUtil.isLiteralValue(assign.assign,    assign.getLastChild(),    true))    {    	non-compiled	[CE]  	59	None	replace
436	[BUG]  [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.mayHaveSideEffects(assign.getFirstChild(),  true))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.mayHaveSideEffects(assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.mayHaveSideEffects(assign.getFirstChild(),  true))  {	  }    else    if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.isLiteralValue(assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	95	None	replace
437	[BUG]  [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.isPropertyAssign(assign.getLastChild(),  false))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.isPropertyAssign(assign.getLastChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.isPropertyAssign(assign.getLastChild(),  false))  {	  }    else    if(!NodeUtil.isPropertyAssign(assign.getLastChild(),    false))    {    	non-compiled	[CE]  	35	None	replace
438	[BUG]  [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.isPropertyAssign(assign.getFirstChild(),  false))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.isPropertyAssign(assign.getFirstChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.isPropertyAssign(assign.getFirstChild(),  false))  {	  }    else    if(!NodeUtil.isPropertyAssign(assign.getLastChild(),    false))    {    	non-compiled	[CE]  	35	None	replace
439	[BUG]  [BUGGY]  }  else  if(!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild()))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild()))  {	  }    else    if(!NodeUtil.isPropertyAssign(assign.getLastChild(),    false))    {    	non-compiled	[CE]  	35	None	replace
440	[BUG]  [BUGGY]  }  else  if(NodeUtil.isUnknownValue(assign,  assign.assignNode.getLastChild(),  true))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isUnknownValue(assign,  assign.assignNode.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isUnknownValue(assign,  assign.assignNode.getLastChild(),  true))  {	  }    else    if(NodeUtil.isLiteralValue(value,    assign.assignNode.getLastChild(),    true))    {    	non-compiled	[CE]  	32	None	replace
441	[BUG]  [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign.assignNode)&&  NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign.assignNode)&&  NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isAssignmentOp(assign.assignNode)&&  NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {	  }    else    if(NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),    true))    {    	non-compiled	[CE]  	63	None	replace
442	[BUG]  [BUGGY]  }  else  if(NodeUtil.isUnknownValue(assign.assignNode.getLastChild(),  true))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isUnknownValue(assign.assignNode.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isUnknownValue(assign.assignNode.getLastChild(),  true))  {	  }    else    if(NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),    true))    {    	non-compiled	[CE]  	63	None	replace
443	[BUG]  [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign.assignNode)&&  NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign.assignNode)&&  NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isAssignmentOp(assign.assignNode)&&  NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {	  }    else    if(NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),    true))    {    	non-compiled	[CE]  	63	None	replace
444	[BUG]  [BUGGY]  }  else  if(assign.isUnknown()  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(assign.isUnknown()  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(assign.isUnknown()  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {	  }    else    if(isFunctionAssign    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	47	None	replace
445	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSideEffects(assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSideEffects(assign.assignNode.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSideEffects(assign.assignNode.getFirstChild(),  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isImmutableValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	87	None	replace
446	[BUG]  [BUGGY]  Node  node  =  assign.cloneTree();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  Node  node  =  assign.cloneTree();  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	Node  node  =  assign.cloneTree();	  Node    node    =    assign.getLastChild();    	non-compiled	[CE]  	52	None	replace
447	[BUG]  [BUGGY]  NodeUtil.setPropertyAssign(assign,  isPropertyAssign,  hasFollowing);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.setPropertyAssign(assign,  isPropertyAssign,  hasFollowing);  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.setPropertyAssign(assign,  isPropertyAssign,  hasFollowing);	  NodeUtil.setPropertyAssign(assign,    isPropertyAssign);    	non-compiled	[CE]  	92	None	replace
448	[BUG]  [BUGGY]  NodeUtil.setPropertyAssign(assign,  hasPropertyAssign);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.setPropertyAssign(assign,  hasPropertyAssign);  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.setPropertyAssign(assign,  hasPropertyAssign);	  NodeUtil.setPropertyAssign(assign,    isPropertyAssign);    	non-compiled	[CE]  	92	None	replace
449	[BUG]  [BUGGY]  }  else  if(NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true)  &&  hasPropertyAssign)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true)  &&  hasPropertyAssign)  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true)  &&  hasPropertyAssign)  {	  }    else    if(!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),    true)&&    hasPropertyAssign)    {    	non-compiled	[CE]  	19	None	replace
450	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.isImmutableValue(assign.assign,  true))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.isImmutableValue(assign.assign,  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(isPropertyAssign  &&!NodeUtil.isImmutableValue(assign.assign,  true))  {	  }    else    if(!NodeUtil.isImmutableValue(assign.assign,    true))    {    	non-compiled	[CE]  	26	None	replace
451	[BUG]  [BUGGY]  Node  parent  =  assign.removeFirstChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  Node  parent  =  assign.removeFirstChild();  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	Node  parent  =  assign.removeFirstChild();	  Node    parent    =    assign.getParent();    	non-compiled	[CE]  	53	None	replace
452	[BUG]  [BUGGY]  Node  parent  =  assign.getParentNode();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  Node  parent  =  assign.getParentNode();  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	Node  parent  =  assign.getParentNode();	  Node    parent    =    assign.getParent();    	non-compiled	[CE]  	53	None	replace
453	[BUG]  [BUGGY]  Node  parent  =  assignment.getParent();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  Node  parent  =  assignment.getParent();  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	Node  parent  =  assignment.getParent();	  Node    parent    =    assign.getParent();    	non-compiled	[CE]  	53	None	replace
454	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isAssignmentOp(assign,  false)&&!NodeUtil.isLiteralValue(value,  true))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.isAssignmentOp(assign,  false)&&!NodeUtil.isLiteralValue(value,  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isAssignmentOp(assign,  false)&&!NodeUtil.isLiteralValue(value,  true))  {	  }    else    if(!NodeUtil.isLiteralValue(value,    true))    {    	non-compiled	[CE]  	7	None	replace
455	[BUG]  [BUGGY]  }  else  if(NodeUtil.isImmutableValue(assign.assignNode.getFirstChild(),  true)&&  isPropertyAssign)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isImmutableValue(assign.assignNode.getFirstChild(),  true)&&  isPropertyAssign)  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isImmutableValue(assign.assignNode.getFirstChild(),  true)&&  isPropertyAssign)  {	  }    else    if(NodeUtil.isImmutableValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	65	None	replace
456	[BUG]  [BUGGY]  Node  param  =  assign.removeFirstChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  Node  param  =  assign.removeFirstChild();  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	Node  param  =  assign.removeFirstChild();	  Node    param    =    assign.getParent();    	non-compiled	[CE]  	54	None	replace
457	[BUG]  [BUGGY]  Node  param  =  assign.node.getNext();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  Node  param  =  assign.node.getNext();  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	Node  param  =  assign.node.getNext();	  Node    param    =    assign.getParent();    	non-compiled	[CE]  	54	None	replace
458	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  ||!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  true))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  ||!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  ||!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  true))  {	  }    else    if(hasPropertyAssign    ||!NodeUtil.isLiteralValue(assign.getLastChild(),    true))    {    	non-compiled	[CE]  	39	None	replace
459	[BUG]  [BUGGY]  }  else  if((  assign.assignNode.getFirstChild()  ==  null)&&!NodeUtil.isLiteralValue(value,  assign.assign.getFirstChild(),  true))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if((  assign.assignNode.getFirstChild()  ==  null)&&!NodeUtil.isLiteralValue(value,  assign.assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if((  assign.assignNode.getFirstChild()  ==  null)&&!NodeUtil.isLiteralValue(value,  assign.assign.getFirstChild(),  true))  {	  }    else    if(!NodeUtil.isLiteralValue(value,    assign.assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	60	None	replace
460	[BUG]  [BUGGY]  }  else  if((  assign.assignNode.getFirstChild()  ==  null)&&!NodeUtil.isLiteralValue(assign.assign.getFirstChild(),  true))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if((  assign.assignNode.getFirstChild()  ==  null)&&!NodeUtil.isLiteralValue(assign.assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if((  assign.assignNode.getFirstChild()  ==  null)&&!NodeUtil.isLiteralValue(assign.assign.getFirstChild(),  true))  {	  }    else    if(!NodeUtil.isLiteralValue(value,    assign.assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	60	None	replace
461	[BUG]  [BUGGY]  }  else  if(!hasPropertyAssign  &&  NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!hasPropertyAssign  &&  NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!hasPropertyAssign  &&  NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {	  }    else    if(!hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),    true))    {    	non-compiled	[CE]  	44	None	replace
462	[BUG]  [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.isImmutableValue(assign.assignNode.getLastChild(),  true))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.isImmutableValue(assign.assignNode.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!hasPropertyAssign  &&!NodeUtil.isImmutableValue(assign.assignNode.getLastChild(),  true))  {	  }    else    if(!hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),    true))    {    	non-compiled	[CE]  	44	None	replace
463	[BUG]  [BUGGY]  }  else  if(assign.isUnknown()  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  false))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(assign.isUnknown()  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(assign.isUnknown()  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  false))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    false))    {    	non-compiled	[CE]  	45	None	replace
464	[BUG]  [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.isPropertyAssign(assign.getFirstChild(),  true))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.isPropertyAssign(assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.isPropertyAssign(assign.getFirstChild(),  true))  {	  }    else    if(!NodeUtil.isPropertyAssign(assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	11	None	replace
465	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isAssignmentOp(assign.getFirstChild(),  true))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.isAssignmentOp(assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isAssignmentOp(assign.getFirstChild(),  true))  {	  }    else    if(!NodeUtil.isPropertyAssign(assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	11	None	replace
466	[BUG]  [BUGGY]  }  else  if(NodeUtil.isUnknownValue(assign,  assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isUnknownValue(assign,  assign.assignNode.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isUnknownValue(assign,  assign.assignNode.getFirstChild(),  true))  {	  }    else    if(NodeUtil.isLiteralValue(assign,    assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	89	None	replace
467	[BUG]  [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign,  assign.assignNode.getFirstChild(),  false)&&  isPropertyAssign)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign,  assign.assignNode.getFirstChild(),  false)&&  isPropertyAssign)  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isLiteralValue(assign,  assign.assignNode.getFirstChild(),  false)&&  isPropertyAssign)  {	  }    else    if(NodeUtil.isLiteralValue(assign,    assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	89	None	replace
468	[BUG]  [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.isImmutableValue(assign.getFirstChild(),  true))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.isImmutableValue(assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!hasPropertyAssign  &&!NodeUtil.isImmutableValue(assign.getFirstChild(),  true))  {	  }    else    if(!hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	38	None	replace
469	[BUG]  [BUGGY]  }  else  if(assign.isUnknownValue  &&!NodeUtil.isLiteralValue(value,  assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(assign.isUnknownValue  &&!NodeUtil.isLiteralValue(value,  assign.assignNode.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(assign.isUnknownValue  &&!NodeUtil.isLiteralValue(value,  assign.assignNode.getFirstChild(),  true))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.isLiteralValue(value,    assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	88	None	replace
470	[BUG]  [BUGGY]  NodeUtil.redeclareVar(value,  assign);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.redeclareVar(value,  assign);  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.redeclareVar(value,  assign);	  NodeUtil.removeChild(assign);    	non-compiled	[CE]  	48	None	replace
471	[BUG]  [BUGGY]  NodeUtil.setPropertyAssign(assign,  assign.assignNode.getFirstChild());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.setPropertyAssign(assign,  assign.assignNode.getFirstChild());  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.setPropertyAssign(assign,  assign.assignNode.getFirstChild());	  NodeUtil.setPropertyAssign(assign,    var.getFirstChild());    	non-compiled	[CE]  	93	None	replace
472	[BUG]  [BUGGY]  NodeUtil.redeclareVar(a,  assign);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.redeclareVar(a,  assign);  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.redeclareVar(a,  assign);	  NodeUtil.removeChild(value,    assign);    	non-compiled	[CE]  	94	None	replace
473	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getParent(),  false))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getParent(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getParent(),  false))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),    false))    {    	non-compiled	[CE]  	70	None	replace
474	[BUG]  [BUGGY]  }  else  if(canModifyAllCallSites  &&  hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  false))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(canModifyAllCallSites  &&  hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(canModifyAllCallSites  &&  hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  false))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),    false))    {    	non-compiled	[CE]  	70	None	replace
475	[BUG]  [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign.getFirstChild())&&  NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign.getFirstChild())&&  NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isAssignmentOp(assign.getFirstChild())&&  NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {	  }    else    if(NodeUtil.isLiteralValue(assign.getLastChild(),    true))    {    	non-compiled	[CE]  	28	None	replace
476	[BUG]  [BUGGY]  }  else  if(NodeUtil.isUnknownValue(assign.getLastChild(),  true))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isUnknownValue(assign.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isUnknownValue(assign.getLastChild(),  true))  {	  }    else    if(NodeUtil.isLiteralValue(assign.getLastChild(),    true))    {    	non-compiled	[CE]  	28	None	replace
477	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isVarDeclaration(value,  true))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isVarDeclaration(value,  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.isVarDeclaration(value,  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(value,    true))    {    	non-compiled	[CE]  	3	None	replace
478	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isFunction(assign,  false))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isFunction(assign,  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.isFunction(assign,  false))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign,    false))    {    	non-compiled	[CE]  	85	None	replace
479	[BUG]  [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  true))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  true))  {	  }    else    if(!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),    true))    {    	non-compiled	[CE]  	14	None	replace
480	[BUG]  [BUGGY]  }  else  if(canModifyAllCallSites  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(canModifyAllCallSites  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(canModifyAllCallSites  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true))  {	  }    else    if(!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),    true))    {    	non-compiled	[CE]  	14	None	replace
481	[BUG]  [BUGGY]  }  else  if(assign.isUnknown()  &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(assign.isUnknown()  &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(assign.isUnknown()  &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),    true))    {    	non-compiled	[CE]  	42	None	replace
482	[BUG]  [BUGGY]  }  else  if(value.getType()  ==  Token.VAR  &&!NodeUtil.isLiteralValue(value.getFirstChild(),  true))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(value.getType()  ==  Token.VAR  &&!NodeUtil.isLiteralValue(value.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(value.getType()  ==  Token.VAR  &&!NodeUtil.isLiteralValue(value.getFirstChild(),  true))  {	  }    else    if(!NodeUtil.isLiteralValue(value.getFirstChild(),    true))    {    	non-compiled	[CE]  	20	None	replace
483	[BUG]  [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign.assignNode.getFirstChild(),  false))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign.assignNode.getFirstChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isAssignmentOp(assign.assignNode.getFirstChild(),  false))  {	  }    else    if(NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    false))    {    	non-compiled	[CE]  	64	None	replace
484	[BUG]  [BUGGY]  NodeUtil.redeclareVar(var,  assign);  current--;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.redeclareVar(var,  assign);  current--;  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.redeclareVar(var,  assign);  current--;	  NodeUtil.removeChild(assign);    current--;    	non-compiled	[CE]  	91	None	replace
485	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(assign);  current--;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.copyCurrentStructure(assign);  current--;  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.copyCurrentStructure(assign);  current--;	  NodeUtil.removeChild(assign);    current--;    	non-compiled	[CE]  	91	None	replace
486	[BUG]  [BUGGY]  NodeUtil.redeclareVar(assign);  current--;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  NodeUtil.redeclareVar(assign);  current--;  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.redeclareVar(assign);  current--;	  NodeUtil.removeChild(assign);    current--;    	non-compiled	[CE]  	91	None	replace
487	[BUG]  [BUGGY]  }  else  if(assign.isUnknown()  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(assign.isUnknown()  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(assign.isUnknown()  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.isLiteralValue(assign.getLastChild(),    true))    {    	non-compiled	[CE]  	41	None	replace
488	[BUG]  [BUGGY]  }  else  if(NodeUtil.isUnknownValue(assign.assignNode.getLastChild(),  false))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isUnknownValue(assign.assignNode.getLastChild(),  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isUnknownValue(assign.assignNode.getLastChild(),  false))  {	  }    else    if(NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),    false))    {    	non-compiled	[CE]  	66	None	replace
489	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isImmutableValue(assign.getFirstChild(),  true)&&  isPropertyAssign)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.isImmutableValue(assign.getFirstChild(),  true)&&  isPropertyAssign)  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isImmutableValue(assign.getFirstChild(),  true)&&  isPropertyAssign)  {	  }    else    if(!NodeUtil.isImmutableValue(assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	10	None	replace
490	[BUG]  [BUGGY]  }  else  if(hasFollowing  &&!NodeUtil.isImmutableValue(assign.getLastChild(),  true))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasFollowing  &&!NodeUtil.isImmutableValue(assign.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasFollowing  &&!NodeUtil.isImmutableValue(assign.getLastChild(),  true))  {	  }    else    if(hasFollowing    &&!NodeUtil.isLiteralValue(assign.getLastChild(),    true))    {    	non-compiled	[CE]  	40	None	replace
491	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign,  true)&&  assign.assignNode.getLastChild().getString().endsWith( "__ "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign,  true)&&  assign.assignNode.getLastChild().getString().endsWith( "__ "))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isLiteralValue(assign,  true)&&  assign.assignNode.getLastChild().getString().endsWith( "__ "))  {	  }    else    if(!NodeUtil.isLiteralValue(assign,    false))    {    	non-compiled	[CE]  	21	None	replace
492	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSideEffects(assign.getLastChild(),  true))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSideEffects(assign.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSideEffects(assign.getLastChild(),  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isImmutableValue(assign.getLastChild(),    true))    {    	non-compiled	[CE]  	97	None	replace
493	[BUG]  [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.isPropertyAssign(assign.getLastChild(),  true))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.isPropertyAssign(assign.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.isPropertyAssign(assign.getLastChild(),  true))  {	  }    else    if(!NodeUtil.isPropertyAssign(assign.getLastChild(),    true))    {    	non-compiled	[CE]  	12	None	replace
494	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isPropertyAssign(assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!NodeUtil.isPropertyAssign(assign.assignNode.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isPropertyAssign(assign.assignNode.getFirstChild(),  true))  {	  }    else    if(!NodeUtil.isPropertyAssign(assign.getLastChild(),    true))    {    	non-compiled	[CE]  	12	None	replace
495	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assign,  false))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assign,  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assign,  false))  {	  }    else    if(!NodeUtil.isLiteralValue(assign.assign,    false))    {    	non-compiled	[CE]  	22	None	replace
496	[BUG]  [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign.assign,  true))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign.assign,  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isLiteralValue(assign.assign,  true))  {	  }    else    if(!NodeUtil.isLiteralValue(assign.assign,    false))    {    	non-compiled	[CE]  	22	None	replace
497	[BUG]  [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign)&&  NodeUtil.isPropertyAssign(assign.getFirstChild(),  true))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign)&&  NodeUtil.isPropertyAssign(assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isAssignmentOp(assign)&&  NodeUtil.isPropertyAssign(assign.getFirstChild(),  true))  {	  }    else    if(NodeUtil.isPropertyAssign(assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	33	None	replace
498	[BUG]  [BUGGY]  }  else  if(NodeUtil.isFunctionAssign(assign.getFirstChild(),  true))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isFunctionAssign(assign.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isFunctionAssign(assign.getFirstChild(),  true))  {	  }    else    if(NodeUtil.isPropertyAssign(assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	33	None	replace
499	[BUG]  [BUGGY]  }  else  if(assign.isUnknown()  ||!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(assign.isUnknown()  ||!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(assign.isUnknown()  ||!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {	  }    else    if(assign.isUnknownValue()    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	77	None	replace
500	[BUG]  [BUGGY]  }  else  if(!hasPropertyAssign  &&  assign.isUnknownValue()  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(!hasPropertyAssign  &&  assign.isUnknownValue()  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!hasPropertyAssign  &&  assign.isUnknownValue()  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {	  }    else    if(assign.isUnknownValue()    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	77	None	replace
501	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&  assign.isUnknownValue()  &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(hasPropertyAssign  &&  assign.isUnknownValue()  &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&  assign.isUnknownValue()  &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true))  {	  }    else    if(assign.isUnknownValue()    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	77	None	replace
502	[BUG]  [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign.assignNode,  false))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign.assignNode,  false))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isLiteralValue(assign.assignNode,  false))  {	  }    else    if(!NodeUtil.isLiteralValue(assign.assignNode,    true))    {    	non-compiled	[CE]  	25	None	replace
503	[BUG]  [BUGGY]  }  else  if(canModifyAllCallSites  &&!NodeUtil.isLiteralValue(assign,  assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;      [BUGGY]  }  else  if(canModifyAllCallSites  &&!NodeUtil.isLiteralValue(assign,  assign.assignNode.getFirstChild(),  true))  {  [BUGGY]      assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(canModifyAllCallSites  &&!NodeUtil.isLiteralValue(assign,  assign.assignNode.getFirstChild(),  true))  {	  }    else    if(!NodeUtil.isLiteralValue(assign,    assign.assignNode.getLastChild(),    true))    {    	non-compiled	[CE]  	58	None	replace
