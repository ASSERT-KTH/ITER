bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	7	None	replace
2	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getFirstChild(),  false))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getFirstChild(),  false))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getFirstChild(),  false))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	7	None	replace
3	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(value,  true))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(value,  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(value,  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	7	None	replace
4	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  false))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  false))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  false))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	7	None	replace
5	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(value.getFirstChild(),  true))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(value.getFirstChild(),  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(value.getFirstChild(),  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	7	None	replace
6	[BUG]  [BUGGY]  }  else  if(hasFollowing  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(hasFollowing  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasFollowing  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	7	None	replace
7	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(value,  true))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(value,  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isLiteralValue(value,  true))  {	  }    else    if(!NodeUtil.isLiteralValue(assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	2	None	replace
8	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {	  }    else    if(!NodeUtil.isLiteralValue(assign.getFirstChild(),    true))    {    	non-compiled	[CE]  ';'  expected	2	None	replace
9	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign.getFirstChild(),  false))  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign.getFirstChild(),  false))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isLiteralValue(assign.getFirstChild(),  false))  {	  }    else    if(!NodeUtil.isLiteralValue(assign.getFirstChild(),    true))    {    	non-compiled	[CE]  ';'  expected	2	None	replace
10	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isImmutableValue(assign.getFirstChild(),  true))  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(!NodeUtil.isImmutableValue(assign.getFirstChild(),  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isImmutableValue(assign.getFirstChild(),  true))  {	  }    else    if(!NodeUtil.isLiteralValue(assign.getFirstChild(),    true))    {    	non-compiled	[CE]  ';'  expected	2	None	replace
11	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isPropertyAssign(assign.getFirstChild(),  true))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(!NodeUtil.isPropertyAssign(assign.getFirstChild(),  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isPropertyAssign(assign.getFirstChild(),  true))  {	  }    else    if(!NodeUtil.isLiteralValue(assign.getFirstChild(),    true))    {    	non-compiled	[CE]  ';'  expected	2	None	replace
12	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isPropertyAssign(assign.getLastChild(),  true))  {  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(!NodeUtil.isPropertyAssign(assign.getLastChild(),  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isPropertyAssign(assign.getLastChild(),  true))  {	  }    else    if(!NodeUtil.isLiteralValue(assign.getFirstChild(),    true))    {    	non-compiled	[CE]  ';'  expected	2	None	replace
13	[BUG]  [BUGGY]  }  else  if(!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  false))  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  false))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  false))  {	  }    else    if(!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  ';'  expected	9	None	replace
14	[BUG]  [BUGGY]  }  else  if(!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  true))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  true))  {	  }    else    if(!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	9	None	replace
15	[BUG]  [BUGGY]  }  else  if(!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getLastChild(),  true))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getLastChild(),  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getLastChild(),  true))  {	  }    else    if(!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	9	None	replace
16	[BUG]  [BUGGY]  }  else  if(!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  false))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  false))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  false))  {	  }    else    if(!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	9	None	replace
17	[BUG]  [BUGGY]  }  else  if(!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true))  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true))  {	  }    else    if(!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	9	None	replace
18	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true))  {  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true))  {	  }    else    if(!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	9	None	replace
19	[BUG]  [BUGGY]  }  else  if(!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true)&&  hasPropertyAssign)  {  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true)&&  hasPropertyAssign)  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true)&&  hasPropertyAssign)  {	  }    else    if(!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	9	None	replace
20	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(value.getFirstChild(),  true))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(value.getFirstChild(),  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isLiteralValue(value.getFirstChild(),  true))  {	  }    else    if(!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	4	None	replace
21	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign,  false))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign,  false))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isLiteralValue(assign,  false))  {	  }    else    if(!NodeUtil.isLiteralValue(assign.assign,    true))    {    	non-compiled	[CE]  	5	None	replace
22	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign.assign,  false))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign.assign,  false))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isLiteralValue(assign.assign,  false))  {	  }    else    if(!NodeUtil.isLiteralValue(assign.assign,    true))    {    	non-compiled	[CE]  	5	None	replace
23	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(value,  false))  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(value,  false))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isLiteralValue(value,  false))  {	  }    else    if(!NodeUtil.isLiteralValue(assign.assign,    true))    {    	non-compiled	[CE]  	5	None	replace
24	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign.assignNode,  false))  {  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign.assignNode,  false))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isLiteralValue(assign.assignNode,  false))  {	  }    else    if(!NodeUtil.isLiteralValue(assign.assign,    true))    {    	non-compiled	[CE]  	5	None	replace
25	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign.assignNode,  true))  {  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign.assignNode,  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isLiteralValue(assign.assignNode,  true))  {	  }    else    if(!NodeUtil.isLiteralValue(assign.assign,    true))    {    	non-compiled	[CE]  	5	None	replace
26	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isImmutableValue(assign.assign,  true))  {  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(!NodeUtil.isImmutableValue(assign.assign,  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isImmutableValue(assign.assign,  true))  {	  }    else    if(!NodeUtil.isLiteralValue(assign.assign,    true))    {    	non-compiled	[CE]  	5	None	replace
27	[BUG]  [BUGGY]  }  else  if(NodeUtil.isLiteralValue(value.getFirstChild(),  true))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(NodeUtil.isLiteralValue(value.getFirstChild(),  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isLiteralValue(value.getFirstChild(),  true))  {	  }    else    if(NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	8	None	replace
28	[BUG]  [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {	  }    else    if(NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	8	None	replace
29	[BUG]  [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign.getFirstChild(),  false))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign.getFirstChild(),  false))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isLiteralValue(assign.getFirstChild(),  false))  {	  }    else    if(NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	8	None	replace
30	[BUG]  [BUGGY]  }  else  if(NodeUtil.isLiteralValue(value,  assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(NodeUtil.isLiteralValue(value,  assign.assignNode.getFirstChild(),  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isLiteralValue(value,  assign.assignNode.getFirstChild(),  true))  {	  }    else    if(NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	8	None	replace
31	[BUG]  [BUGGY]  }  else  if(NodeUtil.isLiteralValue(value,  true))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(NodeUtil.isLiteralValue(value,  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isLiteralValue(value,  true))  {	  }    else    if(NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	8	None	replace
32	[BUG]  [BUGGY]  }  else  if(NodeUtil.isLiteralValue(value,  assign.assignNode.getLastChild(),  true))  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(NodeUtil.isLiteralValue(value,  assign.assignNode.getLastChild(),  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isLiteralValue(value,  assign.assignNode.getLastChild(),  true))  {	  }    else    if(NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	8	None	replace
33	[BUG]  [BUGGY]  }  else  if(NodeUtil.isPropertyAssign(assign.getFirstChild(),  true))  {  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(NodeUtil.isPropertyAssign(assign.getFirstChild(),  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isPropertyAssign(assign.getFirstChild(),  true))  {	  }    else    if(NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	8	None	replace
34	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isImmutableValue(assign.getLastChild(),  false))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(!NodeUtil.isImmutableValue(assign.getLastChild(),  false))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isImmutableValue(assign.getLastChild(),  false))  {	  }    else    if(!NodeUtil.isLiteralValue(assign.getLastChild(),    false))    {    	non-compiled	[CE]  	3	None	replace
35	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isPropertyAssign(assign.getLastChild(),  false))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(!NodeUtil.isPropertyAssign(assign.getLastChild(),  false))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isPropertyAssign(assign.getLastChild(),  false))  {	  }    else    if(!NodeUtil.isLiteralValue(assign.getLastChild(),    false))    {    	non-compiled	[CE]  	3	None	replace
36	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.getLastChild(),    true))    {    	non-compiled	[CE]  	10	None	replace
37	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  false))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  false))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  false))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.getLastChild(),    true))    {    	non-compiled	[CE]  	10	None	replace
38	[BUG]  [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.getLastChild(),    true))    {    	non-compiled	[CE]  	10	None	replace
39	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  ||!NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(hasPropertyAssign  ||!NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  ||!NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.getLastChild(),    true))    {    	non-compiled	[CE]  	10	None	replace
40	[BUG]  [BUGGY]  }  else  if(hasFollowing  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(hasFollowing  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasFollowing  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.getLastChild(),    true))    {    	non-compiled	[CE]  	10	None	replace
41	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  true))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	11	None	replace
42	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	11	None	replace
43	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getFirstChild(),  false))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getFirstChild(),  false))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getFirstChild(),  false))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	11	None	replace
44	[BUG]  [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	11	None	replace
45	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  false))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  false))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  false))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	11	None	replace
46	[BUG]  [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	11	None	replace
47	[BUG]  [BUGGY]  }  else  if(isFunctionAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(isFunctionAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(isFunctionAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	11	None	replace
48	[BUG]  [BUGGY]  NodeUtil.removeChild(assign);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  NodeUtil.removeChild(assign);  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.removeChild(assign);	      	non-compiled	[CE]  	6	None	replace
49	[BUG]  [BUGGY]  NodeUtil.removeChild(assign,  assign);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  NodeUtil.removeChild(assign,  assign);  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.removeChild(assign,  assign);	      	non-compiled	[CE]  	6	None	replace
50	[BUG]  [BUGGY]  Node  node  =  assign.getFirstChild();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  Node  node  =  assign.getFirstChild();  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	Node  node  =  assign.getFirstChild();	      	non-compiled	[CE]  	6	None	replace
51	[BUG]  [BUGGY]  NodeUtil.removeChild(assign,  current);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  NodeUtil.removeChild(assign,  current);  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.removeChild(assign,  current);	      	non-compiled	[CE]  	6	None	replace
52	[BUG]  [BUGGY]  Node  node  =  assign.getLastChild();  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  Node  node  =  assign.getLastChild();  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	Node  node  =  assign.getLastChild();	      	non-compiled	[CE]  	6	None	replace
53	[BUG]  [BUGGY]  Node  parent  =  assign.getParent();  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  Node  parent  =  assign.getParent();  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	Node  parent  =  assign.getParent();	      	non-compiled	[CE]  	6	None	replace
54	[BUG]  [BUGGY]  Node  param  =  assign.getParent();  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  Node  param  =  assign.getParent();  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	Node  param  =  assign.getParent();	      	non-compiled	[CE]  	6	None	replace
55	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign,  assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign,  assign.assignNode.getFirstChild(),  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isLiteralValue(assign,  assign.assignNode.getFirstChild(),  true))  {	  }    else    if(!NodeUtil.isLiteralValue(value,    assign.assignNode.getLastChild(),    true))    {    	non-compiled	[CE]  	1	None	replace
56	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(value,  assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(value,  assign.assignNode.getFirstChild(),  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isLiteralValue(value,  assign.assignNode.getFirstChild(),  true))  {	  }    else    if(!NodeUtil.isLiteralValue(value,    assign.assignNode.getLastChild(),    true))    {    	non-compiled	[CE]  	1	None	replace
57	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign,  assign.assignNode.getLastChild(),  false))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign,  assign.assignNode.getLastChild(),  false))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isLiteralValue(assign,  assign.assignNode.getLastChild(),  false))  {	  }    else    if(!NodeUtil.isLiteralValue(value,    assign.assignNode.getLastChild(),    true))    {    	non-compiled	[CE]  	1	None	replace
58	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign,  assign.assignNode.getLastChild(),  true))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign,  assign.assignNode.getLastChild(),  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isLiteralValue(assign,  assign.assignNode.getLastChild(),  true))  {	  }    else    if(!NodeUtil.isLiteralValue(value,    assign.assignNode.getLastChild(),    true))    {    	non-compiled	[CE]  	1	None	replace
59	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign.assign,  assign.getLastChild(),  true))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign.assign,  assign.getLastChild(),  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isLiteralValue(assign.assign,  assign.getLastChild(),  true))  {	  }    else    if(!NodeUtil.isLiteralValue(value,    assign.assignNode.getLastChild(),    true))    {    	non-compiled	[CE]  	1	None	replace
60	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(value,  assign.assign.getFirstChild(),  true))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(value,  assign.assign.getFirstChild(),  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isLiteralValue(value,  assign.assign.getFirstChild(),  true))  {	  }    else    if(!NodeUtil.isLiteralValue(value,    assign.assignNode.getLastChild(),    true))    {    	non-compiled	[CE]  	1	None	replace
61	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  var,  current);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  NodeTraversal.traverse(compiler,  var,  current);  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeTraversal.traverse(compiler,  var,  current);	      	non-compiled	[CE]  	6	None	replace
62	[BUG]  [BUGGY]  NodeUtil.setPropertyAssign(assign,  true);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  NodeUtil.setPropertyAssign(assign,  true);  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.setPropertyAssign(assign,  true);	      	non-compiled	[CE]  	6	None	replace
63	[BUG]  [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  true))  {	  }    else    if(NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	8	None	replace
64	[BUG]  [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  false))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  false))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  false))  {	  }    else    if(NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	8	None	replace
65	[BUG]  [BUGGY]  }  else  if(NodeUtil.isImmutableValue(assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(NodeUtil.isImmutableValue(assign.assignNode.getFirstChild(),  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isImmutableValue(assign.assignNode.getFirstChild(),  true))  {	  }    else    if(NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	8	None	replace
66	[BUG]  [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  false))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  false))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  false))  {	  }    else    if(NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	8	None	replace
67	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {	  }    else    if(!NodeUtil.isLiteralValue(assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	2	None	replace
68	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  true))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.getLastChild(),    true))    {    	non-compiled	[CE]  	10	None	replace
69	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getFirstChild(),  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.getLastChild(),    true))    {    	non-compiled	[CE]  	10	None	replace
70	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  false))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  false))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.getLastChild(),  false))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.getLastChild(),    true))    {    	non-compiled	[CE]  	10	None	replace
71	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  false))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  false))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  false))  {	  }    else    if(!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	4	None	replace
72	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	7	None	replace
73	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  false))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  false))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getLastChild(),  false))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	7	None	replace
74	[BUG]  [BUGGY]  }  else  if(NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  false))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  false))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  false))  {	  }    else    if(!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	9	None	replace
75	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(isPropertyAssign  &&!NodeUtil.mayHaveSecondarySideEffects(assign.assignNode.getFirstChild(),  true))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	11	None	replace
76	[BUG]  [BUGGY]  }  else  if(hasFollowing  &&  isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(hasFollowing  &&  isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasFollowing  &&  isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	11	None	replace
77	[BUG]  [BUGGY]  }  else  if(assign.isUnknownValue()  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(assign.isUnknownValue()  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(assign.isUnknownValue()  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	11	None	replace
78	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  assign.assignNode.getFirstChild(),  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  assign.assignNode.getFirstChild(),  true))  {	  }    else    if(!NodeUtil.isLiteralValue(value,    assign.assignNode.getLastChild(),    true))    {    	non-compiled	[CE]  	1	None	replace
79	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  assign.assignNode.getLastChild(),  true))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  assign.assignNode.getLastChild(),  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  assign.assignNode.getLastChild(),  true))  {	  }    else    if(!NodeUtil.isLiteralValue(value,    assign.assignNode.getLastChild(),    true))    {    	non-compiled	[CE]  	1	None	replace
80	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  assign.assignNode.getFirstChild(),  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(isPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  assign.assignNode.getFirstChild(),  true))  {	  }    else    if(!NodeUtil.isLiteralValue(value,    assign.assignNode.getLastChild(),    true))    {    	non-compiled	[CE]  	1	None	replace
81	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(value,  assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(value,  assign.assignNode.getFirstChild(),  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(value,  assign.assignNode.getFirstChild(),  true))  {	  }    else    if(!NodeUtil.isLiteralValue(value,    assign.assignNode.getLastChild(),    true))    {    	non-compiled	[CE]  	1	None	replace
82	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  assign.assignNode.getLastChild(),  true))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  assign.assignNode.getLastChild(),  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(isPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  assign.assignNode.getLastChild(),  true))  {	  }    else    if(!NodeUtil.isLiteralValue(value,    assign.assignNode.getLastChild(),    true))    {    	non-compiled	[CE]  	1	None	replace
83	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  true))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  true))  {	  }    else    if(!NodeUtil.isLiteralValue(assign.assign,    true))    {    	non-compiled	[CE]  	5	None	replace
84	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode,  true))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode,  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assignNode,  true))  {	  }    else    if(!NodeUtil.isLiteralValue(assign.assign,    true))    {    	non-compiled	[CE]  	5	None	replace
85	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  false))  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  false))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign,  false))  {	  }    else    if(!NodeUtil.isLiteralValue(assign.assign,    true))    {    	non-compiled	[CE]  	5	None	replace
86	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assign,  true))  {  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assign,  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.isLiteralValue(assign.assign,  true))  {	  }    else    if(!NodeUtil.isLiteralValue(assign.assign,    true))    {    	non-compiled	[CE]  	5	None	replace
87	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isImmutableValue(assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isImmutableValue(assign.assignNode.getFirstChild(),  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.isImmutableValue(assign.assignNode.getFirstChild(),  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	7	None	replace
88	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.isLiteralValue(value,  assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.isLiteralValue(value,  assign.assignNode.getFirstChild(),  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(isPropertyAssign  &&!NodeUtil.isLiteralValue(value,  assign.assignNode.getFirstChild(),  true))  {	  }    else    if(!NodeUtil.isLiteralValue(value,    assign.assignNode.getLastChild(),    true))    {    	non-compiled	[CE]  	1	None	replace
89	[BUG]  [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign,  assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign,  assign.assignNode.getFirstChild(),  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isLiteralValue(assign,  assign.assignNode.getFirstChild(),  true))  {	  }    else    if(!NodeUtil.isLiteralValue(value,    assign.assignNode.getLastChild(),    true))    {    	non-compiled	[CE]  	1	None	replace
90	[BUG]  [BUGGY]  }  else  if(isUnknownValue  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(isUnknownValue  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(isUnknownValue  &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true))  {	  }    else    if(isPropertyAssign    &&!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	11	None	replace
91	[BUG]  [BUGGY]  NodeUtil.removeChild(assign);  current--;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  NodeUtil.removeChild(assign);  current--;  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.removeChild(assign);  current--;	      	non-compiled	[CE]  	6	None	replace
92	[BUG]  [BUGGY]  NodeUtil.setPropertyAssign(assign,  isPropertyAssign);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  NodeUtil.setPropertyAssign(assign,  isPropertyAssign);  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.setPropertyAssign(assign,  isPropertyAssign);	      	non-compiled	[CE]  	6	None	replace
93	[BUG]  [BUGGY]  NodeUtil.setPropertyAssign(assign,  var.getFirstChild());  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  NodeUtil.setPropertyAssign(assign,  var.getFirstChild());  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.setPropertyAssign(assign,  var.getFirstChild());	      	non-compiled	[CE]  	6	None	replace
94	[BUG]  [BUGGY]  NodeUtil.removeChild(value,  assign);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  NodeUtil.removeChild(value,  assign);  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	NodeUtil.removeChild(value,  assign);	      	non-compiled	[CE]  	6	None	replace
95	[BUG]  [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isAssignmentOp(assign)&&!NodeUtil.isLiteralValue(assign.getFirstChild(),  true))  {	  }    else    if(!NodeUtil.isLiteralValue(assign.getFirstChild(),    true))    {    	non-compiled	[CE]  	2	None	replace
96	[BUG]  [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true)&&  isPropertyAssign)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true)&&  isPropertyAssign)  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true)&&  isPropertyAssign)  {	  }    else    if(NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	8	None	replace
97	[BUG]  [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isImmutableValue(assign.getLastChild(),  true))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(hasPropertyAssign  &&!NodeUtil.isImmutableValue(assign.getLastChild(),  true))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(hasPropertyAssign  &&!NodeUtil.isImmutableValue(assign.getLastChild(),  true))  {	  }    else    if(hasPropertyAssign    &&!NodeUtil.isLiteralValue(assign.getLastChild(),    true))    {    	non-compiled	[CE]  	10	None	replace
98	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true)&&  isPropertyAssign)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true)&&  isPropertyAssign)  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),  true)&&  isPropertyAssign)  {	  }    else    if(!NodeUtil.isLiteralValue(assign.assignNode.getFirstChild(),    true))    {    	non-compiled	[CE]  	4	None	replace
99	[BUG]  [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  false))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    !NodeUtil.isLiteralValue(value,  true);  }  else  {    assignedToUnknownValue  =  true;  }  for  (Assign  assign  :  assignsByVar.get(var))  {  if  (assign.isPropertyAssign)  {  hasPropertyAssign  =  true;    [BUGGY]  }  else  if(isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  false))  {  [BUGGY]    assign.assignNode.getLastChild(),  true))  {  assignedToUnknownValue  =  true;  }  }  if  (assignedToUnknownValue  &&  hasPropertyAssign)  {  changes  =  markReferencedVar(var)  ||  changes;  maybeUnreferenced.remove(current);  current--;  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  interpretAssigns  [RETURN_TYPE]  void  [VARIABLES]  Set  referenced  Var  var  Node  a  arg  argList  argParent  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  param  parent  root  value  SimpleDefinitionFinder  defFinder  int  current  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  assignedToUnknownValue  canChangeSignature  canModifyAllSites  changeCallSignature  changes  hasFollowing  hasPropertyAssign  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyAllCallSites  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Scope  fnScope  parentScope  scope  CodingConvention  codingConvention  convention  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  Assign  assign  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.25	735	736	1	replace	}  else  if(isPropertyAssign  &&!NodeUtil.isLiteralValue(assign.getLastChild(),  false))  {	  }    else    if(!NodeUtil.isLiteralValue(assign.getLastChild(),    false))    {    	non-compiled	[CE]  	3	None	replace
