bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {  [BUGGY]  return  true;  [BUGGY]  }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	add	return  true;	return  false;  	compilable	  [FE]  AssertionFailedError  	1	5	replace
2	[BUG]  [BUGGY]  return  true;  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {  [BUGGY]  return  true;  [BUGGY]  }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	return  true;	return  false;  	compilable	  [FE]  AssertionFailedError  	1	5	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {  [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [BUGGY]  }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	add	if(!removeGlobals  &&  var.isGlobal())  {  return  false;  }	return  false;  	compilable	  [FE]  AssertionFailedError  	1	1	replace
4	[BUG]  [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {  [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [BUGGY]  }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(!removeGlobals  &&  var.isGlobal())  {  return  false;  }	return  false;  	compilable	  [FE]  AssertionFailedError  	1	1	replace
5	[BUG]  [BUGGY]  if(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  incomparable  types:  JSType  and  int  [FE]        AssertionFailedError  [CONTEXT]  private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {  [BUGGY]  if(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]  }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  return  false;  }	return  false;  	non-compiled	[CE]  incomparable  types:  JSType  and  int	1	None	replace
6	[BUG]  [BUGGY]  if(var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {  return  false;  }  [CE]  incomparable  types:  JSType  and  int  [FE]          AssertionFailedError  [CONTEXT]  private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {  [BUGGY]  if(var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]  }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {  return  false;  }	return  false;  	non-compiled	[CE]  incomparable  types:  JSType  and  int	1	None	replace
7	[BUG]  [BUGGY]  if(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  incomparable  types:  JSType  and  int  [FE]            AssertionFailedError  [CONTEXT]  private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {  [BUGGY]  if(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]  }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION)  {  return  false;  }	return  false;  	non-compiled	[CE]  incomparable  types:  JSType  and  int	1	None	replace
8	[BUG]  [BUGGY]  if(var.getType()  ==  Token.VAR  ||  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  incomparable  types:  JSType  and  int  [FE]              AssertionFailedError  [CONTEXT]  private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {  [BUGGY]  if(var.getType()  ==  Token.VAR  ||  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]  }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var.getType()  ==  Token.VAR  ||  var.getType()!=  Token.FUNCTION)  {  return  false;  }	return  false;  	non-compiled	[CE]  incomparable  types:  JSType  and  int	1	None	replace
9	[BUG]  [BUGGY]  if(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  return  true;  }  [CE]  incomparable  types:  JSType  and  int  [FE]                AssertionFailedError  [CONTEXT]  private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {  [BUGGY]  if(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  return  true;  }  [BUGGY]  }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  return  true;  }	return  false;  	non-compiled	[CE]  incomparable  types:  JSType  and  int	1	None	replace
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError  [CONTEXT]  private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {  [BUGGY]    [BUGGY]  }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	add	  	return  false;  	compilable	  [FE]  AssertionFailedError  	1	5	replace
11	[BUG]  [BUGGY]    [FE]  AssertionFailedError  [FE]                  AssertionFailedError  [CONTEXT]  private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {  [BUGGY]    [BUGGY]  }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	  	return  false;  	compilable	  [FE]  AssertionFailedError  	1	5	replace
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {  [BUGGY]  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]  }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	add	if(var  ==  null  ||  var.isGlobal())  {  return  false;  }	return  false;  	compilable	  [FE]  AssertionFailedError  	1	1	replace
13	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {  [BUGGY]  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]  }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var  ==  null  ||  var.isGlobal())  {  return  false;  }	return  false;  	compilable	  [FE]  AssertionFailedError  	1	1	replace
14	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getType()!=  Token.VAR)  {  return  false;  }  [CE]  incomparable  types:  JSType  and  int  [FE]      AssertionFailedError  [CONTEXT]  private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {  [BUGGY]  if(var  ==  null  ||  var.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]  }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var  ==  null  ||  var.getType()!=  Token.VAR)  {  return  false;  }	return  false;  	non-compiled	[CE]  incomparable  types:  JSType  and  int	1	None	replace
15	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {  [BUGGY]  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  [BUGGY]  }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	add	if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }	return  false;  	compilable	  [FE]  AssertionFailedError  	1	1	replace
16	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {  [BUGGY]  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  [BUGGY]  }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }	return  false;  	compilable	  [FE]  AssertionFailedError  	1	1	replace
17	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  incomparable  types:  JSType  and  int  [FE]          AssertionFailedError  [CONTEXT]  private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {  [BUGGY]  if(var  ==  null  ||  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]  }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var  ==  null  ||  var.getType()!=  Token.FUNCTION)  {  return  false;  }	return  false;  	non-compiled	[CE]  incomparable  types:  JSType  and  int	1	None	replace
18	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]  private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {  [BUGGY]  if(var!=  null)  {  return  false;  }  [BUGGY]  }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	add	if(var!=  null)  {  return  false;  }	return  false;  	compilable	  [FE]  AssertionFailedError  	1	1	replace
19	[BUG]  [BUGGY]  if(var!=  null)  {  return  false;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]  private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {  [BUGGY]  if(var!=  null)  {  return  false;  }  [BUGGY]  }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var!=  null)  {  return  false;  }	return  false;  	compilable	  [FE]  AssertionFailedError  	1	1	replace
20	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  incomparable  types:  JSType  and  int  [FE]              AssertionFailedError  [CONTEXT]  private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {  [BUGGY]  if(var  ==  null  ||  var.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]  }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var  ==  null  ||  var.getType()  ==  Token.VAR)  {  return  false;  }	return  false;  	non-compiled	[CE]  incomparable  types:  JSType  and  int	1	None	replace
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  [BUGGY]  }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	add	if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }	return  false;  	compilable	  [FE]  AssertionFailedError  	1	1	replace
22	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  [BUGGY]  }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }	return  false;  	compilable	  [FE]  AssertionFailedError  	1	1	replace
23	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }  [CE]  illegal  start  of  type  [FE]      AssertionFailedError  [CONTEXT]  private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }  [BUGGY]  }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }	return  false;  	non-compiled	[CE]  illegal  start  of  type	1	None	replace
24	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError  [CONTEXT]  private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  true;  }  [BUGGY]  }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  true;  }	return  false;  	non-compiled	[CE]  illegal  start  of  type	1	None	replace
25	[BUG]  [BUGGY]  if(var.getName().equals(var.getName()))  {  return  false;  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError  [CONTEXT]  private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {  [BUGGY]  if(var.getName().equals(var.getName()))  {  return  false;  }  [BUGGY]  }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var.getName().equals(var.getName()))  {  return  false;  }	return  false;  	non-compiled	[CE]  illegal  start  of  type	1	None	replace
