bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(var!=  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var!=  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
2	[BUG]  [BUGGY]  ||  var!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  ||  var!=  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	||  var!=  null)  {  return  false;  }	  if(var!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
3	[BUG]  [BUGGY]  Var  var  =  var.getVar(var.getName());  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  Var  var  =  var.getVar(var.getName());  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	Var  var  =  var.getVar(var.getName());	  if(var!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
4	[BUG]  [BUGGY]  ||  var  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  ||  var  ==  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	||  var  ==  null)  {  return  false;  }	  if(var!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
5	[BUG]  [BUGGY]  if(var  ==  null)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var  ==  null)  {  return  false;  }	  if(var!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
6	[BUG]  [BUGGY]  parent  ==  null)  {  return  false;  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  parent  ==  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	parent  ==  null)  {  return  false;  }	  if(var!=    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	19	None	replace
7	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingVar(var);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  aughtExceptionHandler.handleMissingVar(var);  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	aughtExceptionHandler.handleMissingVar(var);	  if(var!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
8	[BUG]  [BUGGY]  if(var!=  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var!=  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isRemovableVar(var.getName()))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
9	[BUG]  [BUGGY]  if(var  ==  null  &&  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  &&  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var  ==  null  &&  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isRemovableVar(var.getName()))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
10	[BUG]  [BUGGY]  If(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  true;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  If(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	If(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isRemovableVar(var.getName()))    {    return    true;    }    	non-compiled	[CE]  	24	None	replace
11	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  true;  if(codingConvention.isRemovableVar(var.getName()))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  true;  if(codingConvention.isRemovableVar(var.getName()))  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var  ==  null  ||  var.isGlobal())return  true;  if(codingConvention.isRemovableVar(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isRemovableVar(var.getName()))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
12	[BUG]  [BUGGY]  return(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	return(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);	  return    true;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
13	[BUG]  [BUGGY]  return(var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR);  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return(var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR);  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	return(var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR);	  return    true;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
14	[BUG]  [BUGGY]  return(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	return(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);	  return    true;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
15	[BUG]  [BUGGY]  return(var.getType()  ==  Token.VAR  ||  var.getType()!=  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return(var.getType()  ==  Token.VAR  ||  var.getType()!=  Token.FUNCTION);  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	return(var.getType()  ==  Token.VAR  ||  var.getType()!=  Token.FUNCTION);	  return    true;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
16	[BUG]  [BUGGY]  return(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)&&  isPropertyAssign(var.getName());  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)&&  isPropertyAssign(var.getName());  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	return(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)&&  isPropertyAssign(var.getName());	  return    true;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
17	[BUG]  [BUGGY]  return(var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR)&&  isPropertyAssign(var.getType()));  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return(var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR)&&  isPropertyAssign(var.getType()));  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	return(var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR)&&  isPropertyAssign(var.getType()));	  return    true;    	non-compiled	[CE]  	2	None	replace
18	[BUG]  [BUGGY]  ||  var.getType()!=  Token.VAR)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  ||  var.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	||  var.getType()!=  Token.VAR)  {  return  false;  }	  if(var    ==    null    ||    var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
19	[BUG]  [BUGGY]  if(var!=  null  ||  var.getType()!=  Token.VAR)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null  ||  var.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var!=  null  ||  var.getType()!=  Token.VAR)  {  return  false;  }	  if(var    ==    null    ||    var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
20	[BUG]  [BUGGY]  if(var  ==  null  &&  var.getType()!=  Token.VAR)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  &&  var.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var  ==  null  &&  var.getType()!=  Token.VAR)  {  return  false;  }	  if(var    ==    null    ||    var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
21	[BUG]  [BUGGY]  (var  ==  null  ||  var.getType()!=  Token.VAR))  {  return  false;  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  (var  ==  null  ||  var.getType()!=  Token.VAR))  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	(var  ==  null  ||  var.getType()!=  Token.VAR))  {  return  false;  }	  if(var    ==    null    ||    var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	14	None	replace
22	[BUG]  [BUGGY]  if(var!=  null  ||  var.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null  ||  var.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var!=  null  ||  var.getType()  ==  Token.VAR)  {  return  false;  }	  if(var    ==    null    ||    var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
23	[BUG]  [BUGGY]  ||  var.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  ||  var.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	||  var.getType()  ==  Token.VAR)  {  return  false;  }	  if(var    ==    null    ||    var.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
24	[BUG]  [BUGGY]  (var  ==  null  ||  var.getType()  ==  Token.VAR))  {  return  false;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  (var  ==  null  ||  var.getType()  ==  Token.VAR))  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	(var  ==  null  ||  var.getType()  ==  Token.VAR))  {  return  false;  }	  if(var    ==    null    ||    var.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	20	None	replace
25	[BUG]  [BUGGY]  ||  var.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  ||  var.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	||  var.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(var.getType()    ==    Token.VAR    ||    var.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
26	[BUG]  [BUGGY]  if(var.getType()  ==  Token.VAR  &&  var.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var.getType()  ==  Token.VAR  &&  var.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var.getType()  ==  Token.VAR  &&  var.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(var.getType()    ==    Token.VAR    ||    var.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
27	[BUG]  [BUGGY]  ||  var.getType()  ==  Token.FUNCTION)  {  return  false;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  ||  var.getType()  ==  Token.FUNCTION)  {  return  false;  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	||  var.getType()  ==  Token.FUNCTION)  {  return  false;	  if(var.getType()    ==    Token.VAR    ||    var.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
28	[BUG]  [BUGGY]  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(var.getType()    ==    Token.VAR    ||    var.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	7	None	replace
29	[BUG]  [BUGGY]  if(var.getType()!=  Token.VAR  ||  var.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var.getType()!=  Token.VAR  ||  var.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var.getType()!=  Token.VAR  ||  var.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(var.getType()    ==    Token.VAR    ||    var.getType()    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
30	[BUG]  [BUGGY]  ||  var.getName().equals(var.getName()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  ||  var.getName().equals(var.getName()))  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	||  var.getName().equals(var.getName()))  {  return  false;  }	  if(var.getName().equals(var.getName()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
31	[BUG]  [BUGGY]  var.getName().equals(var.getName()))  {  return  false;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  var.getName().equals(var.getName()))  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	var.getName().equals(var.getName()))  {  return  false;  }	  if(var.getName().equals(var.getName()))    {    return    false;    }    	non-compiled	[CE]  	25	None	replace
32	[BUG]  [BUGGY]  if(!var.getName().equals(var.getName()))  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(!var.getName().equals(var.getName()))  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(!var.getName().equals(var.getName()))  {  return  false;  }	  if(var.getName().equals(var.getName()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
33	[BUG]  [BUGGY]  Preconditions.checkState(var.getName().equals(var.getName()));  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  Preconditions.checkState(var.getName().equals(var.getName()));  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	Preconditions.checkState(var.getName().equals(var.getName()));	  if(var.getName().equals(var.getName()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
34	[BUG]  [BUGGY]  ||  var.getName().equals(var.getName()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  ||  var.getName().equals(var.getName()))  {  return  false;  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	||  var.getName().equals(var.getName()))  {  return  false;	  if(var.getName().equals(var.getName()))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
35	[BUG]  [BUGGY]  ||  var.isGlobal())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  ||  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	||  var.isGlobal())  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
36	[BUG]  [BUGGY]  parent  ==  null  ||  var.isGlobal())  {  return  false;  }  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  parent  ==  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	parent  ==  null  ||  var.isGlobal())  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	13	None	replace
37	[BUG]  [BUGGY]  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var!=  null  ||  var.isGlobal())  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
38	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  ||  var.isGlobal())  {  return  false;  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  Preconditions.checkState(var!=  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	Preconditions.checkState(var!=  null  ||  var.isGlobal())  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	13	None	replace
39	[BUG]  [BUGGY]  Context.checkState(var!=  null  ||  var.isGlobal())  {  return  false;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  Context.checkState(var!=  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	Context.checkState(var!=  null  ||  var.isGlobal())  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	13	None	replace
40	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.VAR);  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.VAR);  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	Preconditions.checkState(var.getType()  ==  Token.VAR);	      	non-compiled	[CE]  illegal  start  of  type	11	None	replace
41	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	Preconditions.checkState(var.getType()  ==  Token.FUNCTION);	      	non-compiled	[CE]  illegal  start  of  type	11	None	replace
42	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);	      	non-compiled	[CE]  illegal  start  of  type	11	None	replace
43	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR);  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR);	      	non-compiled	[CE]  illegal  start  of  type	11	None	replace
44	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION);	      	non-compiled	[CE]  illegal  start  of  type	11	None	replace
45	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  Preconditions.checkState(var.getType()  ==  Token.NAME);  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	Preconditions.checkState(var.getType()  ==  Token.NAME);	      	non-compiled	[CE]  illegal  start  of  type	11	None	replace
46	[BUG]  [BUGGY]  Preconditions.checkState(var.getType()!=  Token.VAR);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  Preconditions.checkState(var.getType()!=  Token.VAR);  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	Preconditions.checkState(var.getType()!=  Token.VAR);	      	non-compiled	[CE]  illegal  start  of  type	11	None	replace
47	[BUG]  [BUGGY]  if(var.getType()  ==  Token.FUNCTION  &&  var.getType()!=  Token.VAR)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var.getType()  ==  Token.FUNCTION  &&  var.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var.getType()  ==  Token.FUNCTION  &&  var.getType()!=  Token.VAR)  {  return  false;  }	  if(var.getType()    ==    Token.FUNCTION    ||    var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
48	[BUG]  [BUGGY]  if(var.getType()!=  Token.FUNCTION  &&  var.getType()!=  Token.VAR)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var.getType()!=  Token.FUNCTION  &&  var.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var.getType()!=  Token.FUNCTION  &&  var.getType()!=  Token.VAR)  {  return  false;  }	  if(var.getType()    ==    Token.FUNCTION    ||    var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
49	[BUG]  [BUGGY]  var.getType()!=  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {  return  false;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  var.getType()!=  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	var.getType()!=  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {  return  false;  }	  if(var.getType()    ==    Token.FUNCTION    ||    var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	6	None	replace
50	[BUG]  [BUGGY]  if(var.getType()!=  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var.getType()!=  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var.getType()!=  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {  return  false;  }	  if(var.getType()    ==    Token.FUNCTION    ||    var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
51	[BUG]  [BUGGY]  if(var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.VAR)  {  return  false;  }	  if(var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
52	[BUG]  [BUGGY]  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  return  false;  }	  if(var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	5	None	replace
53	[BUG]  [BUGGY]  ||  var.getType()  ==  Token.VAR)  {  return  false;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  ||  var.getType()  ==  Token.VAR)  {  return  false;  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	||  var.getType()  ==  Token.VAR)  {  return  false;	  if(var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
54	[BUG]  [BUGGY]  if(var!=  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null)  {  return  false;  }  if(var!=  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var!=    null)    {    return    false;    }    if(var!=  null)  {  return  false;  }	  	non-compiled	[CE]  	18	None	add
55	[BUG]  [BUGGY]  if(var!=  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  [CE]  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null)  {  return  false;  }  if(var  ==  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var!=    null)    {    return    false;    }    if(var  ==  null)  {  return  false;  }	  	non-compiled	[CE]  	18	None	add
56	[BUG]  [BUGGY]  if(var!=  null)  {  return  false;  }  AssertionFailedError  codingConvention  =  new  AssertionFailedError(var.getName());  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null)  {  return  false;  }  AssertionFailedError  codingConvention  =  new  AssertionFailedError(var.getName());  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var!=    null)    {    return    false;    }    AssertionFailedError  codingConvention  =  new  AssertionFailedError(var.getName());	  	non-compiled	[CE]  	18	None	add
57	[BUG]  [BUGGY]  if(var!=  null)  {  return  false;  }  If(var!=  null)  {  return  false;  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null)  {  return  false;  }  If(var!=  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var!=    null)    {    return    false;    }    If(var!=  null)  {  return  false;  }	  	non-compiled	[CE]  	18	None	add
58	[BUG]  [BUGGY]  if(var!=  null)  {  return  false;  }  AssertionFailedError  codingConvention  =  new  AssertionFailedError(this,  var.getName());  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null)  {  return  false;  }  AssertionFailedError  codingConvention  =  new  AssertionFailedError(this,  var.getName());  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var!=    null)    {    return    false;    }    AssertionFailedError  codingConvention  =  new  AssertionFailedError(this,  var.getName());	  	non-compiled	[CE]  	18	None	add
59	[BUG]  [BUGGY]  if(var!=  null)  {  return  false;  }  AssertionFailedError  codingConvention  =  new  AssertionFailedError(nameNode,  var.getName());  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null)  {  return  false;  }  AssertionFailedError  codingConvention  =  new  AssertionFailedError(nameNode,  var.getName());  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var!=    null)    {    return    false;    }    AssertionFailedError  codingConvention  =  new  AssertionFailedError(nameNode,  var.getName());	  	non-compiled	[CE]  	18	None	add
60	[BUG]  [BUGGY]  if(var!=  null)  {  return  false;  }  AssertionFailedError  codingConvention  =  new  AssertionFailedError(var.getName(),  codingConvention);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null)  {  return  false;  }  AssertionFailedError  codingConvention  =  new  AssertionFailedError(var.getName(),  codingConvention);  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var!=    null)    {    return    false;    }    AssertionFailedError  codingConvention  =  new  AssertionFailedError(var.getName(),  codingConvention);	  	non-compiled	[CE]  	18	None	add
61	[BUG]  [BUGGY]  ||  var.getType()  ==  Token.VAR)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  ||  var.getType()  ==  Token.VAR)  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	||  var.getType()  ==  Token.VAR)  {  return  true;  }	  if(var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
62	[BUG]  [BUGGY]  if(var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.VAR)  {  return  true;  }  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.VAR)  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.VAR)  {  return  true;  }	  if(var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    return    true;    }    	non-compiled	[CE]  	9	None	replace
63	[BUG]  [BUGGY]  if(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION)  {  return  true;  }  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION)  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION)  {  return  true;  }	  if(var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    return    true;    }    	non-compiled	[CE]  	9	None	replace
64	[BUG]  [BUGGY]  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  return  true;  }  [CE]  not  a  statement  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  return  true;  }	  if(var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	9	None	replace
65	[BUG]  [BUGGY]  if(var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {  return  true;  }  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {  return  true;  }	  if(var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    return    true;    }    	non-compiled	[CE]  	9	None	replace
66	[BUG]  [BUGGY]      Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()!=  Token.FUNCTION);  [CE]  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]      Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()!=  Token.FUNCTION);  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	        Preconditions.checkState(var.getType()  ==  Token.VAR  ||  var.getType()!=  Token.FUNCTION);	  	non-compiled	[CE]  	10	None	add
67	[BUG]  [BUGGY]  ||  var.getName()!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  ||  var.getName()!=  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	||  var.getName()!=  null)  {  return  false;  }	  if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
68	[BUG]  [BUGGY]  if(var!=  null  ||  var.getName()!=  null)  {  return  false;  }  [CE]  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null  ||  var.getName()!=  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var!=  null  ||  var.getName()!=  null)  {  return  false;  }	  if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    	non-compiled	[CE]  	16	None	replace
69	[BUG]  [BUGGY]  (var  ==  null  ||  var.getName()!=  null))  {  return  false;  }  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  (var  ==  null  ||  var.getName()!=  null))  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	(var  ==  null  ||  var.getName()!=  null))  {  return  false;  }	  if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	16	None	replace
70	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getName()!=  null)return  false;  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.getName()!=  null)return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var  ==  null  ||  var.getName()!=  null)return  false;  }	  if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
71	[BUG]  [BUGGY]  var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	var  ==  null  ||  var.getName()!=  null)  {  return  false;  }	  if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	16	None	replace
72	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }	  	non-compiled	[CE]  	21	None	add
73	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  if(var!=  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  [CE]  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  if(var!=  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    if(var!=  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }	  	non-compiled	[CE]  	21	None	add
74	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  If(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  If(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    If(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }	  	non-compiled	[CE]  	21	None	add
75	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  return  true;  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  return  true;  }	  	non-compiled	[CE]  	21	None	add
76	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isExported(var.getName()))  {  return  true;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isExported(var.getName()))  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isExported(var.getName()))  {  return  true;  }	  	non-compiled	[CE]  	21	None	add
77	[BUG]  [BUGGY]  return  true;  if(!removeGlobals  &&  var.isGlobal())  {  return  true;  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return  true;  if(!removeGlobals  &&  var.isGlobal())  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	return    true;    if(!removeGlobals  &&  var.isGlobal())  {  return  true;  }	  	non-compiled	[CE]  	1	None	add
78	[BUG]  [BUGGY]  return  true;  ||  codingConvention.isGlobal(var.getName()))  {  return  true;  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return  true;  ||  codingConvention.isGlobal(var.getName()))  {  return  true;  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	return    true;    ||  codingConvention.isGlobal(var.getName()))  {  return  true;	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
79	[BUG]  [BUGGY]  return  true;  Preconditions.checkState(var.getType()  ==  Token.VAR);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return  true;  Preconditions.checkState(var.getType()  ==  Token.VAR);  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	return    true;    Preconditions.checkState(var.getType()  ==  Token.VAR);	  	non-compiled	[CE]  	1	None	add
80	[BUG]  [BUGGY]  return  true;  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return  true;  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	return    true;    Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR);	  	non-compiled	[CE]  	1	None	add
81	[BUG]  [BUGGY]  return  true;  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return  true;  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	return    true;    Preconditions.checkState(var.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  	1	None	add
82	[BUG]  [BUGGY]  return  true;  Node  parent  =  var.getParent();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return  true;  Node  parent  =  var.getParent();  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	return    true;    Node  parent  =  var.getParent();	  	non-compiled	[CE]  	1	None	add
83	[BUG]  [BUGGY]  return  true;  ||  codingConvention.isGlobal(var.getName()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return  true;  ||  codingConvention.isGlobal(var.getName()))  {  return  false;  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	return    true;    ||  codingConvention.isGlobal(var.getName()))  {  return  false;	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
84	[BUG]  [BUGGY]  return  true;  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return  true;  Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR);  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	return    true;    Preconditions.checkState(var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR);	  	non-compiled	[CE]  	1	None	add
85	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var  ==  null  ||  var.isGlobal())  {  return  false;  }	  	non-compiled	[CE]  	12	None	add
86	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  [CE]  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var!=  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var!=  null  ||  var.isGlobal())  {  return  false;  }	  	non-compiled	[CE]  	12	None	add
87	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  If(var  ==  null  ||  var.isGlobal())  {  return  false;  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  If(var  ==  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    If(var  ==  null  ||  var.isGlobal())  {  return  false;  }	  	non-compiled	[CE]  	12	None	add
88	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  >=  null  ||  var.isGlobal())  {  return  false;  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  >=  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var  >=  null  ||  var.isGlobal())  {  return  false;  }	  	non-compiled	[CE]  	12	None	add
89	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  for(var  ==  null  ||  var.isGlobal())  {  return  false;  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  for(var  ==  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    for(var  ==  null  ||  var.isGlobal())  {  return  false;  }	  	non-compiled	[CE]  not  a  statement	12	None	add
90	[BUG]  [BUGGY]  Preconditions.checkState(var.isGlobal()  ||!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  Preconditions.checkState(var.isGlobal()  ||!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	Preconditions.checkState(var.isGlobal()  ||!removeGlobals  &&  var.isGlobal())  {  return  false;  }	  if(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	4	None	replace
91	[BUG]  [BUGGY]  ||!removeGlobals  ||  var.isGlobal())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  ||!removeGlobals  ||  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	||!removeGlobals  ||  var.isGlobal())  {  return  false;  }	  if(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
92	[BUG]  [BUGGY]  Preconditions.checkState(!removeGlobals  ||  var.isGlobal())  {  return  false;  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  Preconditions.checkState(!removeGlobals  ||  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	Preconditions.checkState(!removeGlobals  ||  var.isGlobal())  {  return  false;  }	  if(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	4	None	replace
93	[BUG]  [BUGGY]  removeGlobals  ||  var.isGlobal())  {  return  false;  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  removeGlobals  ||  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	removeGlobals  ||  var.isGlobal())  {  return  false;  }	  if(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	4	None	replace
94	[BUG]  [BUGGY]  if(!removeGlobals  ||  var.isGlobal())  {  return  false;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(!removeGlobals  ||  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(!removeGlobals  ||  var.isGlobal())  {  return  false;  }	  if(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	4	None	replace
95	[BUG]  [BUGGY]  Preconditions.checkState(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  Preconditions.checkState(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	Preconditions.checkState(!removeGlobals  &&  var.isGlobal())  {  return  false;  }	  if(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	4	None	replace
96	[BUG]  [BUGGY]  ||  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  ||  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	||  var.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(var.getType()    ==    Token.VAR    ||    var.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
97	[BUG]  [BUGGY]  if(var.getType()  ==  Token.VAR  &&  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var.getType()  ==  Token.VAR  &&  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var.getType()  ==  Token.VAR  &&  var.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(var.getType()    ==    Token.VAR    ||    var.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	8	None	replace
98	[BUG]  [BUGGY]  if(var.getType()!=  Token.VAR  &&  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var.getType()!=  Token.VAR  &&  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var.getType()!=  Token.VAR  &&  var.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(var.getType()    ==    Token.VAR    ||    var.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	8	None	replace
99	[BUG]  [BUGGY]  ||  var.getType()!=  Token.FUNCTION)  {  return  false;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  ||  var.getType()!=  Token.FUNCTION)  {  return  false;  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	||  var.getType()!=  Token.FUNCTION)  {  return  false;	  if(var.getType()    ==    Token.VAR    ||    var.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
100	[BUG]  [BUGGY]  if(var.getType()!=  Token.VAR  ||  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var.getType()!=  Token.VAR  ||  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var.getType()!=  Token.VAR  ||  var.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(var.getType()    ==    Token.VAR    ||    var.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	8	None	replace
101	[BUG]  [BUGGY]  var.getType()!=  Token.VAR  ||  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  not  a  statement  [FE]                            AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  var.getType()!=  Token.VAR  ||  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	var.getType()!=  Token.VAR  ||  var.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(var.getType()    ==    Token.VAR    ||    var.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	8	None	replace
102	[BUG]  [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  if(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  if(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    if(!removeGlobals  &&  var.isGlobal())  {  return  false;  }	  	non-compiled	[CE]  	3	None	add
103	[BUG]  [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  If(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [CE]  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  If(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    If(!removeGlobals  &&  var.isGlobal())  {  return  false;  }	  	non-compiled	[CE]  	3	None	add
104	[BUG]  [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  if(!removeGlobals  ||  var.isGlobal())  {  return  false;  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  if(!removeGlobals  ||  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    if(!removeGlobals  ||  var.isGlobal())  {  return  false;  }	  	non-compiled	[CE]  	3	None	add
105	[BUG]  [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  if(!removeGlobals  &&  var.hasGlobal())  {  return  false;  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  if(!removeGlobals  &&  var.hasGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    if(!removeGlobals  &&  var.hasGlobal())  {  return  false;  }	  	non-compiled	[CE]  	3	None	add
106	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  false;  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    	non-compiled	[CE]  	23	None	replace
107	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  true;  if(codingConvention.isExported(var.getName()))  {  return  false;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  true;  if(codingConvention.isExported(var.getName()))  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var  ==  null  ||  var.isGlobal())return  true;  if(codingConvention.isExported(var.getName()))  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    	non-compiled	[CE]  	23	None	replace
108	[BUG]  [BUGGY]  if(var!=  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var!=  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    	non-compiled	[CE]  	23	None	replace
109	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }	  	non-compiled	[CE]  	15	None	add
110	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  if(var!=  null  ||  var.getName()!=  null)  {  return  false;  }  [CE]  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  if(var!=  null  ||  var.getName()!=  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    if(var!=  null  ||  var.getName()!=  null)  {  return  false;  }	  	non-compiled	[CE]  	15	None	add
111	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  If(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  If(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    If(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }	  	non-compiled	[CE]  	15	None	add
112	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  if(var  ==  null  ||  var.getName()  >=  null)  {  return  false;  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  if(var  ==  null  ||  var.getName()  >=  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    if(var  ==  null  ||  var.getName()  >=  null)  {  return  false;  }	  	non-compiled	[CE]  	15	None	add
113	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  if(var  ==  null  ||  var.getName()  >>  null)  {  return  false;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  if(var  ==  null  ||  var.getName()  >>  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    if(var  ==  null  ||  var.getName()  >>  null)  {  return  false;  }	  	non-compiled	[CE]  	15	None	add
114	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  if(var  ==  null  ||  var.getName()  [Delete]  null)  {  return  false;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  if(var  ==  null  ||  var.getName()  [Delete]  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    if(var  ==  null  ||  var.getName()  [Delete]  null)  {  return  false;  }	  	non-compiled	[CE]  	15	None	add
115	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  if(var  >=  null  ||  var.getName()!=  null)  {  return  false;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  if(var  >=  null  ||  var.getName()!=  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    if(var  >=  null  ||  var.getName()!=  null)  {  return  false;  }	  	non-compiled	[CE]  	15	None	add
116	[BUG]  [BUGGY]  if(var!=  null  ||  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null  ||  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var!=  null  ||  var.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(var    ==    null    ||    var.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	17	None	replace
117	[BUG]  [BUGGY]  if(var  ==  null  &&  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  &&  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var  ==  null  &&  var.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(var    ==    null    ||    var.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	17	None	replace
118	[BUG]  [BUGGY]  (var  ==  null  ||  var.getType()!=  Token.FUNCTION))  {  return  false;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  (var  ==  null  ||  var.getType()!=  Token.FUNCTION))  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	(var  ==  null  ||  var.getType()!=  Token.FUNCTION))  {  return  false;  }	  if(var    ==    null    ||    var.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
119	[BUG]  [BUGGY]  if(var!=  null  ||  var.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null  ||  var.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var!=  null  ||  var.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(var    ==    null    ||    var.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	17	None	replace
120	[BUG]  [BUGGY]  if(var!=  null)  {  return  true;  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null)  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var!=  null)  {  return  true;  }	  if(var!=    null)    {    return    false;    }    	non-compiled	[CE]  	19	None	replace
121	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  true;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  true;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var  ==  null  ||  var.isGlobal())return  true;  if(codingConvention.isExported(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    	non-compiled	[CE]  	22	None	replace
122	[BUG]  [BUGGY]  var.getType()  ==  Token.VAR  ||  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  var.getType()  ==  Token.VAR  ||  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	var.getType()  ==  Token.VAR  ||  var.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(var.getType()    ==    Token.VAR    ||    var.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	8	None	replace
123	[BUG]  [BUGGY]  return  true;  if(var  ==  null  ||  var.isGlobal())  {  return  true;  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return  true;  if(var  ==  null  ||  var.isGlobal())  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	return    true;    if(var  ==  null  ||  var.isGlobal())  {  return  true;  }	  	non-compiled	[CE]  	1	None	add
124	[BUG]  [BUGGY]  return  true;  if(!removeGlobals  ||  var.isGlobal())  {  return  true;  }  [CE]  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return  true;  if(!removeGlobals  ||  var.isGlobal())  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	return    true;    if(!removeGlobals  ||  var.isGlobal())  {  return  true;  }	  	non-compiled	[CE]  	1	None	add
125	[BUG]  [BUGGY]  return  true;  if(var!=  null  ||  var.isGlobal())  {  return  true;  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return  true;  if(var!=  null  ||  var.isGlobal())  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	return    true;    if(var!=  null  ||  var.isGlobal())  {  return  true;  }	  	non-compiled	[CE]  	1	None	add
126	[BUG]  [BUGGY]  return  true;  NodeUtil.removeChild(var);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return  true;  NodeUtil.removeChild(var);  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	return    true;    NodeUtil.removeChild(var);	  	non-compiled	[CE]  	1	None	add
127	[BUG]  [BUGGY]  return  true;  Preconditions.checkState(var.getType()  ==  Token.NAME);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return  true;  Preconditions.checkState(var.getType()  ==  Token.NAME);  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	return    true;    Preconditions.checkState(var.getType()  ==  Token.NAME);	  	non-compiled	[CE]  	1	None	add
128	[BUG]  [BUGGY]  if(var  ==  null  ||!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var  ==  null  ||!removeGlobals  &&  var.isGlobal())  {  return  false;  }	  if(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	4	None	replace
129	[BUG]  [BUGGY]  if(!removeGlobals  &&  var.isRemovable())  {  return  false;  }  [CE]  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(!removeGlobals  &&  var.isRemovable())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(!removeGlobals  &&  var.isRemovable())  {  return  false;  }	  if(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	4	None	replace
130	[BUG]  [BUGGY]  if(!removeGlobals  &&  var.isRemovableVar())  {  return  false;  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(!removeGlobals  &&  var.isRemovableVar())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(!removeGlobals  &&  var.isRemovableVar())  {  return  false;  }	  if(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	4	None	replace
131	[BUG]  [BUGGY]  if(removeGlobals  ||  var.isGlobal())  {  return  false;  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(removeGlobals  ||  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(removeGlobals  ||  var.isGlobal())  {  return  false;  }	  if(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	4	None	replace
132	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var  ==  null  ||  var.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(var    ==    null    ||    var.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	17	None	replace
133	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getType()  >=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.getType()  >=  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var  ==  null  ||  var.getType()  >=  Token.FUNCTION)  {  return  false;  }	  if(var    ==    null    ||    var.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	17	None	replace
134	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getType()!=  Token.VAR)  {  return  true;  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.getType()!=  Token.VAR)  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var  ==  null  ||  var.getType()!=  Token.VAR)  {  return  true;  }	  if(var    ==    null    ||    var.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  	20	None	replace
135	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  true;  if(codingConvention.isRemovableVar(var.getName()))  {  return  false;  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  true;  if(codingConvention.isRemovableVar(var.getName()))  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var  ==  null  ||  var.isGlobal())return  true;  if(codingConvention.isRemovableVar(var.getName()))  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    	non-compiled	[CE]  	23	None	replace
136	[BUG]  [BUGGY]  var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {  return  false;  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {  return  false;  }	  if(var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	5	None	replace
137	[BUG]  [BUGGY]  if(var.getType()!=  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var.getType()!=  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var.getType()!=  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  return  false;  }	  if(var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  	5	None	replace
138	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  for(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  for(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    for(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }	  	non-compiled	[CE]  not  a  statement	15	None	add
139	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())  {  return  true;  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var  ==  null  ||  var.isGlobal())  {  return  true;  }	  return    true;    	non-compiled	[CE]  	2	None	replace
140	[BUG]  [BUGGY]  if(!removeGlobals)  {  return  true;  }  [CE]  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(!removeGlobals)  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(!removeGlobals)  {  return  true;  }	  return    true;    	non-compiled	[CE]  	2	None	replace
141	[BUG]  [BUGGY]  removeGlobals  ||  var.isGlobal();  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  removeGlobals  ||  var.isGlobal();  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	removeGlobals  ||  var.isGlobal();	  return    true;    	non-compiled	[CE]  not  a  statement	2	None	replace
142	[BUG]  [BUGGY]  removeGlobals  |=  var.isGlobal();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  removeGlobals  |=  var.isGlobal();  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	removeGlobals  |=  var.isGlobal();	  return    true;    	non-compiled	[CE]  	2	None	replace
143	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  if(var  ==  null  ||  var.isGlobal())return  false;  [CE]  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  if(var  ==  null  ||  var.isGlobal())return  false;  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    if(var  ==  null  ||  var.isGlobal())return  false;	  	non-compiled	[CE]  	21	None	add
144	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  if(var  ==  null  ||  var.isGlobal())return  false;  ifcodingConvention.isExported(var.getName()))  {  return  true;  }  [CE]  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  if(var  ==  null  ||  var.isGlobal())return  false;  ifcodingConvention.isExported(var.getName()))  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    if(var  ==  null  ||  var.isGlobal())return  false;  ifcodingConvention.isExported(var.getName()))  {  return  true;  }	  	non-compiled	[CE]  	21	None	add
145	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  while(var  ==  null  ||  var.isGlobal())  {  return  false;  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  while(var  ==  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    while(var  ==  null  ||  var.isGlobal())  {  return  false;  }	  	non-compiled	[CE]  	12	None	add
146	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isRemovableVar(var.getName()))  {  return  true;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isRemovableVar(var.getName()))  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var  ==  null  ||  var.isGlobal())return  false;  codingConvention.isRemovableVar(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isRemovableVar(var.getName()))    {    return    true;    }    	non-compiled	[CE]  	24	None	replace
147	[BUG]  [BUGGY]  Preconditions.checkState(var.isGlobal());  [CE]  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  Preconditions.checkState(var.isGlobal());  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	Preconditions.checkState(var.isGlobal());	      	non-compiled	[CE]  	11	None	replace
148	[BUG]  [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  var.isGlobal());  [CE]  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  Preconditions.checkState(var.isGlobal()  ||  var.isGlobal());  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	Preconditions.checkState(var.isGlobal()  ||  var.isGlobal());	      	non-compiled	[CE]  	11	None	replace
149	[BUG]  [BUGGY]  Preconditions.checkArgument(var.getType()  ==  Token.VAR);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  Preconditions.checkArgument(var.getType()  ==  Token.VAR);  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	Preconditions.checkArgument(var.getType()  ==  Token.VAR);	      	non-compiled	[CE]  	11	None	replace
150	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getName()  ==  null)  {  return  false;  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.getName()  ==  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var  ==  null  ||  var.getName()  ==  null)  {  return  false;  }	  if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    	non-compiled	[CE]  	16	None	replace
151	[BUG]  [BUGGY]  if(var!=  null  ||  var.getName()  ==  null)  {  return  false;  }  [CE]  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null  ||  var.getName()  ==  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var!=  null  ||  var.getName()  ==  null)  {  return  false;  }	  if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    	non-compiled	[CE]  	16	None	replace
152	[BUG]  [BUGGY]  var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {  return  true;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {  return  true;  }	  if(var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	9	None	replace
153	[BUG]  [BUGGY]  if(var.getType()!=  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  return  true;  }  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var.getType()!=  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var.getType()!=  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  return  true;  }	  if(var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    return    true;    }    	non-compiled	[CE]  	9	None	replace
154	[BUG]  [BUGGY]  var.getType()!=  Token.VAR)  {  return  false;  }  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  var.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	var.getType()!=  Token.VAR)  {  return  false;  }	  if(var.getType()    ==    Token.FUNCTION    ||    var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	6	None	replace
155	[BUG]  [BUGGY]  if(var.getName().equals(var.getName())||  codingConvention.isGlobal(var.getName()))  {  return  false;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var.getName().equals(var.getName())||  codingConvention.isGlobal(var.getName()))  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var.getName().equals(var.getName())||  codingConvention.isGlobal(var.getName()))  {  return  false;  }	  if(var.getName().equals(var.getName()))    {    return    false;    }    	non-compiled	[CE]  	25	None	replace
156	[BUG]  [BUGGY]  if(var.getName().equals(var.getName())||!removeGlobals)  {  return  false;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var.getName().equals(var.getName())||!removeGlobals)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var.getName().equals(var.getName())||!removeGlobals)  {  return  false;  }	  if(var.getName().equals(var.getName()))    {    return    false;    }    	non-compiled	[CE]  	25	None	replace
157	[BUG]  [BUGGY]  if(var.getName().equals(var.getName())||  codingConvention.isExported(var.getName()))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var.getName().equals(var.getName())||  codingConvention.isExported(var.getName()))  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var.getName().equals(var.getName())||  codingConvention.isExported(var.getName()))  {  return  false;  }	  if(var.getName().equals(var.getName()))    {    return    false;    }    	non-compiled	[CE]  	25	None	replace
158	[BUG]  [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  for(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  for(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    for(!removeGlobals  &&  var.isGlobal())  {  return  false;  }	  	non-compiled	[CE]  not  a  statement	3	None	add
159	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getType()  >=  Token.VAR)  {  return  false;  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.getType()  >=  Token.VAR)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var  ==  null  ||  var.getType()  >=  Token.VAR)  {  return  false;  }	  if(var    ==    null    ||    var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  	14	None	replace
160	[BUG]  [BUGGY]      Preconditions.checkNotNull(var);  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]      Preconditions.checkNotNull(var);  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	        Preconditions.checkNotNull(var);	  	non-compiled	[CE]  not  a  statement	10	None	add
161	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isRemovable())  {  return  false;  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isRemovable())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var  ==  null  ||  var.isRemovable())  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	13	None	replace
162	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isUnknown())  {  return  false;  }  [CE]  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isUnknown())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var  ==  null  ||  var.isUnknown())  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	13	None	replace
163	[BUG]  [BUGGY]  if(var!=  null)  {  return  false;  }  AssertionFailedError  var  =  new  AssertionFailedError(this,  var.getName());  [CE]  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null)  {  return  false;  }  AssertionFailedError  var  =  new  AssertionFailedError(this,  var.getName());  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var!=    null)    {    return    false;    }    AssertionFailedError  var  =  new  AssertionFailedError(this,  var.getName());	  	non-compiled	[CE]  	18	None	add
164	[BUG]  [BUGGY]  if(var!=  null)  {  return  false;  }  AssertionFailedError  var  =  new  AssertionFailedError();  [CE]  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null)  {  return  false;  }  AssertionFailedError  var  =  new  AssertionFailedError();  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var!=    null)    {    return    false;    }    AssertionFailedError  var  =  new  AssertionFailedError();	  	non-compiled	[CE]  	18	None	add
165	[BUG]  [BUGGY]  if(var!=  null)  {  return  false;  }  AssertionFailedError  var  =  new  AssertionFailedError(var.getName());  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null)  {  return  false;  }  AssertionFailedError  var  =  new  AssertionFailedError(var.getName());  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var!=    null)    {    return    false;    }    AssertionFailedError  var  =  new  AssertionFailedError(var.getName());	  	non-compiled	[CE]  	18	None	add
166	[BUG]  [BUGGY]  if(var!=  null)  {  return  false;  }  AssertionFailedError  var  =  new  AssertionFailedErrorImpl(var.getName());  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null)  {  return  false;  }  AssertionFailedError  var  =  new  AssertionFailedErrorImpl(var.getName());  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var!=    null)    {    return    false;    }    AssertionFailedError  var  =  new  AssertionFailedErrorImpl(var.getName());	  	non-compiled	[CE]  	18	None	add
167	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getType()!=  Token.VAR)return  false;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.getType()!=  Token.VAR)return  false;  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var  ==  null  ||  var.getType()!=  Token.VAR)return  false;	  if(var    ==    null    ||    var.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  	20	None	replace
168	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var!=  null  &&  var.getType()  ==  Token.VAR)  {  return  false;  }	  if(var    ==    null    ||    var.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  	20	None	replace
169	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getParent()!=  null)  {  return  false;  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.getParent()!=  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var  ==  null  ||  var.getParent()!=  null)  {  return  false;  }	  if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    	non-compiled	[CE]  	16	None	replace
170	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  if(var  {  null  ||  var.getName()!=  null)  {  return  false;  }  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.getName()!=  null)  {  return  false;  }  if(var  {  null  ||  var.getName()!=  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var    ==    null    ||    var.getName()!=    null)    {    return    false;    }    if(var  {  null  ||  var.getName()!=  null)  {  return  false;  }	  	non-compiled	[CE]  ')'  expected	15	None	add
171	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  {  null  ||  var.isGlobal())  {  return  false;  }  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  {  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var  {  null  ||  var.isGlobal())  {  return  false;  }	  	non-compiled	[CE]  ')'  expected	12	None	add
172	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  <  return  false;  }  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  if(var  ==  null  ||  var.isGlobal())  <  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    if(var  ==  null  ||  var.isGlobal())  <  return  false;  }	  	non-compiled	[CE]  illegal  start  of  type	12	None	add
173	[BUG]  [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")))  {  return  true;  [CE]  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")))  {  return  true;  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")))  {  return  true;	  return    true;    	non-compiled	[CE]  	2	None	replace
174	[BUG]  [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")));  [CE]  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")));  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")));	  return    true;    	non-compiled	[CE]  	2	None	replace
175	[BUG]  [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")))  {  return  false;  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")))  {  return  false;  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "__ ")||  var.getName().endsWith( "__ ")))  {  return  false;	  return    true;    	non-compiled	[CE]  	2	None	replace
176	[BUG]  [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "._ ")||  var.getName().endsWith( "._ ")))  {  return  true;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "._ ")||  var.getName().endsWith( "._ ")))  {  return  true;  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "._ ")||  var.getName().endsWith( "._ ")))  {  return  true;	  return    true;    	non-compiled	[CE]  	2	None	replace
177	[BUG]  [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "._ ")||  var.getName().endsWith( "._ ")))  {  return  false;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "._ ")||  var.getName().endsWith( "._ ")))  {  return  false;  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "._ ")||  var.getName().endsWith( "._ ")))  {  return  false;	  return    true;    	non-compiled	[CE]  	2	None	replace
178	[BUG]  [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "._ ")||  var.getName().endsWith( "._ ")));  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "._ ")||  var.getName().endsWith( "._ ")));  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	return(var!=  null  &&  var.getName().length()  >  0)||(var.getName().endsWith( "._ ")||  var.getName().endsWith( "._ ")));	  return    true;    	non-compiled	[CE]  	2	None	replace
179	[BUG]  [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  if(!removeGlobals  &&  var.getName())  {  return  false;  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(!removeGlobals  &&  var.isGlobal())  {  return  false;  }  if(!removeGlobals  &&  var.getName())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    if(!removeGlobals  &&  var.getName())  {  return  false;  }	  	non-compiled	[CE]  	3	None	add
180	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null  &&  var.getType()!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var!=  null  &&  var.getType()!=  Token.FUNCTION)  {  return  false;  }	  if(var    ==    null    ||    var.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	17	None	replace
181	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getType()!=  Token.FUNCTION)return  false;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.getType()!=  Token.FUNCTION)return  false;  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var  ==  null  ||  var.getType()!=  Token.FUNCTION)return  false;	  if(var    ==    null    ||    var.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	17	None	replace
182	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getType()!=  Token.FUNCTION)return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.getType()!=  Token.FUNCTION)return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var  ==  null  ||  var.getType()!=  Token.FUNCTION)return  false;  }	  if(var    ==    null    ||    var.getType()!=    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
183	[BUG]  [BUGGY]  if(var!=  null  &&  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  true;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null  &&  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var!=  null  &&  var.isGlobal())return  false;  if(codingConvention.isRemovableVar(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isRemovableVar(var.getName()))    {    return    true;    }    	non-compiled	[CE]  	24	None	replace
184	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal()  ||  codingConvention.isRemovableVar(var.getName()))  {  return  true;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal()  ||  codingConvention.isRemovableVar(var.getName()))  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var  ==  null  ||  var.isGlobal()  ||  codingConvention.isRemovableVar(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isRemovableVar(var.getName()))    {    return    true;    }    	non-compiled	[CE]  	24	None	replace
185	[BUG]  [BUGGY]  Preconditions.checkArgument(var.isGlobal());  [CE]  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  Preconditions.checkArgument(var.isGlobal());  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	Preconditions.checkArgument(var.isGlobal());	      	non-compiled	[CE]  	11	None	replace
186	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  if(var  ==  null  ||  var.isGlobal())  return  true;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  if(var  ==  null  ||  var.isGlobal())  return  true;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    if(var  ==  null  ||  var.isGlobal())  return  true;  if(codingConvention.isExported(var.getName()))  {  return  true;  }	  	non-compiled	[CE]  	21	None	add
187	[BUG]  [BUGGY]  if(var!=  null  &&  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null  &&  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var!=  null  &&  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    	non-compiled	[CE]  	23	None	replace
188	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal()  ||  codingConvention.isExported(var.getName()))  {  return  false;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal()  ||  codingConvention.isExported(var.getName()))  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var  ==  null  ||  var.isGlobal()  ||  codingConvention.isExported(var.getName()))  {  return  false;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    false;    }    	non-compiled	[CE]  	23	None	replace
189	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getType()!=  Token.VAR)return  false;  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.getType()!=  Token.VAR)return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var  ==  null  ||  var.getType()!=  Token.VAR)return  false;  }	  if(var    ==    null    ||    var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
190	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()!=  Token.VAR)  {  return  false;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null  &&  var.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var!=  null  &&  var.getType()!=  Token.VAR)  {  return  false;  }	  if(var    ==    null    ||    var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  	14	None	replace
191	[BUG]  [BUGGY]  if(var!=  null  &&  var.isGlobal())  {  return  false;  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null  &&  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var!=  null  &&  var.isGlobal())  {  return  false;  }	  if(var!=    null)    {    return    false;    }    	non-compiled	[CE]  	19	None	replace
192	[BUG]  [BUGGY]  if(var!=  null  ||!var.isGlobal())  {  return  false;  }  [CE]  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null  ||!var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var!=  null  ||!var.isGlobal())  {  return  false;  }	  if(var!=    null)    {    return    false;    }    	non-compiled	[CE]  	19	None	replace
193	[BUG]  [BUGGY]  if(var!=  null)  {  return  false;  }  if(var  >=  null)  {  return  false;  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null)  {  return  false;  }  if(var  >=  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var!=    null)    {    return    false;    }    if(var  >=  null)  {  return  false;  }	  	non-compiled	[CE]  	18	None	add
194	[BUG]  [BUGGY]  if(var!=  null)  {  return  false;  }  if(var  >>  null)  {  return  false;  }  [CE]  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null)  {  return  false;  }  if(var  >>  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var!=    null)    {    return    false;    }    if(var  >>  null)  {  return  false;  }	  	non-compiled	[CE]  	18	None	add
195	[BUG]  [BUGGY]  if(var!=  null)  {  return  false;  }  if(var  [BUGGY]  null)  {  return  false;  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null)  {  return  false;  }  if(var  [BUGGY]  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var!=    null)    {    return    false;    }    if(var  [BUGGY]  null)  {  return  false;  }	  	non-compiled	[CE]  	18	None	add
196	[BUG]  [BUGGY]  if(var!=  null)  {  return  false;  }  if(var  [Delete]  null)  {  return  false;  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null)  {  return  false;  }  if(var  [Delete]  null)  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var!=    null)    {    return    false;    }    if(var  [Delete]  null)  {  return  false;  }	  	non-compiled	[CE]  	18	None	add
197	[BUG]  [BUGGY]  if(!isPropertyAssign  &&  var.isGlobal())  {  return  false;  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(!isPropertyAssign  &&  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(!isPropertyAssign  &&  var.isGlobal())  {  return  false;  }	  if(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	4	None	replace
198	[BUG]  [BUGGY]  parent  ==  null  &&!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  parent  ==  null  &&!removeGlobals  &&  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	parent  ==  null  &&!removeGlobals  &&  var.isGlobal())  {  return  false;  }	  if(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	4	None	replace
199	[BUG]  [BUGGY]  if(!removeGlobals  &&  var.isVarArgs())  {  return  false;  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(!removeGlobals  &&  var.isVarArgs())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(!removeGlobals  &&  var.isVarArgs())  {  return  false;  }	  if(!removeGlobals    &&    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  	4	None	replace
200	[BUG]  [BUGGY]  if(var.getType()!=  Token.FUNCTION  ||  var.getType()!=  Token.VAR)return  false;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var.getType()!=  Token.FUNCTION  ||  var.getType()!=  Token.VAR)return  false;  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var.getType()!=  Token.FUNCTION  ||  var.getType()!=  Token.VAR)return  false;	  if(var.getType()    ==    Token.FUNCTION    ||    var.getType()!=    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  	6	None	replace
201	[BUG]  [BUGGY]  if(var.getName().equals(var.getName())&&  var.isGlobal())  {  return  false;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var.getName().equals(var.getName())&&  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var.getName().equals(var.getName())&&  var.isGlobal())  {  return  false;  }	  if(var.getName().equals(var.getName()))    {    return    false;    }    	non-compiled	[CE]  	25	None	replace
202	[BUG]  [BUGGY]  if(codingConvention.isGlobal()  &&  var.getName().equals(var.getName()))  {  return  false;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(codingConvention.isGlobal()  &&  var.getName().equals(var.getName()))  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(codingConvention.isGlobal()  &&  var.getName().equals(var.getName()))  {  return  false;  }	  if(var.getName().equals(var.getName()))    {    return    false;    }    	non-compiled	[CE]  	25	None	replace
203	[BUG]  [BUGGY]  if(codingConvention.isGlobal(var.getName()))  {  return  false;  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(codingConvention.isGlobal(var.getName()))  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(codingConvention.isGlobal(var.getName()))  {  return  false;  }	  if(var.getName().equals(var.getName()))    {    return    false;    }    	non-compiled	[CE]  	25	None	replace
204	[BUG]  [BUGGY]  if(var.getName().equals(var.getName())||  var.isGlobal())  {  return  false;  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var.getName().equals(var.getName())||  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var.getName().equals(var.getName())||  var.isGlobal())  {  return  false;  }	  if(var.getName().equals(var.getName()))    {    return    false;    }    	non-compiled	[CE]  	25	None	replace
205	[BUG]  [BUGGY]  if(var.getName().equals(this.var.getName()))  {  return  false;  }  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var.getName().equals(this.var.getName()))  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var.getName().equals(this.var.getName()))  {  return  false;  }	  if(var.getName().equals(var.getName()))    {    return    false;    }    	non-compiled	[CE]  	25	None	replace
206	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  }  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal())return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var  ==  null  ||  var.isGlobal())return  false;  }	  if(var    ==    null    ||    var.isGlobal())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
207	[BUG]  [BUGGY]  if(var!=  null  &&  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var!=  null  &&  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var!=  null  &&  var.isGlobal())return  false;  if(codingConvention.isExported(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    	non-compiled	[CE]  	22	None	replace
208	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isGlobal()  ||  codingConvention.isExported(var.getName()))  {  return  true;  }  [CE]  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  if(var  ==  null  ||  var.isGlobal()  ||  codingConvention.isExported(var.getName()))  {  return  true;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	if(var  ==  null  ||  var.isGlobal()  ||  codingConvention.isExported(var.getName()))  {  return  true;  }	  if(var    ==    null    ||    var.isGlobal())return    false;    if(codingConvention.isExported(var.getName()))    {    return    true;    }    	non-compiled	[CE]  	22	None	replace
209	[BUG]  [BUGGY]  return  true;  NodeTraversal.traverse(compiler,  var,  this);  [CE]  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return  true;  NodeTraversal.traverse(compiler,  var,  this);  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	return    true;    NodeTraversal.traverse(compiler,  var,  this);	  	non-compiled	[CE]  	1	None	add
210	[BUG]  [BUGGY]  return  true;  NodeTraversal.traverse(compiler,  var,  true);  [CE]  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return  true;  NodeTraversal.traverse(compiler,  var,  true);  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	return    true;    NodeTraversal.traverse(compiler,  var,  true);	  	non-compiled	[CE]  	1	None	add
211	[BUG]  [BUGGY]  return  true;  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return  true;  if(var  ==  null  ||  var.isGlobal())  {  return  false;  }  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	return    true;    if(var  ==  null  ||  var.isGlobal())  {  return  false;  }	  	non-compiled	[CE]  	1	None	add
212	[BUG]  [BUGGY]  return  true;  NodeTraversal.traverse(compiler,  var);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return  true;  NodeTraversal.traverse(compiler,  var);  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	return    true;    NodeTraversal.traverse(compiler,  var);	  	non-compiled	[CE]  	1	None	add
213	[BUG]  [BUGGY]  return  true;  Preconditions.checkState(var.getType()!=  Token.VAR);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isRemovableVar(Var  var)  {  if  (!removeGlobals  &&  var.isGlobal())  {    [BUGGY]  return  true;  Preconditions.checkState(var.getType()!=  Token.VAR);  [BUGGY]    }  if  (referenced.contains(var))  {  return  false;  }  if  (codingConvention.isExported(var.getName()))  {  return  false;  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  isRemovableVar  [RETURN_TYPE]  boolean  Var  var  [VARIABLES]  Multimap  assignsByVar  continuations  inheritsCalls  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  scope  Var  var  CodingConvention  codingConvention  Node  a  assignNode  c  externs  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure45/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.3779644730092272	301	301	1	replace	return    true;    Preconditions.checkState(var.getType()!=  Token.VAR);	  	non-compiled	[CE]  	1	None	add
